(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 39);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const punycode = __webpack_require__(19);
const tr46 = __webpack_require__(35);

const specialSchemes = {
  ftp: 21,
  file: null,
  gopher: 70,
  http: 80,
  https: 443,
  ws: 80,
  wss: 443
};

const failure = Symbol("failure");

function countSymbols(str) {
  return punycode.ucs2.decode(str).length;
}

function at(input, idx) {
  const c = input[idx];
  return isNaN(c) ? undefined : String.fromCodePoint(c);
}

function isASCIIDigit(c) {
  return c >= 0x30 && c <= 0x39;
}

function isASCIIAlpha(c) {
  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);
}

function isASCIIAlphanumeric(c) {
  return isASCIIAlpha(c) || isASCIIDigit(c);
}

function isASCIIHex(c) {
  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);
}

function isSingleDot(buffer) {
  return buffer === "." || buffer.toLowerCase() === "%2e";
}

function isDoubleDot(buffer) {
  buffer = buffer.toLowerCase();
  return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
}

function isWindowsDriveLetterCodePoints(cp1, cp2) {
  return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
}

function isWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
}

function isNormalizedWindowsDriveLetterString(string) {
  return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
}

function containsForbiddenHostCodePoint(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function containsForbiddenHostCodePointExcludingPercent(string) {
  return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
}

function isSpecialScheme(scheme) {
  return specialSchemes[scheme] !== undefined;
}

function isSpecial(url) {
  return isSpecialScheme(url.scheme);
}

function defaultPort(scheme) {
  return specialSchemes[scheme];
}

function percentEncode(c) {
  let hex = c.toString(16).toUpperCase();
  if (hex.length === 1) {
    hex = "0" + hex;
  }

  return "%" + hex;
}

function utf8PercentEncode(c) {
  const buf = new Buffer(c);

  let str = "";

  for (let i = 0; i < buf.length; ++i) {
    str += percentEncode(buf[i]);
  }

  return str;
}

function utf8PercentDecode(str) {
  const input = new Buffer(str);
  const output = [];
  for (let i = 0; i < input.length; ++i) {
    if (input[i] !== 37) {
      output.push(input[i]);
    } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
      output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
      i += 2;
    } else {
      output.push(input[i]);
    }
  }
  return new Buffer(output).toString();
}

function isC0ControlPercentEncode(c) {
  return c <= 0x1F || c > 0x7E;
}

const extraPathPercentEncodeSet = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
function isPathPercentEncode(c) {
  return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
}

const extraUserinfoPercentEncodeSet =
  new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
function isUserinfoPercentEncode(c) {
  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
}

function percentEncodeChar(c, encodeSetPredicate) {
  const cStr = String.fromCodePoint(c);

  if (encodeSetPredicate(c)) {
    return utf8PercentEncode(cStr);
  }

  return cStr;
}

function parseIPv4Number(input) {
  let R = 10;

  if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
    input = input.substring(2);
    R = 16;
  } else if (input.length >= 2 && input.charAt(0) === "0") {
    input = input.substring(1);
    R = 8;
  }

  if (input === "") {
    return 0;
  }

  const regex = R === 10 ? /[^0-9]/ : (R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/);
  if (regex.test(input)) {
    return failure;
  }

  return parseInt(input, R);
}

function parseIPv4(input) {
  const parts = input.split(".");
  if (parts[parts.length - 1] === "") {
    if (parts.length > 1) {
      parts.pop();
    }
  }

  if (parts.length > 4) {
    return input;
  }

  const numbers = [];
  for (const part of parts) {
    if (part === "") {
      return input;
    }
    const n = parseIPv4Number(part);
    if (n === failure) {
      return input;
    }

    numbers.push(n);
  }

  for (let i = 0; i < numbers.length - 1; ++i) {
    if (numbers[i] > 255) {
      return failure;
    }
  }
  if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
    return failure;
  }

  let ipv4 = numbers.pop();
  let counter = 0;

  for (const n of numbers) {
    ipv4 += n * Math.pow(256, 3 - counter);
    ++counter;
  }

  return ipv4;
}

function serializeIPv4(address) {
  let output = "";
  let n = address;

  for (let i = 1; i <= 4; ++i) {
    output = String(n % 256) + output;
    if (i !== 4) {
      output = "." + output;
    }
    n = Math.floor(n / 256);
  }

  return output;
}

function parseIPv6(input) {
  const address = [0, 0, 0, 0, 0, 0, 0, 0];
  let pieceIndex = 0;
  let compress = null;
  let pointer = 0;

  input = punycode.ucs2.decode(input);

  if (input[pointer] === 58) {
    if (input[pointer + 1] !== 58) {
      return failure;
    }

    pointer += 2;
    ++pieceIndex;
    compress = pieceIndex;
  }

  while (pointer < input.length) {
    if (pieceIndex === 8) {
      return failure;
    }

    if (input[pointer] === 58) {
      if (compress !== null) {
        return failure;
      }
      ++pointer;
      ++pieceIndex;
      compress = pieceIndex;
      continue;
    }

    let value = 0;
    let length = 0;

    while (length < 4 && isASCIIHex(input[pointer])) {
      value = value * 0x10 + parseInt(at(input, pointer), 16);
      ++pointer;
      ++length;
    }

    if (input[pointer] === 46) {
      if (length === 0) {
        return failure;
      }

      pointer -= length;

      if (pieceIndex > 6) {
        return failure;
      }

      let numbersSeen = 0;

      while (input[pointer] !== undefined) {
        let ipv4Piece = null;

        if (numbersSeen > 0) {
          if (input[pointer] === 46 && numbersSeen < 4) {
            ++pointer;
          } else {
            return failure;
          }
        }

        if (!isASCIIDigit(input[pointer])) {
          return failure;
        }

        while (isASCIIDigit(input[pointer])) {
          const number = parseInt(at(input, pointer));
          if (ipv4Piece === null) {
            ipv4Piece = number;
          } else if (ipv4Piece === 0) {
            return failure;
          } else {
            ipv4Piece = ipv4Piece * 10 + number;
          }
          if (ipv4Piece > 255) {
            return failure;
          }
          ++pointer;
        }

        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;

        ++numbersSeen;

        if (numbersSeen === 2 || numbersSeen === 4) {
          ++pieceIndex;
        }
      }

      if (numbersSeen !== 4) {
        return failure;
      }

      break;
    } else if (input[pointer] === 58) {
      ++pointer;
      if (input[pointer] === undefined) {
        return failure;
      }
    } else if (input[pointer] !== undefined) {
      return failure;
    }

    address[pieceIndex] = value;
    ++pieceIndex;
  }

  if (compress !== null) {
    let swaps = pieceIndex - compress;
    pieceIndex = 7;
    while (pieceIndex !== 0 && swaps > 0) {
      const temp = address[compress + swaps - 1];
      address[compress + swaps - 1] = address[pieceIndex];
      address[pieceIndex] = temp;
      --pieceIndex;
      --swaps;
    }
  } else if (compress === null && pieceIndex !== 8) {
    return failure;
  }

  return address;
}

function serializeIPv6(address) {
  let output = "";
  const seqResult = findLongestZeroSequence(address);
  const compress = seqResult.idx;
  let ignore0 = false;

  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
    if (ignore0 && address[pieceIndex] === 0) {
      continue;
    } else if (ignore0) {
      ignore0 = false;
    }

    if (compress === pieceIndex) {
      const separator = pieceIndex === 0 ? "::" : ":";
      output += separator;
      ignore0 = true;
      continue;
    }

    output += address[pieceIndex].toString(16);

    if (pieceIndex !== 7) {
      output += ":";
    }
  }

  return output;
}

function parseHost(input, isSpecialArg) {
  if (input[0] === "[") {
    if (input[input.length - 1] !== "]") {
      return failure;
    }

    return parseIPv6(input.substring(1, input.length - 1));
  }

  if (!isSpecialArg) {
    return parseOpaqueHost(input);
  }

  const domain = utf8PercentDecode(input);
  const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
  if (asciiDomain === null) {
    return failure;
  }

  if (containsForbiddenHostCodePoint(asciiDomain)) {
    return failure;
  }

  const ipv4Host = parseIPv4(asciiDomain);
  if (typeof ipv4Host === "number" || ipv4Host === failure) {
    return ipv4Host;
  }

  return asciiDomain;
}

function parseOpaqueHost(input) {
  if (containsForbiddenHostCodePointExcludingPercent(input)) {
    return failure;
  }

  let output = "";
  const decoded = punycode.ucs2.decode(input);
  for (let i = 0; i < decoded.length; ++i) {
    output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
  }
  return output;
}

function findLongestZeroSequence(arr) {
  let maxIdx = null;
  let maxLen = 1; // only find elements > 1
  let currStart = null;
  let currLen = 0;

  for (let i = 0; i < arr.length; ++i) {
    if (arr[i] !== 0) {
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }

      currStart = null;
      currLen = 0;
    } else {
      if (currStart === null) {
        currStart = i;
      }
      ++currLen;
    }
  }

  // if trailing zeros
  if (currLen > maxLen) {
    maxIdx = currStart;
    maxLen = currLen;
  }

  return {
    idx: maxIdx,
    len: maxLen
  };
}

function serializeHost(host) {
  if (typeof host === "number") {
    return serializeIPv4(host);
  }

  // IPv6 serializer
  if (host instanceof Array) {
    return "[" + serializeIPv6(host) + "]";
  }

  return host;
}

function trimControlChars(url) {
  return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
}

function trimTabAndNewline(url) {
  return url.replace(/\u0009|\u000A|\u000D/g, "");
}

function shortenPath(url) {
  const path = url.path;
  if (path.length === 0) {
    return;
  }
  if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
    return;
  }

  path.pop();
}

function includesCredentials(url) {
  return url.username !== "" || url.password !== "";
}

function cannotHaveAUsernamePasswordPort(url) {
  return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
}

function isNormalizedWindowsDriveLetter(string) {
  return /^[A-Za-z]:$/.test(string);
}

function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
  this.pointer = 0;
  this.input = input;
  this.base = base || null;
  this.encodingOverride = encodingOverride || "utf-8";
  this.stateOverride = stateOverride;
  this.url = url;
  this.failure = false;
  this.parseError = false;

  if (!this.url) {
    this.url = {
      scheme: "",
      username: "",
      password: "",
      host: null,
      port: null,
      path: [],
      query: null,
      fragment: null,

      cannotBeABaseURL: false
    };

    const res = trimControlChars(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;
  }

  const res = trimTabAndNewline(this.input);
  if (res !== this.input) {
    this.parseError = true;
  }
  this.input = res;

  this.state = stateOverride || "scheme start";

  this.buffer = "";
  this.atFlag = false;
  this.arrFlag = false;
  this.passwordTokenSeenFlag = false;

  this.input = punycode.ucs2.decode(this.input);

  for (; this.pointer <= this.input.length; ++this.pointer) {
    const c = this.input[this.pointer];
    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

    // exec state machine
    const ret = this["parse " + this.state](c, cStr);
    if (!ret) {
      break; // terminate algorithm
    } else if (ret === failure) {
      this.failure = true;
      break;
    }
  }
}

URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
  if (isASCIIAlpha(c)) {
    this.buffer += cStr.toLowerCase();
    this.state = "scheme";
  } else if (!this.stateOverride) {
    this.state = "no scheme";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
  if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
    this.buffer += cStr.toLowerCase();
  } else if (c === 58) {
    if (this.stateOverride) {
      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
        return false;
      }

      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
        return false;
      }

      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
        return false;
      }

      if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
        return false;
      }
    }
    this.url.scheme = this.buffer;
    this.buffer = "";
    if (this.stateOverride) {
      return false;
    }
    if (this.url.scheme === "file") {
      if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
        this.parseError = true;
      }
      this.state = "file";
    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
      this.state = "special relative or authority";
    } else if (isSpecial(this.url)) {
      this.state = "special authority slashes";
    } else if (this.input[this.pointer + 1] === 47) {
      this.state = "path or authority";
      ++this.pointer;
    } else {
      this.url.cannotBeABaseURL = true;
      this.url.path.push("");
      this.state = "cannot-be-a-base-URL path";
    }
  } else if (!this.stateOverride) {
    this.buffer = "";
    this.state = "no scheme";
    this.pointer = -1;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
  if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {
    return failure;
  } else if (this.base.cannotBeABaseURL && c === 35) {
    this.url.scheme = this.base.scheme;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.url.cannotBeABaseURL = true;
    this.state = "fragment";
  } else if (this.base.scheme === "file") {
    this.state = "file";
    --this.pointer;
  } else {
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "relative";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
  if (c === 47) {
    this.state = "authority";
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
  this.url.scheme = this.base.scheme;
  if (isNaN(c)) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
  } else if (c === 47) {
    this.state = "relative slash";
  } else if (c === 63) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice();
    this.url.query = this.base.query;
    this.url.fragment = "";
    this.state = "fragment";
  } else if (isSpecial(this.url) && c === 92) {
    this.parseError = true;
    this.state = "relative slash";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.url.path = this.base.path.slice(0, this.base.path.length - 1);

    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
  if (isSpecial(this.url) && (c === 47 || c === 92)) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "special authority ignore slashes";
  } else if (c === 47) {
    this.state = "authority";
  } else {
    this.url.username = this.base.username;
    this.url.password = this.base.password;
    this.url.host = this.base.host;
    this.url.port = this.base.port;
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
  if (c === 47 && this.input[this.pointer + 1] === 47) {
    this.state = "special authority ignore slashes";
    ++this.pointer;
  } else {
    this.parseError = true;
    this.state = "special authority ignore slashes";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
  if (c !== 47 && c !== 92) {
    this.state = "authority";
    --this.pointer;
  } else {
    this.parseError = true;
  }

  return true;
};

URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
  if (c === 64) {
    this.parseError = true;
    if (this.atFlag) {
      this.buffer = "%40" + this.buffer;
    }
    this.atFlag = true;

    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
    const len = countSymbols(this.buffer);
    for (let pointer = 0; pointer < len; ++pointer) {
      const codePoint = this.buffer.codePointAt(pointer);

      if (codePoint === 58 && !this.passwordTokenSeenFlag) {
        this.passwordTokenSeenFlag = true;
        continue;
      }
      const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
      if (this.passwordTokenSeenFlag) {
        this.url.password += encodedCodePoints;
      } else {
        this.url.username += encodedCodePoints;
      }
    }
    this.buffer = "";
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92)) {
    if (this.atFlag && this.buffer === "") {
      this.parseError = true;
      return failure;
    }
    this.pointer -= countSymbols(this.buffer) + 1;
    this.buffer = "";
    this.state = "host";
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse hostname"] =
URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
  if (this.stateOverride && this.url.scheme === "file") {
    --this.pointer;
    this.state = "file host";
  } else if (c === 58 && !this.arrFlag) {
    if (this.buffer === "") {
      this.parseError = true;
      return failure;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));
    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "port";
    if (this.stateOverride === "hostname") {
      return false;
    }
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92)) {
    --this.pointer;
    if (isSpecial(this.url) && this.buffer === "") {
      this.parseError = true;
      return failure;
    } else if (this.stateOverride && this.buffer === "" &&
               (includesCredentials(this.url) || this.url.port !== null)) {
      this.parseError = true;
      return false;
    }

    const host = parseHost(this.buffer, isSpecial(this.url));
    if (host === failure) {
      return failure;
    }

    this.url.host = host;
    this.buffer = "";
    this.state = "path start";
    if (this.stateOverride) {
      return false;
    }
  } else {
    if (c === 91) {
      this.arrFlag = true;
    } else if (c === 93) {
      this.arrFlag = false;
    }
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
  if (isASCIIDigit(c)) {
    this.buffer += cStr;
  } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
             (isSpecial(this.url) && c === 92) ||
             this.stateOverride) {
    if (this.buffer !== "") {
      const port = parseInt(this.buffer);
      if (port > Math.pow(2, 16) - 1) {
        this.parseError = true;
        return failure;
      }
      this.url.port = port === defaultPort(this.url.scheme) ? null : port;
      this.buffer = "";
    }
    if (this.stateOverride) {
      return false;
    }
    this.state = "path start";
    --this.pointer;
  } else {
    this.parseError = true;
    return failure;
  }

  return true;
};

const fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);

URLStateMachine.prototype["parse file"] = function parseFile(c) {
  this.url.scheme = "file";

  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "file slash";
  } else if (this.base !== null && this.base.scheme === "file") {
    if (isNaN(c)) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
    } else if (c === 63) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      if (this.input.length - this.pointer - 1 === 0 || // remaining consists of 0 code points
          !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) ||
          (this.input.length - this.pointer - 1 >= 2 && // remaining has at least 2 code points
           !fileOtherwiseCodePoints.has(this.input[this.pointer + 2]))) {
        this.url.host = this.base.host;
        this.url.path = this.base.path.slice();
        shortenPath(this.url);
      } else {
        this.parseError = true;
      }

      this.state = "path";
      --this.pointer;
    }
  } else {
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
  if (c === 47 || c === 92) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "file host";
  } else {
    if (this.base !== null && this.base.scheme === "file") {
      if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
        this.url.path.push(this.base.path[0]);
      } else {
        this.url.host = this.base.host;
      }
    }
    this.state = "path";
    --this.pointer;
  }

  return true;
};

URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
  if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
    --this.pointer;
    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
      this.parseError = true;
      this.state = "path";
    } else if (this.buffer === "") {
      this.url.host = "";
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
    } else {
      let host = parseHost(this.buffer, isSpecial(this.url));
      if (host === failure) {
        return failure;
      }
      if (host === "localhost") {
        host = "";
      }
      this.url.host = host;

      if (this.stateOverride) {
        return false;
      }

      this.buffer = "";
      this.state = "path start";
    }
  } else {
    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
  if (isSpecial(this.url)) {
    if (c === 92) {
      this.parseError = true;
    }
    this.state = "path";

    if (c !== 47 && c !== 92) {
      --this.pointer;
    }
  } else if (!this.stateOverride && c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (!this.stateOverride && c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else if (c !== undefined) {
    this.state = "path";
    if (c !== 47) {
      --this.pointer;
    }
  }

  return true;
};

URLStateMachine.prototype["parse path"] = function parsePath(c) {
  if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||
      (!this.stateOverride && (c === 63 || c === 35))) {
    if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
    }

    if (isDoubleDot(this.buffer)) {
      shortenPath(this.url);
      if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      }
    } else if (isSingleDot(this.buffer) && c !== 47 &&
               !(isSpecial(this.url) && c === 92)) {
      this.url.path.push("");
    } else if (!isSingleDot(this.buffer)) {
      if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
        if (this.url.host !== "" && this.url.host !== null) {
          this.parseError = true;
          this.url.host = "";
        }
        this.buffer = this.buffer[0] + ":";
      }
      this.url.path.push(this.buffer);
    }
    this.buffer = "";
    if (this.url.scheme === "file" && (c === undefined || c === 63 || c === 35)) {
      while (this.url.path.length > 1 && this.url.path[0] === "") {
        this.parseError = true;
        this.url.path.shift();
      }
    }
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    }
    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.

    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += percentEncodeChar(c, isPathPercentEncode);
  }

  return true;
};

URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
  if (c === 63) {
    this.url.query = "";
    this.state = "query";
  } else if (c === 35) {
    this.url.fragment = "";
    this.state = "fragment";
  } else {
    // TODO: Add: not a URL code point
    if (!isNaN(c) && c !== 37) {
      this.parseError = true;
    }

    if (c === 37 &&
        (!isASCIIHex(this.input[this.pointer + 1]) ||
         !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    if (!isNaN(c)) {
      this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
    }
  }

  return true;
};

URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
  if (isNaN(c) || (!this.stateOverride && c === 35)) {
    if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
      this.encodingOverride = "utf-8";
    }

    const buffer = new Buffer(this.buffer); // TODO: Use encoding override instead
    for (let i = 0; i < buffer.length; ++i) {
      if (buffer[i] < 0x21 || buffer[i] > 0x7E || buffer[i] === 0x22 || buffer[i] === 0x23 ||
          buffer[i] === 0x3C || buffer[i] === 0x3E) {
        this.url.query += percentEncode(buffer[i]);
      } else {
        this.url.query += String.fromCodePoint(buffer[i]);
      }
    }

    this.buffer = "";
    if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    }
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.buffer += cStr;
  }

  return true;
};

URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
  if (isNaN(c)) { // do nothing
  } else if (c === 0x0) {
    this.parseError = true;
  } else {
    // TODO: If c is not a URL code point and not "%", parse error.
    if (c === 37 &&
      (!isASCIIHex(this.input[this.pointer + 1]) ||
        !isASCIIHex(this.input[this.pointer + 2]))) {
      this.parseError = true;
    }

    this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
  }

  return true;
};

function serializeURL(url, excludeFragment) {
  let output = url.scheme + ":";
  if (url.host !== null) {
    output += "//";

    if (url.username !== "" || url.password !== "") {
      output += url.username;
      if (url.password !== "") {
        output += ":" + url.password;
      }
      output += "@";
    }

    output += serializeHost(url.host);

    if (url.port !== null) {
      output += ":" + url.port;
    }
  } else if (url.host === null && url.scheme === "file") {
    output += "//";
  }

  if (url.cannotBeABaseURL) {
    output += url.path[0];
  } else {
    for (const string of url.path) {
      output += "/" + string;
    }
  }

  if (url.query !== null) {
    output += "?" + url.query;
  }

  if (!excludeFragment && url.fragment !== null) {
    output += "#" + url.fragment;
  }

  return output;
}

function serializeOrigin(tuple) {
  let result = tuple.scheme + "://";
  result += serializeHost(tuple.host);

  if (tuple.port !== null) {
    result += ":" + tuple.port;
  }

  return result;
}

module.exports.serializeURL = serializeURL;

module.exports.serializeURLOrigin = function (url) {
  // https://url.spec.whatwg.org/#concept-url-origin
  switch (url.scheme) {
    case "blob":
      try {
        return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
      } catch (e) {
        // serializing an opaque origin returns "null"
        return "null";
      }
    case "ftp":
    case "gopher":
    case "http":
    case "https":
    case "ws":
    case "wss":
      return serializeOrigin({
        scheme: url.scheme,
        host: url.host,
        port: url.port
      });
    case "file":
      // spec says "exercise to the reader", chrome says "file://"
      return "file://";
    default:
      // serializing an opaque origin returns "null"
      return "null";
  }
};

module.exports.basicURLParse = function (input, options) {
  if (options === undefined) {
    options = {};
  }

  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
  if (usm.failure) {
    return "failure";
  }

  return usm.url;
};

module.exports.setTheUsername = function (url, username) {
  url.username = "";
  const decoded = punycode.ucs2.decode(username);
  for (let i = 0; i < decoded.length; ++i) {
    url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.setThePassword = function (url, password) {
  url.password = "";
  const decoded = punycode.ucs2.decode(password);
  for (let i = 0; i < decoded.length; ++i) {
    url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
  }
};

module.exports.serializeHost = serializeHost;

module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;

module.exports.serializeInteger = function (integer) {
  return String(integer);
};

module.exports.parseURL = function (input, options) {
  if (options === undefined) {
    options = {};
  }

  // We don't handle blobs, so this just delegates:
  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
};


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = {
  NoDefinitionsFound: class NoDefinitionsFound extends Error {
    constructor(additionalInfo = {}) {
      super();
      this.name = 'NoDefinitionsFound';
      this.title = 'No Definitions Found';
      this.message = 'no definitions for ' + JSON.stringify(additionalInfo) + '.';
      this.resolution = 'You can try the search again at later time or head to the web instead.';
      this.additionalInfo = additionalInfo;
      this.requestType = 'notFound';
    }

  },
  RateLimitError: class RateLimitError extends Error {
    constructor(additionalInfo = {}) {
      super();
      this.name = 'RateLimitError';
      this.title = 'API Rate Limit Exceeded';
      this.message = 'Sorry pal, you were just rate limited by the upstream server.';
      this.resolution = 'You can try the search again at later time or head to the web instead.';
      this.additionalInfo = additionalInfo;
      this.requestType = 'rateLimit';
    }

  },
  UnexpectedError: class UnexpectedError extends Error {
    constructor(additionalInfo = {}) {
      super();
      this.name = 'UnexpectedError';
      this.title = 'Something Went Wrong';
      this.message = 'Sorry pal, something went wrong, and it\s not your fault.';
      this.resolution = 'You can try the search again at later time or head to the web instead.';
      this.additionalInfo = additionalInfo;
      this.requestType = 'serverError';
    }

  },
  BadHTTPResponse: class BadHTTPResponse extends Error {
    constructor(additionalInfo = {}) {
      super();
      this.name = 'BadHTTPResponse';
      this.title = 'Upstream Server Failed';
      this.message = 'Sorry pal, upstream servers failed us.';
      this.resolution = 'You can try the search again at later time or head to the web instead.';
      this.additionalInfo = additionalInfo;
      this.requestType = 'serverError';
    }

  }
};

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon3000", function() { return TheMostCommon3000; });
// https://www.ef.com/wwen/english-resources/english-vocabulary/top-3000-words/
const TheMostCommon3000 = {
  a: 1,
  abandon: 1,
  ability: 1,
  able: 1,
  abortion: 1,
  about: 1,
  above: 1,
  abroad: 1,
  absence: 1,
  absolute: 1,
  absolutely: 1,
  absorb: 1,
  abuse: 1,
  academic: 1,
  accept: 1,
  access: 1,
  accident: 1,
  accompany: 1,
  accomplish: 1,
  according: 1,
  account: 1,
  accurate: 1,
  accuse: 1,
  achieve: 1,
  achievement: 1,
  acid: 1,
  acknowledge: 1,
  acquire: 1,
  across: 1,
  act: 1,
  action: 1,
  active: 1,
  activist: 1,
  activity: 1,
  actor: 1,
  actress: 1,
  actual: 1,
  actually: 1,
  ad: 1,
  adapt: 1,
  add: 1,
  addition: 1,
  additional: 1,
  address: 1,
  adequate: 1,
  adjust: 1,
  adjustment: 1,
  administration: 1,
  administrator: 1,
  admire: 1,
  admission: 1,
  admit: 1,
  adolescent: 1,
  adopt: 1,
  adult: 1,
  advance: 1,
  advanced: 1,
  advantage: 1,
  adventure: 1,
  advertising: 1,
  advice: 1,
  advise: 1,
  adviser: 1,
  advocate: 1,
  affair: 1,
  affect: 1,
  afford: 1,
  afraid: 1,
  African: 1,
  "African-American": 1,
  after: 1,
  afternoon: 1,
  again: 1,
  against: 1,
  age: 1,
  agency: 1,
  agenda: 1,
  agent: 1,
  aggressive: 1,
  ago: 1,
  agree: 1,
  agreement: 1,
  agricultural: 1,
  ah: 1,
  ahead: 1,
  aid: 1,
  aide: 1,
  AIDS: 1,
  aim: 1,
  air: 1,
  aircraft: 1,
  airline: 1,
  airport: 1,
  album: 1,
  alcohol: 1,
  alive: 1,
  all: 1,
  alliance: 1,
  allow: 1,
  ally: 1,
  almost: 1,
  alone: 1,
  along: 1,
  already: 1,
  also: 1,
  alter: 1,
  alternative: 1,
  although: 1,
  always: 1,
  AM: 1,
  amazing: 1,
  American: 1,
  among: 1,
  amount: 1,
  analysis: 1,
  analyst: 1,
  analyze: 1,
  ancient: 1,
  and: 1,
  anger: 1,
  angle: 1,
  angry: 1,
  animal: 1,
  anniversary: 1,
  announce: 1,
  annual: 1,
  another: 1,
  answer: 1,
  anticipate: 1,
  anxiety: 1,
  any: 1,
  anybody: 1,
  anymore: 1,
  anyone: 1,
  anything: 1,
  anyway: 1,
  anywhere: 1,
  apart: 1,
  apartment: 1,
  apparent: 1,
  apparently: 1,
  appeal: 1,
  appear: 1,
  appearance: 1,
  apple: 1,
  application: 1,
  apply: 1,
  appoint: 1,
  appointment: 1,
  appreciate: 1,
  approach: 1,
  appropriate: 1,
  approval: 1,
  approve: 1,
  approximately: 1,
  Arab: 1,
  architect: 1,
  area: 1,
  argue: 1,
  argument: 1,
  arise: 1,
  arm: 1,
  armed: 1,
  army: 1,
  around: 1,
  arrange: 1,
  arrangement: 1,
  arrest: 1,
  arrival: 1,
  arrive: 1,
  art: 1,
  article: 1,
  artist: 1,
  artistic: 1,
  as: 1,
  Asian: 1,
  aside: 1,
  ask: 1,
  asleep: 1,
  aspect: 1,
  assault: 1,
  assert: 1,
  assess: 1,
  assessment: 1,
  asset: 1,
  assign: 1,
  assignment: 1,
  assist: 1,
  assistance: 1,
  assistant: 1,
  associate: 1,
  association: 1,
  assume: 1,
  assumption: 1,
  assure: 1,
  at: 1,
  athlete: 1,
  athletic: 1,
  atmosphere: 1,
  attach: 1,
  attack: 1,
  attempt: 1,
  attend: 1,
  attention: 1,
  attitude: 1,
  attorney: 1,
  attract: 1,
  attractive: 1,
  attribute: 1,
  audience: 1,
  author: 1,
  authority: 1,
  auto: 1,
  available: 1,
  average: 1,
  avoid: 1,
  award: 1,
  aware: 1,
  awareness: 1,
  away: 1,
  awful: 1,
  baby: 1,
  back: 1,
  background: 1,
  bad: 1,
  badly: 1,
  bag: 1,
  bake: 1,
  balance: 1,
  ball: 1,
  ban: 1,
  band: 1,
  bank: 1,
  bar: 1,
  barely: 1,
  barrel: 1,
  barrier: 1,
  base: 1,
  baseball: 1,
  basic: 1,
  basically: 1,
  basis: 1,
  basket: 1,
  basketball: 1,
  bathroom: 1,
  battery: 1,
  battle: 1,
  be: 1,
  beach: 1,
  bean: 1,
  bear: 1,
  beat: 1,
  beautiful: 1,
  beauty: 1,
  because: 1,
  become: 1,
  bed: 1,
  bedroom: 1,
  beer: 1,
  before: 1,
  begin: 1,
  beginning: 1,
  behavior: 1,
  behind: 1,
  being: 1,
  belief: 1,
  believe: 1,
  bell: 1,
  belong: 1,
  below: 1,
  belt: 1,
  bench: 1,
  bend: 1,
  beneath: 1,
  benefit: 1,
  beside: 1,
  besides: 1,
  best: 1,
  bet: 1,
  better: 1,
  between: 1,
  beyond: 1,
  Bible: 1,
  big: 1,
  bike: 1,
  bill: 1,
  billion: 1,
  bind: 1,
  biological: 1,
  bird: 1,
  birth: 1,
  birthday: 1,
  bit: 1,
  bite: 1,
  black: 1,
  blade: 1,
  blame: 1,
  blanket: 1,
  blind: 1,
  block: 1,
  blood: 1,
  blow: 1,
  blue: 1,
  board: 1,
  boat: 1,
  body: 1,
  bomb: 1,
  bombing: 1,
  bond: 1,
  bone: 1,
  book: 1,
  boom: 1,
  boot: 1,
  border: 1,
  born: 1,
  borrow: 1,
  boss: 1,
  both: 1,
  bother: 1,
  bottle: 1,
  bottom: 1,
  boundary: 1,
  bowl: 1,
  box: 1,
  boy: 1,
  boyfriend: 1,
  brain: 1,
  branch: 1,
  brand: 1,
  bread: 1,
  break: 1,
  breakfast: 1,
  breast: 1,
  breath: 1,
  breathe: 1,
  brick: 1,
  bridge: 1,
  brief: 1,
  briefly: 1,
  bright: 1,
  brilliant: 1,
  bring: 1,
  British: 1,
  broad: 1,
  broken: 1,
  brother: 1,
  brown: 1,
  brush: 1,
  buck: 1,
  budget: 1,
  build: 1,
  building: 1,
  bullet: 1,
  bunch: 1,
  burden: 1,
  burn: 1,
  bury: 1,
  bus: 1,
  business: 1,
  busy: 1,
  but: 1,
  butter: 1,
  button: 1,
  buy: 1,
  buyer: 1,
  by: 1,
  cabin: 1,
  cabinet: 1,
  cable: 1,
  cake: 1,
  calculate: 1,
  call: 1,
  camera: 1,
  camp: 1,
  campaign: 1,
  campus: 1,
  can: 1,
  Canadian: 1,
  cancer: 1,
  candidate: 1,
  cap: 1,
  capability: 1,
  capable: 1,
  capacity: 1,
  capital: 1,
  captain: 1,
  capture: 1,
  car: 1,
  carbon: 1,
  card: 1,
  care: 1,
  career: 1,
  careful: 1,
  carefully: 1,
  carrier: 1,
  carry: 1,
  case: 1,
  cash: 1,
  cast: 1,
  cat: 1,
  catch: 1,
  category: 1,
  Catholic: 1,
  cause: 1,
  ceiling: 1,
  celebrate: 1,
  celebration: 1,
  celebrity: 1,
  cell: 1,
  center: 1,
  central: 1,
  century: 1,
  CEO: 1,
  ceremony: 1,
  certain: 1,
  certainly: 1,
  chain: 1,
  chair: 1,
  chairman: 1,
  challenge: 1,
  chamber: 1,
  champion: 1,
  championship: 1,
  chance: 1,
  change: 1,
  changing: 1,
  channel: 1,
  chapter: 1,
  character: 1,
  characteristic: 1,
  characterize: 1,
  charge: 1,
  charity: 1,
  chart: 1,
  chase: 1,
  cheap: 1,
  check: 1,
  cheek: 1,
  cheese: 1,
  chef: 1,
  chemical: 1,
  chest: 1,
  chicken: 1,
  chief: 1,
  child: 1,
  childhood: 1,
  Chinese: 1,
  chip: 1,
  chocolate: 1,
  choice: 1,
  cholesterol: 1,
  choose: 1,
  Christian: 1,
  Christmas: 1,
  church: 1,
  cigarette: 1,
  circle: 1,
  circumstance: 1,
  cite: 1,
  citizen: 1,
  city: 1,
  civil: 1,
  civilian: 1,
  claim: 1,
  class: 1,
  classic: 1,
  classroom: 1,
  clean: 1,
  clear: 1,
  clearly: 1,
  client: 1,
  climate: 1,
  climb: 1,
  clinic: 1,
  clinical: 1,
  clock: 1,
  close: 1,
  closely: 1,
  closer: 1,
  clothes: 1,
  clothing: 1,
  cloud: 1,
  club: 1,
  clue: 1,
  cluster: 1,
  coach: 1,
  coal: 1,
  coalition: 1,
  coast: 1,
  coat: 1,
  code: 1,
  coffee: 1,
  cognitive: 1,
  cold: 1,
  collapse: 1,
  colleague: 1,
  collect: 1,
  collection: 1,
  collective: 1,
  college: 1,
  colonial: 1,
  color: 1,
  column: 1,
  combination: 1,
  combine: 1,
  come: 1,
  comedy: 1,
  comfort: 1,
  comfortable: 1,
  command: 1,
  commander: 1,
  comment: 1,
  commercial: 1,
  commission: 1,
  commit: 1,
  commitment: 1,
  committee: 1,
  common: 1,
  communicate: 1,
  communication: 1,
  community: 1,
  company: 1,
  compare: 1,
  comparison: 1,
  compete: 1,
  competition: 1,
  competitive: 1,
  competitor: 1,
  complain: 1,
  complaint: 1,
  complete: 1,
  completely: 1,
  complex: 1,
  complicated: 1,
  component: 1,
  compose: 1,
  composition: 1,
  comprehensive: 1,
  computer: 1,
  concentrate: 1,
  concentration: 1,
  concept: 1,
  concern: 1,
  concerned: 1,
  concert: 1,
  conclude: 1,
  conclusion: 1,
  concrete: 1,
  condition: 1,
  conduct: 1,
  conference: 1,
  confidence: 1,
  confident: 1,
  confirm: 1,
  conflict: 1,
  confront: 1,
  confusion: 1,
  Congress: 1,
  congressional: 1,
  connect: 1,
  connection: 1,
  consciousness: 1,
  consensus: 1,
  consequence: 1,
  conservative: 1,
  consider: 1,
  considerable: 1,
  consideration: 1,
  consist: 1,
  consistent: 1,
  constant: 1,
  constantly: 1,
  constitute: 1,
  constitutional: 1,
  construct: 1,
  construction: 1,
  consultant: 1,
  consume: 1,
  consumer: 1,
  consumption: 1,
  contact: 1,
  contain: 1,
  container: 1,
  contemporary: 1,
  content: 1,
  contest: 1,
  context: 1,
  continue: 1,
  continued: 1,
  contract: 1,
  contrast: 1,
  contribute: 1,
  contribution: 1,
  control: 1,
  controversial: 1,
  controversy: 1,
  convention: 1,
  conventional: 1,
  conversation: 1,
  convert: 1,
  conviction: 1,
  convince: 1,
  cook: 1,
  cookie: 1,
  cooking: 1,
  cool: 1,
  cooperation: 1,
  cop: 1,
  cope: 1,
  copy: 1,
  core: 1,
  corn: 1,
  corner: 1,
  corporate: 1,
  corporation: 1,
  correct: 1,
  correspondent: 1,
  cost: 1,
  cotton: 1,
  couch: 1,
  could: 1,
  council: 1,
  counselor: 1,
  count: 1,
  counter: 1,
  country: 1,
  county: 1,
  couple: 1,
  courage: 1,
  course: 1,
  court: 1,
  cousin: 1,
  cover: 1,
  coverage: 1,
  cow: 1,
  crack: 1,
  craft: 1,
  crash: 1,
  crazy: 1,
  cream: 1,
  create: 1,
  creation: 1,
  creative: 1,
  creature: 1,
  credit: 1,
  crew: 1,
  crime: 1,
  criminal: 1,
  crisis: 1,
  criteria: 1,
  critic: 1,
  critical: 1,
  criticism: 1,
  criticize: 1,
  crop: 1,
  cross: 1,
  crowd: 1,
  crucial: 1,
  cry: 1,
  cultural: 1,
  culture: 1,
  cup: 1,
  curious: 1,
  current: 1,
  currently: 1,
  curriculum: 1,
  custom: 1,
  customer: 1,
  cut: 1,
  cycle: 1,
  dad: 1,
  daily: 1,
  damage: 1,
  dance: 1,
  danger: 1,
  dangerous: 1,
  dare: 1,
  dark: 1,
  darkness: 1,
  data: 1,
  date: 1,
  daughter: 1,
  day: 1,
  dead: 1,
  deal: 1,
  dealer: 1,
  dear: 1,
  death: 1,
  debate: 1,
  debt: 1,
  decade: 1,
  decide: 1,
  decision: 1,
  deck: 1,
  declare: 1,
  decline: 1,
  decrease: 1,
  deep: 1,
  deeply: 1,
  deer: 1,
  defeat: 1,
  defend: 1,
  defendant: 1,
  defense: 1,
  defensive: 1,
  deficit: 1,
  define: 1,
  definitely: 1,
  definition: 1,
  degree: 1,
  delay: 1,
  deliver: 1,
  delivery: 1,
  demand: 1,
  democracy: 1,
  Democrat: 1,
  democratic: 1,
  demonstrate: 1,
  demonstration: 1,
  deny: 1,
  department: 1,
  depend: 1,
  dependent: 1,
  depending: 1,
  depict: 1,
  depression: 1,
  depth: 1,
  deputy: 1,
  derive: 1,
  describe: 1,
  description: 1,
  desert: 1,
  deserve: 1,
  design: 1,
  designer: 1,
  desire: 1,
  desk: 1,
  desperate: 1,
  despite: 1,
  destroy: 1,
  destruction: 1,
  detail: 1,
  detailed: 1,
  detect: 1,
  determine: 1,
  develop: 1,
  developing: 1,
  development: 1,
  device: 1,
  devote: 1,
  dialogue: 1,
  die: 1,
  diet: 1,
  differ: 1,
  difference: 1,
  different: 1,
  differently: 1,
  difficult: 1,
  difficulty: 1,
  dig: 1,
  digital: 1,
  dimension: 1,
  dining: 1,
  dinner: 1,
  direct: 1,
  direction: 1,
  directly: 1,
  director: 1,
  dirt: 1,
  dirty: 1,
  disability: 1,
  disagree: 1,
  disappear: 1,
  disaster: 1,
  discipline: 1,
  discourse: 1,
  discover: 1,
  discovery: 1,
  discrimination: 1,
  discuss: 1,
  discussion: 1,
  disease: 1,
  dish: 1,
  dismiss: 1,
  disorder: 1,
  display: 1,
  dispute: 1,
  distance: 1,
  distant: 1,
  distinct: 1,
  distinction: 1,
  distinguish: 1,
  distribute: 1,
  distribution: 1,
  district: 1,
  diverse: 1,
  diversity: 1,
  divide: 1,
  division: 1,
  divorce: 1,
  DNA: 1,
  do: 1,
  doctor: 1,
  document: 1,
  dog: 1,
  domestic: 1,
  dominant: 1,
  dominate: 1,
  door: 1,
  double: 1,
  doubt: 1,
  down: 1,
  downtown: 1,
  dozen: 1,
  draft: 1,
  drag: 1,
  drama: 1,
  dramatic: 1,
  dramatically: 1,
  draw: 1,
  drawing: 1,
  dream: 1,
  dress: 1,
  drink: 1,
  drive: 1,
  driver: 1,
  drop: 1,
  drug: 1,
  dry: 1,
  due: 1,
  during: 1,
  dust: 1,
  duty: 1,
  each: 1,
  eager: 1,
  ear: 1,
  early: 1,
  earn: 1,
  earnings: 1,
  earth: 1,
  ease: 1,
  easily: 1,
  east: 1,
  eastern: 1,
  easy: 1,
  eat: 1,
  economic: 1,
  economics: 1,
  economist: 1,
  economy: 1,
  edge: 1,
  edition: 1,
  editor: 1,
  educate: 1,
  education: 1,
  educational: 1,
  educator: 1,
  effect: 1,
  effective: 1,
  effectively: 1,
  efficiency: 1,
  efficient: 1,
  effort: 1,
  egg: 1,
  eight: 1,
  either: 1,
  elderly: 1,
  elect: 1,
  election: 1,
  electric: 1,
  electricity: 1,
  electronic: 1,
  element: 1,
  elementary: 1,
  eliminate: 1,
  elite: 1,
  else: 1,
  elsewhere: 1,
  "e-mail": 1,
  embrace: 1,
  emerge: 1,
  emergency: 1,
  emission: 1,
  emotion: 1,
  emotional: 1,
  emphasis: 1,
  emphasize: 1,
  employ: 1,
  employee: 1,
  employer: 1,
  employment: 1,
  empty: 1,
  enable: 1,
  encounter: 1,
  encourage: 1,
  end: 1,
  enemy: 1,
  energy: 1,
  enforcement: 1,
  engage: 1,
  engine: 1,
  engineer: 1,
  engineering: 1,
  English: 1,
  enhance: 1,
  enjoy: 1,
  enormous: 1,
  enough: 1,
  ensure: 1,
  enter: 1,
  enterprise: 1,
  entertainment: 1,
  entire: 1,
  entirely: 1,
  entrance: 1,
  entry: 1,
  environment: 1,
  environmental: 1,
  episode: 1,
  equal: 1,
  equally: 1,
  equipment: 1,
  era: 1,
  error: 1,
  escape: 1,
  especially: 1,
  essay: 1,
  essential: 1,
  essentially: 1,
  establish: 1,
  establishment: 1,
  estate: 1,
  estimate: 1,
  etc: 1,
  ethics: 1,
  ethnic: 1,
  European: 1,
  evaluate: 1,
  evaluation: 1,
  even: 1,
  evening: 1,
  event: 1,
  eventually: 1,
  ever: 1,
  every: 1,
  everybody: 1,
  everyday: 1,
  everyone: 1,
  everything: 1,
  everywhere: 1,
  evidence: 1,
  evolution: 1,
  evolve: 1,
  exact: 1,
  exactly: 1,
  examination: 1,
  examine: 1,
  example: 1,
  exceed: 1,
  excellent: 1,
  except: 1,
  exception: 1,
  exchange: 1,
  exciting: 1,
  executive: 1,
  exercise: 1,
  exhibit: 1,
  exhibition: 1,
  exist: 1,
  existence: 1,
  existing: 1,
  expand: 1,
  expansion: 1,
  expect: 1,
  expectation: 1,
  expense: 1,
  expensive: 1,
  experience: 1,
  experiment: 1,
  expert: 1,
  explain: 1,
  explanation: 1,
  explode: 1,
  explore: 1,
  explosion: 1,
  expose: 1,
  exposure: 1,
  express: 1,
  expression: 1,
  extend: 1,
  extension: 1,
  extensive: 1,
  extent: 1,
  external: 1,
  extra: 1,
  extraordinary: 1,
  extreme: 1,
  extremely: 1,
  eye: 1
};

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon3000", function() { return TheMostCommon3000; });
// https://www.ef.com/wwen/english-resources/english-vocabulary/top-3000-words/
const TheMostCommon3000 = {
  fabric: 1,
  face: 1,
  facility: 1,
  fact: 1,
  factor: 1,
  factory: 1,
  faculty: 1,
  fade: 1,
  fail: 1,
  failure: 1,
  fair: 1,
  fairly: 1,
  faith: 1,
  fall: 1,
  false: 1,
  familiar: 1,
  family: 1,
  famous: 1,
  fan: 1,
  fantasy: 1,
  far: 1,
  farm: 1,
  farmer: 1,
  fashion: 1,
  fast: 1,
  fat: 1,
  fate: 1,
  father: 1,
  fault: 1,
  favor: 1,
  favorite: 1,
  fear: 1,
  feature: 1,
  federal: 1,
  fee: 1,
  feed: 1,
  feel: 1,
  feeling: 1,
  fellow: 1,
  female: 1,
  fence: 1,
  few: 1,
  fewer: 1,
  fiber: 1,
  fiction: 1,
  field: 1,
  fifteen: 1,
  fifth: 1,
  fifty: 1,
  fight: 1,
  fighter: 1,
  fighting: 1,
  figure: 1,
  file: 1,
  fill: 1,
  film: 1,
  final: 1,
  finally: 1,
  finance: 1,
  financial: 1,
  find: 1,
  finding: 1,
  fine: 1,
  finger: 1,
  finish: 1,
  fire: 1,
  firm: 1,
  first: 1,
  fish: 1,
  fishing: 1,
  fit: 1,
  fitness: 1,
  five: 1,
  fix: 1,
  flag: 1,
  flame: 1,
  flat: 1,
  flavor: 1,
  flee: 1,
  flesh: 1,
  flight: 1,
  float: 1,
  floor: 1,
  flow: 1,
  flower: 1,
  fly: 1,
  focus: 1,
  folk: 1,
  follow: 1,
  following: 1,
  food: 1,
  foot: 1,
  football: 1,
  for: 1,
  force: 1,
  foreign: 1,
  forest: 1,
  forever: 1,
  forget: 1,
  form: 1,
  formal: 1,
  formation: 1,
  former: 1,
  formula: 1,
  forth: 1,
  fortune: 1,
  forward: 1,
  found: 1,
  foundation: 1,
  founder: 1,
  four: 1,
  fourth: 1,
  frame: 1,
  framework: 1,
  free: 1,
  freedom: 1,
  freeze: 1,
  French: 1,
  frequency: 1,
  frequent: 1,
  frequently: 1,
  fresh: 1,
  friend: 1,
  friendly: 1,
  friendship: 1,
  from: 1,
  front: 1,
  fruit: 1,
  frustration: 1,
  fuel: 1,
  full: 1,
  fully: 1,
  fun: 1,
  function: 1,
  fund: 1,
  fundamental: 1,
  funding: 1,
  funeral: 1,
  funny: 1,
  furniture: 1,
  furthermore: 1,
  future: 1,
  gain: 1,
  galaxy: 1,
  gallery: 1,
  game: 1,
  gang: 1,
  gap: 1,
  garage: 1,
  garden: 1,
  garlic: 1,
  gas: 1,
  gate: 1,
  gather: 1,
  gay: 1,
  gaze: 1,
  gear: 1,
  gender: 1,
  gene: 1,
  general: 1,
  generally: 1,
  generate: 1,
  generation: 1,
  genetic: 1,
  gentleman: 1,
  gently: 1,
  German: 1,
  gesture: 1,
  get: 1,
  ghost: 1,
  giant: 1,
  gift: 1,
  gifted: 1,
  girl: 1,
  girlfriend: 1,
  give: 1,
  given: 1,
  glad: 1,
  glance: 1,
  glass: 1,
  global: 1,
  glove: 1,
  go: 1,
  goal: 1,
  God: 1,
  gold: 1,
  golden: 1,
  golf: 1,
  good: 1,
  government: 1,
  governor: 1,
  grab: 1,
  grade: 1,
  gradually: 1,
  graduate: 1,
  grain: 1,
  grand: 1,
  grandfather: 1,
  grandmother: 1,
  grant: 1,
  grass: 1,
  grave: 1,
  gray: 1,
  great: 1,
  greatest: 1,
  green: 1,
  grocery: 1,
  ground: 1,
  group: 1,
  grow: 1,
  growing: 1,
  growth: 1,
  guarantee: 1,
  guard: 1,
  guess: 1,
  guest: 1,
  guide: 1,
  guideline: 1,
  guilty: 1,
  gun: 1,
  guy: 1,
  habit: 1,
  habitat: 1,
  hair: 1,
  half: 1,
  hall: 1,
  hand: 1,
  handful: 1,
  handle: 1,
  hang: 1,
  happen: 1,
  happy: 1,
  hard: 1,
  hardly: 1,
  hat: 1,
  hate: 1,
  have: 1,
  he: 1,
  head: 1,
  headline: 1,
  headquarters: 1,
  health: 1,
  healthy: 1,
  hear: 1,
  hearing: 1,
  heart: 1,
  heat: 1,
  heaven: 1,
  heavily: 1,
  heavy: 1,
  heel: 1,
  height: 1,
  helicopter: 1,
  hell: 1,
  hello: 1,
  help: 1,
  helpful: 1,
  her: 1,
  here: 1,
  heritage: 1,
  hero: 1,
  herself: 1,
  hey: 1,
  hi: 1,
  hide: 1,
  high: 1,
  highlight: 1,
  highly: 1,
  highway: 1,
  hill: 1,
  him: 1,
  himself: 1,
  hip: 1,
  hire: 1,
  his: 1,
  historian: 1,
  historic: 1,
  historical: 1,
  history: 1,
  hit: 1,
  hold: 1,
  hole: 1,
  holiday: 1,
  holy: 1,
  home: 1,
  homeless: 1,
  honest: 1,
  honey: 1,
  honor: 1,
  hope: 1,
  horizon: 1,
  horror: 1,
  horse: 1,
  hospital: 1,
  host: 1,
  hot: 1,
  hotel: 1,
  hour: 1,
  house: 1,
  household: 1,
  housing: 1,
  how: 1,
  however: 1,
  huge: 1,
  human: 1,
  humor: 1,
  hundred: 1,
  hungry: 1,
  hunter: 1,
  hunting: 1,
  hurt: 1,
  husband: 1,
  hypothesis: 1,
  I: 1,
  ice: 1,
  idea: 1,
  ideal: 1,
  identification: 1,
  identify: 1,
  identity: 1,
  ie: 1,
  if: 1,
  ignore: 1,
  ill: 1,
  illegal: 1,
  illness: 1,
  illustrate: 1,
  image: 1,
  imagination: 1,
  imagine: 1,
  immediate: 1,
  immediately: 1,
  immigrant: 1,
  immigration: 1,
  impact: 1,
  implement: 1,
  implication: 1,
  imply: 1,
  importance: 1,
  important: 1,
  impose: 1,
  impossible: 1,
  impress: 1,
  impression: 1,
  impressive: 1,
  improve: 1,
  improvement: 1,
  in: 1,
  incentive: 1,
  incident: 1,
  include: 1,
  including: 1,
  income: 1,
  incorporate: 1,
  increase: 1,
  increased: 1,
  increasing: 1,
  increasingly: 1,
  incredible: 1,
  indeed: 1,
  independence: 1,
  independent: 1,
  index: 1,
  Indian: 1,
  indicate: 1,
  indication: 1,
  individual: 1,
  industrial: 1,
  industry: 1,
  infant: 1,
  infection: 1,
  inflation: 1,
  influence: 1,
  inform: 1,
  information: 1,
  ingredient: 1,
  initial: 1,
  initially: 1,
  initiative: 1,
  injury: 1,
  inner: 1,
  innocent: 1,
  inquiry: 1,
  inside: 1,
  insight: 1,
  insist: 1,
  inspire: 1,
  install: 1,
  instance: 1,
  instead: 1,
  institution: 1,
  institutional: 1,
  instruction: 1,
  instructor: 1,
  instrument: 1,
  insurance: 1,
  intellectual: 1,
  intelligence: 1,
  intend: 1,
  intense: 1,
  intensity: 1,
  intention: 1,
  interaction: 1,
  interest: 1,
  interested: 1,
  interesting: 1,
  internal: 1,
  international: 1,
  Internet: 1,
  interpret: 1,
  interpretation: 1,
  intervention: 1,
  interview: 1,
  into: 1,
  introduce: 1,
  introduction: 1,
  invasion: 1,
  invest: 1,
  investigate: 1,
  investigation: 1,
  investigator: 1,
  investment: 1,
  investor: 1,
  invite: 1,
  involve: 1,
  involved: 1,
  involvement: 1,
  Iraqi: 1,
  Irish: 1,
  iron: 1,
  Islamic: 1,
  island: 1,
  Israeli: 1,
  issue: 1,
  it: 1,
  Italian: 1,
  item: 1,
  its: 1,
  itself: 1,
  jacket: 1,
  jail: 1,
  Japanese: 1,
  jet: 1,
  Jew: 1,
  Jewish: 1,
  job: 1,
  join: 1,
  joint: 1,
  joke: 1,
  journal: 1,
  journalist: 1,
  journey: 1,
  joy: 1,
  judge: 1,
  judgment: 1,
  juice: 1,
  jump: 1,
  junior: 1,
  jury: 1,
  just: 1,
  justice: 1,
  justify: 1,
  keep: 1,
  key: 1,
  kick: 1,
  kid: 1,
  kill: 1,
  killer: 1,
  killing: 1,
  kind: 1,
  king: 1,
  kiss: 1,
  kitchen: 1,
  knee: 1,
  knife: 1,
  knock: 1,
  know: 1,
  knowledge: 1,
  lab: 1,
  label: 1,
  labor: 1,
  laboratory: 1,
  lack: 1,
  lady: 1,
  lake: 1,
  land: 1,
  landscape: 1,
  language: 1,
  lap: 1,
  large: 1,
  largely: 1,
  last: 1,
  late: 1,
  later: 1,
  Latin: 1,
  latter: 1,
  laugh: 1,
  launch: 1,
  law: 1,
  lawn: 1,
  lawsuit: 1,
  lawyer: 1,
  lay: 1,
  layer: 1,
  lead: 1,
  leader: 1,
  leadership: 1,
  leading: 1,
  leaf: 1,
  league: 1,
  lean: 1,
  learn: 1,
  learning: 1,
  least: 1,
  leather: 1,
  leave: 1,
  left: 1,
  leg: 1,
  legacy: 1,
  legal: 1,
  legend: 1,
  legislation: 1,
  legitimate: 1,
  lemon: 1,
  length: 1,
  less: 1,
  lesson: 1,
  let: 1,
  letter: 1,
  level: 1,
  liberal: 1,
  library: 1,
  license: 1,
  lie: 1,
  life: 1,
  lifestyle: 1,
  lifetime: 1,
  lift: 1,
  light: 1,
  like: 1,
  likely: 1,
  limit: 1,
  limitation: 1,
  limited: 1,
  line: 1,
  link: 1,
  lip: 1,
  list: 1,
  listen: 1,
  literally: 1,
  literary: 1,
  literature: 1,
  little: 1,
  live: 1,
  living: 1,
  load: 1,
  loan: 1,
  local: 1,
  locate: 1,
  location: 1,
  lock: 1,
  long: 1,
  "long-term": 1,
  look: 1,
  loose: 1,
  lose: 1,
  loss: 1,
  lost: 1,
  lot: 1,
  lots: 1,
  loud: 1,
  love: 1,
  lovely: 1,
  lover: 1,
  low: 1,
  lower: 1,
  luck: 1,
  lucky: 1,
  lunch: 1,
  lung: 1,
  machine: 1,
  mad: 1,
  magazine: 1,
  mail: 1,
  main: 1,
  mainly: 1,
  maintain: 1,
  maintenance: 1,
  major: 1,
  majority: 1,
  make: 1,
  maker: 1,
  makeup: 1,
  male: 1,
  mall: 1,
  man: 1,
  manage: 1,
  management: 1,
  manager: 1,
  manner: 1,
  manufacturer: 1,
  manufacturing: 1,
  many: 1,
  map: 1,
  margin: 1,
  mark: 1,
  market: 1,
  marketing: 1,
  marriage: 1,
  married: 1,
  marry: 1,
  mask: 1,
  mass: 1,
  massive: 1,
  master: 1,
  match: 1,
  material: 1,
  math: 1,
  matter: 1,
  may: 1,
  maybe: 1,
  mayor: 1,
  me: 1,
  meal: 1,
  mean: 1,
  meaning: 1,
  meanwhile: 1,
  measure: 1,
  measurement: 1,
  meat: 1,
  mechanism: 1,
  media: 1,
  medical: 1,
  medication: 1,
  medicine: 1,
  medium: 1,
  meet: 1,
  meeting: 1,
  member: 1,
  membership: 1,
  memory: 1,
  mental: 1,
  mention: 1,
  menu: 1,
  mere: 1,
  merely: 1,
  mess: 1,
  message: 1,
  metal: 1,
  meter: 1,
  method: 1,
  Mexican: 1,
  middle: 1,
  might: 1,
  military: 1,
  milk: 1,
  million: 1,
  mind: 1,
  mine: 1,
  minister: 1,
  minor: 1,
  minority: 1,
  minute: 1,
  miracle: 1,
  mirror: 1,
  miss: 1,
  missile: 1,
  mission: 1,
  mistake: 1,
  mix: 1,
  mixture: 1,
  "mm-hmm": 1,
  mode: 1,
  model: 1,
  moderate: 1,
  modern: 1,
  modest: 1,
  mom: 1,
  moment: 1,
  money: 1,
  monitor: 1,
  month: 1,
  mood: 1,
  moon: 1,
  moral: 1,
  more: 1,
  moreover: 1,
  morning: 1,
  mortgage: 1,
  most: 1,
  mostly: 1,
  mother: 1,
  motion: 1,
  motivation: 1,
  motor: 1,
  mount: 1,
  mountain: 1,
  mouse: 1,
  mouth: 1,
  move: 1,
  movement: 1,
  movie: 1,
  Mr: 1,
  Mrs: 1,
  Ms: 1,
  much: 1,
  multiple: 1,
  murder: 1,
  muscle: 1,
  museum: 1,
  music: 1,
  musical: 1,
  musician: 1,
  Muslim: 1,
  must: 1,
  mutual: 1,
  my: 1,
  myself: 1,
  mystery: 1,
  myth: 1,
  naked: 1,
  name: 1,
  narrative: 1,
  narrow: 1,
  nation: 1,
  national: 1,
  native: 1,
  natural: 1,
  naturally: 1,
  nature: 1,
  near: 1,
  nearby: 1,
  nearly: 1,
  necessarily: 1,
  necessary: 1,
  neck: 1,
  need: 1,
  negative: 1,
  negotiate: 1,
  negotiation: 1,
  neighbor: 1,
  neighborhood: 1,
  neither: 1,
  nerve: 1,
  nervous: 1,
  net: 1,
  network: 1,
  never: 1,
  nevertheless: 1,
  new: 1,
  newly: 1,
  news: 1,
  newspaper: 1,
  next: 1,
  nice: 1,
  night: 1,
  nine: 1,
  no: 1,
  nobody: 1,
  nod: 1,
  noise: 1,
  nomination: 1,
  none: 1,
  nonetheless: 1,
  nor: 1,
  normal: 1,
  normally: 1,
  north: 1,
  northern: 1,
  nose: 1,
  not: 1,
  note: 1,
  nothing: 1,
  notice: 1,
  notion: 1,
  novel: 1,
  now: 1,
  nowhere: 1,
  "n't": 1,
  nuclear: 1,
  number: 1,
  numerous: 1,
  nurse: 1,
  nut: 1,
  object: 1,
  objective: 1,
  obligation: 1,
  observation: 1,
  observe: 1,
  observer: 1,
  obtain: 1,
  obvious: 1,
  obviously: 1,
  occasion: 1,
  occasionally: 1,
  occupation: 1,
  occupy: 1,
  occur: 1,
  ocean: 1,
  odd: 1,
  odds: 1,
  of: 1,
  off: 1,
  offense: 1,
  offensive: 1,
  offer: 1,
  office: 1,
  officer: 1,
  official: 1,
  often: 1,
  oh: 1,
  oil: 1,
  ok: 1,
  okay: 1,
  old: 1,
  Olympic: 1,
  on: 1,
  once: 1,
  one: 1,
  ongoing: 1,
  onion: 1,
  online: 1,
  only: 1,
  onto: 1,
  open: 1,
  opening: 1,
  operate: 1,
  operating: 1,
  operation: 1,
  operator: 1,
  opinion: 1,
  opponent: 1,
  opportunity: 1,
  oppose: 1,
  opposite: 1,
  opposition: 1,
  option: 1,
  or: 1,
  orange: 1,
  order: 1,
  ordinary: 1,
  organic: 1,
  organization: 1,
  organize: 1,
  orientation: 1,
  origin: 1,
  original: 1,
  originally: 1,
  other: 1,
  others: 1,
  otherwise: 1,
  ought: 1,
  our: 1,
  ourselves: 1,
  out: 1,
  outcome: 1,
  outside: 1,
  oven: 1,
  over: 1,
  overall: 1,
  overcome: 1,
  overlook: 1,
  owe: 1,
  own: 1,
  owner: 1,
  pace: 1,
  pack: 1,
  package: 1,
  page: 1,
  pain: 1,
  painful: 1,
  paint: 1,
  painter: 1,
  painting: 1,
  pair: 1,
  pale: 1,
  Palestinian: 1,
  palm: 1,
  pan: 1,
  panel: 1,
  pant: 1,
  paper: 1,
  parent: 1,
  park: 1,
  parking: 1,
  part: 1,
  participant: 1,
  participate: 1,
  participation: 1,
  particular: 1,
  particularly: 1,
  partly: 1,
  partner: 1,
  partnership: 1,
  party: 1,
  pass: 1,
  passage: 1,
  passenger: 1,
  passion: 1,
  past: 1,
  patch: 1,
  path: 1,
  patient: 1,
  pattern: 1,
  pause: 1,
  pay: 1,
  payment: 1,
  PC: 1,
  peace: 1,
  peak: 1,
  peer: 1,
  penalty: 1,
  people: 1,
  pepper: 1,
  per: 1,
  perceive: 1,
  percentage: 1,
  perception: 1,
  perfect: 1,
  perfectly: 1,
  perform: 1,
  performance: 1,
  perhaps: 1,
  period: 1,
  permanent: 1,
  permission: 1,
  permit: 1,
  person: 1,
  personal: 1,
  personality: 1,
  personally: 1,
  personnel: 1,
  perspective: 1,
  persuade: 1,
  pet: 1,
  phase: 1,
  phenomenon: 1,
  philosophy: 1,
  phone: 1,
  photo: 1,
  photograph: 1,
  photographer: 1,
  phrase: 1,
  physical: 1,
  physically: 1,
  physician: 1,
  piano: 1,
  pick: 1,
  picture: 1,
  pie: 1,
  piece: 1,
  pile: 1,
  pilot: 1,
  pine: 1,
  pink: 1,
  pipe: 1,
  pitch: 1,
  place: 1,
  plan: 1,
  plane: 1,
  planet: 1,
  planning: 1,
  plant: 1,
  plastic: 1,
  plate: 1,
  platform: 1,
  play: 1,
  player: 1,
  please: 1,
  pleasure: 1,
  plenty: 1,
  plot: 1,
  plus: 1,
  PM: 1,
  pocket: 1,
  poem: 1,
  poet: 1,
  poetry: 1,
  point: 1,
  pole: 1,
  police: 1,
  policy: 1,
  political: 1,
  politically: 1,
  politician: 1,
  politics: 1,
  poll: 1,
  pollution: 1,
  pool: 1,
  poor: 1,
  pop: 1,
  popular: 1,
  population: 1,
  porch: 1,
  port: 1,
  portion: 1,
  portrait: 1,
  portray: 1,
  pose: 1,
  position: 1,
  positive: 1,
  possess: 1,
  possibility: 1,
  possible: 1,
  possibly: 1,
  post: 1,
  pot: 1,
  potato: 1,
  potential: 1,
  potentially: 1,
  pound: 1,
  pour: 1,
  poverty: 1,
  powder: 1,
  power: 1,
  powerful: 1,
  practical: 1,
  practice: 1,
  pray: 1,
  prayer: 1,
  precisely: 1,
  predict: 1,
  prefer: 1,
  preference: 1,
  pregnancy: 1,
  pregnant: 1,
  preparation: 1,
  prepare: 1,
  prescription: 1,
  presence: 1,
  present: 1,
  presentation: 1,
  preserve: 1,
  president: 1,
  presidential: 1,
  press: 1,
  pressure: 1,
  pretend: 1,
  pretty: 1,
  prevent: 1,
  previous: 1,
  previously: 1,
  price: 1,
  pride: 1,
  priest: 1,
  primarily: 1,
  primary: 1,
  prime: 1,
  principal: 1,
  principle: 1,
  print: 1,
  prior: 1,
  priority: 1,
  prison: 1,
  prisoner: 1,
  privacy: 1,
  private: 1,
  probably: 1,
  problem: 1,
  procedure: 1,
  proceed: 1,
  process: 1,
  produce: 1,
  producer: 1,
  product: 1,
  production: 1,
  profession: 1,
  professional: 1,
  professor: 1,
  profile: 1,
  profit: 1,
  program: 1,
  progress: 1,
  project: 1,
  prominent: 1,
  promise: 1,
  promote: 1,
  prompt: 1,
  proof: 1,
  proper: 1,
  properly: 1,
  property: 1,
  proportion: 1,
  proposal: 1,
  propose: 1,
  proposed: 1,
  prosecutor: 1,
  prospect: 1,
  protect: 1,
  protection: 1,
  protein: 1,
  protest: 1,
  proud: 1,
  prove: 1,
  provide: 1,
  provider: 1,
  province: 1,
  provision: 1,
  psychological: 1,
  psychologist: 1,
  psychology: 1,
  public: 1,
  publication: 1,
  publicly: 1,
  publish: 1,
  publisher: 1,
  pull: 1,
  punishment: 1,
  purchase: 1,
  pure: 1,
  purpose: 1,
  pursue: 1,
  push: 1,
  put: 1
};

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon3000", function() { return TheMostCommon3000; });
// https://www.ef.com/wwen/english-resources/english-vocabulary/top-3000-words/
const TheMostCommon3000 = {
  qualify: 1,
  quality: 1,
  quarter: 1,
  quarterback: 1,
  question: 1,
  quick: 1,
  quickly: 1,
  quiet: 1,
  quietly: 1,
  quit: 1,
  quite: 1,
  quote: 1,
  race: 1,
  racial: 1,
  radical: 1,
  radio: 1,
  rail: 1,
  rain: 1,
  raise: 1,
  range: 1,
  rank: 1,
  rapid: 1,
  rapidly: 1,
  rare: 1,
  rarely: 1,
  rate: 1,
  rather: 1,
  rating: 1,
  ratio: 1,
  raw: 1,
  reach: 1,
  react: 1,
  reaction: 1,
  read: 1,
  reader: 1,
  reading: 1,
  ready: 1,
  real: 1,
  reality: 1,
  realize: 1,
  really: 1,
  reason: 1,
  reasonable: 1,
  recall: 1,
  receive: 1,
  recent: 1,
  recently: 1,
  recipe: 1,
  recognition: 1,
  recognize: 1,
  recommend: 1,
  recommendation: 1,
  record: 1,
  recording: 1,
  recover: 1,
  recovery: 1,
  recruit: 1,
  red: 1,
  reduce: 1,
  reduction: 1,
  refer: 1,
  reference: 1,
  reflect: 1,
  reflection: 1,
  reform: 1,
  refugee: 1,
  refuse: 1,
  regard: 1,
  regarding: 1,
  regardless: 1,
  regime: 1,
  region: 1,
  regional: 1,
  register: 1,
  regular: 1,
  regularly: 1,
  regulate: 1,
  regulation: 1,
  reinforce: 1,
  reject: 1,
  relate: 1,
  relation: 1,
  relationship: 1,
  relative: 1,
  relatively: 1,
  relax: 1,
  release: 1,
  relevant: 1,
  relief: 1,
  religion: 1,
  religious: 1,
  rely: 1,
  remain: 1,
  remaining: 1,
  remarkable: 1,
  remember: 1,
  remind: 1,
  remote: 1,
  remove: 1,
  repeat: 1,
  repeatedly: 1,
  replace: 1,
  reply: 1,
  report: 1,
  reporter: 1,
  represent: 1,
  representation: 1,
  representative: 1,
  Republican: 1,
  reputation: 1,
  request: 1,
  require: 1,
  requirement: 1,
  research: 1,
  researcher: 1,
  resemble: 1,
  reservation: 1,
  resident: 1,
  resist: 1,
  resistance: 1,
  resolution: 1,
  resolve: 1,
  resort: 1,
  resource: 1,
  respect: 1,
  respond: 1,
  respondent: 1,
  response: 1,
  responsibility: 1,
  responsible: 1,
  rest: 1,
  restaurant: 1,
  restore: 1,
  restriction: 1,
  result: 1,
  retain: 1,
  retire: 1,
  retirement: 1,
  return: 1,
  reveal: 1,
  revenue: 1,
  review: 1,
  revolution: 1,
  rhythm: 1,
  rice: 1,
  rich: 1,
  rid: 1,
  ride: 1,
  rifle: 1,
  right: 1,
  ring: 1,
  rise: 1,
  risk: 1,
  river: 1,
  road: 1,
  rock: 1,
  role: 1,
  roll: 1,
  romantic: 1,
  roof: 1,
  room: 1,
  root: 1,
  rope: 1,
  rose: 1,
  rough: 1,
  roughly: 1,
  round: 1,
  route: 1,
  routine: 1,
  row: 1,
  rub: 1,
  rule: 1,
  run: 1,
  running: 1,
  rural: 1,
  rush: 1,
  Russian: 1,
  sacred: 1,
  sad: 1,
  safe: 1,
  safety: 1,
  sake: 1,
  salad: 1,
  salary: 1,
  sale: 1,
  sales: 1,
  salt: 1,
  same: 1,
  sample: 1,
  sanction: 1,
  sand: 1,
  satellite: 1,
  satisfaction: 1,
  satisfy: 1,
  sauce: 1,
  save: 1,
  saving: 1,
  say: 1,
  scale: 1,
  scandal: 1,
  scared: 1,
  scenario: 1,
  scene: 1,
  schedule: 1,
  scheme: 1,
  scholar: 1,
  scholarship: 1,
  school: 1,
  science: 1,
  scientific: 1,
  scientist: 1,
  scope: 1,
  score: 1,
  scream: 1,
  screen: 1,
  script: 1,
  sea: 1,
  search: 1,
  season: 1,
  seat: 1,
  second: 1,
  secret: 1,
  secretary: 1,
  section: 1,
  sector: 1,
  secure: 1,
  security: 1,
  see: 1,
  seed: 1,
  seek: 1,
  seem: 1,
  segment: 1,
  seize: 1,
  select: 1,
  selection: 1,
  self: 1,
  sell: 1,
  Senate: 1,
  senator: 1,
  send: 1,
  senior: 1,
  sense: 1,
  sensitive: 1,
  sentence: 1,
  separate: 1,
  sequence: 1,
  series: 1,
  serious: 1,
  seriously: 1,
  serve: 1,
  service: 1,
  session: 1,
  set: 1,
  setting: 1,
  settle: 1,
  settlement: 1,
  seven: 1,
  several: 1,
  severe: 1,
  sex: 1,
  sexual: 1,
  shade: 1,
  shadow: 1,
  shake: 1,
  shall: 1,
  shape: 1,
  share: 1,
  sharp: 1,
  she: 1,
  sheet: 1,
  shelf: 1,
  shell: 1,
  shelter: 1,
  shift: 1,
  shine: 1,
  ship: 1,
  shirt: 1,
  shit: 1,
  shock: 1,
  shoe: 1,
  shoot: 1,
  shooting: 1,
  shop: 1,
  shopping: 1,
  shore: 1,
  short: 1,
  shortly: 1,
  shot: 1,
  should: 1,
  shoulder: 1,
  shout: 1,
  show: 1,
  shower: 1,
  shrug: 1,
  shut: 1,
  sick: 1,
  side: 1,
  sigh: 1,
  sight: 1,
  sign: 1,
  signal: 1,
  significance: 1,
  significant: 1,
  significantly: 1,
  silence: 1,
  silent: 1,
  silver: 1,
  similar: 1,
  similarly: 1,
  simple: 1,
  simply: 1,
  sin: 1,
  since: 1,
  sing: 1,
  singer: 1,
  single: 1,
  sink: 1,
  sir: 1,
  sister: 1,
  sit: 1,
  site: 1,
  situation: 1,
  six: 1,
  size: 1,
  ski: 1,
  skill: 1,
  skin: 1,
  sky: 1,
  slave: 1,
  sleep: 1,
  slice: 1,
  slide: 1,
  slight: 1,
  slightly: 1,
  slip: 1,
  slow: 1,
  slowly: 1,
  small: 1,
  smart: 1,
  smell: 1,
  smile: 1,
  smoke: 1,
  smooth: 1,
  snap: 1,
  snow: 1,
  so: 1,
  "so-called": 1,
  soccer: 1,
  social: 1,
  society: 1,
  soft: 1,
  software: 1,
  soil: 1,
  solar: 1,
  soldier: 1,
  solid: 1,
  solution: 1,
  solve: 1,
  some: 1,
  somebody: 1,
  somehow: 1,
  someone: 1,
  something: 1,
  sometimes: 1,
  somewhat: 1,
  somewhere: 1,
  son: 1,
  song: 1,
  soon: 1,
  sophisticated: 1,
  sorry: 1,
  sort: 1,
  soul: 1,
  sound: 1,
  soup: 1,
  source: 1,
  south: 1,
  southern: 1,
  Soviet: 1,
  space: 1,
  Spanish: 1,
  speak: 1,
  speaker: 1,
  special: 1,
  specialist: 1,
  species: 1,
  specific: 1,
  specifically: 1,
  speech: 1,
  speed: 1,
  spend: 1,
  spending: 1,
  spin: 1,
  spirit: 1,
  spiritual: 1,
  split: 1,
  spokesman: 1,
  sport: 1,
  spot: 1,
  spread: 1,
  spring: 1,
  square: 1,
  squeeze: 1,
  stability: 1,
  stable: 1,
  staff: 1,
  stage: 1,
  stair: 1,
  stake: 1,
  stand: 1,
  standard: 1,
  standing: 1,
  star: 1,
  stare: 1,
  start: 1,
  state: 1,
  statement: 1,
  station: 1,
  statistics: 1,
  status: 1,
  stay: 1,
  steady: 1,
  steal: 1,
  steel: 1,
  step: 1,
  stick: 1,
  still: 1,
  stir: 1,
  stock: 1,
  stomach: 1,
  stone: 1,
  stop: 1,
  storage: 1,
  store: 1,
  storm: 1,
  story: 1,
  straight: 1,
  strange: 1,
  stranger: 1,
  strategic: 1,
  strategy: 1,
  stream: 1,
  street: 1,
  strength: 1,
  strengthen: 1,
  stress: 1,
  stretch: 1,
  strike: 1,
  string: 1,
  strip: 1,
  stroke: 1,
  strong: 1,
  strongly: 1,
  structure: 1,
  struggle: 1,
  student: 1,
  studio: 1,
  study: 1,
  stuff: 1,
  stupid: 1,
  style: 1,
  subject: 1,
  submit: 1,
  subsequent: 1,
  substance: 1,
  substantial: 1,
  succeed: 1,
  success: 1,
  successful: 1,
  successfully: 1,
  such: 1,
  sudden: 1,
  suddenly: 1,
  sue: 1,
  suffer: 1,
  sufficient: 1,
  sugar: 1,
  suggest: 1,
  suggestion: 1,
  suicide: 1,
  suit: 1,
  summer: 1,
  summit: 1,
  sun: 1,
  super: 1,
  supply: 1,
  support: 1,
  supporter: 1,
  suppose: 1,
  supposed: 1,
  Supreme: 1,
  sure: 1,
  surely: 1,
  surface: 1,
  surgery: 1,
  surprise: 1,
  surprised: 1,
  surprising: 1,
  surprisingly: 1,
  surround: 1,
  survey: 1,
  survival: 1,
  survive: 1,
  survivor: 1,
  suspect: 1,
  sustain: 1,
  swear: 1,
  sweep: 1,
  sweet: 1,
  swim: 1,
  swing: 1,
  switch: 1,
  symbol: 1,
  symptom: 1,
  system: 1,
  table: 1,
  tablespoon: 1,
  tactic: 1,
  tail: 1,
  take: 1,
  tale: 1,
  talent: 1,
  talk: 1,
  tall: 1,
  tank: 1,
  tap: 1,
  tape: 1,
  target: 1,
  task: 1,
  taste: 1,
  tax: 1,
  taxpayer: 1,
  tea: 1,
  teach: 1,
  teacher: 1,
  teaching: 1,
  team: 1,
  tear: 1,
  teaspoon: 1,
  technical: 1,
  technique: 1,
  technology: 1,
  teen: 1,
  teenager: 1,
  telephone: 1,
  telescope: 1,
  television: 1,
  tell: 1,
  temperature: 1,
  temporary: 1,
  ten: 1,
  tend: 1,
  tendency: 1,
  tennis: 1,
  tension: 1,
  tent: 1,
  term: 1,
  terms: 1,
  terrible: 1,
  territory: 1,
  terror: 1,
  terrorism: 1,
  terrorist: 1,
  test: 1,
  testify: 1,
  testimony: 1,
  testing: 1,
  text: 1,
  than: 1,
  thank: 1,
  thanks: 1,
  that: 1,
  the: 1,
  theater: 1,
  their: 1,
  them: 1,
  theme: 1,
  themselves: 1,
  then: 1,
  theory: 1,
  therapy: 1,
  there: 1,
  therefore: 1,
  these: 1,
  they: 1,
  thick: 1,
  thin: 1,
  thing: 1,
  think: 1,
  thinking: 1,
  third: 1,
  thirty: 1,
  this: 1,
  those: 1,
  though: 1,
  thought: 1,
  thousand: 1,
  threat: 1,
  threaten: 1,
  three: 1,
  throat: 1,
  through: 1,
  throughout: 1,
  throw: 1,
  thus: 1,
  ticket: 1,
  tie: 1,
  tight: 1,
  time: 1,
  tiny: 1,
  tip: 1,
  tire: 1,
  tired: 1,
  tissue: 1,
  title: 1,
  to: 1,
  tobacco: 1,
  today: 1,
  toe: 1,
  together: 1,
  tomato: 1,
  tomorrow: 1,
  tone: 1,
  tongue: 1,
  tonight: 1,
  too: 1,
  tool: 1,
  tooth: 1,
  top: 1,
  topic: 1,
  toss: 1,
  total: 1,
  totally: 1,
  touch: 1,
  tough: 1,
  tour: 1,
  tourist: 1,
  tournament: 1,
  toward: 1,
  towards: 1,
  tower: 1,
  town: 1,
  toy: 1,
  trace: 1,
  track: 1,
  trade: 1,
  tradition: 1,
  traditional: 1,
  traffic: 1,
  tragedy: 1,
  trail: 1,
  train: 1,
  training: 1,
  transfer: 1,
  transform: 1,
  transformation: 1,
  transition: 1,
  translate: 1,
  transportation: 1,
  travel: 1,
  treat: 1,
  treatment: 1,
  treaty: 1,
  tree: 1,
  tremendous: 1,
  trend: 1,
  trial: 1,
  tribe: 1,
  trick: 1,
  trip: 1,
  troop: 1,
  trouble: 1,
  truck: 1,
  true: 1,
  truly: 1,
  trust: 1,
  truth: 1,
  try: 1,
  tube: 1,
  tunnel: 1,
  turn: 1,
  TV: 1,
  twelve: 1,
  twenty: 1,
  twice: 1,
  twin: 1,
  two: 1,
  type: 1,
  typical: 1,
  typically: 1,
  ugly: 1,
  ultimate: 1,
  ultimately: 1,
  unable: 1,
  uncle: 1,
  under: 1,
  undergo: 1,
  understand: 1,
  understanding: 1,
  unfortunately: 1,
  uniform: 1,
  union: 1,
  unique: 1,
  unit: 1,
  United: 1,
  universal: 1,
  universe: 1,
  university: 1,
  unknown: 1,
  unless: 1,
  unlike: 1,
  unlikely: 1,
  until: 1,
  unusual: 1,
  up: 1,
  upon: 1,
  upper: 1,
  urban: 1,
  urge: 1,
  us: 1,
  use: 1,
  used: 1,
  useful: 1,
  user: 1,
  usual: 1,
  usually: 1,
  utility: 1,
  vacation: 1,
  valley: 1,
  valuable: 1,
  value: 1,
  variable: 1,
  variation: 1,
  variety: 1,
  various: 1,
  vary: 1,
  vast: 1,
  vegetable: 1,
  vehicle: 1,
  venture: 1,
  version: 1,
  versus: 1,
  very: 1,
  vessel: 1,
  veteran: 1,
  via: 1,
  victim: 1,
  victory: 1,
  video: 1,
  view: 1,
  viewer: 1,
  village: 1,
  violate: 1,
  violation: 1,
  violence: 1,
  violent: 1,
  virtually: 1,
  virtue: 1,
  virus: 1,
  visible: 1,
  vision: 1,
  visit: 1,
  visitor: 1,
  visual: 1,
  vital: 1,
  voice: 1,
  volume: 1,
  volunteer: 1,
  vote: 1,
  voter: 1,
  vs: 1,
  vulnerable: 1,
  wage: 1,
  wait: 1,
  wake: 1,
  walk: 1,
  wall: 1,
  wander: 1,
  want: 1,
  war: 1,
  warm: 1,
  warn: 1,
  warning: 1,
  wash: 1,
  waste: 1,
  watch: 1,
  water: 1,
  wave: 1,
  way: 1,
  we: 1,
  weak: 1,
  wealth: 1,
  wealthy: 1,
  weapon: 1,
  wear: 1,
  weather: 1,
  wedding: 1,
  week: 1,
  weekend: 1,
  weekly: 1,
  weigh: 1,
  weight: 1,
  welcome: 1,
  welfare: 1,
  well: 1,
  west: 1,
  western: 1,
  wet: 1,
  what: 1,
  whatever: 1,
  wheel: 1,
  when: 1,
  whenever: 1,
  where: 1,
  whereas: 1,
  whether: 1,
  which: 1,
  while: 1,
  whisper: 1,
  white: 1,
  who: 1,
  whole: 1,
  whom: 1,
  whose: 1,
  why: 1,
  wide: 1,
  widely: 1,
  widespread: 1,
  wife: 1,
  wild: 1,
  will: 1,
  willing: 1,
  win: 1,
  wind: 1,
  window: 1,
  wine: 1,
  wing: 1,
  winner: 1,
  winter: 1,
  wipe: 1,
  wire: 1,
  wisdom: 1,
  wise: 1,
  wish: 1,
  with: 1,
  withdraw: 1,
  within: 1,
  without: 1,
  witness: 1,
  woman: 1,
  wonder: 1,
  wonderful: 1,
  wood: 1,
  wooden: 1,
  word: 1,
  work: 1,
  worker: 1,
  working: 1,
  works: 1,
  workshop: 1,
  world: 1,
  worried: 1,
  worry: 1,
  worth: 1,
  would: 1,
  wound: 1,
  wrap: 1,
  write: 1,
  writer: 1,
  writing: 1,
  wrong: 1,
  yard: 1,
  yeah: 1,
  year: 1,
  yell: 1,
  yellow: 1,
  yes: 1,
  yesterday: 1,
  yet: 1,
  yield: 1,
  you: 1,
  young: 1,
  your: 1,
  yours: 1,
  yourself: 1,
  youth: 1,
  zone: 1
};

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon10000", function() { return TheMostCommon10000; });
// https://englishgrammarhere.com/vocabulary/10000-most-common-words-in-english-part-5/
const TheMostCommon10000 = {
  a: 1,
  aa: 1,
  aaa: 1,
  aaron: 1,
  ab: 1,
  abandoned: 1,
  abc: 1,
  aberdeen: 1,
  abilities: 1,
  ability: 1,
  able: 1,
  aboriginal: 1,
  abortion: 1,
  about: 1,
  above: 1,
  abraham: 1,
  abroad: 1,
  abs: 1,
  absence: 1,
  absent: 1,
  absolute: 1,
  absolutely: 1,
  absorption: 1,
  abstract: 1,
  abstracts: 1,
  abu: 1,
  abuse: 1,
  ac: 1,
  academic: 1,
  academics: 1,
  academy: 1,
  acc: 1,
  accent: 1,
  accept: 1,
  acceptable: 1,
  acceptance: 1,
  accepted: 1,
  accepting: 1,
  accepts: 1,
  access: 1,
  accessed: 1,
  accessibility: 1,
  accessible: 1,
  accessing: 1,
  accessories: 1,
  accessory: 1,
  accident: 1,
  accidents: 1,
  accommodate: 1,
  accommodation: 1,
  accommodations: 1,
  accompanied: 1,
  accompanying: 1,
  accomplish: 1,
  accomplished: 1,
  accordance: 1,
  according: 1,
  accordingly: 1,
  account: 1,
  accountability: 1,
  accounting: 1,
  accounts: 1,
  accreditation: 1,
  accredited: 1,
  accuracy: 1,
  accurate: 1,
  accurately: 1,
  accused: 1,
  acdbentity: 1,
  ace: 1,
  acer: 1,
  achieve: 1,
  achieved: 1,
  achievement: 1,
  achievements: 1,
  achieving: 1,
  acid: 1,
  acids: 1,
  acknowledge: 1,
  acknowledged: 1,
  acm: 1,
  acne: 1,
  acoustic: 1,
  acquire: 1,
  acquired: 1,
  acquisition: 1,
  acquisitions: 1,
  acre: 1,
  acres: 1,
  acrobat: 1,
  across: 1,
  acrylic: 1,
  act: 1,
  acting: 1,
  action: 1,
  actions: 1,
  activated: 1,
  activation: 1,
  active: 1,
  actively: 1,
  activists: 1,
  activities: 1,
  activity: 1,
  actor: 1,
  actors: 1,
  actress: 1,
  acts: 1,
  actual: 1,
  actually: 1,
  acute: 1,
  ad: 1,
  ada: 1,
  adam: 1,
  adams: 1,
  adaptation: 1,
  adapted: 1,
  adapter: 1,
  adapters: 1,
  adaptive: 1,
  adaptor: 1,
  add: 1,
  added: 1,
  addiction: 1,
  adding: 1,
  addition: 1,
  additional: 1,
  additionally: 1,
  additions: 1,
  address: 1,
  addressed: 1,
  addresses: 1,
  addressing: 1,
  adds: 1,
  adelaide: 1,
  adequate: 1,
  adidas: 1,
  adipex: 1,
  adjacent: 1,
  adjust: 1,
  adjustable: 1,
  adjusted: 1,
  adjustment: 1,
  adjustments: 1,
  admin: 1,
  administered: 1,
  administration: 1,
  administrative: 1,
  administrator: 1,
  administrators: 1,
  admission: 1,
  admissions: 1,
  admit: 1,
  admitted: 1,
  adobe: 1,
  adolescent: 1,
  adopt: 1,
  adopted: 1,
  adoption: 1,
  adrian: 1,
  ads: 1,
  adsl: 1,
  adult: 1,
  adults: 1,
  advance: 1,
  advanced: 1,
  advancement: 1,
  advances: 1,
  advantage: 1,
  advantages: 1,
  adventure: 1,
  adventures: 1,
  adverse: 1,
  advert: 1,
  advertise: 1,
  advertisement: 1,
  advertisements: 1,
  advertiser: 1,
  advertisers: 1,
  advertising: 1,
  advice: 1,
  advise: 1,
  advised: 1,
  advisor: 1,
  advisors: 1,
  advisory: 1,
  advocacy: 1,
  advocate: 1,
  adware: 1,
  ae: 1,
  aerial: 1,
  aerospace: 1,
  af: 1,
  affair: 1,
  affairs: 1,
  affect: 1,
  affected: 1,
  affecting: 1,
  affects: 1,
  affiliate: 1,
  affiliated: 1,
  affiliates: 1,
  affiliation: 1,
  afford: 1,
  affordable: 1,
  afghanistan: 1,
  afraid: 1,
  africa: 1,
  african: 1,
  after: 1,
  afternoon: 1,
  afterwards: 1,
  ag: 1,
  again: 1,
  against: 1,
  age: 1,
  aged: 1,
  agencies: 1,
  agency: 1,
  agenda: 1,
  agent: 1,
  agents: 1,
  ages: 1,
  aggregate: 1,
  aggressive: 1,
  aging: 1,
  ago: 1,
  agree: 1,
  agreed: 1,
  agreement: 1,
  agreements: 1,
  agrees: 1,
  agricultural: 1,
  agriculture: 1,
  ah: 1,
  ahead: 1,
  ai: 1,
  aid: 1,
  aids: 1,
  aim: 1,
  aimed: 1,
  aims: 1,
  air: 1,
  aircraft: 1,
  airfare: 1,
  airline: 1,
  airlines: 1,
  airplane: 1,
  airport: 1,
  airports: 1,
  aj: 1,
  ak: 1,
  aka: 1,
  al: 1,
  ala: 1,
  alabama: 1,
  alan: 1,
  alarm: 1,
  alaska: 1,
  albania: 1,
  albany: 1,
  albert: 1,
  alberta: 1,
  album: 1,
  albums: 1,
  albuquerque: 1,
  alcohol: 1,
  alert: 1,
  alerts: 1,
  alex: 1,
  alexander: 1,
  alexandria: 1,
  alfred: 1,
  algebra: 1,
  algeria: 1,
  algorithm: 1,
  algorithms: 1,
  ali: 1,
  alias: 1,
  alice: 1,
  alien: 1,
  align: 1,
  alignment: 1,
  alike: 1,
  alive: 1,
  all: 1,
  allah: 1,
  allan: 1,
  alleged: 1,
  allen: 1,
  allergy: 1,
  alliance: 1,
  allied: 1,
  allocated: 1,
  allocation: 1,
  allow: 1,
  allowance: 1,
  allowed: 1,
  allowing: 1,
  allows: 1,
  alloy: 1,
  almost: 1,
  alone: 1,
  along: 1,
  alot: 1,
  alpha: 1,
  alphabetical: 1,
  alpine: 1,
  already: 1,
  also: 1,
  alt: 1,
  alter: 1,
  altered: 1,
  alternate: 1,
  alternative: 1,
  alternatively: 1,
  alternatives: 1,
  although: 1,
  alto: 1,
  aluminium: 1,
  aluminum: 1,
  alumni: 1,
  always: 1,
  am: 1,
  amanda: 1,
  amateur: 1,
  amazing: 1,
  amazon: 1,
  ambassador: 1,
  amber: 1,
  ambien: 1,
  ambient: 1,
  amd: 1,
  amend: 1,
  amended: 1,
  amendment: 1,
  amendments: 1,
  amenities: 1,
  america: 1,
  american: 1,
  americans: 1,
  americas: 1,
  amino: 1,
  among: 1,
  amongst: 1,
  amount: 1,
  amounts: 1,
  amp: 1,
  ampland: 1,
  amplifier: 1,
  amsterdam: 1,
  amy: 1,
  an: 1,
  ana: 1,
  anaheim: 1,
  anal: 1,
  analog: 1,
  analyses: 1,
  analysis: 1,
  analyst: 1,
  analysts: 1,
  analytical: 1,
  analyze: 1,
  analyzed: 1,
  anatomy: 1,
  anchor: 1,
  ancient: 1,
  and: 1,
  andale: 1,
  anderson: 1,
  andorra: 1,
  andrea: 1,
  andreas: 1,
  andrew: 1,
  andrews: 1,
  andy: 1,
  angel: 1,
  angela: 1,
  angeles: 1,
  angels: 1,
  anger: 1,
  angle: 1,
  angola: 1,
  angry: 1,
  animal: 1,
  animals: 1,
  animated: 1,
  animation: 1,
  anime: 1,
  ann: 1,
  anna: 1,
  anne: 1,
  annex: 1,
  annie: 1,
  anniversary: 1,
  annotated: 1,
  annotation: 1,
  announce: 1,
  announced: 1,
  announcement: 1,
  announcements: 1,
  announces: 1,
  annoying: 1,
  annual: 1,
  annually: 1,
  anonymous: 1,
  another: 1,
  answer: 1,
  answered: 1,
  answering: 1,
  answers: 1,
  ant: 1,
  antarctica: 1,
  antenna: 1,
  anthony: 1,
  anthropology: 1,
  anti: 1,
  antibodies: 1,
  antibody: 1,
  anticipated: 1,
  antigua: 1,
  antique: 1,
  antiques: 1,
  antivirus: 1,
  antonio: 1,
  anxiety: 1,
  any: 1,
  anybody: 1,
  anymore: 1,
  anyone: 1,
  anything: 1,
  anytime: 1,
  anyway: 1,
  anywhere: 1,
  aol: 1,
  ap: 1,
  apache: 1,
  apart: 1,
  apartment: 1,
  apartments: 1,
  api: 1,
  apnic: 1,
  apollo: 1,
  app: 1,
  apparatus: 1,
  apparel: 1,
  apparent: 1,
  apparently: 1,
  appeal: 1,
  appeals: 1,
  appear: 1,
  appearance: 1,
  appeared: 1,
  appearing: 1,
  appears: 1,
  appendix: 1,
  apple: 1,
  appliance: 1,
  appliances: 1,
  applicable: 1,
  applicant: 1,
  applicants: 1,
  application: 1,
  applications: 1,
  applied: 1,
  applies: 1,
  apply: 1,
  applying: 1,
  appointed: 1,
  appointment: 1,
  appointments: 1,
  appraisal: 1,
  appreciate: 1,
  appreciated: 1,
  appreciation: 1,
  approach: 1,
  approaches: 1,
  appropriate: 1,
  appropriations: 1,
  approval: 1,
  approve: 1,
  approved: 1,
  approx: 1,
  approximate: 1,
  approximately: 1,
  apps: 1,
  apr: 1,
  april: 1,
  apt: 1,
  aqua: 1,
  aquarium: 1,
  aquatic: 1,
  ar: 1,
  arab: 1,
  arabia: 1,
  arabic: 1,
  arbitrary: 1,
  arbitration: 1,
  arbor: 1,
  arc: 1,
  arcade: 1,
  arch: 1,
  architect: 1,
  architects: 1,
  architectural: 1,
  architecture: 1,
  archive: 1,
  archived: 1,
  archives: 1,
  arctic: 1,
  are: 1,
  area: 1,
  areas: 1,
  arena: 1,
  arg: 1,
  argentina: 1,
  argue: 1,
  argued: 1,
  argument: 1,
  arguments: 1,
  arise: 1,
  arising: 1,
  arizona: 1,
  arkansas: 1,
  arlington: 1,
  arm: 1,
  armed: 1,
  armenia: 1,
  armor: 1,
  arms: 1,
  armstrong: 1,
  army: 1,
  arnold: 1,
  around: 1,
  arrange: 1,
  arranged: 1,
  arrangement: 1,
  arrangements: 1,
  array: 1,
  arrest: 1,
  arrested: 1,
  arrival: 1,
  arrivals: 1,
  arrive: 1,
  arrived: 1,
  arrives: 1,
  arrow: 1,
  art: 1,
  arthritis: 1,
  arthur: 1,
  article: 1,
  articles: 1,
  artificial: 1,
  artist: 1,
  artistic: 1,
  artists: 1,
  arts: 1,
  artwork: 1,
  aruba: 1,
  as: 1,
  asbestos: 1,
  ascii: 1,
  ash: 1,
  ashley: 1,
  asia: 1,
  asian: 1,
  aside: 1,
  asin: 1,
  ask: 1,
  asked: 1,
  asking: 1,
  asks: 1,
  asn: 1,
  asp: 1,
  aspect: 1,
  aspects: 1,
  ass: 1,
  assault: 1,
  assembled: 1,
  assembly: 1,
  assess: 1,
  assessed: 1,
  assessing: 1,
  assessment: 1,
  assessments: 1,
  asset: 1,
  assets: 1,
  assign: 1,
  assigned: 1,
  assignment: 1,
  assignments: 1,
  assist: 1,
  assistance: 1,
  assistant: 1,
  assisted: 1,
  assists: 1,
  associate: 1,
  associated: 1,
  associates: 1,
  association: 1,
  associations: 1,
  assume: 1,
  assumed: 1,
  assumes: 1,
  assuming: 1,
  assumption: 1,
  assumptions: 1,
  assurance: 1,
  assure: 1,
  assured: 1,
  asthma: 1,
  astrology: 1,
  astronomy: 1,
  asus: 1,
  asylum: 1,
  at: 1,
  ata: 1,
  ate: 1,
  athens: 1,
  athletes: 1,
  athletic: 1,
  athletics: 1,
  ati: 1,
  atlanta: 1,
  atlantic: 1,
  atlas: 1,
  atm: 1,
  atmosphere: 1,
  atmospheric: 1,
  atom: 1,
  atomic: 1,
  attach: 1,
  attached: 1,
  attachment: 1,
  attachments: 1,
  attack: 1,
  attacked: 1,
  attacks: 1,
  attempt: 1,
  attempted: 1,
  attempting: 1,
  attempts: 1,
  attend: 1,
  attendance: 1,
  attended: 1,
  attending: 1,
  attention: 1,
  attitude: 1,
  attitudes: 1,
  attorney: 1,
  attorneys: 1,
  attract: 1,
  attraction: 1,
  attractions: 1,
  attractive: 1,
  attribute: 1,
  attributes: 1,
  au: 1,
  auburn: 1,
  auckland: 1,
  auction: 1,
  auctions: 1,
  aud: 1,
  audi: 1,
  audience: 1,
  audio: 1,
  audit: 1,
  auditor: 1,
  aug: 1,
  august: 1,
  aurora: 1,
  aus: 1,
  austin: 1,
  australia: 1,
  australian: 1,
  austria: 1,
  authentic: 1,
  authentication: 1,
  author: 1,
  authorities: 1,
  authority: 1,
  authorization: 1,
  authorized: 1,
  authors: 1,
  auto: 1,
  automated: 1,
  automatic: 1,
  automatically: 1,
  automation: 1,
  automobile: 1,
  automobiles: 1,
  automotive: 1,
  autos: 1,
  autumn: 1,
  av: 1,
  availability: 1,
  available: 1,
  avatar: 1,
  ave: 1,
  avenue: 1,
  average: 1,
  avg: 1,
  avi: 1,
  aviation: 1,
  avoid: 1,
  avoiding: 1,
  avon: 1,
  aw: 1,
  award: 1,
  awarded: 1,
  awards: 1,
  aware: 1,
  awareness: 1,
  away: 1,
  awesome: 1,
  awful: 1,
  axis: 1,
  aye: 1,
  az: 1,
  azerbaijan: 1,
  b: 1,
  ba: 1,
  babe: 1,
  babes: 1,
  babies: 1,
  baby: 1,
  bachelor: 1,
  back: 1,
  backed: 1,
  background: 1,
  backgrounds: 1,
  backing: 1,
  backup: 1,
  bacon: 1,
  bacteria: 1,
  bacterial: 1,
  bad: 1,
  badge: 1,
  badly: 1,
  bag: 1,
  baghdad: 1,
  bags: 1,
  bahamas: 1,
  bahrain: 1,
  bailey: 1,
  baker: 1,
  baking: 1,
  balance: 1,
  balanced: 1,
  bald: 1,
  bali: 1,
  ball: 1,
  ballet: 1,
  balloon: 1,
  ballot: 1,
  balls: 1,
  baltimore: 1,
  ban: 1,
  banana: 1,
  band: 1,
  bands: 1,
  bandwidth: 1,
  bang: 1,
  bangbus: 1,
  bangkok: 1,
  bangladesh: 1,
  bank: 1,
  banking: 1,
  bankruptcy: 1,
  banks: 1,
  banned: 1,
  banner: 1,
  banners: 1,
  baptist: 1,
  bar: 1,
  barbados: 1,
  barbara: 1,
  barbie: 1,
  barcelona: 1,
  bare: 1,
  barely: 1,
  bargain: 1,
  bargains: 1,
  barn: 1,
  barnes: 1,
  barrel: 1,
  barrier: 1,
  barriers: 1,
  barry: 1,
  bars: 1,
  base: 1,
  baseball: 1,
  based: 1,
  baseline: 1,
  basement: 1,
  basename: 1,
  bases: 1,
  basic: 1,
  basically: 1,
  basics: 1,
  basin: 1,
  basis: 1,
  basket: 1,
  basketball: 1,
  baskets: 1,
  bass: 1,
  bat: 1,
  batch: 1,
  bath: 1,
  bathroom: 1,
  bathrooms: 1,
  baths: 1,
  batman: 1,
  batteries: 1,
  battery: 1,
  battle: 1,
  battlefield: 1,
  bay: 1,
  bb: 1,
  bbc: 1,
  bbs: 1,
  bbw: 1,
  bc: 1,
  bd: 1,
  bdsm: 1,
  be: 1,
  beach: 1,
  beaches: 1,
  beads: 1,
  beam: 1,
  bean: 1,
  beans: 1,
  bear: 1,
  bearing: 1,
  bears: 1,
  beast: 1,
  beastality: 1,
  beastiality: 1,
  beat: 1,
  beatles: 1,
  beats: 1,
  beautiful: 1,
  beautifully: 1,
  beauty: 1,
  beaver: 1,
  became: 1,
  because: 1,
  become: 1,
  becomes: 1,
  becoming: 1,
  bed: 1,
  bedding: 1,
  bedford: 1,
  bedroom: 1,
  bedrooms: 1,
  beds: 1,
  bee: 1,
  beef: 1,
  been: 1,
  beer: 1,
  before: 1,
  began: 1,
  begin: 1,
  beginner: 1,
  beginners: 1,
  beginning: 1,
  begins: 1,
  begun: 1,
  behalf: 1,
  behavior: 1,
  behavioral: 1,
  behaviour: 1,
  behind: 1,
  beijing: 1,
  being: 1,
  beings: 1,
  belarus: 1,
  belfast: 1,
  belgium: 1,
  belief: 1,
  beliefs: 1,
  believe: 1,
  believed: 1,
  believes: 1,
  belize: 1,
  belkin: 1,
  bell: 1,
  belle: 1,
  belly: 1,
  belong: 1,
  belongs: 1,
  below: 1,
  belt: 1,
  belts: 1,
  ben: 1,
  bench: 1,
  benchmark: 1,
  bend: 1,
  beneath: 1,
  beneficial: 1,
  benefit: 1,
  benefits: 1,
  benjamin: 1,
  bennett: 1,
  bent: 1,
  benz: 1,
  berkeley: 1,
  berlin: 1,
  bermuda: 1,
  bernard: 1,
  berry: 1,
  beside: 1,
  besides: 1,
  best: 1,
  bestiality: 1,
  bestsellers: 1,
  bet: 1,
  beta: 1,
  beth: 1,
  better: 1,
  betting: 1,
  betty: 1,
  between: 1,
  beverage: 1,
  beverages: 1,
  beverly: 1,
  beyond: 1,
  bg: 1,
  bhutan: 1,
  bi: 1,
  bias: 1,
  bible: 1,
  biblical: 1,
  bibliographic: 1,
  bibliography: 1,
  bicycle: 1,
  bid: 1,
  bidder: 1,
  bidding: 1,
  bids: 1,
  big: 1,
  bigger: 1,
  biggest: 1,
  bike: 1,
  bikes: 1,
  bikini: 1,
  bill: 1,
  billing: 1,
  billion: 1,
  bills: 1,
  billy: 1,
  bin: 1,
  binary: 1,
  bind: 1,
  binding: 1,
  bingo: 1,
  bio: 1,
  biodiversity: 1,
  biographies: 1,
  biography: 1,
  biol: 1,
  biological: 1,
  biology: 1,
  bios: 1,
  biotechnology: 1,
  bird: 1,
  birds: 1,
  birmingham: 1,
  birth: 1,
  birthday: 1,
  bishop: 1,
  bit: 1,
  bitch: 1,
  bite: 1,
  bits: 1,
  biz: 1,
  bizarre: 1,
  bizrate: 1,
  bk: 1,
  bl: 1,
  black: 1,
  blackberry: 1,
  blackjack: 1,
  blacks: 1,
  blade: 1,
  blades: 1,
  blah: 1,
  blair: 1,
  blake: 1,
  blame: 1,
  blank: 1,
  blanket: 1,
  blast: 1,
  bleeding: 1,
  blend: 1,
  bless: 1,
  blessed: 1,
  blind: 1,
  blink: 1,
  block: 1,
  blocked: 1,
  blocking: 1,
  blocks: 1,
  blog: 1,
  blogger: 1,
  bloggers: 1,
  blogging: 1,
  blogs: 1,
  blond: 1,
  blonde: 1,
  blood: 1,
  bloody: 1,
  bloom: 1,
  bloomberg: 1,
  blow: 1,
  blowing: 1,
  blowjob: 1,
  blowjobs: 1,
  blue: 1,
  blues: 1,
  bluetooth: 1,
  blvd: 1,
  bm: 1,
  bmw: 1,
  bo: 1,
  board: 1,
  boards: 1,
  boat: 1,
  boating: 1,
  boats: 1,
  bob: 1,
  bobby: 1,
  boc: 1,
  bodies: 1,
  body: 1,
  bold: 1,
  bolivia: 1,
  bolt: 1,
  bomb: 1,
  bon: 1,
  bond: 1,
  bondage: 1,
  bonds: 1,
  bone: 1,
  bones: 1,
  bonus: 1,
  boob: 1,
  boobs: 1,
  book: 1,
  booking: 1,
  bookings: 1,
  bookmark: 1,
  bookmarks: 1,
  books: 1,
  bookstore: 1,
  bool: 1,
  boolean: 1,
  boom: 1,
  boost: 1,
  boot: 1,
  booth: 1,
  boots: 1,
  booty: 1,
  border: 1,
  borders: 1,
  bored: 1,
  boring: 1,
  born: 1,
  borough: 1,
  bosnia: 1,
  boss: 1,
  boston: 1,
  both: 1,
  bother: 1,
  botswana: 1,
  bottle: 1,
  bottles: 1,
  bottom: 1,
  bought: 1,
  boulder: 1,
  boulevard: 1,
  bound: 1,
  boundaries: 1,
  boundary: 1,
  bouquet: 1,
  boutique: 1,
  bow: 1,
  bowl: 1,
  bowling: 1,
  box: 1,
  boxed: 1,
  boxes: 1,
  boxing: 1,
  boy: 1,
  boys: 1,
  bp: 1,
  br: 1,
  bra: 1,
  bracelet: 1,
  bracelets: 1,
  bracket: 1,
  brad: 1,
  bradford: 1,
  bradley: 1,
  brain: 1,
  brake: 1,
  brakes: 1,
  branch: 1,
  branches: 1,
  brand: 1,
  brandon: 1,
  brands: 1,
  bras: 1,
  brass: 1,
  brave: 1,
  brazil: 1,
  brazilian: 1,
  breach: 1,
  bread: 1,
  break: 1,
  breakdown: 1,
  breakfast: 1,
  breaking: 1,
  breaks: 1,
  breast: 1,
  breasts: 1,
  breath: 1,
  breathing: 1,
  breed: 1,
  breeding: 1,
  breeds: 1,
  brian: 1,
  brick: 1,
  bridal: 1,
  bride: 1,
  bridge: 1,
  bridges: 1,
  brief: 1,
  briefing: 1,
  briefly: 1,
  briefs: 1,
  bright: 1,
  brighton: 1,
  brilliant: 1,
  bring: 1,
  bringing: 1,
  brings: 1,
  brisbane: 1,
  bristol: 1,
  britain: 1,
  britannica: 1,
  british: 1,
  britney: 1,
  broad: 1,
  broadband: 1,
  broadcast: 1,
  broadcasting: 1,
  broader: 1,
  broadway: 1,
  brochure: 1,
  brochures: 1,
  broke: 1,
  broken: 1,
  broker: 1,
  brokers: 1,
  bronze: 1,
  brook: 1,
  brooklyn: 1,
  brooks: 1,
  brother: 1,
  brothers: 1,
  brought: 1,
  brown: 1,
  browse: 1,
  browser: 1,
  browsers: 1,
  browsing: 1,
  bruce: 1,
  brunei: 1,
  brunette: 1,
  brunswick: 1,
  brush: 1,
  brussels: 1,
  brutal: 1,
  bryan: 1,
  bryant: 1,
  bs: 1,
  bt: 1,
  bubble: 1,
  buck: 1,
  bucks: 1,
  budapest: 1,
  buddy: 1,
  budget: 1,
  budgets: 1,
  buf: 1,
  buffalo: 1,
  buffer: 1,
  bufing: 1,
  bug: 1,
  bugs: 1,
  build: 1,
  builder: 1,
  builders: 1,
  building: 1,
  buildings: 1,
  builds: 1,
  built: 1,
  bukkake: 1,
  bulgaria: 1,
  bulgarian: 1,
  bulk: 1,
  bull: 1,
  bullet: 1,
  bulletin: 1,
  bumper: 1,
  bunch: 1,
  bundle: 1,
  bunny: 1,
  burden: 1,
  bureau: 1,
  buried: 1,
  burke: 1,
  burlington: 1,
  burn: 1,
  burner: 1,
  burning: 1,
  burns: 1,
  burst: 1,
  burton: 1,
  bus: 1,
  buses: 1,
  bush: 1,
  business: 1,
  businesses: 1,
  busty: 1,
  busy: 1,
  but: 1,
  butler: 1,
  butt: 1,
  butter: 1,
  butterfly: 1,
  button: 1,
  buttons: 1,
  butts: 1,
  buy: 1,
  buyer: 1,
  buyers: 1,
  buying: 1,
  buys: 1,
  buzz: 1,
  bw: 1,
  by: 1,
  bye: 1,
  byte: 1,
  bytes: 1,
  c: 1,
  ca: 1,
  cab: 1,
  cabin: 1,
  cabinet: 1,
  cabinets: 1,
  cable: 1,
  cables: 1,
  cache: 1,
  cached: 1,
  cad: 1,
  cadillac: 1,
  cafe: 1,
  cage: 1,
  cake: 1,
  cakes: 1,
  cal: 1,
  calcium: 1,
  calculate: 1,
  calculated: 1,
  calculation: 1,
  calculations: 1,
  calculator: 1,
  calculators: 1,
  calendar: 1,
  calendars: 1,
  calgary: 1,
  calibration: 1,
  california: 1,
  call: 1,
  called: 1,
  calling: 1,
  calls: 1,
  calm: 1,
  calvin: 1,
  cam: 1,
  cambodia: 1,
  cambridge: 1,
  camcorder: 1,
  camcorders: 1,
  came: 1,
  camel: 1,
  camera: 1,
  cameras: 1,
  cameron: 1,
  cameroon: 1,
  camp: 1,
  campaign: 1,
  campaigns: 1,
  campbell: 1,
  camping: 1,
  camps: 1,
  campus: 1,
  cams: 1,
  can: 1,
  canada: 1,
  canadian: 1,
  canal: 1,
  canberra: 1,
  cancel: 1,
  cancellation: 1,
  cancelled: 1,
  cancer: 1,
  candidate: 1,
  candidates: 1,
  candle: 1,
  candles: 1,
  candy: 1,
  cannon: 1,
  canon: 1,
  cant: 1,
  canvas: 1,
  canyon: 1,
  cap: 1,
  capabilities: 1,
  capability: 1,
  capable: 1,
  capacity: 1,
  cape: 1,
  capital: 1,
  capitol: 1,
  caps: 1,
  captain: 1,
  capture: 1,
  captured: 1,
  car: 1,
  carb: 1,
  carbon: 1,
  card: 1,
  cardiac: 1,
  cardiff: 1,
  cardiovascular: 1,
  cards: 1,
  care: 1,
  career: 1,
  careers: 1,
  careful: 1,
  carefully: 1,
  carey: 1,
  cargo: 1,
  caribbean: 1,
  caring: 1,
  carl: 1,
  carlo: 1,
  carlos: 1,
  carmen: 1,
  carnival: 1,
  carol: 1,
  carolina: 1,
  caroline: 1,
  carpet: 1,
  carried: 1,
  carrier: 1,
  carriers: 1,
  carries: 1,
  carroll: 1,
  carry: 1,
  carrying: 1,
  cars: 1,
  cart: 1,
  carter: 1,
  cartoon: 1,
  cartoons: 1,
  cartridge: 1,
  cartridges: 1,
  cas: 1,
  casa: 1,
  case: 1,
  cases: 1,
  casey: 1,
  cash: 1,
  cashiers: 1,
  casino: 1,
  casinos: 1,
  casio: 1,
  cassette: 1,
  cast: 1,
  casting: 1,
  castle: 1,
  casual: 1,
  cat: 1,
  catalog: 1,
  catalogs: 1,
  catalogue: 1,
  catalyst: 1,
  catch: 1,
  categories: 1,
  category: 1,
  catering: 1,
  cathedral: 1,
  catherine: 1,
  catholic: 1,
  cats: 1,
  cattle: 1,
  caught: 1,
  cause: 1,
  caused: 1,
  causes: 1,
  causing: 1,
  caution: 1,
  cave: 1,
  cayman: 1,
  cb: 1,
  cbs: 1,
  cc: 1,
  ccd: 1,
  cd: 1,
  cdna: 1,
  cds: 1,
  cdt: 1,
  ce: 1,
  cedar: 1,
  ceiling: 1,
  celebrate: 1,
  celebration: 1,
  celebrities: 1,
  celebrity: 1,
  celebs: 1,
  cell: 1,
  cells: 1,
  cellular: 1,
  celtic: 1,
  cement: 1,
  cemetery: 1,
  census: 1,
  cent: 1,
  center: 1,
  centered: 1,
  centers: 1,
  central: 1,
  centre: 1,
  centres: 1,
  cents: 1,
  centuries: 1,
  century: 1,
  ceo: 1,
  ceramic: 1,
  ceremony: 1,
  certain: 1,
  certainly: 1,
  certificate: 1,
  certificates: 1,
  certification: 1,
  certified: 1,
  cet: 1,
  cf: 1,
  cfr: 1,
  cg: 1,
  cgi: 1,
  ch: 1,
  chad: 1,
  chain: 1,
  chains: 1,
  chair: 1,
  chairman: 1,
  chairs: 1,
  challenge: 1,
  challenged: 1,
  challenges: 1,
  challenging: 1,
  chamber: 1,
  chambers: 1,
  champagne: 1,
  champion: 1,
  champions: 1,
  championship: 1,
  championships: 1,
  chan: 1,
  chance: 1,
  chancellor: 1,
  chances: 1,
  change: 1,
  changed: 1,
  changelog: 1,
  changes: 1,
  changing: 1,
  channel: 1,
  channels: 1,
  chaos: 1,
  chapel: 1,
  chapter: 1,
  chapters: 1,
  char: 1,
  character: 1,
  characteristic: 1,
  characteristics: 1,
  characterization: 1,
  characterized: 1,
  characters: 1,
  charge: 1,
  charged: 1,
  charger: 1,
  chargers: 1,
  charges: 1,
  charging: 1,
  charitable: 1,
  charity: 1,
  charles: 1,
  charleston: 1,
  charlie: 1,
  charlotte: 1,
  charm: 1,
  charming: 1,
  charms: 1,
  chart: 1,
  charter: 1,
  charts: 1,
  chase: 1,
  chassis: 1,
  chat: 1,
  cheap: 1,
  cheaper: 1,
  cheapest: 1,
  cheat: 1,
  cheats: 1,
  check: 1,
  checked: 1,
  checking: 1,
  checklist: 1,
  checkout: 1,
  checks: 1,
  cheers: 1,
  cheese: 1,
  chef: 1,
  chelsea: 1,
  chem: 1,
  chemical: 1,
  chemicals: 1,
  chemistry: 1,
  chen: 1,
  cheque: 1,
  cherry: 1,
  chess: 1,
  chest: 1,
  chester: 1,
  chevrolet: 1,
  chevy: 1,
  chi: 1,
  chicago: 1,
  chick: 1,
  chicken: 1,
  chicks: 1,
  chief: 1,
  child: 1,
  childhood: 1,
  children: 1,
  childrens: 1,
  chile: 1,
  china: 1,
  chinese: 1,
  chip: 1,
  chips: 1,
  cho: 1,
  chocolate: 1,
  choice: 1,
  choices: 1,
  choir: 1,
  cholesterol: 1,
  choose: 1,
  choosing: 1,
  chorus: 1,
  chose: 1,
  chosen: 1,
  chris: 1,
  christ: 1,
  christian: 1,
  christianity: 1,
  christians: 1,
  christina: 1,
  christine: 1,
  christmas: 1,
  christopher: 1,
  chrome: 1,
  chronic: 1,
  chronicle: 1,
  chronicles: 1,
  chrysler: 1,
  chubby: 1,
  chuck: 1,
  church: 1,
  churches: 1,
  ci: 1,
  cia: 1,
  cialis: 1,
  ciao: 1,
  cigarette: 1,
  cigarettes: 1,
  cincinnati: 1,
  cindy: 1,
  cinema: 1,
  cingular: 1,
  cio: 1,
  cir: 1,
  circle: 1,
  circles: 1,
  circuit: 1,
  circuits: 1,
  circular: 1,
  circulation: 1,
  circumstances: 1,
  circus: 1,
  cisco: 1,
  citation: 1,
  citations: 1,
  cite: 1,
  cited: 1,
  cities: 1,
  citizen: 1,
  citizens: 1,
  citizenship: 1,
  city: 1,
  citysearch: 1,
  civic: 1,
  civil: 1,
  civilian: 1,
  civilization: 1,
  cj: 1,
  cl: 1,
  claim: 1,
  claimed: 1,
  claims: 1,
  claire: 1,
  clan: 1,
  clara: 1,
  clarity: 1,
  clark: 1,
  clarke: 1,
  class: 1,
  classes: 1,
  classic: 1,
  classical: 1,
  classics: 1,
  classification: 1,
  classified: 1,
  classifieds: 1,
  classroom: 1,
  clause: 1,
  clay: 1,
  clean: 1,
  cleaner: 1,
  cleaners: 1,
  cleaning: 1,
  cleanup: 1,
  clear: 1,
  clearance: 1,
  cleared: 1,
  clearing: 1,
  clearly: 1,
  clerk: 1,
  cleveland: 1,
  click: 1,
  clicking: 1,
  clicks: 1,
  client: 1,
  clients: 1,
  cliff: 1,
  climate: 1,
  climb: 1,
  climbing: 1,
  clinic: 1,
  clinical: 1,
  clinics: 1,
  clinton: 1,
  clip: 1,
  clips: 1,
  clock: 1,
  clocks: 1,
  clone: 1,
  close: 1,
  closed: 1,
  closely: 1,
  closer: 1,
  closes: 1,
  closest: 1,
  closing: 1,
  closure: 1,
  cloth: 1,
  clothes: 1,
  clothing: 1,
  cloud: 1,
  clouds: 1,
  cloudy: 1,
  club: 1,
  clubs: 1,
  cluster: 1,
  clusters: 1,
  cm: 1,
  cms: 1,
  cn: 1,
  cnet: 1,
  cnn: 1,
  co: 1,
  coach: 1,
  coaches: 1,
  coaching: 1,
  coal: 1,
  coalition: 1,
  coast: 1,
  coastal: 1,
  coat: 1,
  coated: 1,
  coating: 1,
  cock: 1,
  cocks: 1,
  cocktail: 1,
  cod: 1,
  code: 1,
  codes: 1,
  coding: 1,
  coffee: 1,
  cognitive: 1,
  cohen: 1,
  coin: 1,
  coins: 1,
  col: 1,
  cold: 1,
  cole: 1,
  coleman: 1,
  colin: 1,
  collaboration: 1,
  collaborative: 1,
  collapse: 1,
  collar: 1,
  colleague: 1,
  colleagues: 1,
  collect: 1,
  collectables: 1,
  collected: 1,
  collectible: 1,
  collectibles: 1,
  collecting: 1,
  collection: 1,
  collections: 1,
  collective: 1,
  collector: 1,
  collectors: 1,
  college: 1,
  colleges: 1,
  collins: 1,
  cologne: 1,
  colombia: 1,
  colon: 1,
  colonial: 1,
  colony: 1,
  color: 1,
  colorado: 1,
  colored: 1,
  colors: 1,
  colour: 1,
  colours: 1,
  columbia: 1,
  columbus: 1,
  column: 1,
  columnists: 1,
  columns: 1,
  com: 1,
  combat: 1,
  combination: 1,
  combinations: 1,
  combine: 1,
  combined: 1,
  combines: 1,
  combining: 1,
  combo: 1,
  come: 1,
  comedy: 1,
  comes: 1,
  comfort: 1,
  comfortable: 1,
  comic: 1,
  comics: 1,
  coming: 1,
  comm: 1,
  command: 1,
  commander: 1,
  commands: 1,
  comment: 1,
  commentary: 1,
  commented: 1,
  comments: 1,
  commerce: 1,
  commercial: 1,
  commission: 1,
  commissioner: 1,
  commissioners: 1,
  commissions: 1,
  commit: 1,
  commitment: 1,
  commitments: 1,
  committed: 1,
  committee: 1,
  committees: 1,
  commodities: 1,
  commodity: 1,
  common: 1,
  commonly: 1,
  commons: 1,
  commonwealth: 1,
  communicate: 1,
  communication: 1,
  communications: 1,
  communist: 1,
  communities: 1,
  community: 1,
  comp: 1,
  compact: 1,
  companies: 1,
  companion: 1,
  company: 1,
  compaq: 1,
  comparable: 1,
  comparative: 1,
  compare: 1,
  compared: 1,
  comparing: 1,
  comparison: 1,
  comparisons: 1,
  compatibility: 1,
  compatible: 1,
  compensation: 1,
  compete: 1,
  competent: 1,
  competing: 1,
  competition: 1,
  competitions: 1,
  competitive: 1,
  competitors: 1,
  compilation: 1,
  compile: 1,
  compiled: 1,
  compiler: 1,
  complaint: 1,
  complaints: 1,
  complement: 1,
  complete: 1,
  completed: 1,
  completely: 1,
  completing: 1,
  completion: 1,
  complex: 1,
  complexity: 1,
  compliance: 1,
  compliant: 1,
  complicated: 1,
  complications: 1,
  complimentary: 1,
  comply: 1,
  component: 1,
  components: 1,
  composed: 1,
  composer: 1,
  composite: 1,
  composition: 1,
  compound: 1,
  compounds: 1,
  comprehensive: 1,
  compressed: 1,
  compression: 1,
  compromise: 1,
  computation: 1,
  computational: 1,
  compute: 1,
  computed: 1,
  computer: 1,
  computers: 1,
  computing: 1,
  con: 1,
  concentrate: 1,
  concentration: 1,
  concentrations: 1,
  concept: 1,
  concepts: 1,
  conceptual: 1,
  concern: 1,
  concerned: 1,
  concerning: 1,
  concerns: 1,
  concert: 1,
  concerts: 1,
  conclude: 1,
  concluded: 1,
  conclusion: 1,
  conclusions: 1,
  concord: 1,
  concrete: 1,
  condition: 1,
  conditional: 1,
  conditioning: 1,
  conditions: 1,
  condo: 1,
  condos: 1,
  conduct: 1,
  conducted: 1,
  conducting: 1,
  conf: 1,
  conference: 1,
  conferences: 1,
  conferencing: 1,
  confidence: 1,
  confident: 1,
  confidential: 1,
  confidentiality: 1,
  config: 1,
  configuration: 1,
  configurations: 1,
  configure: 1,
  configured: 1,
  configuring: 1,
  confirm: 1,
  confirmation: 1,
  confirmed: 1,
  conflict: 1,
  conflicts: 1,
  confused: 1,
  confusion: 1,
  congo: 1,
  congratulations: 1,
  congress: 1,
  congressional: 1,
  conjunction: 1,
  connect: 1,
  connected: 1,
  connecticut: 1,
  connecting: 1,
  connection: 1,
  connections: 1,
  connectivity: 1,
  connector: 1,
  connectors: 1,
  cons: 1,
  conscious: 1,
  consciousness: 1,
  consecutive: 1,
  consensus: 1,
  consent: 1,
  consequence: 1,
  consequences: 1,
  consequently: 1,
  conservation: 1,
  conservative: 1,
  consider: 1,
  considerable: 1,
  consideration: 1,
  considerations: 1,
  considered: 1,
  considering: 1,
  considers: 1,
  consist: 1,
  consistency: 1,
  consistent: 1,
  consistently: 1,
  consisting: 1,
  consists: 1,
  console: 1,
  consoles: 1,
  consolidated: 1,
  consolidation: 1,
  consortium: 1,
  conspiracy: 1,
  const: 1,
  constant: 1,
  constantly: 1,
  constitute: 1,
  constitutes: 1,
  constitution: 1,
  constitutional: 1,
  constraint: 1,
  constraints: 1,
  construct: 1,
  constructed: 1,
  construction: 1,
  consult: 1,
  consultancy: 1,
  consultant: 1,
  consultants: 1,
  consultation: 1,
  consulting: 1,
  consumer: 1,
  consumers: 1,
  consumption: 1,
  contact: 1,
  contacted: 1,
  contacting: 1,
  contacts: 1,
  contain: 1,
  contained: 1,
  container: 1,
  containers: 1,
  containing: 1,
  contains: 1,
  contamination: 1,
  contemporary: 1,
  content: 1,
  contents: 1,
  contest: 1,
  contests: 1,
  context: 1,
  continent: 1,
  continental: 1,
  continually: 1,
  continue: 1,
  continued: 1,
  continues: 1,
  continuing: 1,
  continuity: 1,
  continuous: 1,
  continuously: 1,
  contract: 1,
  contracting: 1,
  contractor: 1,
  contractors: 1,
  contracts: 1,
  contrary: 1,
  contrast: 1,
  contribute: 1,
  contributed: 1,
  contributing: 1,
  contribution: 1,
  contributions: 1,
  contributor: 1,
  contributors: 1,
  control: 1,
  controlled: 1,
  controller: 1,
  controllers: 1,
  controlling: 1,
  controls: 1,
  controversial: 1,
  controversy: 1,
  convenience: 1,
  convenient: 1,
  convention: 1,
  conventional: 1,
  conventions: 1,
  convergence: 1,
  conversation: 1,
  conversations: 1,
  conversion: 1,
  convert: 1,
  converted: 1,
  converter: 1,
  convertible: 1,
  convicted: 1,
  conviction: 1,
  convinced: 1,
  cook: 1,
  cookbook: 1,
  cooked: 1,
  cookie: 1,
  cookies: 1,
  cooking: 1,
  cool: 1,
  cooler: 1,
  cooling: 1,
  cooper: 1,
  cooperation: 1,
  cooperative: 1,
  coordinate: 1,
  coordinated: 1,
  coordinates: 1,
  coordination: 1,
  coordinator: 1,
  cop: 1,
  cope: 1,
  copied: 1,
  copies: 1,
  copper: 1,
  copy: 1,
  copying: 1,
  copyright: 1,
  copyrighted: 1,
  copyrights: 1,
  coral: 1,
  cord: 1,
  cordless: 1,
  core: 1,
  cork: 1,
  corn: 1,
  cornell: 1,
  corner: 1,
  corners: 1,
  cornwall: 1,
  corp: 1,
  corporate: 1,
  corporation: 1,
  corporations: 1,
  corps: 1,
  corpus: 1,
  correct: 1,
  corrected: 1,
  correction: 1,
  corrections: 1,
  correctly: 1,
  correlation: 1,
  correspondence: 1,
  corresponding: 1,
  corruption: 1,
  cos: 1,
  cosmetic: 1,
  cosmetics: 1,
  cost: 1,
  costa: 1,
  costs: 1,
  costume: 1,
  costumes: 1,
  cottage: 1,
  cottages: 1,
  cotton: 1,
  could: 1,
  council: 1,
  councils: 1,
  counsel: 1,
  counseling: 1,
  count: 1,
  counted: 1,
  counter: 1,
  counters: 1,
  counties: 1,
  counting: 1,
  countries: 1,
  country: 1,
  counts: 1,
  county: 1,
  couple: 1,
  coupled: 1,
  couples: 1,
  coupon: 1,
  coupons: 1,
  courage: 1,
  courier: 1,
  course: 1,
  courses: 1,
  court: 1,
  courtesy: 1,
  courts: 1,
  cove: 1,
  cover: 1,
  coverage: 1,
  covered: 1,
  covering: 1,
  covers: 1,
  cow: 1,
  cowboy: 1,
  cox: 1,
  cp: 1,
  cpu: 1,
  cr: 1,
  crack: 1,
  cradle: 1,
  craft: 1,
  crafts: 1,
  craig: 1,
  crap: 1,
  craps: 1,
  crash: 1,
  crawford: 1,
  crazy: 1,
  cream: 1,
  create: 1,
  created: 1,
  creates: 1,
  creating: 1,
  creation: 1,
  creations: 1,
  creative: 1,
  creativity: 1,
  creator: 1,
  creature: 1,
  creatures: 1,
  credit: 1,
  credits: 1,
  creek: 1,
  crest: 1,
  crew: 1,
  cricket: 1,
  crime: 1,
  crimes: 1,
  criminal: 1,
  crisis: 1,
  criteria: 1,
  criterion: 1,
  critical: 1,
  criticism: 1,
  critics: 1,
  crm: 1,
  croatia: 1,
  crop: 1,
  crops: 1,
  cross: 1,
  crossing: 1,
  crossword: 1,
  crowd: 1,
  crown: 1,
  crucial: 1,
  crude: 1,
  cruise: 1,
  cruises: 1,
  cruz: 1,
  cry: 1,
  crystal: 1,
  cs: 1,
  css: 1,
  cst: 1,
  ct: 1,
  ctrl: 1,
  cu: 1,
  cuba: 1,
  cube: 1,
  cubic: 1,
  cuisine: 1,
  cult: 1,
  cultural: 1,
  culture: 1,
  cultures: 1,
  cum: 1,
  cumshot: 1,
  cumshots: 1,
  cumulative: 1,
  cunt: 1,
  cup: 1,
  cups: 1,
  cure: 1,
  curious: 1,
  currencies: 1,
  currency: 1,
  current: 1,
  currently: 1,
  curriculum: 1,
  cursor: 1,
  curtis: 1,
  curve: 1,
  curves: 1,
  custody: 1,
  custom: 1,
  customer: 1,
  customers: 1,
  customise: 1,
  customize: 1,
  customized: 1,
  customs: 1,
  cut: 1,
  cute: 1,
  cuts: 1,
  cutting: 1,
  cv: 1,
  cvs: 1,
  cw: 1,
  cyber: 1,
  cycle: 1,
  cycles: 1,
  cycling: 1,
  cylinder: 1,
  cyprus: 1,
  cz: 1,
  czech: 1
};

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon10000", function() { return TheMostCommon10000; });
// https://englishgrammarhere.com/vocabulary/10000-most-common-words-in-english-part-5/
const TheMostCommon10000 = {
  d: 1,
  da: 1,
  dad: 1,
  daddy: 1,
  daily: 1,
  dairy: 1,
  daisy: 1,
  dakota: 1,
  dale: 1,
  dallas: 1,
  dam: 1,
  damage: 1,
  damaged: 1,
  damages: 1,
  dame: 1,
  damn: 1,
  dan: 1,
  dana: 1,
  dance: 1,
  dancing: 1,
  danger: 1,
  dangerous: 1,
  daniel: 1,
  danish: 1,
  danny: 1,
  dans: 1,
  dare: 1,
  dark: 1,
  darkness: 1,
  darwin: 1,
  das: 1,
  dash: 1,
  dat: 1,
  data: 1,
  database: 1,
  databases: 1,
  date: 1,
  dated: 1,
  dates: 1,
  dating: 1,
  daughter: 1,
  daughters: 1,
  dave: 1,
  david: 1,
  davidson: 1,
  davis: 1,
  dawn: 1,
  day: 1,
  days: 1,
  dayton: 1,
  db: 1,
  dc: 1,
  dd: 1,
  ddr: 1,
  de: 1,
  dead: 1,
  deadline: 1,
  deadly: 1,
  deaf: 1,
  deal: 1,
  dealer: 1,
  dealers: 1,
  dealing: 1,
  deals: 1,
  dealt: 1,
  dealtime: 1,
  dean: 1,
  dear: 1,
  death: 1,
  deaths: 1,
  debate: 1,
  debian: 1,
  deborah: 1,
  debt: 1,
  debug: 1,
  debut: 1,
  dec: 1,
  decade: 1,
  decades: 1,
  december: 1,
  decent: 1,
  decide: 1,
  decided: 1,
  decimal: 1,
  decision: 1,
  decisions: 1,
  deck: 1,
  declaration: 1,
  declare: 1,
  declared: 1,
  decline: 1,
  declined: 1,
  decor: 1,
  decorating: 1,
  decorative: 1,
  decrease: 1,
  decreased: 1,
  dedicated: 1,
  dee: 1,
  deemed: 1,
  deep: 1,
  deeper: 1,
  deeply: 1,
  deer: 1,
  def: 1,
  default: 1,
  defeat: 1,
  defects: 1,
  defence: 1,
  defend: 1,
  defendant: 1,
  defense: 1,
  defensive: 1,
  deferred: 1,
  deficit: 1,
  define: 1,
  defined: 1,
  defines: 1,
  defining: 1,
  definitely: 1,
  definition: 1,
  definitions: 1,
  degree: 1,
  degrees: 1,
  del: 1,
  delaware: 1,
  delay: 1,
  delayed: 1,
  delays: 1,
  delegation: 1,
  delete: 1,
  deleted: 1,
  delhi: 1,
  delicious: 1,
  delight: 1,
  deliver: 1,
  delivered: 1,
  delivering: 1,
  delivers: 1,
  delivery: 1,
  dell: 1,
  delta: 1,
  deluxe: 1,
  dem: 1,
  demand: 1,
  demanding: 1,
  demands: 1,
  demo: 1,
  democracy: 1,
  democrat: 1,
  democratic: 1,
  democrats: 1,
  demographic: 1,
  demonstrate: 1,
  demonstrated: 1,
  demonstrates: 1,
  demonstration: 1,
  den: 1,
  denial: 1,
  denied: 1,
  denmark: 1,
  dennis: 1,
  dense: 1,
  density: 1,
  dental: 1,
  dentists: 1,
  denver: 1,
  deny: 1,
  department: 1,
  departmental: 1,
  departments: 1,
  departure: 1,
  depend: 1,
  dependence: 1,
  dependent: 1,
  depending: 1,
  depends: 1,
  deployment: 1,
  deposit: 1,
  deposits: 1,
  depot: 1,
  depression: 1,
  dept: 1,
  depth: 1,
  deputy: 1,
  der: 1,
  derby: 1,
  derek: 1,
  derived: 1,
  des: 1,
  descending: 1,
  describe: 1,
  described: 1,
  describes: 1,
  describing: 1,
  description: 1,
  descriptions: 1,
  desert: 1,
  deserve: 1,
  design: 1,
  designated: 1,
  designation: 1,
  designed: 1,
  designer: 1,
  designers: 1,
  designing: 1,
  designs: 1,
  desirable: 1,
  desire: 1,
  desired: 1,
  desk: 1,
  desktop: 1,
  desktops: 1,
  desperate: 1,
  despite: 1,
  destination: 1,
  destinations: 1,
  destiny: 1,
  destroy: 1,
  destroyed: 1,
  destruction: 1,
  detail: 1,
  detailed: 1,
  details: 1,
  detect: 1,
  detected: 1,
  detection: 1,
  detective: 1,
  detector: 1,
  determination: 1,
  determine: 1,
  determined: 1,
  determines: 1,
  determining: 1,
  detroit: 1,
  deutsch: 1,
  deutsche: 1,
  deutschland: 1,
  dev: 1,
  devel: 1,
  develop: 1,
  developed: 1,
  developer: 1,
  developers: 1,
  developing: 1,
  development: 1,
  developmental: 1,
  developments: 1,
  develops: 1,
  deviant: 1,
  deviation: 1,
  device: 1,
  devices: 1,
  devil: 1,
  devon: 1,
  devoted: 1,
  df: 1,
  dg: 1,
  dh: 1,
  di: 1,
  diabetes: 1,
  diagnosis: 1,
  diagnostic: 1,
  diagram: 1,
  dial: 1,
  dialog: 1,
  dialogue: 1,
  diameter: 1,
  diamond: 1,
  diamonds: 1,
  diana: 1,
  diane: 1,
  diary: 1,
  dice: 1,
  dick: 1,
  dicke: 1,
  dicks: 1,
  dictionaries: 1,
  dictionary: 1,
  did: 1,
  die: 1,
  died: 1,
  diego: 1,
  dies: 1,
  diesel: 1,
  diet: 1,
  dietary: 1,
  diff: 1,
  differ: 1,
  difference: 1,
  differences: 1,
  different: 1,
  differential: 1,
  differently: 1,
  difficult: 1,
  difficulties: 1,
  difficulty: 1,
  diffs: 1,
  dig: 1,
  digest: 1,
  digit: 1,
  digital: 1,
  dildo: 1,
  dildos: 1,
  dim: 1,
  dimension: 1,
  dimensional: 1,
  dimensions: 1,
  dining: 1,
  dinner: 1,
  dip: 1,
  diploma: 1,
  dir: 1,
  direct: 1,
  directed: 1,
  direction: 1,
  directions: 1,
  directive: 1,
  directly: 1,
  director: 1,
  directories: 1,
  directors: 1,
  directory: 1,
  dirt: 1,
  dirty: 1,
  dis: 1,
  disabilities: 1,
  disability: 1,
  disable: 1,
  disabled: 1,
  disagree: 1,
  disappointed: 1,
  disaster: 1,
  disc: 1,
  discharge: 1,
  disciplinary: 1,
  discipline: 1,
  disciplines: 1,
  disclaimer: 1,
  disclaimers: 1,
  disclose: 1,
  disclosure: 1,
  disco: 1,
  discount: 1,
  discounted: 1,
  discounts: 1,
  discover: 1,
  discovered: 1,
  discovery: 1,
  discrete: 1,
  discretion: 1,
  discrimination: 1,
  discs: 1,
  discuss: 1,
  discussed: 1,
  discusses: 1,
  discussing: 1,
  discussion: 1,
  discussions: 1,
  disease: 1,
  diseases: 1,
  dish: 1,
  dishes: 1,
  disk: 1,
  disks: 1,
  disney: 1,
  disorder: 1,
  disorders: 1,
  dispatch: 1,
  dispatched: 1,
  display: 1,
  displayed: 1,
  displaying: 1,
  displays: 1,
  disposal: 1,
  disposition: 1,
  dispute: 1,
  disputes: 1,
  dist: 1,
  distance: 1,
  distances: 1,
  distant: 1,
  distinct: 1,
  distinction: 1,
  distinguished: 1,
  distribute: 1,
  distributed: 1,
  distribution: 1,
  distributions: 1,
  distributor: 1,
  distributors: 1,
  district: 1,
  districts: 1,
  disturbed: 1,
  div: 1,
  dive: 1,
  diverse: 1,
  diversity: 1,
  divide: 1,
  divided: 1,
  dividend: 1,
  divine: 1,
  diving: 1,
  division: 1,
  divisions: 1,
  divorce: 1,
  divx: 1,
  diy: 1,
  dj: 1,
  dk: 1,
  dl: 1,
  dm: 1,
  dna: 1,
  dns: 1,
  do: 1,
  doc: 1,
  dock: 1,
  docs: 1,
  doctor: 1,
  doctors: 1,
  doctrine: 1,
  document: 1,
  documentary: 1,
  documentation: 1,
  documented: 1,
  documents: 1,
  dod: 1,
  dodge: 1,
  doe: 1,
  does: 1,
  dog: 1,
  dogs: 1,
  doing: 1,
  doll: 1,
  dollar: 1,
  dollars: 1,
  dolls: 1,
  dom: 1,
  domain: 1,
  domains: 1,
  dome: 1,
  domestic: 1,
  dominant: 1,
  dominican: 1,
  don: 1,
  donald: 1,
  donate: 1,
  donated: 1,
  donation: 1,
  donations: 1,
  done: 1,
  donna: 1,
  donor: 1,
  donors: 1,
  dont: 1,
  doom: 1,
  door: 1,
  doors: 1,
  dos: 1,
  dosage: 1,
  dose: 1,
  dot: 1,
  double: 1,
  doubt: 1,
  doug: 1,
  douglas: 1,
  dover: 1,
  dow: 1,
  down: 1,
  download: 1,
  downloadable: 1,
  downloaded: 1,
  downloading: 1,
  downloads: 1,
  downtown: 1,
  dozen: 1,
  dozens: 1,
  dp: 1,
  dpi: 1,
  dr: 1,
  draft: 1,
  drag: 1,
  dragon: 1,
  drain: 1,
  drainage: 1,
  drama: 1,
  dramatic: 1,
  dramatically: 1,
  draw: 1,
  drawing: 1,
  drawings: 1,
  drawn: 1,
  draws: 1,
  dream: 1,
  dreams: 1,
  dress: 1,
  dressed: 1,
  dresses: 1,
  dressing: 1,
  drew: 1,
  dried: 1,
  drill: 1,
  drilling: 1,
  drink: 1,
  drinking: 1,
  drinks: 1,
  drive: 1,
  driven: 1,
  driver: 1,
  drivers: 1,
  drives: 1,
  driving: 1,
  drop: 1,
  dropped: 1,
  drops: 1,
  drove: 1,
  drug: 1,
  drugs: 1,
  drum: 1,
  drums: 1,
  drunk: 1,
  dry: 1,
  dryer: 1,
  ds: 1,
  dsc: 1,
  dsl: 1,
  dt: 1,
  dts: 1,
  du: 1,
  dual: 1,
  dubai: 1,
  dublin: 1,
  duck: 1,
  dude: 1,
  due: 1,
  dui: 1,
  duke: 1,
  dumb: 1,
  dump: 1,
  duncan: 1,
  duo: 1,
  duplicate: 1,
  durable: 1,
  duration: 1,
  durham: 1,
  during: 1,
  dust: 1,
  dutch: 1,
  duties: 1,
  duty: 1,
  dv: 1,
  dvd: 1,
  dvds: 1,
  dx: 1,
  dying: 1,
  dylan: 1,
  dynamic: 1,
  dynamics: 1,
  e: 1,
  ea: 1,
  each: 1,
  eagle: 1,
  eagles: 1,
  ear: 1,
  earl: 1,
  earlier: 1,
  earliest: 1,
  early: 1,
  earn: 1,
  earned: 1,
  earning: 1,
  earnings: 1,
  earrings: 1,
  ears: 1,
  earth: 1,
  earthquake: 1,
  ease: 1,
  easier: 1,
  easily: 1,
  east: 1,
  easter: 1,
  eastern: 1,
  easy: 1,
  eat: 1,
  eating: 1,
  eau: 1,
  ebay: 1,
  ebony: 1,
  ebook: 1,
  ebooks: 1,
  ec: 1,
  echo: 1,
  eclipse: 1,
  eco: 1,
  ecological: 1,
  ecology: 1,
  ecommerce: 1,
  economic: 1,
  economics: 1,
  economies: 1,
  economy: 1,
  ecuador: 1,
  ed: 1,
  eddie: 1,
  eden: 1,
  edgar: 1,
  edge: 1,
  edges: 1,
  edinburgh: 1,
  edit: 1,
  edited: 1,
  editing: 1,
  edition: 1,
  editions: 1,
  editor: 1,
  editorial: 1,
  editorials: 1,
  editors: 1,
  edmonton: 1,
  eds: 1,
  edt: 1,
  educated: 1,
  education: 1,
  educational: 1,
  educators: 1,
  edward: 1,
  edwards: 1,
  ee: 1,
  ef: 1,
  effect: 1,
  effective: 1,
  effectively: 1,
  effectiveness: 1,
  effects: 1,
  efficiency: 1,
  efficient: 1,
  efficiently: 1,
  effort: 1,
  efforts: 1,
  eg: 1,
  egg: 1,
  eggs: 1,
  egypt: 1,
  egyptian: 1,
  eh: 1,
  eight: 1,
  either: 1,
  ejaculation: 1,
  el: 1,
  elder: 1,
  elderly: 1,
  elect: 1,
  elected: 1,
  election: 1,
  elections: 1,
  electoral: 1,
  electric: 1,
  electrical: 1,
  electricity: 1,
  electro: 1,
  electron: 1,
  electronic: 1,
  electronics: 1,
  elegant: 1,
  element: 1,
  elementary: 1,
  elements: 1,
  elephant: 1,
  elevation: 1,
  eleven: 1,
  eligibility: 1,
  eligible: 1,
  eliminate: 1,
  elimination: 1,
  elite: 1,
  elizabeth: 1,
  ellen: 1,
  elliott: 1,
  ellis: 1,
  else: 1,
  elsewhere: 1,
  elvis: 1,
  em: 1,
  emacs: 1,
  email: 1,
  emails: 1,
  embassy: 1,
  embedded: 1,
  emerald: 1,
  emergency: 1,
  emerging: 1,
  emily: 1,
  eminem: 1,
  emirates: 1,
  emission: 1,
  emissions: 1,
  emma: 1,
  emotional: 1,
  emotions: 1,
  emperor: 1,
  emphasis: 1,
  empire: 1,
  empirical: 1,
  employ: 1,
  employed: 1,
  employee: 1,
  employees: 1,
  employer: 1,
  employers: 1,
  employment: 1,
  empty: 1,
  en: 1,
  enable: 1,
  enabled: 1,
  enables: 1,
  enabling: 1,
  enb: 1,
  enclosed: 1,
  enclosure: 1,
  encoding: 1,
  encounter: 1,
  encountered: 1,
  encourage: 1,
  encouraged: 1,
  encourages: 1,
  encouraging: 1,
  encryption: 1,
  encyclopedia: 1,
  end: 1,
  endangered: 1,
  ended: 1,
  endif: 1,
  ending: 1,
  endless: 1,
  endorsed: 1,
  endorsement: 1,
  ends: 1,
  enemies: 1,
  enemy: 1,
  energy: 1,
  enforcement: 1,
  eng: 1,
  engage: 1,
  engaged: 1,
  engagement: 1,
  engaging: 1,
  engine: 1,
  engineer: 1,
  engineering: 1,
  engineers: 1,
  engines: 1,
  england: 1,
  english: 1,
  enhance: 1,
  enhanced: 1,
  enhancement: 1,
  enhancements: 1,
  enhancing: 1,
  enjoy: 1,
  enjoyed: 1,
  enjoying: 1,
  enlarge: 1,
  enlargement: 1,
  enormous: 1,
  enough: 1,
  enquiries: 1,
  enquiry: 1,
  enrolled: 1,
  enrollment: 1,
  ensemble: 1,
  ensure: 1,
  ensures: 1,
  ensuring: 1,
  ent: 1,
  enter: 1,
  entered: 1,
  entering: 1,
  enterprise: 1,
  enterprises: 1,
  enters: 1,
  entertaining: 1,
  entertainment: 1,
  entire: 1,
  entirely: 1,
  entities: 1,
  entitled: 1,
  entity: 1,
  entrance: 1,
  entrepreneur: 1,
  entrepreneurs: 1,
  entries: 1,
  entry: 1,
  envelope: 1,
  environment: 1,
  environmental: 1,
  environments: 1,
  enzyme: 1,
  eos: 1,
  ep: 1,
  epa: 1,
  epic: 1,
  epinions: 1,
  episode: 1,
  episodes: 1,
  epson: 1,
  eq: 1,
  equal: 1,
  equality: 1,
  equally: 1,
  equation: 1,
  equations: 1,
  equilibrium: 1,
  equipment: 1,
  equipped: 1,
  equity: 1,
  equivalent: 1,
  er: 1,
  era: 1,
  eric: 1,
  ericsson: 1,
  erik: 1,
  erotic: 1,
  erotica: 1,
  erp: 1,
  error: 1,
  errors: 1,
  es: 1,
  escape: 1,
  escort: 1,
  escorts: 1,
  especially: 1,
  espn: 1,
  essay: 1,
  essays: 1,
  essence: 1,
  essential: 1,
  essentially: 1,
  essentials: 1,
  essex: 1,
  est: 1,
  establish: 1,
  established: 1,
  establishing: 1,
  establishment: 1,
  estate: 1,
  estates: 1,
  estimate: 1,
  estimated: 1,
  estimates: 1,
  estimation: 1,
  estonia: 1,
  et: 1,
  etc: 1,
  eternal: 1,
  ethernet: 1,
  ethical: 1,
  ethics: 1,
  ethiopia: 1,
  ethnic: 1,
  eu: 1,
  eugene: 1,
  eur: 1,
  euro: 1,
  europe: 1,
  european: 1,
  euros: 1,
  ev: 1,
  eva: 1,
  eval: 1,
  evaluate: 1,
  evaluated: 1,
  evaluating: 1,
  evaluation: 1,
  evaluations: 1,
  evanescence: 1,
  evans: 1,
  eve: 1,
  even: 1,
  evening: 1,
  event: 1,
  events: 1,
  eventually: 1,
  ever: 1,
  every: 1,
  everybody: 1,
  everyday: 1,
  everyone: 1,
  everything: 1,
  everywhere: 1,
  evidence: 1,
  evident: 1,
  evil: 1,
  evolution: 1,
  ex: 1,
  exact: 1,
  exactly: 1,
  exam: 1,
  examination: 1,
  examinations: 1,
  examine: 1,
  examined: 1,
  examines: 1,
  examining: 1,
  example: 1,
  examples: 1,
  exams: 1,
  exceed: 1,
  excel: 1,
  excellence: 1,
  excellent: 1,
  except: 1,
  exception: 1,
  exceptional: 1,
  exceptions: 1,
  excerpt: 1,
  excess: 1,
  excessive: 1,
  exchange: 1,
  exchanges: 1,
  excited: 1,
  excitement: 1,
  exciting: 1,
  exclude: 1,
  excluded: 1,
  excluding: 1,
  exclusion: 1,
  exclusive: 1,
  exclusively: 1,
  excuse: 1,
  exec: 1,
  execute: 1,
  executed: 1,
  execution: 1,
  executive: 1,
  executives: 1,
  exempt: 1,
  exemption: 1,
  exercise: 1,
  exercises: 1,
  exhaust: 1,
  exhibit: 1,
  exhibition: 1,
  exhibitions: 1,
  exhibits: 1,
  exist: 1,
  existed: 1,
  existence: 1,
  existing: 1,
  exists: 1,
  exit: 1,
  exotic: 1,
  exp: 1,
  expand: 1,
  expanded: 1,
  expanding: 1,
  expansion: 1,
  expansys: 1,
  expect: 1,
  expectations: 1,
  expected: 1,
  expects: 1,
  expedia: 1,
  expenditure: 1,
  expenditures: 1,
  expense: 1,
  expenses: 1,
  expensive: 1,
  experience: 1,
  experienced: 1,
  experiences: 1,
  experiencing: 1,
  experiment: 1,
  experimental: 1,
  experiments: 1,
  expert: 1,
  expertise: 1,
  experts: 1,
  expiration: 1,
  expired: 1,
  expires: 1,
  explain: 1,
  explained: 1,
  explaining: 1,
  explains: 1,
  explanation: 1,
  explicit: 1,
  explicitly: 1,
  exploration: 1,
  explore: 1,
  explorer: 1,
  exploring: 1,
  explosion: 1,
  expo: 1,
  export: 1,
  exports: 1,
  exposed: 1,
  exposure: 1,
  express: 1,
  expressed: 1,
  expression: 1,
  expressions: 1,
  ext: 1,
  extend: 1,
  extended: 1,
  extending: 1,
  extends: 1,
  extension: 1,
  extensions: 1,
  extensive: 1,
  extent: 1,
  exterior: 1,
  external: 1,
  extra: 1,
  extract: 1,
  extraction: 1,
  extraordinary: 1,
  extras: 1,
  extreme: 1,
  extremely: 1,
  eye: 1,
  eyed: 1,
  eyes: 1,
  ez: 1,
  f: 1,
  fa: 1,
  fabric: 1,
  fabrics: 1,
  fabulous: 1,
  face: 1,
  faced: 1,
  faces: 1,
  facial: 1,
  facilitate: 1,
  facilities: 1,
  facility: 1,
  facing: 1,
  fact: 1,
  factor: 1,
  factors: 1,
  factory: 1,
  facts: 1,
  faculty: 1,
  fail: 1,
  failed: 1,
  failing: 1,
  fails: 1,
  failure: 1,
  failures: 1,
  fair: 1,
  fairfield: 1,
  fairly: 1,
  fairy: 1,
  faith: 1,
  fake: 1,
  fall: 1,
  fallen: 1,
  falling: 1,
  falls: 1,
  false: 1,
  fame: 1,
  familiar: 1,
  families: 1,
  family: 1,
  famous: 1,
  fan: 1,
  fancy: 1,
  fans: 1,
  fantastic: 1,
  fantasy: 1,
  faq: 1,
  faqs: 1,
  far: 1,
  fare: 1,
  fares: 1,
  farm: 1,
  farmer: 1,
  farmers: 1,
  farming: 1,
  farms: 1,
  fascinating: 1,
  fashion: 1,
  fast: 1,
  faster: 1,
  fastest: 1,
  fat: 1,
  fatal: 1,
  fate: 1,
  father: 1,
  fathers: 1,
  fatty: 1,
  fault: 1,
  favor: 1,
  favorite: 1,
  favorites: 1,
  favors: 1,
  favour: 1,
  favourite: 1,
  favourites: 1,
  fax: 1,
  fbi: 1,
  fc: 1,
  fcc: 1,
  fd: 1,
  fda: 1,
  fe: 1,
  fear: 1,
  fears: 1,
  feat: 1,
  feature: 1,
  featured: 1,
  features: 1,
  featuring: 1,
  feb: 1,
  february: 1,
  fed: 1,
  federal: 1,
  federation: 1,
  fee: 1,
  feed: 1,
  feedback: 1,
  feeding: 1,
  feeds: 1,
  feel: 1,
  feeling: 1,
  feelings: 1,
  feels: 1,
  fees: 1,
  feet: 1,
  fell: 1,
  fellow: 1,
  fellowship: 1,
  felt: 1,
  female: 1,
  females: 1,
  fence: 1,
  feof: 1,
  ferrari: 1,
  ferry: 1,
  festival: 1,
  festivals: 1,
  fetish: 1,
  fever: 1,
  few: 1,
  fewer: 1,
  ff: 1,
  fg: 1,
  fi: 1,
  fiber: 1,
  fibre: 1,
  fiction: 1,
  field: 1,
  fields: 1,
  fifteen: 1,
  fifth: 1,
  fifty: 1,
  fig: 1,
  fight: 1,
  fighter: 1,
  fighters: 1,
  fighting: 1,
  figure: 1,
  figured: 1,
  figures: 1,
  fiji: 1,
  file: 1,
  filed: 1,
  filename: 1,
  files: 1,
  filing: 1,
  fill: 1,
  filled: 1,
  filling: 1,
  film: 1,
  filme: 1,
  films: 1,
  filter: 1,
  filtering: 1,
  filters: 1,
  fin: 1,
  final: 1,
  finally: 1,
  finals: 1,
  finance: 1,
  finances: 1,
  financial: 1,
  financing: 1,
  find: 1,
  findarticles: 1,
  finder: 1,
  finding: 1,
  findings: 1,
  findlaw: 1,
  finds: 1,
  fine: 1,
  finest: 1,
  finger: 1,
  fingering: 1,
  fingers: 1,
  finish: 1,
  finished: 1,
  finishing: 1,
  finite: 1,
  finland: 1,
  finnish: 1,
  fioricet: 1,
  fire: 1,
  fired: 1,
  firefox: 1,
  fireplace: 1,
  fires: 1,
  firewall: 1,
  firewire: 1,
  firm: 1,
  firms: 1,
  firmware: 1,
  first: 1,
  fiscal: 1,
  fish: 1,
  fisher: 1,
  fisheries: 1,
  fishing: 1,
  fist: 1,
  fisting: 1,
  fit: 1,
  fitness: 1,
  fits: 1,
  fitted: 1,
  fitting: 1,
  five: 1,
  fix: 1,
  fixed: 1,
  fixes: 1,
  fixtures: 1,
  fl: 1,
  flag: 1,
  flags: 1,
  flame: 1,
  flash: 1,
  flashers: 1,
  flashing: 1,
  flat: 1,
  flavor: 1,
  fleece: 1,
  fleet: 1,
  flesh: 1,
  flex: 1,
  flexibility: 1,
  flexible: 1,
  flickr: 1,
  flight: 1,
  flights: 1,
  flip: 1,
  float: 1,
  floating: 1,
  flood: 1,
  floor: 1,
  flooring: 1,
  floors: 1,
  floppy: 1,
  floral: 1,
  florence: 1,
  florida: 1,
  florist: 1,
  florists: 1,
  flour: 1,
  flow: 1,
  flower: 1,
  flowers: 1,
  flows: 1,
  floyd: 1,
  flu: 1,
  fluid: 1,
  flush: 1,
  flux: 1,
  fly: 1,
  flyer: 1,
  flying: 1,
  fm: 1,
  fo: 1,
  foam: 1,
  focal: 1,
  focus: 1,
  focused: 1,
  focuses: 1,
  focusing: 1,
  fog: 1,
  fold: 1,
  folder: 1,
  folders: 1,
  folding: 1,
  folk: 1,
  folks: 1,
  follow: 1,
  followed: 1,
  following: 1,
  follows: 1,
  font: 1,
  fonts: 1,
  foo: 1,
  food: 1,
  foods: 1,
  fool: 1,
  foot: 1,
  footage: 1,
  football: 1,
  footwear: 1,
  for: 1,
  forbes: 1,
  forbidden: 1,
  force: 1,
  forced: 1,
  forces: 1,
  ford: 1,
  forecast: 1,
  forecasts: 1,
  foreign: 1,
  forest: 1,
  forestry: 1,
  forests: 1,
  forever: 1,
  forge: 1,
  forget: 1,
  forgot: 1,
  forgotten: 1,
  fork: 1,
  form: 1,
  formal: 1,
  format: 1,
  formation: 1,
  formats: 1,
  formatting: 1,
  formed: 1,
  former: 1,
  formerly: 1,
  forming: 1,
  forms: 1,
  formula: 1,
  fort: 1,
  forth: 1,
  fortune: 1,
  forty: 1,
  forum: 1,
  forums: 1,
  forward: 1,
  forwarding: 1,
  fossil: 1,
  foster: 1,
  foto: 1,
  fotos: 1,
  fought: 1,
  foul: 1,
  found: 1,
  foundation: 1,
  foundations: 1,
  founded: 1,
  founder: 1,
  fountain: 1,
  four: 1,
  fourth: 1,
  fox: 1,
  fp: 1,
  fr: 1,
  fraction: 1,
  fragrance: 1,
  fragrances: 1,
  frame: 1,
  framed: 1,
  frames: 1,
  framework: 1,
  framing: 1,
  france: 1,
  franchise: 1,
  francis: 1,
  francisco: 1,
  frank: 1,
  frankfurt: 1,
  franklin: 1,
  fraser: 1,
  fraud: 1,
  fred: 1,
  frederick: 1,
  free: 1,
  freebsd: 1,
  freedom: 1,
  freelance: 1,
  freely: 1,
  freeware: 1,
  freeze: 1,
  freight: 1,
  french: 1,
  frequencies: 1,
  frequency: 1,
  frequent: 1,
  frequently: 1,
  fresh: 1,
  fri: 1,
  friday: 1,
  fridge: 1,
  friend: 1,
  friendly: 1,
  friends: 1,
  friendship: 1,
  frog: 1,
  from: 1,
  front: 1,
  frontier: 1,
  frontpage: 1,
  frost: 1,
  frozen: 1,
  fruit: 1,
  fruits: 1,
  fs: 1,
  ft: 1,
  ftp: 1,
  fu: 1,
  fuck: 1,
  fucked: 1,
  fucking: 1,
  fuel: 1,
  fuji: 1,
  fujitsu: 1,
  full: 1,
  fully: 1,
  fun: 1,
  function: 1,
  functional: 1,
  functionality: 1,
  functioning: 1,
  functions: 1,
  fund: 1,
  fundamental: 1,
  fundamentals: 1,
  funded: 1,
  funding: 1,
  fundraising: 1,
  funds: 1,
  funeral: 1,
  funk: 1,
  funky: 1,
  funny: 1,
  fur: 1,
  furnished: 1,
  furnishings: 1,
  furniture: 1,
  further: 1,
  furthermore: 1,
  fusion: 1,
  future: 1,
  futures: 1,
  fuzzy: 1,
  fw: 1,
  fwd: 1,
  fx: 1,
  fy: 1,
  g: 1,
  ga: 1,
  gabriel: 1,
  gadgets: 1,
  gage: 1,
  gain: 1,
  gained: 1,
  gains: 1,
  galaxy: 1,
  gale: 1,
  galleries: 1,
  gallery: 1,
  gambling: 1,
  game: 1,
  gamecube: 1,
  games: 1,
  gamespot: 1,
  gaming: 1,
  gamma: 1,
  gang: 1,
  gangbang: 1,
  gap: 1,
  gaps: 1,
  garage: 1,
  garbage: 1,
  garcia: 1,
  garden: 1,
  gardening: 1,
  gardens: 1,
  garlic: 1,
  garmin: 1,
  gary: 1,
  gas: 1,
  gasoline: 1,
  gate: 1,
  gates: 1,
  gateway: 1,
  gather: 1,
  gathered: 1,
  gathering: 1,
  gauge: 1,
  gave: 1,
  gay: 1,
  gays: 1,
  gazette: 1,
  gb: 1,
  gba: 1,
  gbp: 1,
  gc: 1,
  gcc: 1,
  gd: 1,
  gdp: 1,
  ge: 1,
  gear: 1,
  geek: 1,
  gel: 1,
  gem: 1,
  gen: 1,
  gender: 1,
  gene: 1,
  genealogy: 1,
  general: 1,
  generally: 1,
  generate: 1,
  generated: 1,
  generates: 1,
  generating: 1,
  generation: 1,
  generations: 1,
  generator: 1,
  generators: 1,
  generic: 1,
  generous: 1,
  genes: 1,
  genesis: 1,
  genetic: 1,
  genetics: 1,
  geneva: 1,
  genius: 1,
  genome: 1,
  genre: 1,
  genres: 1,
  gentle: 1,
  gentleman: 1,
  gently: 1,
  genuine: 1,
  geo: 1,
  geographic: 1,
  geographical: 1,
  geography: 1,
  geological: 1,
  geology: 1,
  geometry: 1,
  george: 1,
  georgia: 1,
  gerald: 1,
  german: 1,
  germany: 1,
  get: 1,
  gets: 1,
  getting: 1,
  gg: 1,
  ghana: 1,
  ghost: 1,
  ghz: 1,
  gi: 1,
  giant: 1,
  giants: 1,
  gibraltar: 1,
  gibson: 1,
  gif: 1,
  gift: 1,
  gifts: 1,
  gig: 1,
  gilbert: 1,
  girl: 1,
  girlfriend: 1,
  girls: 1,
  gis: 1,
  give: 1,
  given: 1,
  gives: 1,
  giving: 1,
  gl: 1,
  glad: 1,
  glance: 1,
  glasgow: 1,
  glass: 1,
  glasses: 1,
  glen: 1,
  glenn: 1,
  global: 1,
  globe: 1,
  glory: 1,
  glossary: 1,
  gloves: 1,
  glow: 1,
  glucose: 1,
  gm: 1,
  gmbh: 1,
  gmc: 1,
  gmt: 1,
  gnome: 1,
  gnu: 1,
  go: 1,
  goal: 1,
  goals: 1,
  goat: 1,
  god: 1,
  gods: 1,
  goes: 1,
  going: 1,
  gold: 1,
  golden: 1,
  golf: 1,
  gone: 1,
  gonna: 1,
  good: 1,
  goods: 1,
  google: 1,
  gordon: 1,
  gore: 1,
  gorgeous: 1,
  gospel: 1,
  gossip: 1,
  got: 1,
  gothic: 1,
  goto: 1,
  gotta: 1,
  gotten: 1,
  gourmet: 1,
  governance: 1,
  governing: 1,
  government: 1,
  governmental: 1,
  governments: 1,
  governor: 1,
  gp: 1,
  gpl: 1,
  gps: 1,
  gr: 1,
  grab: 1,
  grace: 1,
  grad: 1,
  grade: 1,
  grades: 1,
  gradually: 1,
  graduate: 1,
  graduated: 1,
  graduates: 1,
  graduation: 1,
  graham: 1,
  grain: 1,
  grammar: 1,
  grams: 1,
  grand: 1,
  grande: 1,
  granny: 1,
  grant: 1,
  granted: 1,
  grants: 1,
  graph: 1,
  graphic: 1,
  graphical: 1,
  graphics: 1,
  graphs: 1,
  gras: 1,
  grass: 1,
  grateful: 1,
  gratis: 1,
  gratuit: 1,
  grave: 1,
  gravity: 1,
  gray: 1,
  great: 1,
  greater: 1,
  greatest: 1,
  greatly: 1,
  greece: 1,
  greek: 1,
  green: 1,
  greene: 1,
  greenhouse: 1,
  greensboro: 1,
  greeting: 1,
  greetings: 1,
  greg: 1,
  gregory: 1,
  grenada: 1,
  grew: 1,
  grey: 1,
  grid: 1,
  griffin: 1,
  grill: 1,
  grip: 1,
  grocery: 1,
  groove: 1,
  gross: 1,
  ground: 1,
  grounds: 1,
  groundwater: 1,
  group: 1,
  groups: 1,
  grove: 1,
  grow: 1,
  growing: 1,
  grown: 1,
  grows: 1,
  growth: 1,
  gs: 1,
  gsm: 1,
  gst: 1,
  gt: 1,
  gtk: 1,
  guam: 1,
  guarantee: 1,
  guaranteed: 1,
  guarantees: 1,
  guard: 1,
  guardian: 1,
  guards: 1,
  guatemala: 1,
  guess: 1,
  guest: 1,
  guestbook: 1,
  guests: 1,
  gui: 1,
  guidance: 1,
  guide: 1,
  guided: 1,
  guidelines: 1,
  guides: 1,
  guild: 1,
  guilty: 1,
  guinea: 1,
  guitar: 1,
  guitars: 1,
  gulf: 1,
  gun: 1,
  guns: 1,
  guru: 1,
  guy: 1,
  guyana: 1,
  guys: 1,
  gym: 1,
  gzip: 1,
  h: 1,
  ha: 1,
  habitat: 1,
  habits: 1,
  hack: 1,
  hacker: 1,
  had: 1,
  hair: 1,
  hairy: 1,
  haiti: 1,
  half: 1,
  halifax: 1,
  hall: 1,
  halloween: 1,
  halo: 1,
  ham: 1,
  hamburg: 1,
  hamilton: 1,
  hammer: 1,
  hampshire: 1,
  hampton: 1,
  hand: 1,
  handbags: 1,
  handbook: 1,
  handed: 1,
  handheld: 1,
  handhelds: 1,
  handjob: 1,
  handjobs: 1,
  handle: 1,
  handled: 1,
  handles: 1,
  handling: 1,
  handmade: 1,
  hands: 1,
  handy: 1,
  hang: 1,
  hanging: 1,
  hans: 1,
  hansen: 1,
  happen: 1,
  happened: 1,
  happening: 1,
  happens: 1,
  happiness: 1,
  happy: 1,
  harassment: 1,
  harbor: 1,
  harbour: 1,
  hard: 1,
  hardcore: 1,
  hardcover: 1,
  harder: 1,
  hardly: 1,
  hardware: 1,
  hardwood: 1,
  harley: 1,
  harm: 1,
  harmful: 1,
  harmony: 1,
  harold: 1,
  harper: 1,
  harris: 1,
  harrison: 1,
  harry: 1,
  hart: 1,
  hartford: 1,
  harvard: 1,
  harvest: 1,
  harvey: 1,
  has: 1,
  hash: 1,
  hat: 1,
  hate: 1,
  hats: 1,
  have: 1,
  haven: 1,
  having: 1,
  hawaii: 1,
  hawaiian: 1,
  hawk: 1,
  hay: 1,
  hayes: 1,
  hazard: 1,
  hazardous: 1,
  hazards: 1,
  hb: 1,
  hc: 1,
  hd: 1,
  hdtv: 1,
  he: 1,
  head: 1,
  headed: 1,
  header: 1,
  headers: 1,
  heading: 1,
  headline: 1,
  headlines: 1,
  headphones: 1,
  headquarters: 1,
  heads: 1,
  headset: 1,
  healing: 1,
  health: 1,
  healthcare: 1,
  healthy: 1,
  hear: 1,
  heard: 1,
  hearing: 1,
  hearings: 1,
  heart: 1,
  hearts: 1,
  heat: 1,
  heated: 1,
  heater: 1,
  heath: 1,
  heather: 1,
  heating: 1,
  heaven: 1,
  heavily: 1,
  heavy: 1,
  hebrew: 1,
  heel: 1,
  height: 1,
  heights: 1,
  held: 1,
  helen: 1,
  helena: 1,
  helicopter: 1,
  hell: 1,
  hello: 1,
  helmet: 1,
  help: 1,
  helped: 1,
  helpful: 1,
  helping: 1,
  helps: 1,
  hence: 1,
  henderson: 1,
  henry: 1,
  hentai: 1,
  hepatitis: 1,
  her: 1,
  herald: 1,
  herb: 1,
  herbal: 1,
  herbs: 1,
  here: 1,
  hereby: 1,
  herein: 1,
  heritage: 1,
  hero: 1,
  heroes: 1,
  herself: 1,
  hewlett: 1,
  hey: 1,
  hh: 1,
  hi: 1,
  hidden: 1,
  hide: 1,
  hierarchy: 1,
  high: 1,
  higher: 1,
  highest: 1,
  highland: 1,
  highlight: 1,
  highlighted: 1,
  highlights: 1,
  highly: 1,
  highs: 1,
  highway: 1,
  highways: 1,
  hiking: 1,
  hill: 1,
  hills: 1,
  hilton: 1,
  him: 1,
  himself: 1,
  hindu: 1,
  hint: 1,
  hints: 1,
  hip: 1,
  hire: 1,
  hired: 1,
  hiring: 1,
  his: 1,
  hispanic: 1,
  hist: 1,
  historic: 1,
  historical: 1,
  history: 1,
  hit: 1,
  hitachi: 1,
  hits: 1,
  hitting: 1,
  hiv: 1,
  hk: 1,
  hl: 1,
  ho: 1,
  hobbies: 1,
  hobby: 1,
  hockey: 1,
  hold: 1,
  holdem: 1,
  holder: 1,
  holders: 1,
  holding: 1,
  holdings: 1,
  holds: 1,
  hole: 1,
  holes: 1,
  holiday: 1,
  holidays: 1,
  holland: 1,
  hollow: 1,
  holly: 1,
  hollywood: 1,
  holmes: 1,
  holocaust: 1,
  holy: 1,
  home: 1,
  homeland: 1,
  homeless: 1,
  homepage: 1,
  homes: 1,
  hometown: 1,
  homework: 1,
  hon: 1,
  honda: 1,
  honduras: 1,
  honest: 1,
  honey: 1,
  hong: 1,
  honolulu: 1,
  honor: 1,
  honors: 1,
  hood: 1,
  hook: 1,
  hop: 1,
  hope: 1,
  hoped: 1,
  hopefully: 1,
  hopes: 1,
  hoping: 1,
  hopkins: 1,
  horizon: 1,
  horizontal: 1,
  hormone: 1,
  horn: 1,
  horny: 1,
  horrible: 1,
  horror: 1,
  horse: 1,
  horses: 1,
  hose: 1,
  hospital: 1,
  hospitality: 1,
  hospitals: 1,
  host: 1,
  hosted: 1,
  hostel: 1,
  hostels: 1,
  hosting: 1,
  hosts: 1,
  hot: 1,
  hotel: 1,
  hotels: 1,
  hotmail: 1,
  hottest: 1,
  hour: 1,
  hourly: 1,
  hours: 1,
  house: 1,
  household: 1,
  households: 1,
  houses: 1,
  housewares: 1,
  housewives: 1,
  housing: 1,
  houston: 1,
  how: 1,
  howard: 1,
  however: 1,
  howto: 1,
  hp: 1,
  hq: 1,
  hr: 1,
  href: 1,
  hrs: 1,
  hs: 1,
  ht: 1,
  html: 1,
  http: 1,
  hu: 1,
  hub: 1,
  hudson: 1,
  huge: 1,
  hugh: 1,
  hughes: 1,
  hugo: 1,
  hull: 1,
  human: 1,
  humanitarian: 1,
  humanities: 1,
  humanity: 1,
  humans: 1,
  humidity: 1,
  humor: 1,
  hundred: 1,
  hundreds: 1,
  hung: 1,
  hungarian: 1,
  hungary: 1,
  hunger: 1,
  hungry: 1,
  hunt: 1,
  hunter: 1,
  hunting: 1,
  huntington: 1,
  hurricane: 1,
  hurt: 1,
  husband: 1,
  hwy: 1,
  hybrid: 1,
  hydraulic: 1,
  hydrocodone: 1,
  hydrogen: 1,
  hygiene: 1,
  hypothesis: 1,
  hypothetical: 1,
  hyundai: 1,
  hz: 1
};

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon10000", function() { return TheMostCommon10000; });
// https://englishgrammarhere.com/vocabulary/10000-most-common-words-in-english-part-5/
const TheMostCommon10000 = {
  i: 1,
  ia: 1,
  ian: 1,
  ibm: 1,
  ic: 1,
  ice: 1,
  iceland: 1,
  icon: 1,
  icons: 1,
  icq: 1,
  ict: 1,
  id: 1,
  idaho: 1,
  ide: 1,
  idea: 1,
  ideal: 1,
  ideas: 1,
  identical: 1,
  identification: 1,
  identified: 1,
  identifier: 1,
  identifies: 1,
  identify: 1,
  identifying: 1,
  identity: 1,
  idle: 1,
  idol: 1,
  ids: 1,
  ie: 1,
  ieee: 1,
  if: 1,
  ignore: 1,
  ignored: 1,
  ii: 1,
  iii: 1,
  il: 1,
  ill: 1,
  illegal: 1,
  illinois: 1,
  illness: 1,
  illustrated: 1,
  illustration: 1,
  illustrations: 1,
  im: 1,
  image: 1,
  images: 1,
  imagination: 1,
  imagine: 1,
  imaging: 1,
  img: 1,
  immediate: 1,
  immediately: 1,
  immigrants: 1,
  immigration: 1,
  immune: 1,
  immunology: 1,
  impact: 1,
  impacts: 1,
  impaired: 1,
  imperial: 1,
  implement: 1,
  implementation: 1,
  implemented: 1,
  implementing: 1,
  implications: 1,
  implied: 1,
  implies: 1,
  import: 1,
  importance: 1,
  important: 1,
  importantly: 1,
  imported: 1,
  imports: 1,
  impose: 1,
  imposed: 1,
  impossible: 1,
  impressed: 1,
  impression: 1,
  impressive: 1,
  improve: 1,
  improved: 1,
  improvement: 1,
  improvements: 1,
  improving: 1,
  in: 1,
  inappropriate: 1,
  inbox: 1,
  inc: 1,
  incentive: 1,
  incentives: 1,
  incest: 1,
  inch: 1,
  inches: 1,
  incidence: 1,
  incident: 1,
  incidents: 1,
  incl: 1,
  include: 1,
  included: 1,
  includes: 1,
  including: 1,
  inclusion: 1,
  inclusive: 1,
  income: 1,
  incoming: 1,
  incomplete: 1,
  incorporate: 1,
  incorporated: 1,
  incorrect: 1,
  increase: 1,
  increased: 1,
  increases: 1,
  increasing: 1,
  increasingly: 1,
  incredible: 1,
  incurred: 1,
  ind: 1,
  indeed: 1,
  independence: 1,
  independent: 1,
  independently: 1,
  index: 1,
  indexed: 1,
  indexes: 1,
  india: 1,
  indian: 1,
  indiana: 1,
  indianapolis: 1,
  indians: 1,
  indicate: 1,
  indicated: 1,
  indicates: 1,
  indicating: 1,
  indication: 1,
  indicator: 1,
  indicators: 1,
  indices: 1,
  indie: 1,
  indigenous: 1,
  indirect: 1,
  individual: 1,
  individually: 1,
  individuals: 1,
  indonesia: 1,
  indonesian: 1,
  indoor: 1,
  induced: 1,
  induction: 1,
  industrial: 1,
  industries: 1,
  industry: 1,
  inexpensive: 1,
  inf: 1,
  infant: 1,
  infants: 1,
  infected: 1,
  infection: 1,
  infections: 1,
  infectious: 1,
  infinite: 1,
  inflation: 1,
  influence: 1,
  influenced: 1,
  influences: 1,
  info: 1,
  inform: 1,
  informal: 1,
  information: 1,
  informational: 1,
  informative: 1,
  informed: 1,
  infrared: 1,
  infrastructure: 1,
  infringement: 1,
  ing: 1,
  ingredients: 1,
  inherited: 1,
  initial: 1,
  initially: 1,
  initiated: 1,
  initiative: 1,
  initiatives: 1,
  injection: 1,
  injured: 1,
  injuries: 1,
  injury: 1,
  ink: 1,
  inkjet: 1,
  inline: 1,
  inn: 1,
  inner: 1,
  innocent: 1,
  innovation: 1,
  innovations: 1,
  innovative: 1,
  inns: 1,
  input: 1,
  inputs: 1,
  inquire: 1,
  inquiries: 1,
  inquiry: 1,
  ins: 1,
  insects: 1,
  insert: 1,
  inserted: 1,
  insertion: 1,
  inside: 1,
  insider: 1,
  insight: 1,
  insights: 1,
  inspection: 1,
  inspections: 1,
  inspector: 1,
  inspiration: 1,
  inspired: 1,
  install: 1,
  installation: 1,
  installations: 1,
  installed: 1,
  installing: 1,
  instance: 1,
  instances: 1,
  instant: 1,
  instantly: 1,
  instead: 1,
  institute: 1,
  institutes: 1,
  institution: 1,
  institutional: 1,
  institutions: 1,
  instruction: 1,
  instructional: 1,
  instructions: 1,
  instructor: 1,
  instructors: 1,
  instrument: 1,
  instrumental: 1,
  instrumentation: 1,
  instruments: 1,
  insulation: 1,
  insulin: 1,
  insurance: 1,
  insured: 1,
  int: 1,
  intake: 1,
  integer: 1,
  integral: 1,
  integrate: 1,
  integrated: 1,
  integrating: 1,
  integration: 1,
  integrity: 1,
  intel: 1,
  intellectual: 1,
  intelligence: 1,
  intelligent: 1,
  intend: 1,
  intended: 1,
  intense: 1,
  intensity: 1,
  intensive: 1,
  intent: 1,
  intention: 1,
  inter: 1,
  interact: 1,
  interaction: 1,
  interactions: 1,
  interactive: 1,
  interest: 1,
  interested: 1,
  interesting: 1,
  interests: 1,
  interface: 1,
  interfaces: 1,
  interference: 1,
  interim: 1,
  interior: 1,
  intermediate: 1,
  internal: 1,
  international: 1,
  internationally: 1,
  internet: 1,
  internship: 1,
  interpretation: 1,
  interpreted: 1,
  interracial: 1,
  intersection: 1,
  interstate: 1,
  interval: 1,
  intervals: 1,
  intervention: 1,
  interventions: 1,
  interview: 1,
  interviews: 1,
  intimate: 1,
  intl: 1,
  into: 1,
  intranet: 1,
  intro: 1,
  introduce: 1,
  introduced: 1,
  introduces: 1,
  introducing: 1,
  introduction: 1,
  introductory: 1,
  invalid: 1,
  invasion: 1,
  invention: 1,
  inventory: 1,
  invest: 1,
  investigate: 1,
  investigated: 1,
  investigation: 1,
  investigations: 1,
  investigator: 1,
  investigators: 1,
  investing: 1,
  investment: 1,
  investments: 1,
  investor: 1,
  investors: 1,
  invisible: 1,
  invision: 1,
  invitation: 1,
  invitations: 1,
  invite: 1,
  invited: 1,
  invoice: 1,
  involve: 1,
  involved: 1,
  involvement: 1,
  involves: 1,
  involving: 1,
  io: 1,
  ion: 1,
  iowa: 1,
  ip: 1,
  ipaq: 1,
  ipod: 1,
  ips: 1,
  ir: 1,
  ira: 1,
  iran: 1,
  iraq: 1,
  iraqi: 1,
  irc: 1,
  ireland: 1,
  irish: 1,
  iron: 1,
  irrigation: 1,
  irs: 1,
  is: 1,
  isa: 1,
  isaac: 1,
  isbn: 1,
  islam: 1,
  islamic: 1,
  island: 1,
  islands: 1,
  isle: 1,
  iso: 1,
  isolated: 1,
  isolation: 1,
  isp: 1,
  israel: 1,
  israeli: 1,
  issn: 1,
  issue: 1,
  issued: 1,
  issues: 1,
  ist: 1,
  istanbul: 1,
  it: 1,
  italia: 1,
  italian: 1,
  italiano: 1,
  italic: 1,
  italy: 1,
  item: 1,
  items: 1,
  its: 1,
  itself: 1,
  itunes: 1,
  iv: 1,
  ivory: 1,
  ix: 1,
  j: 1,
  ja: 1,
  jack: 1,
  jacket: 1,
  jackets: 1,
  jackie: 1,
  jackson: 1,
  jacksonville: 1,
  jacob: 1,
  jade: 1,
  jaguar: 1,
  jail: 1,
  jake: 1,
  jam: 1,
  jamaica: 1,
  james: 1,
  jamie: 1,
  jan: 1,
  jane: 1,
  janet: 1,
  january: 1,
  japan: 1,
  japanese: 1,
  jar: 1,
  jason: 1,
  java: 1,
  javascript: 1,
  jay: 1,
  jazz: 1,
  jc: 1,
  jd: 1,
  je: 1,
  jean: 1,
  jeans: 1,
  jeep: 1,
  jeff: 1,
  jefferson: 1,
  jeffrey: 1,
  jelsoft: 1,
  jennifer: 1,
  jenny: 1,
  jeremy: 1,
  jerry: 1,
  jersey: 1,
  jerusalem: 1,
  jesse: 1,
  jessica: 1,
  jesus: 1,
  jet: 1,
  jets: 1,
  jewel: 1,
  jewellery: 1,
  jewelry: 1,
  jewish: 1,
  jews: 1,
  jill: 1,
  jim: 1,
  jimmy: 1,
  jj: 1,
  jm: 1,
  jo: 1,
  joan: 1,
  job: 1,
  jobs: 1,
  joe: 1,
  joel: 1,
  john: 1,
  johnny: 1,
  johns: 1,
  johnson: 1,
  johnston: 1,
  join: 1,
  joined: 1,
  joining: 1,
  joins: 1,
  joint: 1,
  joke: 1,
  jokes: 1,
  jon: 1,
  jonathan: 1,
  jones: 1,
  jordan: 1,
  jose: 1,
  joseph: 1,
  josh: 1,
  joshua: 1,
  journal: 1,
  journalism: 1,
  journalist: 1,
  journalists: 1,
  journals: 1,
  journey: 1,
  joy: 1,
  joyce: 1,
  jp: 1,
  jpeg: 1,
  jpg: 1,
  jr: 1,
  js: 1,
  juan: 1,
  judge: 1,
  judges: 1,
  judgment: 1,
  judicial: 1,
  judy: 1,
  juice: 1,
  jul: 1,
  julia: 1,
  julian: 1,
  julie: 1,
  july: 1,
  jump: 1,
  jumping: 1,
  jun: 1,
  junction: 1,
  june: 1,
  jungle: 1,
  junior: 1,
  junk: 1,
  jurisdiction: 1,
  jury: 1,
  just: 1,
  justice: 1,
  justify: 1,
  justin: 1,
  juvenile: 1,
  jvc: 1,
  k: 1,
  ka: 1,
  kai: 1,
  kansas: 1,
  karaoke: 1,
  karen: 1,
  karl: 1,
  karma: 1,
  kate: 1,
  kathy: 1,
  katie: 1,
  katrina: 1,
  kay: 1,
  kazakhstan: 1,
  kb: 1,
  kde: 1,
  keen: 1,
  keep: 1,
  keeping: 1,
  keeps: 1,
  keith: 1,
  kelkoo: 1,
  kelly: 1,
  ken: 1,
  kennedy: 1,
  kenneth: 1,
  kenny: 1,
  keno: 1,
  kent: 1,
  kentucky: 1,
  kenya: 1,
  kept: 1,
  kernel: 1,
  kerry: 1,
  kevin: 1,
  key: 1,
  keyboard: 1,
  keyboards: 1,
  keys: 1,
  keyword: 1,
  keywords: 1,
  kg: 1,
  kick: 1,
  kid: 1,
  kidney: 1,
  kids: 1,
  kijiji: 1,
  kill: 1,
  killed: 1,
  killer: 1,
  killing: 1,
  kills: 1,
  kilometers: 1,
  kim: 1,
  kinase: 1,
  kind: 1,
  kinda: 1,
  kinds: 1,
  king: 1,
  kingdom: 1,
  kings: 1,
  kingston: 1,
  kirk: 1,
  kiss: 1,
  kissing: 1,
  kit: 1,
  kitchen: 1,
  kits: 1,
  kitty: 1,
  klein: 1,
  km: 1,
  knee: 1,
  knew: 1,
  knife: 1,
  knight: 1,
  knights: 1,
  knit: 1,
  knitting: 1,
  knives: 1,
  knock: 1,
  know: 1,
  knowing: 1,
  knowledge: 1,
  knowledgestorm: 1,
  known: 1,
  knows: 1,
  ko: 1,
  kodak: 1,
  kong: 1,
  korea: 1,
  korean: 1,
  kruger: 1,
  ks: 1,
  kurt: 1,
  kuwait: 1,
  kw: 1,
  ky: 1,
  kyle: 1,
  l: 1,
  la: 1,
  lab: 1,
  label: 1,
  labeled: 1,
  labels: 1,
  labor: 1,
  laboratories: 1,
  laboratory: 1,
  labour: 1,
  labs: 1,
  lace: 1,
  lack: 1,
  ladder: 1,
  laden: 1,
  ladies: 1,
  lady: 1,
  lafayette: 1,
  laid: 1,
  lake: 1,
  lakes: 1,
  lamb: 1,
  lambda: 1,
  lamp: 1,
  lamps: 1,
  lan: 1,
  lancaster: 1,
  lance: 1,
  land: 1,
  landing: 1,
  lands: 1,
  landscape: 1,
  landscapes: 1,
  lane: 1,
  lanes: 1,
  lang: 1,
  language: 1,
  languages: 1,
  lanka: 1,
  laos: 1,
  lap: 1,
  laptop: 1,
  laptops: 1,
  large: 1,
  largely: 1,
  larger: 1,
  largest: 1,
  larry: 1,
  las: 1,
  laser: 1,
  last: 1,
  lasting: 1,
  lat: 1,
  late: 1,
  lately: 1,
  later: 1,
  latest: 1,
  latex: 1,
  latin: 1,
  latina: 1,
  latinas: 1,
  latino: 1,
  latitude: 1,
  latter: 1,
  latvia: 1,
  lauderdale: 1,
  laugh: 1,
  laughing: 1,
  launch: 1,
  launched: 1,
  launches: 1,
  laundry: 1,
  laura: 1,
  lauren: 1,
  law: 1,
  lawn: 1,
  lawrence: 1,
  laws: 1,
  lawsuit: 1,
  lawyer: 1,
  lawyers: 1,
  lay: 1,
  layer: 1,
  layers: 1,
  layout: 1,
  lazy: 1,
  lb: 1,
  lbs: 1,
  lc: 1,
  lcd: 1,
  ld: 1,
  le: 1,
  lead: 1,
  leader: 1,
  leaders: 1,
  leadership: 1,
  leading: 1,
  leads: 1,
  leaf: 1,
  league: 1,
  lean: 1,
  learn: 1,
  learned: 1,
  learners: 1,
  learning: 1,
  lease: 1,
  leasing: 1,
  least: 1,
  leather: 1,
  leave: 1,
  leaves: 1,
  leaving: 1,
  lebanon: 1,
  lecture: 1,
  lectures: 1,
  led: 1,
  lee: 1,
  leeds: 1,
  left: 1,
  leg: 1,
  legacy: 1,
  legal: 1,
  legally: 1,
  legend: 1,
  legendary: 1,
  legends: 1,
  legislation: 1,
  legislative: 1,
  legislature: 1,
  legitimate: 1,
  legs: 1,
  leisure: 1,
  lemon: 1,
  len: 1,
  lender: 1,
  lenders: 1,
  lending: 1,
  length: 1,
  lens: 1,
  lenses: 1,
  leo: 1,
  leon: 1,
  leonard: 1,
  leone: 1,
  les: 1,
  lesbian: 1,
  lesbians: 1,
  leslie: 1,
  less: 1,
  lesser: 1,
  lesson: 1,
  lessons: 1,
  let: 1,
  lets: 1,
  letter: 1,
  letters: 1,
  letting: 1,
  leu: 1,
  level: 1,
  levels: 1,
  levitra: 1,
  levy: 1,
  lewis: 1,
  lexington: 1,
  lexmark: 1,
  lexus: 1,
  lf: 1,
  lg: 1,
  li: 1,
  liabilities: 1,
  liability: 1,
  liable: 1,
  lib: 1,
  liberal: 1,
  liberia: 1,
  liberty: 1,
  librarian: 1,
  libraries: 1,
  library: 1,
  libs: 1,
  licence: 1,
  license: 1,
  licensed: 1,
  licenses: 1,
  licensing: 1,
  licking: 1,
  lid: 1,
  lie: 1,
  liechtenstein: 1,
  lies: 1,
  life: 1,
  lifestyle: 1,
  lifetime: 1,
  lift: 1,
  light: 1,
  lightbox: 1,
  lighter: 1,
  lighting: 1,
  lightning: 1,
  lights: 1,
  lightweight: 1,
  like: 1,
  liked: 1,
  likelihood: 1,
  likely: 1,
  likes: 1,
  likewise: 1,
  lil: 1,
  lime: 1,
  limit: 1,
  limitation: 1,
  limitations: 1,
  limited: 1,
  limiting: 1,
  limits: 1,
  limousines: 1,
  lincoln: 1,
  linda: 1,
  lindsay: 1,
  line: 1,
  linear: 1,
  lined: 1,
  lines: 1,
  lingerie: 1,
  link: 1,
  linked: 1,
  linking: 1,
  links: 1,
  linux: 1,
  lion: 1,
  lions: 1,
  lip: 1,
  lips: 1,
  liquid: 1,
  lisa: 1,
  list: 1,
  listed: 1,
  listen: 1,
  listening: 1,
  listing: 1,
  listings: 1,
  listprice: 1,
  lists: 1,
  lit: 1,
  lite: 1,
  literacy: 1,
  literally: 1,
  literary: 1,
  literature: 1,
  lithuania: 1,
  litigation: 1,
  little: 1,
  live: 1,
  livecam: 1,
  lived: 1,
  liver: 1,
  liverpool: 1,
  lives: 1,
  livesex: 1,
  livestock: 1,
  living: 1,
  liz: 1,
  ll: 1,
  llc: 1,
  lloyd: 1,
  llp: 1,
  lm: 1,
  ln: 1,
  lo: 1,
  load: 1,
  loaded: 1,
  loading: 1,
  loads: 1,
  loan: 1,
  loans: 1,
  lobby: 1,
  loc: 1,
  local: 1,
  locale: 1,
  locally: 1,
  locate: 1,
  located: 1,
  location: 1,
  locations: 1,
  locator: 1,
  lock: 1,
  locked: 1,
  locking: 1,
  locks: 1,
  lodge: 1,
  lodging: 1,
  log: 1,
  logan: 1,
  logged: 1,
  logging: 1,
  logic: 1,
  logical: 1,
  login: 1,
  logistics: 1,
  logitech: 1,
  logo: 1,
  logos: 1,
  logs: 1,
  lol: 1,
  lolita: 1,
  london: 1,
  lone: 1,
  lonely: 1,
  long: 1,
  longer: 1,
  longest: 1,
  longitude: 1,
  look: 1,
  looked: 1,
  looking: 1,
  looks: 1,
  looksmart: 1,
  lookup: 1,
  loop: 1,
  loops: 1,
  loose: 1,
  lopez: 1,
  lord: 1,
  los: 1,
  lose: 1,
  losing: 1,
  loss: 1,
  losses: 1,
  lost: 1,
  lot: 1,
  lots: 1,
  lottery: 1,
  lotus: 1,
  lou: 1,
  loud: 1,
  louis: 1,
  louise: 1,
  louisiana: 1,
  louisville: 1,
  lounge: 1,
  love: 1,
  loved: 1,
  lovely: 1,
  lover: 1,
  lovers: 1,
  loves: 1,
  loving: 1,
  low: 1,
  lower: 1,
  lowest: 1,
  lows: 1,
  lp: 1,
  ls: 1,
  lt: 1,
  ltd: 1,
  lu: 1,
  lucas: 1,
  lucia: 1,
  luck: 1,
  lucky: 1,
  lucy: 1,
  luggage: 1,
  luis: 1,
  luke: 1,
  lunch: 1,
  lung: 1,
  luther: 1,
  luxembourg: 1,
  luxury: 1,
  lycos: 1,
  lying: 1,
  lynn: 1,
  lyric: 1,
  lyrics: 1,
  m: 1,
  ma: 1,
  mac: 1,
  macedonia: 1,
  machine: 1,
  machinery: 1,
  machines: 1,
  macintosh: 1,
  macro: 1,
  macromedia: 1,
  mad: 1,
  madagascar: 1,
  made: 1,
  madison: 1,
  madness: 1,
  madonna: 1,
  madrid: 1,
  mae: 1,
  mag: 1,
  magazine: 1,
  magazines: 1,
  magic: 1,
  magical: 1,
  magnet: 1,
  magnetic: 1,
  magnificent: 1,
  magnitude: 1,
  mai: 1,
  maiden: 1,
  mail: 1,
  mailed: 1,
  mailing: 1,
  mailman: 1,
  mails: 1,
  mailto: 1,
  main: 1,
  maine: 1,
  mainland: 1,
  mainly: 1,
  mainstream: 1,
  maintain: 1,
  maintained: 1,
  maintaining: 1,
  maintains: 1,
  maintenance: 1,
  major: 1,
  majority: 1,
  make: 1,
  maker: 1,
  makers: 1,
  makes: 1,
  makeup: 1,
  making: 1,
  malawi: 1,
  malaysia: 1,
  maldives: 1,
  male: 1,
  males: 1,
  mali: 1,
  mall: 1,
  malpractice: 1,
  malta: 1,
  mambo: 1,
  man: 1,
  manage: 1,
  managed: 1,
  management: 1,
  manager: 1,
  managers: 1,
  managing: 1,
  manchester: 1,
  mandate: 1,
  mandatory: 1,
  manga: 1,
  manhattan: 1,
  manitoba: 1,
  manner: 1,
  manor: 1,
  manual: 1,
  manually: 1,
  manuals: 1,
  manufacture: 1,
  manufactured: 1,
  manufacturer: 1,
  manufacturers: 1,
  manufacturing: 1,
  many: 1,
  map: 1,
  maple: 1,
  mapping: 1,
  maps: 1,
  mar: 1,
  marathon: 1,
  marble: 1,
  marc: 1,
  march: 1,
  marco: 1,
  marcus: 1,
  mardi: 1,
  margaret: 1,
  margin: 1,
  maria: 1,
  mariah: 1,
  marie: 1,
  marijuana: 1,
  marilyn: 1,
  marina: 1,
  marine: 1,
  mario: 1,
  marion: 1,
  maritime: 1,
  mark: 1,
  marked: 1,
  marker: 1,
  markers: 1,
  market: 1,
  marketing: 1,
  marketplace: 1,
  markets: 1,
  marking: 1,
  marks: 1,
  marriage: 1,
  married: 1,
  marriott: 1,
  mars: 1,
  marsh: 1,
  marshall: 1,
  mart: 1,
  martha: 1,
  martial: 1,
  martin: 1,
  marvel: 1,
  mary: 1,
  maryland: 1,
  mas: 1,
  mask: 1,
  mason: 1,
  mass: 1,
  massachusetts: 1,
  massage: 1,
  massive: 1,
  master: 1,
  mastercard: 1,
  masters: 1,
  masturbating: 1,
  masturbation: 1,
  mat: 1,
  match: 1,
  matched: 1,
  matches: 1,
  matching: 1,
  mate: 1,
  material: 1,
  materials: 1,
  maternity: 1,
  math: 1,
  mathematical: 1,
  mathematics: 1,
  mating: 1,
  matrix: 1,
  mats: 1,
  matt: 1,
  matter: 1,
  matters: 1,
  matthew: 1,
  mattress: 1,
  mature: 1,
  maui: 1,
  mauritius: 1,
  max: 1,
  maximize: 1,
  maximum: 1,
  may: 1,
  maybe: 1,
  mayor: 1,
  mazda: 1,
  mb: 1,
  mba: 1,
  mc: 1,
  mcdonald: 1,
  md: 1,
  me: 1,
  meal: 1,
  meals: 1,
  mean: 1,
  meaning: 1,
  meaningful: 1,
  means: 1,
  meant: 1,
  meanwhile: 1,
  measure: 1,
  measured: 1,
  measurement: 1,
  measurements: 1,
  measures: 1,
  measuring: 1,
  meat: 1,
  mechanical: 1,
  mechanics: 1,
  mechanism: 1,
  mechanisms: 1,
  med: 1,
  medal: 1,
  media: 1,
  median: 1,
  mediawiki: 1,
  medicaid: 1,
  medical: 1,
  medicare: 1,
  medication: 1,
  medications: 1,
  medicine: 1,
  medicines: 1,
  medieval: 1,
  meditation: 1,
  mediterranean: 1,
  medium: 1,
  medline: 1,
  meet: 1,
  meeting: 1,
  meetings: 1,
  meets: 1,
  meetup: 1,
  mega: 1,
  mel: 1,
  melbourne: 1,
  melissa: 1,
  mem: 1,
  member: 1,
  members: 1,
  membership: 1,
  membrane: 1,
  memo: 1,
  memorabilia: 1,
  memorial: 1,
  memories: 1,
  memory: 1,
  memphis: 1,
  men: 1,
  mens: 1,
  ment: 1,
  mental: 1,
  mention: 1,
  mentioned: 1,
  mentor: 1,
  menu: 1,
  menus: 1,
  mercedes: 1,
  merchandise: 1,
  merchant: 1,
  merchants: 1,
  mercury: 1,
  mercy: 1,
  mere: 1,
  merely: 1,
  merge: 1,
  merger: 1,
  merit: 1,
  merry: 1,
  mesa: 1,
  mesh: 1,
  mess: 1,
  message: 1,
  messages: 1,
  messaging: 1,
  messenger: 1,
  met: 1,
  meta: 1,
  metabolism: 1,
  metadata: 1,
  metal: 1,
  metallic: 1,
  metallica: 1,
  metals: 1,
  meter: 1,
  meters: 1,
  method: 1,
  methodology: 1,
  methods: 1,
  metres: 1,
  metric: 1,
  metro: 1,
  metropolitan: 1,
  mexican: 1,
  mexico: 1,
  meyer: 1,
  mf: 1,
  mg: 1,
  mh: 1,
  mhz: 1,
  mi: 1,
  mia: 1,
  miami: 1,
  mic: 1,
  mice: 1,
  michael: 1,
  michel: 1,
  michelle: 1,
  michigan: 1,
  micro: 1,
  microphone: 1,
  microsoft: 1,
  microwave: 1,
  mid: 1,
  middle: 1,
  midi: 1,
  midlands: 1,
  midnight: 1,
  midwest: 1,
  might: 1,
  mighty: 1,
  migration: 1,
  mike: 1,
  mil: 1,
  milan: 1,
  mild: 1,
  mile: 1,
  mileage: 1,
  miles: 1,
  milf: 1,
  milfhunter: 1,
  milfs: 1,
  military: 1,
  milk: 1,
  mill: 1,
  millennium: 1,
  miller: 1,
  million: 1,
  millions: 1,
  mills: 1,
  milton: 1,
  milwaukee: 1,
  mime: 1,
  min: 1,
  mind: 1,
  minds: 1,
  mine: 1,
  mineral: 1,
  minerals: 1,
  mines: 1,
  mini: 1,
  miniature: 1,
  minimal: 1,
  minimize: 1,
  minimum: 1,
  mining: 1,
  minister: 1,
  ministers: 1,
  ministries: 1,
  ministry: 1,
  minneapolis: 1,
  minnesota: 1,
  minolta: 1,
  minor: 1,
  minority: 1,
  mins: 1,
  mint: 1,
  minus: 1,
  minute: 1,
  minutes: 1,
  miracle: 1,
  mirror: 1,
  mirrors: 1,
  misc: 1,
  miscellaneous: 1,
  miss: 1,
  missed: 1,
  missile: 1,
  missing: 1,
  mission: 1,
  missions: 1,
  mississippi: 1,
  missouri: 1,
  mistake: 1,
  mistakes: 1,
  mistress: 1,
  mit: 1,
  mitchell: 1,
  mitsubishi: 1,
  mix: 1,
  mixed: 1,
  mixer: 1,
  mixing: 1,
  mixture: 1,
  mj: 1,
  ml: 1,
  mlb: 1,
  mls: 1,
  mm: 1,
  mn: 1,
  mo: 1,
  mobile: 1,
  mobiles: 1,
  mobility: 1,
  mod: 1,
  mode: 1,
  model: 1,
  modeling: 1,
  modelling: 1,
  models: 1,
  modem: 1,
  modems: 1,
  moderate: 1,
  moderator: 1,
  moderators: 1,
  modern: 1,
  modes: 1,
  modification: 1,
  modifications: 1,
  modified: 1,
  modify: 1,
  mods: 1,
  modular: 1,
  module: 1,
  modules: 1,
  moisture: 1,
  mold: 1,
  moldova: 1,
  molecular: 1,
  molecules: 1,
  mom: 1,
  moment: 1,
  moments: 1,
  momentum: 1,
  moms: 1,
  mon: 1,
  monaco: 1,
  monday: 1,
  monetary: 1,
  money: 1,
  mongolia: 1,
  monica: 1,
  monitor: 1,
  monitored: 1,
  monitoring: 1,
  monitors: 1,
  monkey: 1,
  mono: 1,
  monroe: 1,
  monster: 1,
  monsters: 1,
  montana: 1,
  monte: 1,
  montgomery: 1,
  month: 1,
  monthly: 1,
  months: 1,
  montreal: 1,
  mood: 1,
  moon: 1,
  moore: 1,
  moral: 1,
  more: 1,
  moreover: 1,
  morgan: 1,
  morning: 1,
  morocco: 1,
  morris: 1,
  morrison: 1,
  mortality: 1,
  mortgage: 1,
  mortgages: 1,
  moscow: 1,
  moses: 1,
  moss: 1,
  most: 1,
  mostly: 1,
  motel: 1,
  motels: 1,
  mother: 1,
  motherboard: 1,
  mothers: 1,
  motion: 1,
  motivated: 1,
  motivation: 1,
  motor: 1,
  motorcycle: 1,
  motorcycles: 1,
  motorola: 1,
  motors: 1,
  mount: 1,
  mountain: 1,
  mountains: 1,
  mounted: 1,
  mounting: 1,
  mounts: 1,
  mouse: 1,
  mouth: 1,
  move: 1,
  moved: 1,
  movement: 1,
  movements: 1,
  movers: 1,
  moves: 1,
  movie: 1,
  movies: 1,
  moving: 1,
  mozambique: 1,
  mozilla: 1,
  mp: 1,
  mpeg: 1,
  mpegs: 1,
  mpg: 1,
  mph: 1,
  mr: 1,
  mrna: 1,
  mrs: 1,
  ms: 1,
  msg: 1,
  msgid: 1,
  msgstr: 1,
  msie: 1,
  msn: 1,
  mt: 1,
  mtv: 1,
  mu: 1,
  much: 1,
  mud: 1,
  mug: 1,
  multi: 1,
  multimedia: 1,
  multiple: 1,
  mumbai: 1,
  munich: 1,
  municipal: 1,
  municipality: 1,
  murder: 1,
  murphy: 1,
  murray: 1,
  muscle: 1,
  muscles: 1,
  museum: 1,
  museums: 1,
  music: 1,
  musical: 1,
  musician: 1,
  musicians: 1,
  muslim: 1,
  muslims: 1,
  must: 1,
  mustang: 1,
  mutual: 1,
  muze: 1,
  mv: 1,
  mw: 1,
  mx: 1,
  my: 1,
  myanmar: 1,
  myers: 1,
  myrtle: 1,
  myself: 1,
  mysimon: 1,
  myspace: 1,
  mysql: 1,
  mysterious: 1,
  mystery: 1,
  myth: 1,
  n: 1,
  na: 1,
  nail: 1,
  nails: 1,
  naked: 1,
  nam: 1,
  name: 1,
  named: 1,
  namely: 1,
  names: 1,
  namespace: 1,
  namibia: 1,
  nancy: 1,
  nano: 1,
  naples: 1,
  narrative: 1,
  narrow: 1,
  nasa: 1,
  nascar: 1,
  nasdaq: 1,
  nashville: 1,
  nasty: 1,
  nat: 1,
  nathan: 1,
  nation: 1,
  national: 1,
  nationally: 1,
  nations: 1,
  nationwide: 1,
  native: 1,
  nato: 1,
  natural: 1,
  naturally: 1,
  naturals: 1,
  nature: 1,
  naughty: 1,
  nav: 1,
  naval: 1,
  navigate: 1,
  navigation: 1,
  navigator: 1,
  navy: 1,
  nb: 1,
  nba: 1,
  nbc: 1,
  nc: 1,
  ncaa: 1,
  nd: 1,
  ne: 1,
  near: 1,
  nearby: 1,
  nearest: 1,
  nearly: 1,
  nebraska: 1,
  nec: 1,
  necessarily: 1,
  necessary: 1,
  necessity: 1,
  neck: 1,
  necklace: 1,
  need: 1,
  needed: 1,
  needle: 1,
  needs: 1,
  negative: 1,
  negotiation: 1,
  negotiations: 1,
  neighbor: 1,
  neighborhood: 1,
  neighbors: 1,
  neil: 1,
  neither: 1,
  nelson: 1,
  neo: 1,
  neon: 1,
  nepal: 1,
  nerve: 1,
  nervous: 1,
  nest: 1,
  nested: 1,
  net: 1,
  netherlands: 1,
  netscape: 1,
  network: 1,
  networking: 1,
  networks: 1,
  neural: 1,
  neutral: 1,
  nevada: 1,
  never: 1,
  nevertheless: 1,
  new: 1,
  newark: 1,
  newbie: 1,
  newcastle: 1,
  newer: 1,
  newest: 1,
  newfoundland: 1,
  newly: 1,
  newman: 1,
  newport: 1,
  news: 1,
  newsletter: 1,
  newsletters: 1,
  newspaper: 1,
  newspapers: 1,
  newton: 1,
  next: 1,
  nextel: 1,
  nfl: 1,
  ng: 1,
  nh: 1,
  nhl: 1,
  nhs: 1,
  ni: 1,
  niagara: 1,
  nicaragua: 1,
  nice: 1,
  nicholas: 1,
  nick: 1,
  nickel: 1,
  nickname: 1,
  nicole: 1,
  niger: 1,
  nigeria: 1,
  night: 1,
  nightlife: 1,
  nightmare: 1,
  nights: 1,
  nike: 1,
  nikon: 1,
  nil: 1,
  nine: 1,
  nintendo: 1,
  nipple: 1,
  nipples: 1,
  nirvana: 1,
  nissan: 1,
  nitrogen: 1,
  nj: 1,
  nl: 1,
  nm: 1,
  nn: 1,
  no: 1,
  noble: 1,
  nobody: 1,
  node: 1,
  nodes: 1,
  noise: 1,
  nokia: 1,
  nominated: 1,
  nomination: 1,
  nominations: 1,
  non: 1,
  none: 1,
  nonprofit: 1,
  noon: 1,
  nor: 1,
  norfolk: 1,
  norm: 1,
  normal: 1,
  normally: 1,
  norman: 1,
  north: 1,
  northeast: 1,
  northern: 1,
  northwest: 1,
  norton: 1,
  norway: 1,
  norwegian: 1,
  nose: 1,
  not: 1,
  note: 1,
  notebook: 1,
  notebooks: 1,
  noted: 1,
  notes: 1,
  nothing: 1,
  notice: 1,
  noticed: 1,
  notices: 1,
  notification: 1,
  notifications: 1,
  notified: 1,
  notify: 1,
  notion: 1,
  notre: 1,
  nottingham: 1,
  nov: 1,
  nova: 1,
  novel: 1,
  novels: 1,
  novelty: 1,
  november: 1,
  now: 1,
  nowhere: 1,
  np: 1,
  nr: 1,
  ns: 1,
  nsw: 1,
  nt: 1,
  ntsc: 1,
  nu: 1,
  nuclear: 1,
  nude: 1,
  nudist: 1,
  nudity: 1,
  nuke: 1,
  null: 1,
  number: 1,
  numbers: 1,
  numeric: 1,
  numerical: 1,
  numerous: 1,
  nurse: 1,
  nursery: 1,
  nurses: 1,
  nursing: 1,
  nut: 1,
  nutrition: 1,
  nutritional: 1,
  nuts: 1,
  nutten: 1,
  nv: 1,
  nvidia: 1,
  nw: 1,
  ny: 1,
  nyc: 1,
  nylon: 1,
  nz: 1,
  o: 1,
  oak: 1,
  oakland: 1,
  oaks: 1,
  oasis: 1,
  ob: 1,
  obesity: 1,
  obituaries: 1,
  obj: 1,
  object: 1,
  objective: 1,
  objectives: 1,
  objects: 1,
  obligation: 1,
  obligations: 1,
  observation: 1,
  observations: 1,
  observe: 1,
  observed: 1,
  observer: 1,
  obtain: 1,
  obtained: 1,
  obtaining: 1,
  obvious: 1,
  obviously: 1,
  oc: 1,
  occasion: 1,
  occasional: 1,
  occasionally: 1,
  occasions: 1,
  occupation: 1,
  occupational: 1,
  occupations: 1,
  occupied: 1,
  occur: 1,
  occurred: 1,
  occurrence: 1,
  occurring: 1,
  occurs: 1,
  ocean: 1,
  oclc: 1,
  oct: 1,
  october: 1,
  odd: 1,
  odds: 1,
  oe: 1,
  oecd: 1,
  oem: 1,
  of: 1,
  off: 1,
  offense: 1,
  offensive: 1,
  offer: 1,
  offered: 1,
  offering: 1,
  offerings: 1,
  offers: 1,
  office: 1,
  officer: 1,
  officers: 1,
  offices: 1,
  official: 1,
  officially: 1,
  officials: 1,
  offline: 1,
  offset: 1,
  offshore: 1,
  often: 1,
  og: 1,
  oh: 1,
  ohio: 1,
  oil: 1,
  oils: 1,
  ok: 1,
  okay: 1,
  oklahoma: 1,
  ol: 1,
  old: 1,
  older: 1,
  oldest: 1,
  olive: 1,
  oliver: 1,
  olympic: 1,
  olympics: 1,
  olympus: 1,
  om: 1,
  omaha: 1,
  oman: 1,
  omega: 1,
  omissions: 1,
  on: 1,
  once: 1,
  one: 1,
  ones: 1,
  ongoing: 1,
  onion: 1,
  online: 1,
  only: 1,
  ons: 1,
  ontario: 1,
  onto: 1,
  oo: 1,
  ooo: 1,
  oops: 1,
  op: 1,
  open: 1,
  opened: 1,
  opening: 1,
  openings: 1,
  opens: 1,
  opera: 1,
  operate: 1,
  operated: 1,
  operates: 1,
  operating: 1,
  operation: 1,
  operational: 1,
  operations: 1,
  operator: 1,
  operators: 1,
  opinion: 1,
  opinions: 1,
  opponent: 1,
  opponents: 1,
  opportunities: 1,
  opportunity: 1,
  opposed: 1,
  opposite: 1,
  opposition: 1,
  opt: 1,
  optical: 1,
  optics: 1,
  optimal: 1,
  optimization: 1,
  optimize: 1,
  optimum: 1,
  option: 1,
  optional: 1,
  options: 1,
  or: 1,
  oracle: 1,
  oral: 1,
  orange: 1,
  orbit: 1,
  orchestra: 1,
  order: 1,
  ordered: 1,
  ordering: 1,
  orders: 1,
  ordinance: 1,
  ordinary: 1,
  oregon: 1,
  org: 1,
  organ: 1,
  organic: 1,
  organisation: 1,
  organisations: 1,
  organised: 1,
  organisms: 1,
  organization: 1,
  organizational: 1,
  organizations: 1,
  organize: 1,
  organized: 1,
  organizer: 1,
  organizing: 1,
  orgasm: 1,
  orgy: 1,
  oriental: 1,
  orientation: 1,
  oriented: 1,
  origin: 1,
  original: 1,
  originally: 1,
  origins: 1,
  orlando: 1,
  orleans: 1,
  os: 1,
  oscar: 1,
  ot: 1,
  other: 1,
  others: 1,
  otherwise: 1,
  ottawa: 1,
  ou: 1,
  ought: 1,
  our: 1,
  ours: 1,
  ourselves: 1,
  out: 1,
  outcome: 1,
  outcomes: 1,
  outdoor: 1,
  outdoors: 1,
  outer: 1,
  outlet: 1,
  outlets: 1,
  outline: 1,
  outlined: 1,
  outlook: 1,
  output: 1,
  outputs: 1,
  outreach: 1,
  outside: 1,
  outsourcing: 1,
  outstanding: 1,
  oval: 1,
  oven: 1,
  over: 1,
  overall: 1,
  overcome: 1,
  overhead: 1,
  overnight: 1,
  overseas: 1,
  overview: 1,
  owen: 1,
  own: 1,
  owned: 1,
  owner: 1,
  owners: 1,
  ownership: 1,
  owns: 1,
  oxford: 1,
  oxide: 1,
  oxygen: 1,
  oz: 1,
  ozone: 1
};

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon10000", function() { return TheMostCommon10000; });
// https://englishgrammarhere.com/vocabulary/10000-most-common-words-in-english-part-5/
const TheMostCommon10000 = {
  p: 1,
  pa: 1,
  pac: 1,
  pace: 1,
  pacific: 1,
  pack: 1,
  package: 1,
  packages: 1,
  packaging: 1,
  packard: 1,
  packed: 1,
  packet: 1,
  packets: 1,
  packing: 1,
  packs: 1,
  pad: 1,
  pads: 1,
  page: 1,
  pages: 1,
  paid: 1,
  pain: 1,
  painful: 1,
  paint: 1,
  paintball: 1,
  painted: 1,
  painting: 1,
  paintings: 1,
  pair: 1,
  pairs: 1,
  pakistan: 1,
  pal: 1,
  palace: 1,
  pale: 1,
  palestine: 1,
  palestinian: 1,
  palm: 1,
  palmer: 1,
  pam: 1,
  pamela: 1,
  pan: 1,
  panama: 1,
  panasonic: 1,
  panel: 1,
  panels: 1,
  panic: 1,
  panties: 1,
  pants: 1,
  pantyhose: 1,
  paper: 1,
  paperback: 1,
  paperbacks: 1,
  papers: 1,
  papua: 1,
  par: 1,
  para: 1,
  parade: 1,
  paradise: 1,
  paragraph: 1,
  paragraphs: 1,
  paraguay: 1,
  parallel: 1,
  parameter: 1,
  parameters: 1,
  parcel: 1,
  parent: 1,
  parental: 1,
  parenting: 1,
  parents: 1,
  paris: 1,
  parish: 1,
  park: 1,
  parker: 1,
  parking: 1,
  parks: 1,
  parliament: 1,
  parliamentary: 1,
  part: 1,
  partial: 1,
  partially: 1,
  participant: 1,
  participants: 1,
  participate: 1,
  participated: 1,
  participating: 1,
  participation: 1,
  particle: 1,
  particles: 1,
  particular: 1,
  particularly: 1,
  parties: 1,
  partition: 1,
  partly: 1,
  partner: 1,
  partners: 1,
  partnership: 1,
  partnerships: 1,
  parts: 1,
  party: 1,
  pas: 1,
  paso: 1,
  pass: 1,
  passage: 1,
  passed: 1,
  passenger: 1,
  passengers: 1,
  passes: 1,
  passing: 1,
  passion: 1,
  passive: 1,
  passport: 1,
  password: 1,
  passwords: 1,
  past: 1,
  pasta: 1,
  paste: 1,
  pastor: 1,
  pat: 1,
  patch: 1,
  patches: 1,
  patent: 1,
  patents: 1,
  path: 1,
  pathology: 1,
  paths: 1,
  patient: 1,
  patients: 1,
  patio: 1,
  patricia: 1,
  patrick: 1,
  patrol: 1,
  pattern: 1,
  patterns: 1,
  paul: 1,
  pavilion: 1,
  paxil: 1,
  pay: 1,
  payable: 1,
  payday: 1,
  paying: 1,
  payment: 1,
  payments: 1,
  paypal: 1,
  payroll: 1,
  pays: 1,
  pb: 1,
  pc: 1,
  pci: 1,
  pcs: 1,
  pct: 1,
  pd: 1,
  pda: 1,
  pdas: 1,
  pdf: 1,
  pdt: 1,
  pe: 1,
  peace: 1,
  peaceful: 1,
  peak: 1,
  pearl: 1,
  peas: 1,
  pediatric: 1,
  pee: 1,
  peeing: 1,
  peer: 1,
  peers: 1,
  pen: 1,
  penalties: 1,
  penalty: 1,
  pencil: 1,
  pendant: 1,
  pending: 1,
  penetration: 1,
  penguin: 1,
  peninsula: 1,
  penis: 1,
  penn: 1,
  pennsylvania: 1,
  penny: 1,
  pens: 1,
  pension: 1,
  pensions: 1,
  pentium: 1,
  people: 1,
  peoples: 1,
  pepper: 1,
  per: 1,
  perceived: 1,
  percent: 1,
  percentage: 1,
  perception: 1,
  perfect: 1,
  perfectly: 1,
  perform: 1,
  performance: 1,
  performances: 1,
  performed: 1,
  performer: 1,
  performing: 1,
  performs: 1,
  perfume: 1,
  perhaps: 1,
  period: 1,
  periodic: 1,
  periodically: 1,
  periods: 1,
  peripheral: 1,
  peripherals: 1,
  perl: 1,
  permalink: 1,
  permanent: 1,
  permission: 1,
  permissions: 1,
  permit: 1,
  permits: 1,
  permitted: 1,
  perry: 1,
  persian: 1,
  persistent: 1,
  person: 1,
  personal: 1,
  personality: 1,
  personalized: 1,
  personally: 1,
  personals: 1,
  personnel: 1,
  persons: 1,
  perspective: 1,
  perspectives: 1,
  perth: 1,
  peru: 1,
  pest: 1,
  pet: 1,
  pete: 1,
  peter: 1,
  petersburg: 1,
  peterson: 1,
  petite: 1,
  petition: 1,
  petroleum: 1,
  pets: 1,
  pf: 1,
  pg: 1,
  pgp: 1,
  ph: 1,
  phantom: 1,
  pharmaceutical: 1,
  pharmaceuticals: 1,
  pharmacies: 1,
  pharmacology: 1,
  pharmacy: 1,
  phase: 1,
  phases: 1,
  phd: 1,
  phenomenon: 1,
  phentermine: 1,
  phi: 1,
  phil: 1,
  philadelphia: 1,
  philip: 1,
  philippines: 1,
  philips: 1,
  phillips: 1,
  philosophy: 1,
  phoenix: 1,
  phone: 1,
  phones: 1,
  photo: 1,
  photograph: 1,
  photographer: 1,
  photographers: 1,
  photographic: 1,
  photographs: 1,
  photography: 1,
  photos: 1,
  photoshop: 1,
  php: 1,
  phpbb: 1,
  phrase: 1,
  phrases: 1,
  phys: 1,
  physical: 1,
  physically: 1,
  physician: 1,
  physicians: 1,
  physics: 1,
  physiology: 1,
  pi: 1,
  piano: 1,
  pic: 1,
  pichunter: 1,
  pick: 1,
  picked: 1,
  picking: 1,
  picks: 1,
  pickup: 1,
  picnic: 1,
  pics: 1,
  picture: 1,
  pictures: 1,
  pie: 1,
  piece: 1,
  pieces: 1,
  pierce: 1,
  pierre: 1,
  pig: 1,
  pike: 1,
  pill: 1,
  pillow: 1,
  pills: 1,
  pilot: 1,
  pin: 1,
  pine: 1,
  ping: 1,
  pink: 1,
  pins: 1,
  pioneer: 1,
  pipe: 1,
  pipeline: 1,
  pipes: 1,
  pirates: 1,
  piss: 1,
  pissing: 1,
  pit: 1,
  pitch: 1,
  pittsburgh: 1,
  pix: 1,
  pixel: 1,
  pixels: 1,
  pizza: 1,
  pj: 1,
  pk: 1,
  pl: 1,
  place: 1,
  placed: 1,
  placement: 1,
  places: 1,
  placing: 1,
  plain: 1,
  plains: 1,
  plaintiff: 1,
  plan: 1,
  plane: 1,
  planes: 1,
  planet: 1,
  planets: 1,
  planned: 1,
  planner: 1,
  planners: 1,
  planning: 1,
  plans: 1,
  plant: 1,
  plants: 1,
  plasma: 1,
  plastic: 1,
  plastics: 1,
  plate: 1,
  plates: 1,
  platform: 1,
  platforms: 1,
  platinum: 1,
  play: 1,
  playback: 1,
  playboy: 1,
  played: 1,
  player: 1,
  players: 1,
  playing: 1,
  playlist: 1,
  plays: 1,
  playstation: 1,
  plaza: 1,
  plc: 1,
  pleasant: 1,
  please: 1,
  pleased: 1,
  pleasure: 1,
  pledge: 1,
  plenty: 1,
  plot: 1,
  plots: 1,
  plug: 1,
  plugin: 1,
  plugins: 1,
  plumbing: 1,
  plus: 1,
  plymouth: 1,
  pm: 1,
  pmc: 1,
  pmid: 1,
  pn: 1,
  po: 1,
  pocket: 1,
  pockets: 1,
  pod: 1,
  podcast: 1,
  podcasts: 1,
  poem: 1,
  poems: 1,
  poet: 1,
  poetry: 1,
  point: 1,
  pointed: 1,
  pointer: 1,
  pointing: 1,
  points: 1,
  poison: 1,
  pokemon: 1,
  poker: 1,
  poland: 1,
  polar: 1,
  pole: 1,
  police: 1,
  policies: 1,
  policy: 1,
  polish: 1,
  polished: 1,
  political: 1,
  politicians: 1,
  politics: 1,
  poll: 1,
  polls: 1,
  pollution: 1,
  polo: 1,
  poly: 1,
  polyester: 1,
  polymer: 1,
  polyphonic: 1,
  pond: 1,
  pontiac: 1,
  pool: 1,
  pools: 1,
  poor: 1,
  pop: 1,
  pope: 1,
  popular: 1,
  popularity: 1,
  population: 1,
  populations: 1,
  por: 1,
  porcelain: 1,
  pork: 1,
  porn: 1,
  porno: 1,
  porsche: 1,
  port: 1,
  portable: 1,
  portal: 1,
  porter: 1,
  portfolio: 1,
  portion: 1,
  portions: 1,
  portland: 1,
  portrait: 1,
  portraits: 1,
  ports: 1,
  portsmouth: 1,
  portugal: 1,
  portuguese: 1,
  pos: 1,
  pose: 1,
  posing: 1,
  position: 1,
  positioning: 1,
  positions: 1,
  positive: 1,
  possess: 1,
  possession: 1,
  possibilities: 1,
  possibility: 1,
  possible: 1,
  possibly: 1,
  post: 1,
  postage: 1,
  postal: 1,
  postcard: 1,
  postcards: 1,
  posted: 1,
  poster: 1,
  posters: 1,
  posting: 1,
  postings: 1,
  postposted: 1,
  posts: 1,
  pot: 1,
  potato: 1,
  potatoes: 1,
  potential: 1,
  potentially: 1,
  potter: 1,
  pottery: 1,
  poultry: 1,
  pound: 1,
  pounds: 1,
  pour: 1,
  poverty: 1,
  powder: 1,
  powell: 1,
  power: 1,
  powered: 1,
  powerful: 1,
  powerpoint: 1,
  powers: 1,
  powerseller: 1,
  pp: 1,
  ppc: 1,
  ppm: 1,
  pr: 1,
  practical: 1,
  practice: 1,
  practices: 1,
  practitioner: 1,
  practitioners: 1,
  prague: 1,
  prairie: 1,
  praise: 1,
  pray: 1,
  prayer: 1,
  prayers: 1,
  pre: 1,
  preceding: 1,
  precious: 1,
  precipitation: 1,
  precise: 1,
  precisely: 1,
  precision: 1,
  predict: 1,
  predicted: 1,
  prediction: 1,
  predictions: 1,
  prefer: 1,
  preference: 1,
  preferences: 1,
  preferred: 1,
  prefers: 1,
  prefix: 1,
  pregnancy: 1,
  pregnant: 1,
  preliminary: 1,
  premier: 1,
  premiere: 1,
  premises: 1,
  premium: 1,
  prep: 1,
  prepaid: 1,
  preparation: 1,
  prepare: 1,
  prepared: 1,
  preparing: 1,
  prerequisite: 1,
  prescribed: 1,
  prescription: 1,
  presence: 1,
  present: 1,
  presentation: 1,
  presentations: 1,
  presented: 1,
  presenting: 1,
  presently: 1,
  presents: 1,
  preservation: 1,
  preserve: 1,
  president: 1,
  presidential: 1,
  press: 1,
  pressed: 1,
  pressing: 1,
  pressure: 1,
  preston: 1,
  pretty: 1,
  prev: 1,
  prevent: 1,
  preventing: 1,
  prevention: 1,
  preview: 1,
  previews: 1,
  previous: 1,
  previously: 1,
  price: 1,
  priced: 1,
  prices: 1,
  pricing: 1,
  pride: 1,
  priest: 1,
  primarily: 1,
  primary: 1,
  prime: 1,
  prince: 1,
  princess: 1,
  princeton: 1,
  principal: 1,
  principle: 1,
  principles: 1,
  print: 1,
  printable: 1,
  printed: 1,
  printer: 1,
  printers: 1,
  printing: 1,
  prints: 1,
  prior: 1,
  priorities: 1,
  priority: 1,
  prison: 1,
  prisoner: 1,
  prisoners: 1,
  privacy: 1,
  private: 1,
  privilege: 1,
  privileges: 1,
  prix: 1,
  prize: 1,
  prizes: 1,
  pro: 1,
  probability: 1,
  probably: 1,
  probe: 1,
  problem: 1,
  problems: 1,
  proc: 1,
  procedure: 1,
  procedures: 1,
  proceed: 1,
  proceeding: 1,
  proceedings: 1,
  proceeds: 1,
  process: 1,
  processed: 1,
  processes: 1,
  processing: 1,
  processor: 1,
  processors: 1,
  procurement: 1,
  produce: 1,
  produced: 1,
  producer: 1,
  producers: 1,
  produces: 1,
  producing: 1,
  product: 1,
  production: 1,
  productions: 1,
  productive: 1,
  productivity: 1,
  products: 1,
  profession: 1,
  professional: 1,
  professionals: 1,
  professor: 1,
  profile: 1,
  profiles: 1,
  profit: 1,
  profits: 1,
  program: 1,
  programme: 1,
  programmer: 1,
  programmers: 1,
  programmes: 1,
  programming: 1,
  programs: 1,
  progress: 1,
  progressive: 1,
  prohibited: 1,
  project: 1,
  projected: 1,
  projection: 1,
  projector: 1,
  projectors: 1,
  projects: 1,
  prominent: 1,
  promise: 1,
  promised: 1,
  promises: 1,
  promising: 1,
  promo: 1,
  promote: 1,
  promoted: 1,
  promotes: 1,
  promoting: 1,
  promotion: 1,
  promotional: 1,
  promotions: 1,
  prompt: 1,
  promptly: 1,
  proof: 1,
  propecia: 1,
  proper: 1,
  properly: 1,
  properties: 1,
  property: 1,
  prophet: 1,
  proportion: 1,
  proposal: 1,
  proposals: 1,
  propose: 1,
  proposed: 1,
  proposition: 1,
  proprietary: 1,
  pros: 1,
  prospect: 1,
  prospective: 1,
  prospects: 1,
  prostate: 1,
  prostores: 1,
  prot: 1,
  protect: 1,
  protected: 1,
  protecting: 1,
  protection: 1,
  protective: 1,
  protein: 1,
  proteins: 1,
  protest: 1,
  protocol: 1,
  protocols: 1,
  prototype: 1,
  proud: 1,
  proudly: 1,
  prove: 1,
  proved: 1,
  proven: 1,
  provide: 1,
  provided: 1,
  providence: 1,
  provider: 1,
  providers: 1,
  provides: 1,
  providing: 1,
  province: 1,
  provinces: 1,
  provincial: 1,
  provision: 1,
  provisions: 1,
  proxy: 1,
  prozac: 1,
  ps: 1,
  psi: 1,
  psp: 1,
  pst: 1,
  psychiatry: 1,
  psychological: 1,
  psychology: 1,
  pt: 1,
  pts: 1,
  pty: 1,
  pub: 1,
  public: 1,
  publication: 1,
  publications: 1,
  publicity: 1,
  publicly: 1,
  publish: 1,
  published: 1,
  publisher: 1,
  publishers: 1,
  publishing: 1,
  pubmed: 1,
  pubs: 1,
  puerto: 1,
  pull: 1,
  pulled: 1,
  pulling: 1,
  pulse: 1,
  pump: 1,
  pumps: 1,
  punch: 1,
  punishment: 1,
  punk: 1,
  pupils: 1,
  puppy: 1,
  purchase: 1,
  purchased: 1,
  purchases: 1,
  purchasing: 1,
  pure: 1,
  purple: 1,
  purpose: 1,
  purposes: 1,
  purse: 1,
  pursuant: 1,
  pursue: 1,
  pursuit: 1,
  push: 1,
  pushed: 1,
  pushing: 1,
  pussy: 1,
  put: 1,
  puts: 1,
  putting: 1,
  puzzle: 1,
  puzzles: 1,
  pvc: 1,
  python: 1,
  q: 1,
  qatar: 1,
  qc: 1,
  qld: 1,
  qt: 1,
  qty: 1,
  quad: 1,
  qualification: 1,
  qualifications: 1,
  qualified: 1,
  qualify: 1,
  qualifying: 1,
  qualities: 1,
  quality: 1,
  quantitative: 1,
  quantities: 1,
  quantity: 1,
  quantum: 1,
  quarter: 1,
  quarterly: 1,
  quarters: 1,
  que: 1,
  quebec: 1,
  queen: 1,
  queens: 1,
  queensland: 1,
  queries: 1,
  query: 1,
  quest: 1,
  question: 1,
  questionnaire: 1,
  questions: 1,
  queue: 1,
  qui: 1,
  quick: 1,
  quickly: 1,
  quiet: 1,
  quilt: 1,
  quit: 1,
  quite: 1,
  quiz: 1,
  quizzes: 1,
  quotations: 1,
  quote: 1,
  quoted: 1,
  quotes: 1,
  r: 1,
  ra: 1,
  rabbit: 1,
  race: 1,
  races: 1,
  rachel: 1,
  racial: 1,
  racing: 1,
  rack: 1,
  racks: 1,
  radar: 1,
  radiation: 1,
  radical: 1,
  radio: 1,
  radios: 1,
  radius: 1,
  rage: 1,
  raid: 1,
  rail: 1,
  railroad: 1,
  railway: 1,
  rain: 1,
  rainbow: 1,
  raise: 1,
  raised: 1,
  raises: 1,
  raising: 1,
  raleigh: 1,
  rally: 1,
  ralph: 1,
  ram: 1,
  ran: 1,
  ranch: 1,
  rand: 1,
  random: 1,
  randy: 1,
  range: 1,
  ranger: 1,
  rangers: 1,
  ranges: 1,
  ranging: 1,
  rank: 1,
  ranked: 1,
  ranking: 1,
  rankings: 1,
  ranks: 1,
  rap: 1,
  rape: 1,
  rapid: 1,
  rapidly: 1,
  rapids: 1,
  rare: 1,
  rarely: 1,
  rat: 1,
  rate: 1,
  rated: 1,
  rates: 1,
  rather: 1,
  rating: 1,
  ratings: 1,
  ratio: 1,
  rational: 1,
  ratios: 1,
  rats: 1,
  raw: 1,
  ray: 1,
  raymond: 1,
  rays: 1,
  rb: 1,
  rc: 1,
  rca: 1,
  rd: 1,
  re: 1,
  reach: 1,
  reached: 1,
  reaches: 1,
  reaching: 1,
  reaction: 1,
  reactions: 1,
  read: 1,
  reader: 1,
  readers: 1,
  readily: 1,
  reading: 1,
  readings: 1,
  reads: 1,
  ready: 1,
  real: 1,
  realistic: 1,
  reality: 1,
  realize: 1,
  realized: 1,
  really: 1,
  realm: 1,
  realtor: 1,
  realtors: 1,
  realty: 1,
  rear: 1,
  reason: 1,
  reasonable: 1,
  reasonably: 1,
  reasoning: 1,
  reasons: 1,
  rebate: 1,
  rebates: 1,
  rebecca: 1,
  rebel: 1,
  rebound: 1,
  rec: 1,
  recall: 1,
  receipt: 1,
  receive: 1,
  received: 1,
  receiver: 1,
  receivers: 1,
  receives: 1,
  receiving: 1,
  recent: 1,
  recently: 1,
  reception: 1,
  receptor: 1,
  receptors: 1,
  recipe: 1,
  recipes: 1,
  recipient: 1,
  recipients: 1,
  recognised: 1,
  recognition: 1,
  recognize: 1,
  recognized: 1,
  recommend: 1,
  recommendation: 1,
  recommendations: 1,
  recommended: 1,
  recommends: 1,
  reconstruction: 1,
  record: 1,
  recorded: 1,
  recorder: 1,
  recorders: 1,
  recording: 1,
  recordings: 1,
  records: 1,
  recover: 1,
  recovered: 1,
  recovery: 1,
  recreation: 1,
  recreational: 1,
  recruiting: 1,
  recruitment: 1,
  recycling: 1,
  red: 1,
  redeem: 1,
  redhead: 1,
  reduce: 1,
  reduced: 1,
  reduces: 1,
  reducing: 1,
  reduction: 1,
  reductions: 1,
  reed: 1,
  reef: 1,
  reel: 1,
  ref: 1,
  refer: 1,
  reference: 1,
  referenced: 1,
  references: 1,
  referral: 1,
  referrals: 1,
  referred: 1,
  referring: 1,
  refers: 1,
  refinance: 1,
  refine: 1,
  refined: 1,
  reflect: 1,
  reflected: 1,
  reflection: 1,
  reflections: 1,
  reflects: 1,
  reform: 1,
  reforms: 1,
  refresh: 1,
  refrigerator: 1,
  refugees: 1,
  refund: 1,
  refurbished: 1,
  refuse: 1,
  refused: 1,
  reg: 1,
  regard: 1,
  regarded: 1,
  regarding: 1,
  regardless: 1,
  regards: 1,
  reggae: 1,
  regime: 1,
  region: 1,
  regional: 1,
  regions: 1,
  register: 1,
  registered: 1,
  registrar: 1,
  registration: 1,
  registry: 1,
  regression: 1,
  regular: 1,
  regularly: 1,
  regulated: 1,
  regulation: 1,
  regulations: 1,
  regulatory: 1,
  rehab: 1,
  rehabilitation: 1,
  reid: 1,
  reject: 1,
  rejected: 1,
  relate: 1,
  related: 1,
  relates: 1,
  relating: 1,
  relation: 1,
  relations: 1,
  relationship: 1,
  relationships: 1,
  relative: 1,
  relatively: 1,
  relatives: 1,
  relax: 1,
  relaxation: 1,
  relay: 1,
  release: 1,
  released: 1,
  releases: 1,
  relevance: 1,
  relevant: 1,
  reliability: 1,
  reliable: 1,
  reliance: 1,
  relief: 1,
  religion: 1,
  religions: 1,
  religious: 1,
  reload: 1,
  relocation: 1,
  rely: 1,
  relying: 1,
  remain: 1,
  remainder: 1,
  remained: 1,
  remaining: 1,
  remains: 1,
  remark: 1,
  remarkable: 1,
  remarks: 1,
  remedies: 1,
  remedy: 1,
  remember: 1,
  remembered: 1,
  remind: 1,
  reminder: 1,
  remix: 1,
  remote: 1,
  removable: 1,
  removal: 1,
  remove: 1,
  removed: 1,
  removing: 1,
  renaissance: 1,
  render: 1,
  rendered: 1,
  rendering: 1,
  renew: 1,
  renewable: 1,
  renewal: 1,
  reno: 1,
  rent: 1,
  rental: 1,
  rentals: 1,
  rep: 1,
  repair: 1,
  repairs: 1,
  repeat: 1,
  repeated: 1,
  replace: 1,
  replaced: 1,
  replacement: 1,
  replacing: 1,
  replica: 1,
  replication: 1,
  replied: 1,
  replies: 1,
  reply: 1,
  report: 1,
  reported: 1,
  reporter: 1,
  reporters: 1,
  reporting: 1,
  reports: 1,
  repository: 1,
  represent: 1,
  representation: 1,
  representations: 1,
  representative: 1,
  representatives: 1,
  represented: 1,
  representing: 1,
  represents: 1,
  reprint: 1,
  reprints: 1,
  reproduce: 1,
  reproduced: 1,
  reproduction: 1,
  reproductive: 1,
  republic: 1,
  republican: 1,
  republicans: 1,
  reputation: 1,
  request: 1,
  requested: 1,
  requesting: 1,
  requests: 1,
  require: 1,
  required: 1,
  requirement: 1,
  requirements: 1,
  requires: 1,
  requiring: 1,
  res: 1,
  rescue: 1,
  research: 1,
  researcher: 1,
  researchers: 1,
  reseller: 1,
  reservation: 1,
  reservations: 1,
  reserve: 1,
  reserved: 1,
  reserves: 1,
  reservoir: 1,
  reset: 1,
  residence: 1,
  resident: 1,
  residential: 1,
  residents: 1,
  resist: 1,
  resistance: 1,
  resistant: 1,
  resolution: 1,
  resolutions: 1,
  resolve: 1,
  resolved: 1,
  resort: 1,
  resorts: 1,
  resource: 1,
  resources: 1,
  respect: 1,
  respected: 1,
  respective: 1,
  respectively: 1,
  respiratory: 1,
  respond: 1,
  responded: 1,
  respondent: 1,
  respondents: 1,
  responding: 1,
  response: 1,
  responses: 1,
  responsibilities: 1,
  responsibility: 1,
  responsible: 1,
  rest: 1,
  restaurant: 1,
  restaurants: 1,
  restoration: 1,
  restore: 1,
  restored: 1,
  restrict: 1,
  restricted: 1,
  restriction: 1,
  restrictions: 1,
  restructuring: 1,
  result: 1,
  resulted: 1,
  resulting: 1,
  results: 1,
  resume: 1,
  resumes: 1,
  retail: 1,
  retailer: 1,
  retailers: 1,
  retain: 1,
  retained: 1,
  retention: 1,
  retired: 1,
  retirement: 1,
  retreat: 1,
  retrieval: 1,
  retrieve: 1,
  retrieved: 1,
  retro: 1,
  return: 1,
  returned: 1,
  returning: 1,
  returns: 1,
  reunion: 1,
  reuters: 1,
  rev: 1,
  reveal: 1,
  revealed: 1,
  reveals: 1,
  revelation: 1,
  revenge: 1,
  revenue: 1,
  revenues: 1,
  reverse: 1,
  review: 1,
  reviewed: 1,
  reviewer: 1,
  reviewing: 1,
  reviews: 1,
  revised: 1,
  revision: 1,
  revisions: 1,
  revolution: 1,
  revolutionary: 1,
  reward: 1,
  rewards: 1,
  reynolds: 1,
  rf: 1,
  rfc: 1,
  rg: 1,
  rh: 1,
  rhode: 1,
  rhythm: 1,
  ri: 1,
  ribbon: 1,
  rica: 1,
  rice: 1,
  rich: 1,
  richard: 1,
  richards: 1,
  richardson: 1,
  richmond: 1,
  rick: 1,
  ricky: 1,
  rico: 1,
  rid: 1,
  ride: 1,
  rider: 1,
  riders: 1,
  rides: 1,
  ridge: 1,
  riding: 1,
  right: 1,
  rights: 1,
  rim: 1,
  ring: 1,
  rings: 1,
  ringtone: 1,
  ringtones: 1,
  rio: 1,
  rip: 1,
  ripe: 1,
  rise: 1,
  rising: 1,
  risk: 1,
  risks: 1,
  river: 1,
  rivers: 1,
  riverside: 1,
  rj: 1,
  rl: 1,
  rm: 1,
  rn: 1,
  rna: 1,
  ro: 1,
  road: 1,
  roads: 1,
  rob: 1,
  robbie: 1,
  robert: 1,
  roberts: 1,
  robertson: 1,
  robin: 1,
  robinson: 1,
  robot: 1,
  robots: 1,
  robust: 1,
  rochester: 1,
  rock: 1,
  rocket: 1,
  rocks: 1,
  rocky: 1,
  rod: 1,
  roger: 1,
  rogers: 1,
  roland: 1,
  role: 1,
  roles: 1,
  roll: 1,
  rolled: 1,
  roller: 1,
  rolling: 1,
  rolls: 1,
  rom: 1,
  roman: 1,
  romance: 1,
  romania: 1,
  romantic: 1,
  rome: 1,
  ron: 1,
  ronald: 1,
  roof: 1,
  room: 1,
  roommate: 1,
  roommates: 1,
  rooms: 1,
  root: 1,
  roots: 1,
  rope: 1,
  rosa: 1,
  rose: 1,
  roses: 1,
  ross: 1,
  roster: 1,
  rotary: 1,
  rotation: 1,
  rouge: 1,
  rough: 1,
  roughly: 1,
  roulette: 1,
  round: 1,
  rounds: 1,
  route: 1,
  router: 1,
  routers: 1,
  routes: 1,
  routine: 1,
  routines: 1,
  routing: 1,
  rover: 1,
  row: 1,
  rows: 1,
  roy: 1,
  royal: 1,
  royalty: 1,
  rp: 1,
  rpg: 1,
  rpm: 1,
  rr: 1,
  rrp: 1,
  rs: 1,
  rss: 1,
  rt: 1,
  ru: 1,
  rubber: 1,
  ruby: 1,
  rug: 1,
  rugby: 1,
  rugs: 1,
  rule: 1,
  ruled: 1,
  rules: 1,
  ruling: 1,
  run: 1,
  runner: 1,
  running: 1,
  runs: 1,
  runtime: 1,
  rural: 1,
  rush: 1,
  russell: 1,
  russia: 1,
  russian: 1,
  ruth: 1,
  rv: 1,
  rw: 1,
  rwanda: 1,
  rx: 1,
  ryan: 1
};

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TheMostCommon10000", function() { return TheMostCommon10000; });
// https://englishgrammarhere.com/vocabulary/10000-most-common-words-in-english-part-5/
const TheMostCommon10000 = {
  s: 1,
  sa: 1,
  sacramento: 1,
  sacred: 1,
  sacrifice: 1,
  sad: 1,
  saddam: 1,
  safari: 1,
  safe: 1,
  safely: 1,
  safer: 1,
  safety: 1,
  sage: 1,
  sagem: 1,
  said: 1,
  sail: 1,
  sailing: 1,
  saint: 1,
  saints: 1,
  sake: 1,
  salad: 1,
  salaries: 1,
  salary: 1,
  sale: 1,
  salem: 1,
  sales: 1,
  sally: 1,
  salmon: 1,
  salon: 1,
  salt: 1,
  salvador: 1,
  salvation: 1,
  sam: 1,
  samba: 1,
  same: 1,
  samoa: 1,
  sample: 1,
  samples: 1,
  sampling: 1,
  samsung: 1,
  samuel: 1,
  san: 1,
  sand: 1,
  sandra: 1,
  sandwich: 1,
  sandy: 1,
  sans: 1,
  santa: 1,
  sanyo: 1,
  sao: 1,
  sap: 1,
  sapphire: 1,
  sara: 1,
  sarah: 1,
  sas: 1,
  saskatchewan: 1,
  sat: 1,
  satellite: 1,
  satin: 1,
  satisfaction: 1,
  satisfactory: 1,
  satisfied: 1,
  satisfy: 1,
  saturday: 1,
  saturn: 1,
  sauce: 1,
  saudi: 1,
  savage: 1,
  savannah: 1,
  save: 1,
  saved: 1,
  saver: 1,
  saves: 1,
  saving: 1,
  savings: 1,
  saw: 1,
  say: 1,
  saying: 1,
  says: 1,
  sb: 1,
  sbjct: 1,
  sc: 1,
  scale: 1,
  scales: 1,
  scan: 1,
  scanned: 1,
  scanner: 1,
  scanners: 1,
  scanning: 1,
  scared: 1,
  scary: 1,
  scenario: 1,
  scenarios: 1,
  scene: 1,
  scenes: 1,
  scenic: 1,
  schedule: 1,
  scheduled: 1,
  schedules: 1,
  scheduling: 1,
  schema: 1,
  scheme: 1,
  schemes: 1,
  scholar: 1,
  scholars: 1,
  scholarship: 1,
  scholarships: 1,
  school: 1,
  schools: 1,
  sci: 1,
  science: 1,
  sciences: 1,
  scientific: 1,
  scientist: 1,
  scientists: 1,
  scoop: 1,
  scope: 1,
  score: 1,
  scored: 1,
  scores: 1,
  scoring: 1,
  scotia: 1,
  scotland: 1,
  scott: 1,
  scottish: 1,
  scout: 1,
  scratch: 1,
  screen: 1,
  screening: 1,
  screens: 1,
  screensaver: 1,
  screensavers: 1,
  screenshot: 1,
  screenshots: 1,
  screw: 1,
  script: 1,
  scripting: 1,
  scripts: 1,
  scroll: 1,
  scsi: 1,
  scuba: 1,
  sculpture: 1,
  sd: 1,
  se: 1,
  sea: 1,
  seafood: 1,
  seal: 1,
  sealed: 1,
  sean: 1,
  search: 1,
  searched: 1,
  searches: 1,
  searching: 1,
  seas: 1,
  season: 1,
  seasonal: 1,
  seasons: 1,
  seat: 1,
  seating: 1,
  seats: 1,
  seattle: 1,
  sec: 1,
  second: 1,
  secondary: 1,
  seconds: 1,
  secret: 1,
  secretariat: 1,
  secretary: 1,
  secrets: 1,
  section: 1,
  sections: 1,
  sector: 1,
  sectors: 1,
  secure: 1,
  secured: 1,
  securely: 1,
  securities: 1,
  security: 1,
  see: 1,
  seed: 1,
  seeds: 1,
  seeing: 1,
  seek: 1,
  seeker: 1,
  seekers: 1,
  seeking: 1,
  seeks: 1,
  seem: 1,
  seemed: 1,
  seems: 1,
  seen: 1,
  sees: 1,
  sega: 1,
  segment: 1,
  segments: 1,
  select: 1,
  selected: 1,
  selecting: 1,
  selection: 1,
  selections: 1,
  selective: 1,
  self: 1,
  sell: 1,
  seller: 1,
  sellers: 1,
  selling: 1,
  sells: 1,
  semester: 1,
  semi: 1,
  semiconductor: 1,
  seminar: 1,
  seminars: 1,
  sen: 1,
  senate: 1,
  senator: 1,
  senators: 1,
  send: 1,
  sender: 1,
  sending: 1,
  sends: 1,
  senegal: 1,
  senior: 1,
  seniors: 1,
  sense: 1,
  sensitive: 1,
  sensitivity: 1,
  sensor: 1,
  sensors: 1,
  sent: 1,
  sentence: 1,
  sentences: 1,
  seo: 1,
  sep: 1,
  separate: 1,
  separated: 1,
  separately: 1,
  separation: 1,
  sept: 1,
  september: 1,
  seq: 1,
  sequence: 1,
  sequences: 1,
  ser: 1,
  serbia: 1,
  serial: 1,
  series: 1,
  serious: 1,
  seriously: 1,
  serum: 1,
  serve: 1,
  served: 1,
  server: 1,
  servers: 1,
  serves: 1,
  service: 1,
  services: 1,
  serving: 1,
  session: 1,
  sessions: 1,
  set: 1,
  sets: 1,
  setting: 1,
  settings: 1,
  settle: 1,
  settled: 1,
  settlement: 1,
  setup: 1,
  seven: 1,
  seventh: 1,
  several: 1,
  severe: 1,
  sewing: 1,
  sex: 1,
  sexcam: 1,
  sexo: 1,
  sexual: 1,
  sexuality: 1,
  sexually: 1,
  sexy: 1,
  sf: 1,
  sg: 1,
  sh: 1,
  shade: 1,
  shades: 1,
  shadow: 1,
  shadows: 1,
  shaft: 1,
  shake: 1,
  shakespeare: 1,
  shakira: 1,
  shall: 1,
  shame: 1,
  shanghai: 1,
  shannon: 1,
  shape: 1,
  shaped: 1,
  shapes: 1,
  share: 1,
  shared: 1,
  shareholders: 1,
  shares: 1,
  shareware: 1,
  sharing: 1,
  shark: 1,
  sharon: 1,
  sharp: 1,
  shaved: 1,
  shaw: 1,
  she: 1,
  shed: 1,
  sheep: 1,
  sheer: 1,
  sheet: 1,
  sheets: 1,
  sheffield: 1,
  shelf: 1,
  shell: 1,
  shelter: 1,
  shemale: 1,
  shemales: 1,
  shepherd: 1,
  sheriff: 1,
  sherman: 1,
  shield: 1,
  shift: 1,
  shine: 1,
  ship: 1,
  shipment: 1,
  shipments: 1,
  shipped: 1,
  shipping: 1,
  ships: 1,
  shirt: 1,
  shirts: 1,
  shit: 1,
  shock: 1,
  shoe: 1,
  shoes: 1,
  shoot: 1,
  shooting: 1,
  shop: 1,
  shopper: 1,
  shoppers: 1,
  shopping: 1,
  shops: 1,
  shopzilla: 1,
  shore: 1,
  short: 1,
  shortcuts: 1,
  shorter: 1,
  shortly: 1,
  shorts: 1,
  shot: 1,
  shots: 1,
  should: 1,
  shoulder: 1,
  show: 1,
  showcase: 1,
  showed: 1,
  shower: 1,
  showers: 1,
  showing: 1,
  shown: 1,
  shows: 1,
  showtimes: 1,
  shut: 1,
  shuttle: 1,
  si: 1,
  sic: 1,
  sick: 1,
  side: 1,
  sides: 1,
  sie: 1,
  siemens: 1,
  sierra: 1,
  sig: 1,
  sight: 1,
  sigma: 1,
  sign: 1,
  signal: 1,
  signals: 1,
  signature: 1,
  signatures: 1,
  signed: 1,
  significance: 1,
  significant: 1,
  significantly: 1,
  signing: 1,
  signs: 1,
  signup: 1,
  silence: 1,
  silent: 1,
  silicon: 1,
  silk: 1,
  silly: 1,
  silver: 1,
  sim: 1,
  similar: 1,
  similarly: 1,
  simon: 1,
  simple: 1,
  simplified: 1,
  simply: 1,
  simpson: 1,
  simpsons: 1,
  sims: 1,
  simulation: 1,
  simulations: 1,
  simultaneously: 1,
  sin: 1,
  since: 1,
  sing: 1,
  singapore: 1,
  singer: 1,
  singh: 1,
  singing: 1,
  single: 1,
  singles: 1,
  sink: 1,
  sip: 1,
  sir: 1,
  sister: 1,
  sisters: 1,
  sit: 1,
  site: 1,
  sitemap: 1,
  sites: 1,
  sitting: 1,
  situated: 1,
  situation: 1,
  situations: 1,
  six: 1,
  sixth: 1,
  size: 1,
  sized: 1,
  sizes: 1,
  sk: 1,
  skating: 1,
  ski: 1,
  skiing: 1,
  skill: 1,
  skilled: 1,
  skills: 1,
  skin: 1,
  skins: 1,
  skip: 1,
  skirt: 1,
  skirts: 1,
  sku: 1,
  sky: 1,
  skype: 1,
  sl: 1,
  slave: 1,
  sleep: 1,
  sleeping: 1,
  sleeps: 1,
  sleeve: 1,
  slide: 1,
  slides: 1,
  slideshow: 1,
  slight: 1,
  slightly: 1,
  slim: 1,
  slip: 1,
  slope: 1,
  slot: 1,
  slots: 1,
  slovak: 1,
  slovakia: 1,
  slovenia: 1,
  slow: 1,
  slowly: 1,
  slut: 1,
  sluts: 1,
  sm: 1,
  small: 1,
  smaller: 1,
  smallest: 1,
  smart: 1,
  smell: 1,
  smile: 1,
  smilies: 1,
  smith: 1,
  smithsonian: 1,
  smoke: 1,
  smoking: 1,
  smooth: 1,
  sms: 1,
  smtp: 1,
  sn: 1,
  snake: 1,
  snap: 1,
  snapshot: 1,
  snow: 1,
  snowboard: 1,
  so: 1,
  soa: 1,
  soap: 1,
  soc: 1,
  soccer: 1,
  social: 1,
  societies: 1,
  society: 1,
  sociology: 1,
  socket: 1,
  socks: 1,
  sodium: 1,
  sofa: 1,
  soft: 1,
  softball: 1,
  software: 1,
  soil: 1,
  sol: 1,
  solar: 1,
  solaris: 1,
  sold: 1,
  soldier: 1,
  soldiers: 1,
  sole: 1,
  solely: 1,
  solid: 1,
  solo: 1,
  solomon: 1,
  solution: 1,
  solutions: 1,
  solve: 1,
  solved: 1,
  solving: 1,
  soma: 1,
  somalia: 1,
  some: 1,
  somebody: 1,
  somehow: 1,
  someone: 1,
  somerset: 1,
  something: 1,
  sometimes: 1,
  somewhat: 1,
  somewhere: 1,
  son: 1,
  song: 1,
  songs: 1,
  sonic: 1,
  sons: 1,
  sony: 1,
  soon: 1,
  soonest: 1,
  sophisticated: 1,
  sorry: 1,
  sort: 1,
  sorted: 1,
  sorts: 1,
  sought: 1,
  soul: 1,
  souls: 1,
  sound: 1,
  sounds: 1,
  soundtrack: 1,
  soup: 1,
  source: 1,
  sources: 1,
  south: 1,
  southampton: 1,
  southeast: 1,
  southern: 1,
  southwest: 1,
  soviet: 1,
  sox: 1,
  sp: 1,
  spa: 1,
  space: 1,
  spaces: 1,
  spain: 1,
  spam: 1,
  span: 1,
  spanish: 1,
  spank: 1,
  spanking: 1,
  sparc: 1,
  spare: 1,
  spas: 1,
  spatial: 1,
  speak: 1,
  speaker: 1,
  speakers: 1,
  speaking: 1,
  speaks: 1,
  spears: 1,
  spec: 1,
  special: 1,
  specialist: 1,
  specialists: 1,
  specialized: 1,
  specializing: 1,
  specially: 1,
  specials: 1,
  specialties: 1,
  specialty: 1,
  species: 1,
  specific: 1,
  specifically: 1,
  specification: 1,
  specifications: 1,
  specifics: 1,
  specified: 1,
  specifies: 1,
  specify: 1,
  specs: 1,
  spectacular: 1,
  spectrum: 1,
  speech: 1,
  speeches: 1,
  speed: 1,
  speeds: 1,
  spell: 1,
  spelling: 1,
  spencer: 1,
  spend: 1,
  spending: 1,
  spent: 1,
  sperm: 1,
  sphere: 1,
  spice: 1,
  spider: 1,
  spies: 1,
  spin: 1,
  spine: 1,
  spirit: 1,
  spirits: 1,
  spiritual: 1,
  spirituality: 1,
  split: 1,
  spoke: 1,
  spoken: 1,
  spokesman: 1,
  sponsor: 1,
  sponsored: 1,
  sponsors: 1,
  sponsorship: 1,
  sport: 1,
  sporting: 1,
  sports: 1,
  spot: 1,
  spotlight: 1,
  spots: 1,
  spouse: 1,
  spray: 1,
  spread: 1,
  spreading: 1,
  spring: 1,
  springer: 1,
  springfield: 1,
  springs: 1,
  sprint: 1,
  spy: 1,
  spyware: 1,
  sq: 1,
  sql: 1,
  squad: 1,
  square: 1,
  squirt: 1,
  squirting: 1,
  sr: 1,
  src: 1,
  sri: 1,
  ss: 1,
  ssl: 1,
  st: 1,
  stability: 1,
  stable: 1,
  stack: 1,
  stadium: 1,
  staff: 1,
  staffing: 1,
  stage: 1,
  stages: 1,
  stainless: 1,
  stake: 1,
  stakeholders: 1,
  stamp: 1,
  stamps: 1,
  stan: 1,
  stand: 1,
  standard: 1,
  standards: 1,
  standing: 1,
  standings: 1,
  stands: 1,
  stanford: 1,
  stanley: 1,
  star: 1,
  starring: 1,
  stars: 1,
  starsmerchant: 1,
  start: 1,
  started: 1,
  starter: 1,
  starting: 1,
  starts: 1,
  startup: 1,
  stat: 1,
  state: 1,
  stated: 1,
  statement: 1,
  statements: 1,
  states: 1,
  statewide: 1,
  static: 1,
  stating: 1,
  station: 1,
  stationery: 1,
  stations: 1,
  statistical: 1,
  statistics: 1,
  stats: 1,
  status: 1,
  statute: 1,
  statutes: 1,
  statutory: 1,
  stay: 1,
  stayed: 1,
  staying: 1,
  stays: 1,
  std: 1,
  ste: 1,
  steady: 1,
  steal: 1,
  steam: 1,
  steel: 1,
  steering: 1,
  stem: 1,
  step: 1,
  stephanie: 1,
  stephen: 1,
  steps: 1,
  stereo: 1,
  sterling: 1,
  steve: 1,
  steven: 1,
  stevens: 1,
  stewart: 1,
  stick: 1,
  sticker: 1,
  stickers: 1,
  sticks: 1,
  sticky: 1,
  still: 1,
  stock: 1,
  stockholm: 1,
  stockings: 1,
  stocks: 1,
  stolen: 1,
  stomach: 1,
  stone: 1,
  stones: 1,
  stood: 1,
  stop: 1,
  stopped: 1,
  stopping: 1,
  stops: 1,
  storage: 1,
  store: 1,
  stored: 1,
  stores: 1,
  stories: 1,
  storm: 1,
  story: 1,
  str: 1,
  straight: 1,
  strain: 1,
  strand: 1,
  strange: 1,
  stranger: 1,
  strap: 1,
  strategic: 1,
  strategies: 1,
  strategy: 1,
  stream: 1,
  streaming: 1,
  streams: 1,
  street: 1,
  streets: 1,
  strength: 1,
  strengthen: 1,
  strengthening: 1,
  strengths: 1,
  stress: 1,
  stretch: 1,
  strict: 1,
  strictly: 1,
  strike: 1,
  strikes: 1,
  striking: 1,
  string: 1,
  strings: 1,
  strip: 1,
  stripes: 1,
  strips: 1,
  stroke: 1,
  strong: 1,
  stronger: 1,
  strongly: 1,
  struck: 1,
  struct: 1,
  structural: 1,
  structure: 1,
  structured: 1,
  structures: 1,
  struggle: 1,
  stuart: 1,
  stuck: 1,
  stud: 1,
  student: 1,
  students: 1,
  studied: 1,
  studies: 1,
  studio: 1,
  studios: 1,
  study: 1,
  studying: 1,
  stuff: 1,
  stuffed: 1,
  stunning: 1,
  stupid: 1,
  style: 1,
  styles: 1,
  stylish: 1,
  stylus: 1,
  su: 1,
  sub: 1,
  subaru: 1,
  subcommittee: 1,
  subdivision: 1,
  subject: 1,
  subjective: 1,
  subjects: 1,
  sublime: 1,
  sublimedirectory: 1,
  submission: 1,
  submissions: 1,
  submit: 1,
  submitted: 1,
  submitting: 1,
  subscribe: 1,
  subscriber: 1,
  subscribers: 1,
  subscription: 1,
  subscriptions: 1,
  subsection: 1,
  subsequent: 1,
  subsequently: 1,
  subsidiaries: 1,
  subsidiary: 1,
  substance: 1,
  substances: 1,
  substantial: 1,
  substantially: 1,
  substitute: 1,
  subtle: 1,
  suburban: 1,
  succeed: 1,
  success: 1,
  successful: 1,
  successfully: 1,
  such: 1,
  suck: 1,
  sucking: 1,
  sucks: 1,
  sudan: 1,
  sudden: 1,
  suddenly: 1,
  sue: 1,
  suffer: 1,
  suffered: 1,
  suffering: 1,
  sufficient: 1,
  sufficiently: 1,
  sugar: 1,
  suggest: 1,
  suggested: 1,
  suggesting: 1,
  suggestion: 1,
  suggestions: 1,
  suggests: 1,
  suicide: 1,
  suit: 1,
  suitable: 1,
  suite: 1,
  suited: 1,
  suites: 1,
  suits: 1,
  sullivan: 1,
  sum: 1,
  summaries: 1,
  summary: 1,
  summer: 1,
  summit: 1,
  sun: 1,
  sunday: 1,
  sunglasses: 1,
  sunny: 1,
  sunrise: 1,
  sunset: 1,
  sunshine: 1,
  super: 1,
  superb: 1,
  superintendent: 1,
  superior: 1,
  supervision: 1,
  supervisor: 1,
  supervisors: 1,
  supplement: 1,
  supplemental: 1,
  supplements: 1,
  supplied: 1,
  supplier: 1,
  suppliers: 1,
  supplies: 1,
  supply: 1,
  support: 1,
  supported: 1,
  supporters: 1,
  supporting: 1,
  supports: 1,
  suppose: 1,
  supposed: 1,
  supreme: 1,
  sur: 1,
  sure: 1,
  surely: 1,
  surf: 1,
  surface: 1,
  surfaces: 1,
  surfing: 1,
  surge: 1,
  surgeon: 1,
  surgeons: 1,
  surgery: 1,
  surgical: 1,
  surname: 1,
  surplus: 1,
  surprise: 1,
  surprised: 1,
  surprising: 1,
  surrey: 1,
  surround: 1,
  surrounded: 1,
  surrounding: 1,
  surveillance: 1,
  survey: 1,
  surveys: 1,
  survival: 1,
  survive: 1,
  survivor: 1,
  survivors: 1,
  susan: 1,
  suse: 1,
  suspect: 1,
  suspected: 1,
  suspended: 1,
  suspension: 1,
  sussex: 1,
  sustainability: 1,
  sustainable: 1,
  sustained: 1,
  suzuki: 1,
  sv: 1,
  sw: 1,
  swap: 1,
  swaziland: 1,
  sweden: 1,
  swedish: 1,
  sweet: 1,
  swift: 1,
  swim: 1,
  swimming: 1,
  swing: 1,
  swingers: 1,
  swiss: 1,
  switch: 1,
  switched: 1,
  switches: 1,
  switching: 1,
  switzerland: 1,
  sword: 1,
  sydney: 1,
  symantec: 1,
  symbol: 1,
  symbols: 1,
  sympathy: 1,
  symphony: 1,
  symposium: 1,
  symptoms: 1,
  sync: 1,
  syndicate: 1,
  syndication: 1,
  syndrome: 1,
  synopsis: 1,
  syntax: 1,
  synthesis: 1,
  synthetic: 1,
  syracuse: 1,
  syria: 1,
  sys: 1,
  system: 1,
  systematic: 1,
  systems: 1,
  t: 1,
  ta: 1,
  tab: 1,
  table: 1,
  tables: 1,
  tablet: 1,
  tablets: 1,
  tabs: 1,
  tackle: 1,
  tactics: 1,
  tag: 1,
  tagged: 1,
  tags: 1,
  tahoe: 1,
  tail: 1,
  taiwan: 1,
  take: 1,
  taken: 1,
  takes: 1,
  taking: 1,
  tale: 1,
  talent: 1,
  talented: 1,
  tales: 1,
  talk: 1,
  talked: 1,
  talking: 1,
  talks: 1,
  tall: 1,
  tamil: 1,
  tampa: 1,
  tan: 1,
  tank: 1,
  tanks: 1,
  tanzania: 1,
  tap: 1,
  tape: 1,
  tapes: 1,
  tar: 1,
  target: 1,
  targeted: 1,
  targets: 1,
  tariff: 1,
  task: 1,
  tasks: 1,
  taste: 1,
  tattoo: 1,
  taught: 1,
  tax: 1,
  taxation: 1,
  taxes: 1,
  taxi: 1,
  taylor: 1,
  tb: 1,
  tba: 1,
  tc: 1,
  tcp: 1,
  td: 1,
  te: 1,
  tea: 1,
  teach: 1,
  teacher: 1,
  teachers: 1,
  teaches: 1,
  teaching: 1,
  team: 1,
  teams: 1,
  tear: 1,
  tears: 1,
  tech: 1,
  technical: 1,
  technician: 1,
  technique: 1,
  techniques: 1,
  techno: 1,
  technological: 1,
  technologies: 1,
  technology: 1,
  techrepublic: 1,
  ted: 1,
  teddy: 1,
  tee: 1,
  teen: 1,
  teenage: 1,
  teens: 1,
  teeth: 1,
  tel: 1,
  telecharger: 1,
  telecom: 1,
  telecommunications: 1,
  telephone: 1,
  telephony: 1,
  telescope: 1,
  television: 1,
  televisions: 1,
  tell: 1,
  telling: 1,
  tells: 1,
  temp: 1,
  temperature: 1,
  temperatures: 1,
  template: 1,
  templates: 1,
  temple: 1,
  temporal: 1,
  temporarily: 1,
  temporary: 1,
  ten: 1,
  tenant: 1,
  tend: 1,
  tender: 1,
  tennessee: 1,
  tennis: 1,
  tension: 1,
  tent: 1,
  term: 1,
  terminal: 1,
  terminals: 1,
  termination: 1,
  terminology: 1,
  terms: 1,
  terrace: 1,
  terrain: 1,
  terrible: 1,
  territories: 1,
  territory: 1,
  terror: 1,
  terrorism: 1,
  terrorist: 1,
  terrorists: 1,
  terry: 1,
  test: 1,
  testament: 1,
  tested: 1,
  testimonials: 1,
  testimony: 1,
  testing: 1,
  tests: 1,
  tex: 1,
  texas: 1,
  text: 1,
  textbook: 1,
  textbooks: 1,
  textile: 1,
  textiles: 1,
  texts: 1,
  texture: 1,
  tf: 1,
  tft: 1,
  tgp: 1,
  th: 1,
  thai: 1,
  thailand: 1,
  than: 1,
  thank: 1,
  thanks: 1,
  thanksgiving: 1,
  that: 1,
  thats: 1,
  the: 1,
  theater: 1,
  theaters: 1,
  theatre: 1,
  thee: 1,
  theft: 1,
  thehun: 1,
  their: 1,
  them: 1,
  theme: 1,
  themes: 1,
  themselves: 1,
  then: 1,
  theology: 1,
  theorem: 1,
  theoretical: 1,
  theories: 1,
  theory: 1,
  therapeutic: 1,
  therapist: 1,
  therapy: 1,
  there: 1,
  thereafter: 1,
  thereby: 1,
  therefore: 1,
  thereof: 1,
  thermal: 1,
  thesaurus: 1,
  these: 1,
  thesis: 1,
  theta: 1,
  they: 1,
  thick: 1,
  thickness: 1,
  thin: 1,
  thing: 1,
  things: 1,
  think: 1,
  thinking: 1,
  thinkpad: 1,
  thinks: 1,
  third: 1,
  thirty: 1,
  this: 1,
  thomas: 1,
  thompson: 1,
  thomson: 1,
  thong: 1,
  thongs: 1,
  thorough: 1,
  thoroughly: 1,
  those: 1,
  thou: 1,
  though: 1,
  thought: 1,
  thoughts: 1,
  thousand: 1,
  thousands: 1,
  thread: 1,
  threaded: 1,
  threads: 1,
  threat: 1,
  threatened: 1,
  threatening: 1,
  threats: 1,
  three: 1,
  threesome: 1,
  threshold: 1,
  thriller: 1,
  throat: 1,
  through: 1,
  throughout: 1,
  throw: 1,
  throwing: 1,
  thrown: 1,
  throws: 1,
  thru: 1,
  thu: 1,
  thumb: 1,
  thumbnail: 1,
  thumbnails: 1,
  thumbs: 1,
  thumbzilla: 1,
  thunder: 1,
  thursday: 1,
  thus: 1,
  thy: 1,
  ti: 1,
  ticket: 1,
  tickets: 1,
  tide: 1,
  tie: 1,
  tied: 1,
  tier: 1,
  ties: 1,
  tiffany: 1,
  tiger: 1,
  tigers: 1,
  tight: 1,
  til: 1,
  tile: 1,
  tiles: 1,
  till: 1,
  tim: 1,
  timber: 1,
  time: 1,
  timeline: 1,
  timely: 1,
  timer: 1,
  times: 1,
  timing: 1,
  timothy: 1,
  tin: 1,
  tiny: 1,
  tion: 1,
  tions: 1,
  tip: 1,
  tips: 1,
  tire: 1,
  tired: 1,
  tires: 1,
  tissue: 1,
  tit: 1,
  titanium: 1,
  titans: 1,
  title: 1,
  titled: 1,
  titles: 1,
  tits: 1,
  titten: 1,
  tm: 1,
  tmp: 1,
  tn: 1,
  to: 1,
  tobacco: 1,
  tobago: 1,
  today: 1,
  todd: 1,
  toddler: 1,
  toe: 1,
  together: 1,
  toilet: 1,
  token: 1,
  tokyo: 1,
  told: 1,
  tolerance: 1,
  toll: 1,
  tom: 1,
  tomato: 1,
  tomatoes: 1,
  tommy: 1,
  tomorrow: 1,
  ton: 1,
  tone: 1,
  toner: 1,
  tones: 1,
  tongue: 1,
  tonight: 1,
  tons: 1,
  tony: 1,
  too: 1,
  took: 1,
  tool: 1,
  toolbar: 1,
  toolbox: 1,
  toolkit: 1,
  tools: 1,
  tooth: 1,
  top: 1,
  topic: 1,
  topics: 1,
  topless: 1,
  tops: 1,
  toronto: 1,
  torture: 1,
  toshiba: 1,
  total: 1,
  totally: 1,
  totals: 1,
  touch: 1,
  touched: 1,
  tough: 1,
  tour: 1,
  touring: 1,
  tourism: 1,
  tourist: 1,
  tournament: 1,
  tournaments: 1,
  tours: 1,
  toward: 1,
  towards: 1,
  tower: 1,
  towers: 1,
  town: 1,
  towns: 1,
  township: 1,
  toxic: 1,
  toy: 1,
  toyota: 1,
  toys: 1,
  tp: 1,
  tr: 1,
  trace: 1,
  track: 1,
  trackback: 1,
  trackbacks: 1,
  tracked: 1,
  tracker: 1,
  tracking: 1,
  tracks: 1,
  tract: 1,
  tractor: 1,
  tracy: 1,
  trade: 1,
  trademark: 1,
  trademarks: 1,
  trader: 1,
  trades: 1,
  trading: 1,
  tradition: 1,
  traditional: 1,
  traditions: 1,
  traffic: 1,
  tragedy: 1,
  trail: 1,
  trailer: 1,
  trailers: 1,
  trails: 1,
  train: 1,
  trained: 1,
  trainer: 1,
  trainers: 1,
  training: 1,
  trains: 1,
  tramadol: 1,
  trance: 1,
  tranny: 1,
  trans: 1,
  transaction: 1,
  transactions: 1,
  transcript: 1,
  transcription: 1,
  transcripts: 1,
  transexual: 1,
  transexuales: 1,
  transfer: 1,
  transferred: 1,
  transfers: 1,
  transform: 1,
  transformation: 1,
  transit: 1,
  transition: 1,
  translate: 1,
  translated: 1,
  translation: 1,
  translations: 1,
  translator: 1,
  transmission: 1,
  transmit: 1,
  transmitted: 1,
  transparency: 1,
  transparent: 1,
  transport: 1,
  transportation: 1,
  transsexual: 1,
  trap: 1,
  trash: 1,
  trauma: 1,
  travel: 1,
  traveler: 1,
  travelers: 1,
  traveling: 1,
  traveller: 1,
  travelling: 1,
  travels: 1,
  travesti: 1,
  travis: 1,
  tray: 1,
  treasure: 1,
  treasurer: 1,
  treasures: 1,
  treasury: 1,
  treat: 1,
  treated: 1,
  treating: 1,
  treatment: 1,
  treatments: 1,
  treaty: 1,
  tree: 1,
  trees: 1,
  trek: 1,
  trembl: 1,
  tremendous: 1,
  trend: 1,
  trends: 1,
  treo: 1,
  tri: 1,
  trial: 1,
  trials: 1,
  triangle: 1,
  tribal: 1,
  tribe: 1,
  tribes: 1,
  tribunal: 1,
  tribune: 1,
  tribute: 1,
  trick: 1,
  tricks: 1,
  tried: 1,
  tries: 1,
  trigger: 1,
  trim: 1,
  trinidad: 1,
  trinity: 1,
  trio: 1,
  trip: 1,
  tripadvisor: 1,
  triple: 1,
  trips: 1,
  triumph: 1,
  trivia: 1,
  troops: 1,
  tropical: 1,
  trouble: 1,
  troubleshooting: 1,
  trout: 1,
  troy: 1,
  truck: 1,
  trucks: 1,
  true: 1,
  truly: 1,
  trunk: 1,
  trust: 1,
  trusted: 1,
  trustee: 1,
  trustees: 1,
  trusts: 1,
  truth: 1,
  try: 1,
  trying: 1,
  ts: 1,
  tsunami: 1,
  tt: 1,
  tu: 1,
  tub: 1,
  tube: 1,
  tubes: 1,
  tucson: 1,
  tue: 1,
  tuesday: 1,
  tuition: 1,
  tulsa: 1,
  tumor: 1,
  tune: 1,
  tuner: 1,
  tunes: 1,
  tuning: 1,
  tunisia: 1,
  tunnel: 1,
  turbo: 1,
  turkey: 1,
  turkish: 1,
  turn: 1,
  turned: 1,
  turner: 1,
  turning: 1,
  turns: 1,
  turtle: 1,
  tutorial: 1,
  tutorials: 1,
  tv: 1,
  tvs: 1,
  twelve: 1,
  twenty: 1,
  twice: 1,
  twiki: 1,
  twin: 1,
  twinks: 1,
  twins: 1,
  twist: 1,
  twisted: 1,
  two: 1,
  tx: 1,
  ty: 1,
  tyler: 1,
  type: 1,
  types: 1,
  typical: 1,
  typically: 1,
  typing: 1,
  u: 1,
  uc: 1,
  uganda: 1,
  ugly: 1,
  uh: 1,
  ui: 1,
  uk: 1,
  ukraine: 1,
  ul: 1,
  ultimate: 1,
  ultimately: 1,
  ultra: 1,
  ultram: 1,
  um: 1,
  un: 1,
  una: 1,
  unable: 1,
  unauthorized: 1,
  unavailable: 1,
  uncertainty: 1,
  uncle: 1,
  und: 1,
  undefined: 1,
  under: 1,
  undergraduate: 1,
  underground: 1,
  underlying: 1,
  understand: 1,
  understanding: 1,
  understood: 1,
  undertake: 1,
  undertaken: 1,
  underwear: 1,
  undo: 1,
  une: 1,
  unemployment: 1,
  unexpected: 1,
  unfortunately: 1,
  uni: 1,
  unified: 1,
  uniform: 1,
  union: 1,
  unions: 1,
  uniprotkb: 1,
  unique: 1,
  unit: 1,
  united: 1,
  units: 1,
  unity: 1,
  univ: 1,
  universal: 1,
  universe: 1,
  universities: 1,
  university: 1,
  unix: 1,
  unknown: 1,
  unless: 1,
  unlike: 1,
  unlikely: 1,
  unlimited: 1,
  unlock: 1,
  unnecessary: 1,
  unsigned: 1,
  unsubscribe: 1,
  until: 1,
  untitled: 1,
  unto: 1,
  unusual: 1,
  unwrap: 1,
  up: 1,
  upc: 1,
  upcoming: 1,
  update: 1,
  updated: 1,
  updates: 1,
  updating: 1,
  upgrade: 1,
  upgrades: 1,
  upgrading: 1,
  upload: 1,
  uploaded: 1,
  upon: 1,
  upper: 1,
  ups: 1,
  upset: 1,
  upskirt: 1,
  upskirts: 1,
  ur: 1,
  urban: 1,
  urge: 1,
  urgent: 1,
  uri: 1,
  url: 1,
  urls: 1,
  uruguay: 1,
  urw: 1,
  us: 1,
  usa: 1,
  usage: 1,
  usb: 1,
  usc: 1,
  usd: 1,
  usda: 1,
  use: 1,
  used: 1,
  useful: 1,
  user: 1,
  username: 1,
  users: 1,
  uses: 1,
  usgs: 1,
  using: 1,
  usps: 1,
  usr: 1,
  usual: 1,
  usually: 1,
  ut: 1,
  utah: 1,
  utc: 1,
  utilities: 1,
  utility: 1,
  utilization: 1,
  utilize: 1,
  utils: 1,
  uv: 1,
  uw: 1,
  uzbekistan: 1,
  v: 1,
  va: 1,
  vacancies: 1,
  vacation: 1,
  vacations: 1,
  vaccine: 1,
  vacuum: 1,
  vagina: 1,
  val: 1,
  valentine: 1,
  valid: 1,
  validation: 1,
  validity: 1,
  valium: 1,
  valley: 1,
  valuable: 1,
  valuation: 1,
  value: 1,
  valued: 1,
  values: 1,
  valve: 1,
  valves: 1,
  vampire: 1,
  van: 1,
  vancouver: 1,
  vanilla: 1,
  var: 1,
  variable: 1,
  variables: 1,
  variance: 1,
  variation: 1,
  variations: 1,
  varied: 1,
  varies: 1,
  varieties: 1,
  variety: 1,
  various: 1,
  vary: 1,
  varying: 1,
  vast: 1,
  vat: 1,
  vatican: 1,
  vault: 1,
  vb: 1,
  vbulletin: 1,
  vc: 1,
  vcr: 1,
  ve: 1,
  vector: 1,
  vegas: 1,
  vegetable: 1,
  vegetables: 1,
  vegetarian: 1,
  vegetation: 1,
  vehicle: 1,
  vehicles: 1,
  velocity: 1,
  velvet: 1,
  vendor: 1,
  vendors: 1,
  venezuela: 1,
  venice: 1,
  venture: 1,
  ventures: 1,
  venue: 1,
  venues: 1,
  ver: 1,
  verbal: 1,
  verde: 1,
  verification: 1,
  verified: 1,
  verify: 1,
  verizon: 1,
  vermont: 1,
  vernon: 1,
  verse: 1,
  version: 1,
  versions: 1,
  versus: 1,
  vertex: 1,
  vertical: 1,
  very: 1,
  verzeichnis: 1,
  vessel: 1,
  vessels: 1,
  veteran: 1,
  veterans: 1,
  veterinary: 1,
  vg: 1,
  vhs: 1,
  vi: 1,
  via: 1,
  viagra: 1,
  vibrator: 1,
  vibrators: 1,
  vic: 1,
  vice: 1,
  victim: 1,
  victims: 1,
  victor: 1,
  victoria: 1,
  victorian: 1,
  victory: 1,
  vid: 1,
  video: 1,
  videos: 1,
  vids: 1,
  vienna: 1,
  vietnam: 1,
  vietnamese: 1,
  view: 1,
  viewed: 1,
  viewer: 1,
  viewers: 1,
  viewing: 1,
  viewpicture: 1,
  views: 1,
  vii: 1,
  viii: 1,
  viking: 1,
  villa: 1,
  village: 1,
  villages: 1,
  villas: 1,
  vincent: 1,
  vintage: 1,
  vinyl: 1,
  violation: 1,
  violations: 1,
  violence: 1,
  violent: 1,
  violin: 1,
  vip: 1,
  viral: 1,
  virgin: 1,
  virginia: 1,
  virtual: 1,
  virtually: 1,
  virtue: 1,
  virus: 1,
  viruses: 1,
  visa: 1,
  visibility: 1,
  visible: 1,
  vision: 1,
  visit: 1,
  visited: 1,
  visiting: 1,
  visitor: 1,
  visitors: 1,
  visits: 1,
  vista: 1,
  visual: 1,
  vital: 1,
  vitamin: 1,
  vitamins: 1,
  vocabulary: 1,
  vocal: 1,
  vocals: 1,
  vocational: 1,
  voice: 1,
  voices: 1,
  void: 1,
  voip: 1,
  vol: 1,
  volkswagen: 1,
  volleyball: 1,
  volt: 1,
  voltage: 1,
  volume: 1,
  volumes: 1,
  voluntary: 1,
  volunteer: 1,
  volunteers: 1,
  volvo: 1,
  von: 1,
  vote: 1,
  voted: 1,
  voters: 1,
  votes: 1,
  voting: 1,
  voyeur: 1,
  voyeurweb: 1,
  voyuer: 1,
  vp: 1,
  vpn: 1,
  vs: 1,
  vsnet: 1,
  vt: 1,
  vulnerability: 1,
  vulnerable: 1,
  w: 1,
  wa: 1,
  wage: 1,
  wages: 1,
  wagner: 1,
  wagon: 1,
  wait: 1,
  waiting: 1,
  waiver: 1,
  wake: 1,
  wal: 1,
  wales: 1,
  walk: 1,
  walked: 1,
  walker: 1,
  walking: 1,
  walks: 1,
  wall: 1,
  wallace: 1,
  wallet: 1,
  wallpaper: 1,
  wallpapers: 1,
  walls: 1,
  walnut: 1,
  walt: 1,
  walter: 1,
  wan: 1,
  wang: 1,
  wanna: 1,
  want: 1,
  wanted: 1,
  wanting: 1,
  wants: 1,
  war: 1,
  warcraft: 1,
  ward: 1,
  ware: 1,
  warehouse: 1,
  warm: 1,
  warming: 1,
  warned: 1,
  warner: 1,
  warning: 1,
  warnings: 1,
  warrant: 1,
  warranties: 1,
  warranty: 1,
  warren: 1,
  warrior: 1,
  warriors: 1,
  wars: 1,
  was: 1,
  wash: 1,
  washer: 1,
  washing: 1,
  washington: 1,
  waste: 1,
  watch: 1,
  watched: 1,
  watches: 1,
  watching: 1,
  water: 1,
  waterproof: 1,
  waters: 1,
  watershed: 1,
  watson: 1,
  watt: 1,
  watts: 1,
  wav: 1,
  wave: 1,
  waves: 1,
  wax: 1,
  way: 1,
  wayne: 1,
  ways: 1,
  wb: 1,
  wc: 1,
  we: 1,
  weak: 1,
  wealth: 1,
  weapon: 1,
  weapons: 1,
  wear: 1,
  wearing: 1,
  weather: 1,
  web: 1,
  webcam: 1,
  webcams: 1,
  webcast: 1,
  weblog: 1,
  weblogs: 1,
  webmaster: 1,
  webmasters: 1,
  webpage: 1,
  webshots: 1,
  website: 1,
  websites: 1,
  webster: 1,
  wed: 1,
  wedding: 1,
  weddings: 1,
  wednesday: 1,
  weed: 1,
  week: 1,
  weekend: 1,
  weekends: 1,
  weekly: 1,
  weeks: 1,
  weight: 1,
  weighted: 1,
  weights: 1,
  weird: 1,
  welcome: 1,
  welding: 1,
  welfare: 1,
  well: 1,
  wellington: 1,
  wellness: 1,
  wells: 1,
  welsh: 1,
  wendy: 1,
  went: 1,
  were: 1,
  wesley: 1,
  west: 1,
  western: 1,
  westminster: 1,
  wet: 1,
  whale: 1,
  what: 1,
  whatever: 1,
  whats: 1,
  wheat: 1,
  wheel: 1,
  wheels: 1,
  when: 1,
  whenever: 1,
  where: 1,
  whereas: 1,
  wherever: 1,
  whether: 1,
  which: 1,
  while: 1,
  whilst: 1,
  white: 1,
  who: 1,
  whole: 1,
  wholesale: 1,
  whom: 1,
  whore: 1,
  whose: 1,
  why: 1,
  wi: 1,
  wichita: 1,
  wicked: 1,
  wide: 1,
  widely: 1,
  wider: 1,
  widescreen: 1,
  widespread: 1,
  width: 1,
  wife: 1,
  wifi: 1,
  wiki: 1,
  wikipedia: 1,
  wild: 1,
  wilderness: 1,
  wildlife: 1,
  wiley: 1,
  will: 1,
  william: 1,
  williams: 1,
  willing: 1,
  willow: 1,
  wilson: 1,
  win: 1,
  wind: 1,
  window: 1,
  windows: 1,
  winds: 1,
  windsor: 1,
  wine: 1,
  wines: 1,
  wing: 1,
  wings: 1,
  winner: 1,
  winners: 1,
  winning: 1,
  wins: 1,
  winston: 1,
  winter: 1,
  wire: 1,
  wired: 1,
  wireless: 1,
  wires: 1,
  wiring: 1,
  wisconsin: 1,
  wisdom: 1,
  wise: 1,
  wish: 1,
  wishes: 1,
  wishing: 1,
  wishlist: 1,
  wit: 1,
  witch: 1,
  with: 1,
  withdrawal: 1,
  within: 1,
  without: 1,
  witness: 1,
  witnesses: 1,
  wives: 1,
  wizard: 1,
  wm: 1,
  wma: 1,
  wn: 1,
  wolf: 1,
  woman: 1,
  women: 1,
  womens: 1,
  won: 1,
  wonder: 1,
  wonderful: 1,
  wondering: 1,
  wood: 1,
  wooden: 1,
  woods: 1,
  wool: 1,
  worcester: 1,
  word: 1,
  wordpress: 1,
  words: 1,
  work: 1,
  worked: 1,
  worker: 1,
  workers: 1,
  workflow: 1,
  workforce: 1,
  working: 1,
  workout: 1,
  workplace: 1,
  works: 1,
  workshop: 1,
  workshops: 1,
  workstation: 1,
  world: 1,
  worldcat: 1,
  worlds: 1,
  worldsex: 1,
  worldwide: 1,
  worm: 1,
  worn: 1,
  worried: 1,
  worry: 1,
  worse: 1,
  worship: 1,
  worst: 1,
  worth: 1,
  worthy: 1,
  would: 1,
  wound: 1,
  wow: 1,
  wp: 1,
  wr: 1,
  wrap: 1,
  wrapped: 1,
  wrapping: 1,
  wrestling: 1,
  wright: 1,
  wrist: 1,
  write: 1,
  writer: 1,
  writers: 1,
  writes: 1,
  writing: 1,
  writings: 1,
  written: 1,
  wrong: 1,
  wrote: 1,
  ws: 1,
  wt: 1,
  wto: 1,
  wu: 1,
  wv: 1,
  ww: 1,
  www: 1,
  wx: 1,
  wy: 1,
  wyoming: 1,
  x: 1,
  xanax: 1,
  xbox: 1,
  xerox: 1,
  xhtml: 1,
  xi: 1,
  xl: 1,
  xml: 1,
  xnxx: 1,
  xp: 1,
  xx: 1,
  xxx: 1,
  y: 1,
  ya: 1,
  yacht: 1,
  yahoo: 1,
  yale: 1,
  yamaha: 1,
  yang: 1,
  yard: 1,
  yards: 1,
  yarn: 1,
  ye: 1,
  yea: 1,
  yeah: 1,
  year: 1,
  yearly: 1,
  years: 1,
  yeast: 1,
  yellow: 1,
  yemen: 1,
  yen: 1,
  yes: 1,
  yesterday: 1,
  yet: 1,
  yield: 1,
  yields: 1,
  yn: 1,
  yo: 1,
  yoga: 1,
  york: 1,
  yorkshire: 1,
  you: 1,
  young: 1,
  younger: 1,
  your: 1,
  yours: 1,
  yourself: 1,
  youth: 1,
  yr: 1,
  yrs: 1,
  yu: 1,
  yugoslavia: 1,
  yukon: 1,
  z: 1,
  za: 1,
  zambia: 1,
  zdnet: 1,
  zealand: 1,
  zen: 1,
  zero: 1,
  zimbabwe: 1,
  zinc: 1,
  zip: 1,
  zoloft: 1,
  zone: 1,
  zones: 1,
  zoning: 1,
  zoo: 1,
  zoom: 1,
  zoophilia: 1,
  zope: 1,
  zshops: 1,
  zu: 1,
  zum: 1,
  zus: 1
};

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.URL = __webpack_require__(31).interface;
exports.serializeURL = __webpack_require__(1).serializeURL;
exports.serializeURLOrigin = __webpack_require__(1).serializeURLOrigin;
exports.basicURLParse = __webpack_require__(1).basicURLParse;
exports.setTheUsername = __webpack_require__(1).setTheUsername;
exports.setThePassword = __webpack_require__(1).setThePassword;
exports.serializeHost = __webpack_require__(1).serializeHost;
exports.serializeInteger = __webpack_require__(1).serializeInteger;
exports.parseURL = __webpack_require__(1).parseURL;


/***/ }),
/* 17 */
/***/ (function(module, exports) {

const // Versions
V1 = 'v1',
      V2 = 'v2',
      SUPPORTED_VERSIONS = new Set([V1, V2]),
      SUPPORTED_LANGUAGES = new Set(['hi', // Hindi
'en', // English (US)
'en-uk', // English (UK)
'es', // Spanish
'fr', // French
'ja', // Japanese
'hu', 'cs', // Czech
'nl', // Dutch
'sk', // Slovak
'ru', // Russian
'de', // German
'it', // Italian
'ko', // Korean
'pt-BR', // Brazilian Portuguese
'ar', // Arabic
'tr' // Turkish
]);
module.exports = {
  logEvent(word, language, message, additionalInfo = {}) {
    console.log({
      'Word': word,
      'Language': language,
      'Message': message,
      'AdditionalInfo': JSON.stringify(additionalInfo)
    });
  },

  isLanguageSupported(language) {
    return SUPPORTED_LANGUAGES.has(language);
  },

  isVersionSupported(version) {
    return SUPPORTED_VERSIONS.has(version);
  }

};

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetchTextFromHttpUrl", function() { return fetchTextFromHttpUrl; });
const fetch = __webpack_require__(30);

const https = __webpack_require__(14);

const httpsAgent = new https.Agent({
  keepAlive: true
});

const errors = __webpack_require__(5);

async function fetchTextFromHttpUrl(url, headers, info) {
  let f = await fetch;
  f = f.default;
  let response = await f(url, {
    agent: httpsAgent,
    headers: new fetch.Headers(headers)
  });

  if (response.status === 404) {
    throw new errors.NoDefinitionsFound({
      info,
      reason: 'Website returned 404.'
    });
  }

  if (response.status === 429) {
    throw new errors.RateLimitError();
  }

  if (response.status !== 200) {
    throw new errors.NoDefinitionsFound({
      info,
      reason: 'Threw non 200 status code.'
    });
  }

  let body = await response.text(),
      data = JSON.parse(body); //data = JSON.parse(body.substring(4));

  return data;
}

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = require("punycode");

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "aCrawler", function() { return aCrawler; });
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const fs = __webpack_require__(4);

const finder = __webpack_require__(21);

const API_LIMIT_EXCEPTION = {
  apiLimitException: 1
};
function aCrawler() {
  const TURNING_TIME_GMT = [20, 55];
  const MAX_PARALLEL = 20;
  let API;
  let CACHE_DIR;
  let API_DAILY_LIMIT;
  let MAX_WORDS;
  let MAX_NODE_FREQUENCY;
  let TRAVERSE_ALL;
  let download, curtime, turntime;
  let TWELVE;
  let cacheInitializerCommon;
  let cacheIsInitialized = false;
  let pendingParallelRequests = 0;
  let admittedParallelRequests = 0;
  let totalWordsLastDay = 0;
  let cacheInitIsError = false;
  let pendingObjects = {};

  function timeoutAsPromise(millis) {
    return new Promise((a, r) => {
      setTimeout(a, millis);
    });
  }

  async function parallelBottleneck() {
    pendingParallelRequests++;

    if (!(pendingParallelRequests % 1000)) {
      console.log(API, "++pendingParallelRequests:" + pendingParallelRequests + " admittedParallelRequests:" + admittedParallelRequests);
    }

    while (admittedParallelRequests >= MAX_PARALLEL) {
      await timeoutAsPromise(20);
    }

    admittedParallelRequests++;
  }

  async function remoteInitBottleneck() {
    await parallelBottleneck();

    if (!cacheIsInitialized) {
      if (!cacheInitializerCommon) {
        cacheInitializerCommon = finder.findFiles(`${CACHE_DIR}/words`, turntime);
        totalWordsLastDay = await cacheInitializerCommon;
        cacheIsInitialized = true;
        console.log(API, "remoteInitBottleneck  turntime:" + turntime.toUTCString() + "  totalWordsLastDay:" + totalWordsLastDay + " errors:" + finder.errors + " pendingParallelRequests:" + pendingParallelRequests + " admittedParallelRequests:" + admittedParallelRequests);
      } else {
        await cacheInitializerCommon;
      }
    }

    if (isApiLimitReached()) {
      if (!cacheInitIsError) {
        console.error(API, "Could not proxy more request to API file/single  totalWordsLastDay+" + pendingParallelRequests + " >= API_DAILY_LIMIT :  " + (totalWordsLastDay + pendingParallelRequests) + " >= " + API_DAILY_LIMIT + "\n");
      }

      cacheInitIsError = true;
      return false;
    } else {
      totalWordsLastDay++;
      return true;
    }
  }

  function isApiLimitReached(pendingBeforeRequest = 0) {
    if (cacheIsInitialized) {
      if (cacheInitializerCommon) {
        return totalWordsLastDay + pendingParallelRequests + pendingBeforeRequest >= API_DAILY_LIMIT;
      } else {
        return false;
      }
    } else {
      return pendingParallelRequests + pendingBeforeRequest >= API_DAILY_LIMIT;
    }
  }

  async function initCrawler(_API, _API_DAILY_LIMIT, _MAX_WORDS, _MAX_NODE_FREQUENCY, _TRAVERSE_ALL) {
    API = _API;
    CACHE_DIR = "cache/" + _API;
    API_DAILY_LIMIT = _API_DAILY_LIMIT;
    MAX_WORDS = _MAX_WORDS;
    MAX_NODE_FREQUENCY = _MAX_NODE_FREQUENCY;
    TRAVERSE_ALL = _TRAVERSE_ALL;
    TWELVE = (CACHE_DIR + "/words/").length;

    switch (_API) {
      case "google":
        download = __webpack_require__(26).googleDictionary;
        break;

      case "wordsapi":
        download = __webpack_require__(37).wordsApiDictionary;
        break;

      default:
        throw "API is not supported : " + _API;
    }

    if (!fs.existsSync(`${CACHE_DIR}/words`)) {
      fs.mkdirSync(`${CACHE_DIR}/words`, {
        recursive: true
      });
    }

    if (!fs.existsSync(`${CACHE_DIR}/clusters`)) {
      fs.mkdirSync(`${CACHE_DIR}/clusters`);
    }

    if (!fs.existsSync(`cache/index`)) {
      fs.mkdirSync(`cache/index`);
    }

    curtime = new Date();
    turntime = Date.UTC(curtime.getUTCFullYear(), curtime.getUTCMonth(), curtime.getUTCDate(), TURNING_TIME_GMT[0], TURNING_TIME_GMT[1]); // 86400000 milliseconds (24 hours)

    if (curtime < turntime) {
      turntime = new Date(turntime - 86400000);
    } else {
      turntime = new Date(turntime);
    }

    console.log(API, "initCrawler  curtime:" + curtime.toUTCString() + "  turntime:" + turntime.toUTCString());
  }

  function singleWordToDisplay(data) {
    // create new array to push data to
    let results = [];
    let result = {
      word: data.word,
      frequency: data.frequency,
      pronunciation: data.pronunciation,
      results,
      etc: ""
    };
    if (data.results) data.results.map(def => {
      let definitionArray = [];
      let definition = {
        partOfSpeech: def.partOfSpeech,
        properties: definitionArray
      }; // creates array of keys in object

      const skeys = [];

      const therest = _extends({}, def);

      function addif(skeys, key) {
        if (def[key]) skeys.push(key);
        delete therest[key];
      }

      addif(skeys, "word");
      addif(skeys, "pronunciation");
      addif(skeys, "partOfSpeech");
      addif(skeys, "definition");
      addif(skeys, "synonyms");
      addif(skeys, "similarTo");
      addif(skeys, "antonyms");
      delete therest["examples"];
      const more = Object.keys(therest);
      more.sort();
      skeys.push.apply(skeys, more);
      const skeys2 = [];
      addif(skeys2, "examples");
      skeys.push.apply(skeys, skeys2);
      skeys.map(key => {
        // builds regex that looks for capital letters
        // The response parameters are in camelCase, so we need to ID
        // the capital letters and add spaces instead so the 
        // front end can easily display the parameter labels
        const regex = /(?=[A-Z])/; // creates presentable label

        const label = key.split(regex).join(' ').toLowerCase(); // grabs the value for the parameter from the
        // definition object in response

        const value = def[key]; // constructs new object to send to frontend

        let newObj = {
          label,
          value,
          isString: typeof value === 'string' ? true : false
        };
        definitionArray.push(newObj);
      });
      results.push(definition);
    });
    return result;
  }

  async function loadSingleWord(word, asobject, cachedonly = false) {
    let fileword = word.replace(/[.,/']/g, "$").toLowerCase();
    const wfpath = `${CACHE_DIR}/words/${fileword}`;
    let data;

    if (fs.existsSync(wfpath)) {
      //console.log(API, "From cache file/single "+wfpath+"  asobject:"+asobject+"...\n");
      let ijson = fs.readFileSync(wfpath).toString();

      try {
        data = JSON.parse(ijson);
      } catch (e) {
        console.warn("Delete invalid file : " + wfpath, e);
        fs.unlinkSync(wfpath);
      }
    }

    if (data) {
      if (data.error) {
        console.warn("File is of an error entry : " + wfpath, " ", data.error ? data.error.message ? data.error.message : data.error : "unknown error");
        return null;
      }

      if (asobject) {
        data.fromCache = true;
        return data;
      } else {
        let result = singleWordToDisplay(data);
        const ojson = JSON.stringify(result); // modified

        return ojson;
      }
    }

    try {
      if (pendingObjects[word]) {
        if (asobject) {
          return pendingObjects[word];
        } else {
          let result = singleWordToDisplay(pendingObjects[word]);
          const ojson = JSON.stringify(result); // modified

          return ojson;
        }
      }
    } catch (e) {
      console.warn(API, "Error (", word, ") ", e && e.message ? e.message : "?");
      return null;
    }

    if (cachedonly) {
      return null;
    }

    let djson;

    try {
      let success = await remoteInitBottleneck();

      if (!success) {
        return null;
      }

      console.error(`ENTER http download      ${API} ${word}   pending:${pendingParallelRequests} admitted:${admittedParallelRequests}`);
      data = await download(word);
      console.error(`DONE  http download      ${API} ${word}   pending:${pendingParallelRequests} admitted:${admittedParallelRequests}`);

      var copy = _extends({}, data);

      copy.fromCache = false;
      pendingObjects[word] = copy;
      djson = JSON.stringify(data); // original

      if (asobject) {
        data.fromCache = false;
        return data;
      } else {
        let result = singleWordToDisplay(data);
        const ojson = JSON.stringify(result); // modified

        return ojson;
      }
    } catch (e) {
      console.warn("API error (", API, word, ") ", e && e.message ? e.message : "?");
      djson = JSON.stringify({
        error: e.message
      });
      return null;
    } finally {
      fs.writeFile(wfpath, djson, err => {
        if (err) {
          console.error("Cache file/single " + wfpath + "  asobject:" + asobject + " pendingParallelRequests:" + pendingParallelRequests + " admittedParallelRequests:" + admittedParallelRequests + " write failure : " + err + "\n");
        } else {
          console.log("Cache file/single " + wfpath + "  asobject:" + asobject + " pendingParallelRequests:" + pendingParallelRequests + " admittedParallelRequests:" + admittedParallelRequests + " written successfully\n");
        }

        delete pendingObjects[word];
      });
      pendingParallelRequests--;
      admittedParallelRequests--;

      if (pendingParallelRequests && !(pendingParallelRequests % 1000)) {
        console.log(API, "--pendingParallelRequests:" + pendingParallelRequests + " admittedParallelRequests:" + admittedParallelRequests);
      }
    }
  }

  class DefinitionNode {
    constructor(entry, val) {
      _defineProperty(this, "entry", void 0);

      _defineProperty(this, "val", void 0);

      _defineProperty(this, "partOfSpeech", void 0);

      _defineProperty(this, "definition", void 0);

      _defineProperty(this, "synonyms", void 0);

      _defineProperty(this, "similar", void 0);

      _defineProperty(this, "word", void 0);

      _defineProperty(this, "examples", void 0);

      _defineProperty(this, "examplesTmp", void 0);

      _defineProperty(this, "key", void 0);

      this.entry = entry;
      this.val = val;
      this.definition = val.definition;
      this.synonyms = [];
      this.similar = [];
      this.examplesTmp = {};
      this.word = this.entry.word;
      this.partOfSpeech = this.val.partOfSpeech;
      this.synonyms.push.apply(this.synonyms, this.val.synonyms);
      this.synonyms.push(this.word);
      this.synonyms.sort();
      this.similar.push.apply(this.similar, this.val.similarTo);
      this.similar.sort();
      this.addExamples(this.val.examples);
      this.key = this.word + ":::::::" + this.synonyms.length + ":::::::" + this.synonyms.join(", ");
    }

    addExamples(examples) {
      if (examples) for (let x of examples) {
        this.examplesTmp[x] = 1;
      }
    }

    compress() {
      delete this.entry;
      delete this.val;
      delete this.key;
      this.examples = [];

      for (let x of Object.keys(this.examplesTmp)) {
        this.examples.push(x);
      }

      this.examples.sort();
      delete this.examplesTmp;
    }

  }

  class ClusterDefinitionNode extends DefinitionNode {
    constructor(by_def, entry, val, level) {
      super(entry, val);

      _defineProperty(this, "level", void 0);

      _defineProperty(this, "defkey", void 0);

      _defineProperty(this, "words", void 0);

      this.level = level;
      this.words = [];

      if (TRAVERSE_ALL) {
        appendTo(this.words, val.synonyms);
        appendTo(this.words, val.similarTo);
        appendTo(this.words, val.antonyms);
        appendTo(this.words, val.typeOf);
        appendTo(this.words, val.hasTypes);
        appendTo(this.words, val.partOf);
        appendTo(this.words, val.hasParts);
        appendTo(this.words, val.instanceOf);
        appendTo(this.words, val.hasInstances);
        appendTo(this.words, val.also);
        appendTo(this.words, val.entails);
        appendTo(this.words, val.memberOf);
        appendTo(this.words, val.hasMembers);
        appendTo(this.words, val.substanceOf);
        appendTo(this.words, val.hasSubstances);
        appendTo(this.words, val.inCategory);
        appendTo(this.words, val.hasCategories);
        appendTo(this.words, val.usageOf);
        appendTo(this.words, val.hasUsages);
        appendTo(this.words, val.inRegion);
        appendTo(this.words, val.regionOf);
        appendTo(this.words, val.pertainsTo);
      } else {
        appendTo(this.words, val.synonyms);
      }

      this.defkey = this.synonyms.length + "::::::" + this.synonyms.join(", ");
      this.key = this.level + ":::::::" + this.defkey;

      if (!by_def[this.defkey]) {
        by_def[this.defkey] = this;
      }
    }

    compress() {
      super.compress();
      delete this.words;
      delete this.defkey;
    }

  }

  ;

  function appendTo(array, itemOrArray) {
    if (Array.isArray(itemOrArray)) {
      array.push.apply(array, itemOrArray);
    } else if (itemOrArray) {
      array.push(itemOrArray);
    }
  }

  async function checkAPIlimitAndFinish(promises) {
    let remainingApiLimit = API_DAILY_LIMIT - (totalWordsLastDay + pendingParallelRequests);

    if (promises.length < remainingApiLimit) {
      return true;
    } else {
      await Promise.all(promises);
      remainingApiLimit = API_DAILY_LIMIT - (totalWordsLastDay + pendingParallelRequests);
      promises = [];
      return remainingApiLimit > 0;
    }
  }

  async function loadDictionaryAndChildren(tresult, word, traversion, parentNode, loadChildren) {
    if (!parentNode && !loadChildren) {
      return true;
    }

    const by_def = tresult.by_def;
    const entry = await loadSingleWord(word, true);

    if (entry && !entry.fromCache) {
      tresult.newWords++;
    }

    if (!entry || traversion.level > 1 && entry.frequency && entry.frequency >= MAX_NODE_FREQUENCY) {
      return true;
    }

    for (let key in entry.results) {
      const val = entry.results[key];

      if (parentNode && val.definition == parentNode.definition) {
        parentNode.addExamples(val.examples);
        if (!loadChildren) break;
      }

      if (loadChildren) {
        let node = new ClusterDefinitionNode(by_def, entry, val, traversion.level);

        for (let word of node.words) {
          let pair = {
            parent: node,
            word
          };
          traversion.wordsbreadthfirst.push(pair);
        }
      }
    }

    return true;
  }

  async function traverseCluster(tresult, word, themainabstraction = true, stopwhenallloaded = false) {
    let traversion = {
      level: 1,
      wordsbreadthfirst: [{
        word
      }]
    };

    if (themainabstraction) {
      tresult.noWords = 0;
      tresult.newWords = 0;
    }

    tresult.master = await loadSingleWord(word, true);

    if (!tresult.master) {
      return false;
    }

    do {
      var previouslevelchildwords = traversion.wordsbreadthfirst.concat([]);
      traversion.wordsbreadthfirst = [];
      let promises = [];

      try {
        for (let pair of previouslevelchildwords) {
          let w = pair.word;
          let loadChildren;

          if (tresult.by_w[w]) {
            loadChildren = false;
          } else {
            tresult.noWords++;
            tresult.by_w[w] = 1;
            loadChildren = tresult.noWords < MAX_WORDS;
            if (!(tresult.noWords % 1000)) console.log(API, tresult.noWords + "/" + MAX_WORDS);
          }

          let nodepromise = loadDictionaryAndChildren(tresult, w, traversion, pair.parent, loadChildren);
          promises.push(nodepromise);

          if (stopwhenallloaded && !(await checkAPIlimitAndFinish(promises))) {
            console.log(API, word + " Level " + traversion.level + " finished. Stop searching. API Limit reached.");
            return false;
          }

          if (tresult.noWords >= MAX_WORDS) {
            await Promise.all(promises);
            if (themainabstraction) console.log(API, word + " Level " + traversion.level + " finished. Search limit reached.");
            return true;
          }
        }
      } catch (e) {
        if (e === API_LIMIT_EXCEPTION) {
          console.log(API, word + " Level " + traversion.level + " finished. API Limit reached (by exception).");
          return false;
        } else {
          throw e;
        }
      }

      await Promise.all(promises);
      if (themainabstraction) console.log(API, word + " Level " + traversion.level + " finished.");
      traversion.level++;
    } while (traversion.wordsbreadthfirst.length);

    if (themainabstraction) {
      console.log(API, word + " Completed  Travesred:" + tresult.noWords + " written:" + tresult.newWords);
    }

    return true;
  }

  async function loadCluster(word, asobject) {
    const by_def = {};
    const by_w = {};
    const by_key = [];
    let tresult = {
      by_def,
      by_w
    };
    await traverseCluster(tresult, word);
    by_key.push.apply(by_key, Object.values(by_def));

    const cmp = (firstEl, secondEl) => {
      return firstEl.key.localeCompare(secondEl.key);
    };

    by_key.sort(cmp);

    for (let node of by_key) {
      node.compress();
    }

    let result = {
      word,
      noClusterEntries: by_key.length,
      results: by_key
    };

    if (tresult.master) {
      result.frequency = tresult.master.frequency;
      result.pronunciation = tresult.master.pronunciation;
    }

    let cjson;

    if (asobject) {
      return result;
    } else {
      cjson = JSON.stringify(result);
      return cjson;
    }
  }

  async function loadCommonWord(result, word, noWords) {
    const entry = await loadSingleWord(word, true);

    if (entry) {
      if (!entry.fromCache) {
        result.newWords++;
      }

      result.noWords++;
      if (!(result.noWords % 1000)) console.log(API, result.noWords + "/" + noWords);

      for (let key in entry.results) {
        const val = entry.results[key];
        const definitionNode = new DefinitionNode(entry, val);
        let promises = [];

        try {
          for (let syn of val.synonyms ? val.synonyms : []) {
            let nodepromise = loadDictionaryAndChildren(result, syn, {
              level: 0
            }, definitionNode, false);
            promises.push(nodepromise);
          }

          await Promise.all(promises);
        } catch (e) {
          if (e === API_LIMIT_EXCEPTION) {
            console.log(API, word + " Level " + traversion.level + " finished. API Limit reached (by exception).");
            return false;
          } else {
            throw e;
          }
        }

        result.noDefinitions++;
        result.results.push(definitionNode);
      }
    }
  }

  async function loadCommonWords(words, word, asobject) {
    // create new array to push data to
    let results = [];
    let result = {
      word,
      noWords: 0,
      newWords: 0,
      noDefinitions: 0,
      results
    };
    let promises = [];
    let noWords = Object.keys(words).length;

    for (let commonWord in words) {
      let cwpromise = loadCommonWord(result, commonWord, noWords);
      promises.push(cwpromise);
    }

    await Promise.all(promises);

    const cmp = (firstEl, secondEl) => {
      return firstEl.key.localeCompare(secondEl.key);
    };

    result.results.sort(cmp);
    let prevnode;
    let filtered = [];

    for (let node of result.results) {
      if (!prevnode || prevnode.definition != node.definition) {
        filtered.push(node);
        node.compress();
        prevnode = node;
      }
    }

    result.results = filtered;
    result.noDefinitions = filtered.length;
    console.log(API, " Common words query processed  Travesred:" + result.noWords + " written:" + result.newWords);
    let cjson;

    if (asobject) {
      return result;
    } else {
      cjson = JSON.stringify(result);
      return cjson;
    }
  }

  function loadCommonWordsLetter(words, word, letter, asobject) {
    let ofLetter = {};
    let lc = letter.toLowerCase();

    for (let w of Object.keys(words)) {
      if (w[0].toLowerCase() == lc) {
        ofLetter[w] = 1;
      }
    }

    return loadCommonWords(ofLetter, word, asobject);
  }

  function loadCommonWords3000_a_e(word, asobject) {
    const cw = __webpack_require__(6);

    return loadCommonWords(cw.TheMostCommon3000, word, asobject);
  }

  function loadCommonWords3000_f_p(word, asobject) {
    const cw = __webpack_require__(7);

    return loadCommonWords(cw.TheMostCommon3000, word, asobject);
  }

  function loadCommonWords3000_q_z(word, asobject) {
    const cw = __webpack_require__(8);

    return loadCommonWords(cw.TheMostCommon3000, word, asobject);
  }

  function loadCommonWords10000_a_c(word, asobject) {
    const cw = __webpack_require__(9);

    return loadCommonWords(cw.TheMostCommon10000, word, asobject);
  }

  function loadCommonWords10000_d_h(word, asobject) {
    const cw = __webpack_require__(10);

    return loadCommonWords(cw.TheMostCommon10000, word, asobject);
  }

  function loadCommonWords10000_i_o(word, asobject) {
    const cw = __webpack_require__(11);

    return loadCommonWords(cw.TheMostCommon10000, word, asobject);
  }

  function loadCommonWords10000_p_r(word, asobject) {
    const cw = __webpack_require__(12);

    return loadCommonWords(cw.TheMostCommon10000, word, asobject);
  }

  function loadCommonWords10000_s_z(word, asobject) {
    const cw = __webpack_require__(13);

    return loadCommonWords(cw.TheMostCommon10000, word, asobject);
  }

  function loadCommonWords3000(word, letter, asobject) {
    let lc = letter.toLowerCase(),
        cw;

    if ('a' <= lc && lc <= 'e') {
      cw = __webpack_require__(6);
    } else if ('f' <= lc && lc <= 'p') {
      cw = __webpack_require__(7);
    } else if ('q' <= lc && lc <= 'z') {
      cw = __webpack_require__(8);
    } else {
      cw = {
        TheMostCommon3000: {}
      };
    }

    return loadCommonWordsLetter(cw.TheMostCommon3000, word, letter, asobject);
  }

  function loadCommonWords10000(word, letter, asobject) {
    let lc = letter.toLowerCase(),
        cw;

    if ('a' <= lc && lc <= 'c') {
      cw = __webpack_require__(9);
    } else if ('d' <= lc && lc <= 'h') {
      cw = __webpack_require__(10);
    } else if ('i' <= lc && lc <= 'o') {
      cw = __webpack_require__(11);
    } else if ('p' <= lc && lc <= 'r') {
      cw = __webpack_require__(12);
    } else if ('s' <= lc && lc <= 'z') {
      cw = __webpack_require__(13);
    } else {
      cw = {
        TheMostCommon10000: {}
      };
    }

    return loadCommonWordsLetter(cw.TheMostCommon10000, word, letter, asobject);
  }

  function loadWordsOnly(words0, word, asobject) {
    let words;

    if (Array.isArray(words0)) {
      words = words0;
    } else {
      words = [].concat(Object.keys(words0));
    }

    words.sort();
    let result = {
      word,
      noWords: words.length,
      results: words
    };
    let cjson;

    if (asobject) {
      return result;
    } else {
      cjson = JSON.stringify(result);
      return cjson;
    }
  }

  function loadCommon3000_words(word, asobject) {
    let cw1 = __webpack_require__(6);

    let cw2 = __webpack_require__(7);

    let cw3 = __webpack_require__(8);

    let TheMostCommon3000 = _extends({}, cw1.TheMostCommon3000, cw2.TheMostCommon3000, cw3.TheMostCommon3000);

    return loadWordsOnly(TheMostCommon3000, word, asobject);
  }

  function loadCommon10000_words(word, asobject) {
    let cw1 = __webpack_require__(9);

    let cw2 = __webpack_require__(10);

    let cw3 = __webpack_require__(11);

    let cw4 = __webpack_require__(12);

    let cw5 = __webpack_require__(13);

    let TheMostCommon10000 = _extends({}, cw1.TheMostCommon10000, cw2.TheMostCommon10000, cw3.TheMostCommon10000, cw4.TheMostCommon10000, cw5.TheMostCommon10000);

    return loadWordsOnly(TheMostCommon10000, word, asobject);
  }

  async function loadAll_words(word0, asobject) {
    let allwords0 = [];

    function onFile(strPath, stat) {
      let word = strPath.substring(TWELVE);
      allwords0.push(word);
    }

    await finder.findFiles(`${CACHE_DIR}/words`, 0, onFile);
    return loadWordsOnly(allwords0, word0, asobject);
  }

  function loadMyWords(word, asobject) {
    let cw1 = __webpack_require__(38);

    return loadWordsOnly(cw1.MyWords, word, asobject);
  }

  async function wordsByFrequency(word0, ffrom, fto = 1000000, asobject) {
    let files = [];
    const indpath = `cache/index/frequency`;
    let ijson = fs.readFileSync(indpath);
    let find = JSON.parse(ijson);
    let words0 = [];
    let notf = 0,
        fit = 0;

    for (let df in find) {
      let a = find[df];

      if (ffrom <= df && df <= fto) {
        words0.push.apply(words0, a);
        fit += a.length;
      } else {
        notf += a.length;
      }
    }

    console.log(API, "Items fit:" + fit + " nonfit:" + notf + " tot:" + (fit + notf));
    return loadWordsOnly(words0, word0, asobject);
  }

  async function generateIndexes() {
    let files = [];

    async function onFile(strPath, stat) {
      let word = strPath.substring(TWELVE);
      files.push(word);
    }

    let nowords = await finder.findFiles(`${CACHE_DIR}/words`, 0, onFile);
    let cntf = 0;
    let byf = {};

    function entry(f) {
      let es = byf[f];

      if (!es) {
        byf[f] = es = [];
        cntf++;
      }

      return es;
    }

    let chkFile = async function (word) {
      let data = await loadSingleWord(word, true, true);

      if (data) {
        let df = data.frequency ? data.frequency : 0;
        entry(df).push(word);
      }
    };

    let promises = [];

    for (let file of files) {
      promises.push(chkFile(file));
    }

    await Promise.all(promises);
    var fkeys = [].concat(Object.keys(byf));
    fkeys.sort((a, b) => Number(a) - Number(b));
    var byfs = {};

    for (let f of fkeys) {
      let es = byf[f];
      byfs[f] = es;
      es.sort();
    }

    console.log(API, "Frequency indexes:" + cntf + "  of no.words:" + nowords);

    function quantilize(size) {
      let lst = 0;
      let buckets = [0];

      for (let f of fkeys) {
        f = Number(f);

        if (f) {
          let es = byfs[f];
          lst += es ? es.length : 0;

          if (lst >= size) {
            let fpl = f + 0.005;
            let ff = fpl.toFixed(3);
            console.log(API, "Frequency:.." + f + " " + ff + "  cnt:" + lst);
            lst = 0;
            buckets.push(ff);
          }
        }
      }

      console.log(API, "Frequency:..  cnt:" + lst);
      console.log(API, "var frqntls" + size + "=[" + buckets.join(", ") + ",100];\n");
    }

    quantilize(800);
    quantilize(3000);
    quantilize(10000);
    const indpath = `cache/index/frequency`;
    const djson = JSON.stringify(byfs);
    console.log(API, "Saving cache file/index " + indpath);
    fs.writeFileSync(indpath, djson);
  }

  return {
    isApiLimitReached,
    initCrawler,
    singleWordToDisplay,
    loadSingleWord,
    traverseCluster,
    loadCluster,
    loadCommonWords,
    loadCommonWordsLetter,
    loadCommonWords3000_a_e,
    loadCommonWords3000_f_p,
    loadCommonWords3000_q_z,
    loadCommonWords10000_a_c,
    loadCommonWords10000_d_h,
    loadCommonWords10000_i_o,
    loadCommonWords10000_p_r,
    loadCommonWords10000_s_z,
    loadCommonWords3000,
    loadCommonWords10000,
    loadCommon3000_words,
    loadCommon10000_words,
    loadAll_words,
    loadMyWords,
    wordsByFrequency,
    generateIndexes
  };
}

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cnt", function() { return cnt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "errors", function() { return errors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFiles", function() { return findFiles; });
const FindFiles = __webpack_require__(22);

let cnt = 0,
    errors = 0;
function findFiles(rootFolder, fileModifiedDate, onFile) {
  var finder = new FindFiles({
    rootFolder,
    fileModifiedDate
  });
  var result, resolve, reject;
  cnt = 0;
  errors = 0;
  finder.on("match", function (strPath, stat) {
    if (onFile) onFile(strPath, stat);
    cnt++;
  });
  finder.on("complete", function () {
    resolve(cnt);
  });
  finder.on("patherror", function (err, strPath) {
    console.log("Error for Path " + strPath + " " + err); // Note that an error in accessing a particular file does not stop the whole show

    errors++;
  });
  finder.on("error", function (err) {
    console.log("Global Error " + err);
    errors++;
  });
  result = new Promise((_resolve, _reject) => {
    resolve = _resolve;
    reject = _reject;
    finder.startSearch();
  });
  return result;
}

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const fs_1 = __importDefault(__webpack_require__(4));
const async_1 = __importDefault(__webpack_require__(23));
const path_1 = __importDefault(__webpack_require__(24));
const events_1 = __importDefault(__webpack_require__(25));
var EventEmitter = events_1.default.EventEmitter;
/***
 * This class recursively finds files that match the filter function passed to the constructor
 * An alternative constructor takes a fileModifiedDate and returns all files that have been modified since that date
 * this class emits a number of events
 * on "match" is emitted for every path that matches
 */
class finder extends EventEmitter {
    constructor(options) {
        super();
        if (options.fileModifiedDate) {
            options.filterFunction = (strPath, fsStat) => {
                return (fsStat.mtime > options.fileModifiedDate);
            };
        }
        if (!options.filterFunction) {
            options.filterFunction = () => true;
        }
        this.options = options;
    }
    startSearch() {
        this.recurseFolder(this.options.rootFolder, (err) => {
            if (err) {
                this.emit("error", err);
                return;
            }
            //console.log("This Should Call when everything is finished");
            this.emit("complete");
        });
    }
    recurseFolder(strFolderName, folderCompleteCallback) {
        fs_1.default.readdir(strFolderName, (err, files) => {
            if (err) {
                this.onPathError(err, strFolderName);
                return folderCompleteCallback(err);
            }
            if (!files) {
                return folderCompleteCallback(null); // This is just an empty folder
            }
            async_1.default.each(files, (file, callback) => {
                try {
                    var strPath = path_1.default.join(strFolderName, file);
                }
                catch (e) {
                    this.onPathError(e, strPath);
                    return callback(null); // Don't return error to callback or we will miss other files in directory
                }
                this.onFileFound(strPath, callback);
            }, (err) => {
                if (err) {
                    this.onPathError(err, strFolderName);
                }
                //                    if(strFolderName.length < 20)
                //                        console.log("finished " + strFolderName);
                return folderCompleteCallback(err);
            });
        });
    }
    onFileFound(strPath, callback) {
        fs_1.default.lstat(strPath, (err, stat) => {
            if (err) {
                this.onPathError(err, strPath);
                return callback(null); // Don't return error to callback or we will miss other files in directory
            }
            if (!stat) {
                this.onPathError(new Error("Could not get stat for file " + strPath), strPath);
                return callback(null); // Don't return error to callback or we will miss other files in directory
            }
            if (stat.isDirectory()) {
                this.checkMatch(strPath, stat);
                this.recurseFolder(strPath, (err) => {
                    if (err) {
                        this.onPathError(err, strPath);
                    }
                    return callback(null);
                });
            }
            else {
                this.checkMatch(strPath, stat);
                return callback(null);
            }
        });
    }
    checkMatch(strPath, stat) {
        try {
            if (this.options.filterFunction(strPath, stat)) {
                this.emit("match", strPath, stat);
            }
        }
        catch (e) {
            this.onPathError(e, strPath);
        }
    }
    onPathError(err, strPath) {
        try {
            this.emit("patherror", err, strPath);
        }
        catch (e) {
            //Already emitted a path error and the handler failed must not throw error or other files will fail to process too
            this.emit("error", new Error("Error in path Error Handler" + e));
        }
    }
}
module.exports = finder;
//# sourceMappingURL=node-find-files.js.map

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*global setImmediate: false, setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root, previous_async;

    root = this;
    if (root != null) {
      previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        var called = false;
        return function() {
            if (called) throw new Error("Callback was already called.");
            called = true;
            fn.apply(root, arguments);
        }
    }

    //// cross-browser compatiblity functions ////

    var _each = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _each(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _each(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        if (typeof setImmediate === 'function') {
            async.nextTick = function (fn) {
                setImmediate(fn);
            };
        }
        else {
            async.nextTick = function (fn) {
                setTimeout(fn, 0);
            };
        }
    }
    else {
        async.nextTick = process.nextTick;
    }

    async.each = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _each(arr, function (x) {
            iterator(x, only_once(function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    }
                }
            }));
        });
    };
    async.forEach = async.each;

    async.eachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            var sync = true;
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback(null);
                    }
                    else {
                        if (sync) {
                            async.nextTick(iterate);
                        }
                        else {
                            iterate();
                        }
                    }
                }
            });
            sync = false;
        };
        iterate();
    };
    async.forEachSeries = async.eachSeries;

    async.eachLimit = function (arr, limit, iterator, callback) {
        var fn = _eachLimit(limit);
        fn.apply(null, [arr, iterator, callback]);
    };
    async.forEachLimit = async.eachLimit;

    var _eachLimit = function (limit) {

        return function (arr, iterator, callback) {
            callback = callback || function () {};
            if (!arr.length || limit <= 0) {
                return callback();
            }
            var completed = 0;
            var started = 0;
            var running = 0;

            (function replenish () {
                if (completed >= arr.length) {
                    return callback();
                }

                while (running < limit && started < arr.length) {
                    started += 1;
                    running += 1;
                    iterator(arr[started - 1], function (err) {
                        if (err) {
                            callback(err);
                            callback = function () {};
                        }
                        else {
                            completed += 1;
                            running -= 1;
                            if (completed >= arr.length) {
                                callback();
                            }
                            else {
                                replenish();
                            }
                        }
                    });
                }
            })();
        };
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.each].concat(args));
        };
    };
    var doParallelLimit = function(limit, fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [_eachLimit(limit)].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.eachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (err, v) {
                results[x.index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = function (arr, limit, iterator, callback) {
        return _mapLimit(limit)(arr, iterator, callback);
    };

    var _mapLimit = function(limit) {
        return doParallelLimit(limit, _asyncMap);
    };

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        if (!keys.length) {
            return callback(null);
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            _each(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (_keys(results).length === keys.length) {
                callback(null, results);
                callback = function () {};
            }
        });

        _each(keys, function (k) {
            var task = (tasks[k] instanceof Function) ? [tasks[k]]: tasks[k];
            var taskCallback = function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _each(_keys(results), function(rkey) {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    results[k] = args;
                    async.nextTick(taskComplete);
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback.apply(null, arguments);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.nextTick(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    var _parallel = function(eachfn, tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            eachfn.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            eachfn.each(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.parallel = function (tasks, callback) {
        _parallel({ map: async.map, each: async.each }, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (tasks.constructor === Array) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.eachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            var sync = true;
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                if (sync) {
                    async.nextTick(function () {
                        async.whilst(test, iterator, callback);
                    });
                }
                else {
                    async.whilst(test, iterator, callback);
                }
            });
            sync = false;
        }
        else {
            callback();
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        var sync = true;
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (test()) {
                if (sync) {
                    async.nextTick(function () {
                        async.doWhilst(iterator, test, callback);
                    });
                }
                else {
                    async.doWhilst(iterator, test, callback);
                }
            }
            else {
                callback();
            }
        });
        sync = false;
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            var sync = true;
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                if (sync) {
                    async.nextTick(function () {
                        async.until(test, iterator, callback);
                    });
                }
                else {
                    async.until(test, iterator, callback);
                }
            });
            sync = false;
        }
        else {
            callback();
        }
    };

    async.doUntil = function (iterator, test, callback) {
        var sync = true;
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            if (!test()) {
                if (sync) {
                    async.nextTick(function () {
                        async.doUntil(iterator, test, callback);
                    });
                }
                else {
                    async.doUntil(iterator, test, callback);
                }
            }
            else {
                callback();
            }
        });
        sync = false;
    };

    async.queue = function (worker, concurrency) {
        if (concurrency === undefined) {
            concurrency = 1;
        }
        function _insert(q, data, pos, callback) {
          if(data.constructor !== Array) {
              data = [data];
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  callback: typeof callback === 'function' ? callback : null
              };

              if (pos) {
                q.tasks.unshift(item);
              } else {
                q.tasks.push(item);
              }

              if (q.saturated && q.tasks.length === concurrency) {
                  q.saturated();
              }
              async.nextTick(q.process);
          });
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
              _insert(q, data, false, callback);
            },
            unshift: function (data, callback) {
              _insert(q, data, true, callback);
            },
            process: function () {
                if (workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    var sync = true;
                    var next = function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers === 0) {
                            q.drain();
                        }
                        q.process();
                    };
                    var cb = only_once(function () {
                        var cbArgs = arguments;

                        if (sync) {
                            async.nextTick(function () {
                                next.apply(null, cbArgs);
                            });
                        } else {
                            next.apply(null, arguments);
                        }
                    });
                    worker(task.data, cb);
                    sync = false;
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            }
        };
        return q;
    };

    async.cargo = function (worker, payload) {
        var working     = false,
            tasks       = [];

        var cargo = {
            tasks: tasks,
            payload: payload,
            saturated: null,
            empty: null,
            drain: null,
            push: function (data, callback) {
                if(data.constructor !== Array) {
                    data = [data];
                }
                _each(data, function(task) {
                    tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    if (cargo.saturated && tasks.length === payload) {
                        cargo.saturated();
                    }
                });
                async.nextTick(cargo.process);
            },
            process: function process() {
                if (working) return;
                if (tasks.length === 0) {
                    if(cargo.drain) cargo.drain();
                    return;
                }

                var ts = typeof payload === 'number'
                            ? tasks.splice(0, payload)
                            : tasks.splice(0);

                var ds = _map(ts, function (task) {
                    return task.data;
                });

                if(cargo.empty) cargo.empty();
                working = true;
                worker(ds, function () {
                    working = false;

                    var args = arguments;
                    _each(ts, function (data) {
                        if (data.callback) {
                            data.callback.apply(null, args);
                        }
                    });

                    process();
                });
            },
            length: function () {
                return tasks.length;
            },
            running: function () {
                return working;
            }
        };
        return cargo;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _each(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                callback.apply(null, memo[key]);
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

    async.times = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.map(counter, iterator, callback);
    };

    async.timesSeries = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.mapSeries(counter, iterator, callback);
    };

    async.compose = function (/* functions... */) {
        var fns = Array.prototype.reverse.call(arguments);
        return function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([function () {
                    var err = arguments[0];
                    var nextargs = Array.prototype.slice.call(arguments, 1);
                    cb(err, nextargs);
                }]))
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        };
    };

    async.applyEach = function (fns /*args...*/) {
        var go = function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            return async.each(fns, function (fn, cb) {
                fn.apply(that, args.concat([cb]));
            },
            callback);
        };
        if (arguments.length > 1) {
            var args = Array.prototype.slice.call(arguments, 1);
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };

    // AMD / RequireJS
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return async;
        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
    // Node.js
    else {}

}());


/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "googleDictionary", function() { return googleDictionary; });
const utils = __webpack_require__(17);

const errors = __webpack_require__(5);

const dictionary = __webpack_require__(27); // Versions


const V1 = 'v1';
const V2 = 'v2';

function transformToWordsApiLike(definitions) {
  let result = {
    word: "",
    results: [],
    pronunciation: {}
  };
  let antipron = {};
  let idx = 1;
  let pid = 'a'.charCodeAt(0);

  for (let data of definitions) {
    let word = data.word;
    if (!result.word) result.word = word;

    for (let meaning of data.meanings) {
      for (let meaningdef of meaning.definitions) {
        if (data.phonetic && !antipron[data.phonetic]) {
          antipron[data.phonetic] = [String.fromCharCode(pid++)];
        }

        antipron[data.phonetic].push(idx);
        let item = {
          partOfSpeech: meaning.partOfSpeech,
          pronunciation: data.phonetic,
          definition: meaningdef.definition,
          examples: meaningdef.examples ? meaningdef.examples : meaningdef.example ? [meaningdef.example] : undefined,
          synonyms: meaningdef.synonyms && meaningdef.synonyms.length ? meaningdef.synonyms : undefined,
          antonyms: meaningdef.antonyms && meaningdef.antonyms.length ? meaningdef.antonyms : undefined,
          word
        };
        result.results.push(item);
        idx++;
      }
    }
  }

  let aps = [];

  for (let a in antipron) {
    let p = antipron[a];
    aps.push({
      a,
      p
    });
  }

  for (let pair of aps) {
    result.pronunciation[pair.p.join(",")] = pair.a;
  }

  return result;
}

async function googleDictionary(word, language = "en", version = "v2", include = "") {
  if (!word || !language || !version) {
    throw new errors.NoDefinitionsFound();
  } // @todo: Find better error.


  if (!utils.isVersionSupported(version)) {
    return handleError.call(res, new errors.NoDefinitionsFound());
  } // Todo: Figure out better strategy.


  if (language === 'en_US' || language === 'en_GB') {
    language = 'en';
  } // By default we are assuming person means American English
  // This is needed for backward compatibility.


  language = language.toLowerCase(); // @todo: Find better error.

  if (!utils.isLanguageSupported(language)) {
    return handleError.call(res, new errors.NoDefinitionsFound());
  }

  word = word.trim().toLocaleLowerCase(language);
  let definitions = await dictionary.findDefinitions(word, language, {
    include
  }); //if (version === V1) {
  //    definitions = dictionary.transformV2toV1(definitions);
  //}

  definitions = transformToWordsApiLike(definitions);
  return definitions;
}
; //module.exports = {
//    googleDictionary
//} ;

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transformV2toV1", function() { return transformV2toV1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findDefinitions", function() { return findDefinitions; });
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const fs = __webpack_require__(4),
      _ = __webpack_require__(28),
      utils = __webpack_require__(17),
      errors = __webpack_require__(5),
      fetch = __webpack_require__(18);

function transformV2toV1(data) {
  return data.map(entry => {
    let {
      meanings
    } = entry,
        otherProps = _objectWithoutProperties(entry, ["meanings"]);

    meanings = meanings.reduce((meanings, meaning) => {
      let partOfSpeech, definitions;
      ({
        partOfSpeech,
        definitions
      } = meaning);
      meanings[partOfSpeech] = definitions;
      return meanings;
    }, {});
    return _objectSpread({}, otherProps, {
      meaning: meanings
    });
  });
}

function transform(word, language, data, {
  include
}) {
  return data.map(e => e.entry).filter(e => e).reduce((accumulator, entry) => {
    if (!entry.subentries) {
      return accumulator.push(entry) && accumulator;
    }

    let {
      subentries
    } = entry,
        mappedSubentries;

    if (subentries.length > 1) {
      utils.logEvent(word, language, 'subentries length is greater than 1', {
        data
      });
    }

    if (entry.sense_families) {
      utils.logEvent(word, language, 'entry has subentries and sense families', {
        data
      });
    }

    if (entry.etymology) {
      utils.logEvent(word, language, 'entry has subentries and etymology', {
        data
      });
    }

    mappedSubentries = subentries.map(subentry => {
      if (subentry.sense_families) {
        utils.logEvent(word, language, 'subentry has sense families', {
          data
        });
      }

      if (subentry.sense_family) {
        subentry.sense_families = [];
        subentry.sense_families.push(subentry.sense_family);
      }

      return _.defaults(subentry, _.pick(entry, ['phonetics', 'etymology']));
    });
    return accumulator.concat(mappedSubentries);
  }, []).map(entry => {
    let {
      headword,
      lemma,
      phonetics = [],
      etymology = {},
      sense_families = []
    } = entry;
    return {
      word: lemma || headword,
      phonetic: _.get(phonetics, '0.text'),
      phonetics: phonetics.map(e => {
        return {
          text: e.text,
          audio: e.oxford_audio
        };
      }),
      origin: _.get(etymology, 'etymology.text'),
      meanings: sense_families.map(sense_family => {
        let {
          parts_of_speech,
          senses = []
        } = sense_family; // if parts of speech is empty at this level.
        // Current hypothesis tells that it means only one sense is present
        // We need to take out parts_of_speech from it and use it.

        if (!parts_of_speech) {
          parts_of_speech = _.get(senses[0], 'parts_of_speech', []);

          if (senses.length > 1) {
            utils.logEvent(word, language, 'part of speech missing but more than one sense present', {
              data
            });
          }
        }

        if (parts_of_speech.length > 1) {
          utils.logEvent(word, language, 'more than one part of speech present', {
            data
          });
        }

        return {
          partOfSpeech: _.get(parts_of_speech[0], 'value'),
          definitions: senses.map(sense => {
            let {
              definition = {},
              example_groups = [],
              thesaurus_entries = []
            } = sense,
                result = {
              definition: definition.text,
              example: _.get(example_groups[0], 'examples.0'),
              synonyms: _.get(thesaurus_entries[0], 'synonyms.0.nyms', []).map(e => e.nym),
              antonyms: _.get(thesaurus_entries[0], 'antonyms.0.nyms', []).map(e => e.nym)
            };

            if (include.example) {
              result.examples = _.reduce(example_groups, (accumulator, example_group) => {
                let example = _.get(example_group, 'examples', []);

                accumulator = accumulator.concat(example);
                return accumulator;
              }, []);
            }

            return result;
          })
        };
      })
    };
  });
}

async function queryInternet(word, language) {
  let url = new URL('https://www.google.com/async/callback:5493');
  url.searchParams.set('fc', 'ErUBCndBTlVfTnFUN29LdXdNSlQ2VlZoWUIwWE1HaElOclFNU29TOFF4ZGxGbV9zbzA3YmQ2NnJyQXlHNVlrb3l3OXgtREpRbXpNZ0M1NWZPeFo4NjQyVlA3S2ZQOHpYa292MFBMaDQweGRNQjR4eTlld1E4bDlCbXFJMBIWU2JzSllkLVpHc3J5OVFPb3Q2aVlDZxoiQU9NWVJ3QmU2cHRlbjZEZmw5U0lXT1lOR3hsM2xBWGFldw');
  url.searchParams.set('fcv', '3');
  url.searchParams.set('async', `term:${encodeURIComponent(word)},corpus:${language},hhdr:true,hwdgt:true,wfp:true,ttl:,tsl:,ptl:`);
  url = url.toString();
  let info = {
    word,
    language
  };
  let data = await fetch.fetchTextFromHttpUrl(url, {
    "accept": "*/*",
    "accept-encoding": "gzip, deflate, br",
    "accept-language": "en-US,en;q=0.9",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36"
  }, info);

  let single_results = _.get(data, 'feature-callback.payload.single_results', []),
      error = _.chain(single_results).find('widget').get('widget.error').value();

  if (single_results.length === 0) {
    throw new errors.NoDefinitionsFound(info);
  }

  if (error === 'TERM_NOT_FOUND_ERROR') {
    throw new errors.NoDefinitionsFound(info);
  }

  if (error) {
    throw new errors.UnexpectedError({
      error
    });
  }

  return single_results;
}

async function fetchFromSource(word, language) {
  let dictionaryData = await queryInternet(word, language);
  return dictionaryData;
}

async function findDefinitions(word, language, {
  include
}) {
  let dictionaryData = await fetchFromSource(word, language);

  if (_.isEmpty(dictionaryData)) {
    throw new errors.UnexpectedError();
  }

  return transform(word, language, dictionaryData, {
    include
  });
} //module.exports = {
//	findDefinitions,
//	transformV2toV1
//};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(29)(module)))

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 30 */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Headers", function() { return Headers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Request", function() { return Request; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Response", function() { return Response; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FetchError", function() { return FetchError; });
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var whatwg_url__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);
/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2);







// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = stream__WEBPACK_IMPORTED_MODULE_0__.Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert;
try {
	convert = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof stream__WEBPACK_IMPORTED_MODULE_0__)) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
		if (!res) {
			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
			if (res) {
				res.pop(); // drop last quote
			}
		}

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__ && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof stream__WEBPACK_IMPORTED_MODULE_0__) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http__WEBPACK_IMPORTED_MODULE_1__.STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');
const URL = url__WEBPACK_IMPORTED_MODULE_2__.URL || whatwg_url__WEBPACK_IMPORTED_MODULE_3__.URL;

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = url__WEBPACK_IMPORTED_MODULE_2__.parse;
const format_url = url__WEBPACK_IMPORTED_MODULE_2__.format;

/**
 * Wrapper around `new URL` to handle arbitrary URLs
 *
 * @param  {string} urlStr
 * @return {void}
 */
function parseURL(urlStr) {
	/*
 	Check whether the URL is absolute or not
 		Scheme: https://tools.ietf.org/html/rfc3986#section-3.1
 	Absolute URL: https://tools.ietf.org/html/rfc3986#section-4.3
 */
	if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
		urlStr = new URL(urlStr).toString();
	}

	// Fallback to old implementation for arbitrary URLs
	return parse_url(urlStr);
}

const streamDestructionSupported = 'destroy' in stream__WEBPACK_IMPORTED_MODULE_0__.Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parseURL(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parseURL(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parseURL(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

const URL$1 = url__WEBPACK_IMPORTED_MODULE_2__.URL || whatwg_url__WEBPACK_IMPORTED_MODULE_3__.URL;

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = stream__WEBPACK_IMPORTED_MODULE_0__.PassThrough;

const isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {
	const orig = new URL$1(original).hostname;
	const dest = new URL$1(destination).hostname;

	return orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);
};

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https__WEBPACK_IMPORTED_MODULE_4__ : http__WEBPACK_IMPORTED_MODULE_1__).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof stream__WEBPACK_IMPORTED_MODULE_0__.Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				let locationURL = null;
				try {
					locationURL = location === null ? null : new URL$1(location, request.url).toString();
				} catch (err) {
					// error here can only be invalid URL in Location: header
					// do not throw when options.redirect == manual
					// let the user extract the errorneous redirect URL
					if (request.redirect !== 'manual') {
						reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
						finalize();
						return;
					}
				}

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout,
							size: request.size
						};

						if (!isDomainOrSubdomain(request.url, locationURL)) {
							for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
								requestOpts.headers.delete(name);
							}
						}

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib__WEBPACK_IMPORTED_MODULE_5__.Z_SYNC_FLUSH,
				finishFlush: zlib__WEBPACK_IMPORTED_MODULE_5__.Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createInflate());
					} else {
						body = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib__WEBPACK_IMPORTED_MODULE_5__.createBrotliDecompress === 'function') {
				body = body.pipe(zlib__WEBPACK_IMPORTED_MODULE_5__.createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

/* harmony default export */ __webpack_exports__["default"] = (fetch);



/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const conversions = __webpack_require__(32);
const utils = __webpack_require__(33);
const Impl = __webpack_require__(34);

const impl = utils.implSymbol;

function URL(url) {
  if (!this || this[impl] || !(this instanceof URL)) {
    throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
  }
  const args = [];
  for (let i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }
  args[0] = conversions["USVString"](args[0]);
  if (args[1] !== undefined) {
  args[1] = conversions["USVString"](args[1]);
  }

  module.exports.setup(this, args);
}

URL.prototype.toJSON = function toJSON() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }
  const args = [];
  for (let i = 0; i < arguments.length && i < 0; ++i) {
    args[i] = arguments[i];
  }
  return this[impl].toJSON.apply(this[impl], args);
};
Object.defineProperty(URL.prototype, "href", {
  get() {
    return this[impl].href;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].href = V;
  },
  enumerable: true,
  configurable: true
});

URL.prototype.toString = function () {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }
  return this.href;
};

Object.defineProperty(URL.prototype, "origin", {
  get() {
    return this[impl].origin;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "protocol", {
  get() {
    return this[impl].protocol;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].protocol = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "username", {
  get() {
    return this[impl].username;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].username = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "password", {
  get() {
    return this[impl].password;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].password = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "host", {
  get() {
    return this[impl].host;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].host = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "hostname", {
  get() {
    return this[impl].hostname;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].hostname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "port", {
  get() {
    return this[impl].port;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].port = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "pathname", {
  get() {
    return this[impl].pathname;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].pathname = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "search", {
  get() {
    return this[impl].search;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].search = V;
  },
  enumerable: true,
  configurable: true
});

Object.defineProperty(URL.prototype, "hash", {
  get() {
    return this[impl].hash;
  },
  set(V) {
    V = conversions["USVString"](V);
    this[impl].hash = V;
  },
  enumerable: true,
  configurable: true
});


module.exports = {
  is(obj) {
    return !!obj && obj[impl] instanceof Impl.implementation;
  },
  create(constructorArgs, privateData) {
    let obj = Object.create(URL.prototype);
    this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    obj[impl] = new Impl.implementation(constructorArgs, privateData);
    obj[impl][utils.wrapperSymbol] = obj;
  },
  interface: URL,
  expose: {
    Window: { URL: URL },
    Worker: { URL: URL }
  }
};



/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var conversions = {};
module.exports = conversions;

function sign(x) {
    return x < 0 ? -1 : 1;
}

function evenRound(x) {
    // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
    if ((x % 1) === 0.5 && (x & 1) === 0) { // [even number].5; round down (i.e. floor)
        return Math.floor(x);
    } else {
        return Math.round(x);
    }
}

function createNumberConversion(bitLength, typeOpts) {
    if (!typeOpts.unsigned) {
        --bitLength;
    }
    const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
    const upperBound = Math.pow(2, bitLength) - 1;

    const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
    const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);

    return function(V, opts) {
        if (!opts) opts = {};

        let x = +V;

        if (opts.enforceRange) {
            if (!Number.isFinite(x)) {
                throw new TypeError("Argument is not a finite number");
            }

            x = sign(x) * Math.floor(Math.abs(x));
            if (x < lowerBound || x > upperBound) {
                throw new TypeError("Argument is not in byte range");
            }

            return x;
        }

        if (!isNaN(x) && opts.clamp) {
            x = evenRound(x);

            if (x < lowerBound) x = lowerBound;
            if (x > upperBound) x = upperBound;
            return x;
        }

        if (!Number.isFinite(x) || x === 0) {
            return 0;
        }

        x = sign(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;

        if (!typeOpts.unsigned && x >= moduloBound) {
            return x - moduloVal;
        } else if (typeOpts.unsigned) {
            if (x < 0) {
              x += moduloVal;
            } else if (x === -0) { // don't return negative zero
              return 0;
            }
        }

        return x;
    }
}

conversions["void"] = function () {
    return undefined;
};

conversions["boolean"] = function (val) {
    return !!val;
};

conversions["byte"] = createNumberConversion(8, { unsigned: false });
conversions["octet"] = createNumberConversion(8, { unsigned: true });

conversions["short"] = createNumberConversion(16, { unsigned: false });
conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });

conversions["long"] = createNumberConversion(32, { unsigned: false });
conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });

conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });

conversions["double"] = function (V) {
    const x = +V;

    if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
    }

    return x;
};

conversions["unrestricted double"] = function (V) {
    const x = +V;

    if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
    }

    return x;
};

// not quite valid, but good enough for JS
conversions["float"] = conversions["double"];
conversions["unrestricted float"] = conversions["unrestricted double"];

conversions["DOMString"] = function (V, opts) {
    if (!opts) opts = {};

    if (opts.treatNullAsEmptyString && V === null) {
        return "";
    }

    return String(V);
};

conversions["ByteString"] = function (V, opts) {
    const x = String(V);
    let c = undefined;
    for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
        if (c > 255) {
            throw new TypeError("Argument is not a valid bytestring");
        }
    }

    return x;
};

conversions["USVString"] = function (V) {
    const S = String(V);
    const n = S.length;
    const U = [];
    for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 0xD800 || c > 0xDFFF) {
            U.push(String.fromCodePoint(c));
        } else if (0xDC00 <= c && c <= 0xDFFF) {
            U.push(String.fromCodePoint(0xFFFD));
        } else {
            if (i === n - 1) {
                U.push(String.fromCodePoint(0xFFFD));
            } else {
                const d = S.charCodeAt(i + 1);
                if (0xDC00 <= d && d <= 0xDFFF) {
                    const a = c & 0x3FF;
                    const b = d & 0x3FF;
                    U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
                    ++i;
                } else {
                    U.push(String.fromCodePoint(0xFFFD));
                }
            }
        }
    }

    return U.join('');
};

conversions["Date"] = function (V, opts) {
    if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
    }
    if (isNaN(V)) {
        return undefined;
    }

    return V;
};

conversions["RegExp"] = function (V, opts) {
    if (!(V instanceof RegExp)) {
        V = new RegExp(V);
    }

    return V;
};


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports.mixin = function mixin(target, source) {
  const keys = Object.getOwnPropertyNames(source);
  for (let i = 0; i < keys.length; ++i) {
    Object.defineProperty(target, keys[i], Object.getOwnPropertyDescriptor(source, keys[i]));
  }
};

module.exports.wrapperSymbol = Symbol("wrapper");
module.exports.implSymbol = Symbol("impl");

module.exports.wrapperForImpl = function (impl) {
  return impl[module.exports.wrapperSymbol];
};

module.exports.implForWrapper = function (wrapper) {
  return wrapper[module.exports.implSymbol];
};



/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

const usm = __webpack_require__(1);

exports.implementation = class URLImpl {
  constructor(constructorArgs) {
    const url = constructorArgs[0];
    const base = constructorArgs[1];

    let parsedBase = null;
    if (base !== undefined) {
      parsedBase = usm.basicURLParse(base);
      if (parsedBase === "failure") {
        throw new TypeError("Invalid base URL");
      }
    }

    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL;

    // TODO: query stuff
  }

  get href() {
    return usm.serializeURL(this._url);
  }

  set href(v) {
    const parsedURL = usm.basicURLParse(v);
    if (parsedURL === "failure") {
      throw new TypeError("Invalid URL");
    }

    this._url = parsedURL;
  }

  get origin() {
    return usm.serializeURLOrigin(this._url);
  }

  get protocol() {
    return this._url.scheme + ":";
  }

  set protocol(v) {
    usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
  }

  get username() {
    return this._url.username;
  }

  set username(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setTheUsername(this._url, v);
  }

  get password() {
    return this._url.password;
  }

  set password(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    usm.setThePassword(this._url, v);
  }

  get host() {
    const url = this._url;

    if (url.host === null) {
      return "";
    }

    if (url.port === null) {
      return usm.serializeHost(url.host);
    }

    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  }

  set host(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
  }

  get hostname() {
    if (this._url.host === null) {
      return "";
    }

    return usm.serializeHost(this._url.host);
  }

  set hostname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
  }

  get port() {
    if (this._url.port === null) {
      return "";
    }

    return usm.serializeInteger(this._url.port);
  }

  set port(v) {
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
      return;
    }

    if (v === "") {
      this._url.port = null;
    } else {
      usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
    }
  }

  get pathname() {
    if (this._url.cannotBeABaseURL) {
      return this._url.path[0];
    }

    if (this._url.path.length === 0) {
      return "";
    }

    return "/" + this._url.path.join("/");
  }

  set pathname(v) {
    if (this._url.cannotBeABaseURL) {
      return;
    }

    this._url.path = [];
    usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
  }

  get search() {
    if (this._url.query === null || this._url.query === "") {
      return "";
    }

    return "?" + this._url.query;
  }

  set search(v) {
    // TODO: query stuff

    const url = this._url;

    if (v === "") {
      url.query = null;
      return;
    }

    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, { url, stateOverride: "query" });
  }

  get hash() {
    if (this._url.fragment === null || this._url.fragment === "") {
      return "";
    }

    return "#" + this._url.fragment;
  }

  set hash(v) {
    if (v === "") {
      this._url.fragment = null;
      return;
    }

    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
  }

  toJSON() {
    return this.href;
  }
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var punycode = __webpack_require__(19);
var mappingTable = __webpack_require__(36);

var PROCESSING_OPTIONS = {
  TRANSITIONAL: 0,
  NONTRANSITIONAL: 1
};

function normalize(str) { // fix bug in v8
  return str.split('\u0000').map(function (s) { return s.normalize('NFC'); }).join('\u0000');
}

function findStatus(val) {
  var start = 0;
  var end = mappingTable.length - 1;

  while (start <= end) {
    var mid = Math.floor((start + end) / 2);

    var target = mappingTable[mid];
    if (target[0][0] <= val && target[0][1] >= val) {
      return target;
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }

  return null;
}

var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function countSymbols(string) {
  return string
    // replace every surrogate pair with a BMP symbol
    .replace(regexAstralSymbols, '_')
    // then get the length
    .length;
}

function mapChars(domain_name, useSTD3, processing_option) {
  var hasError = false;
  var processed = "";

  var len = countSymbols(domain_name);
  for (var i = 0; i < len; ++i) {
    var codePoint = domain_name.codePointAt(i);
    var status = findStatus(codePoint);

    switch (status[1]) {
      case "disallowed":
        hasError = true;
        processed += String.fromCodePoint(codePoint);
        break;
      case "ignored":
        break;
      case "mapped":
        processed += String.fromCodePoint.apply(String, status[2]);
        break;
      case "deviation":
        if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
          processed += String.fromCodePoint.apply(String, status[2]);
        } else {
          processed += String.fromCodePoint(codePoint);
        }
        break;
      case "valid":
        processed += String.fromCodePoint(codePoint);
        break;
      case "disallowed_STD3_mapped":
        if (useSTD3) {
          hasError = true;
          processed += String.fromCodePoint(codePoint);
        } else {
          processed += String.fromCodePoint.apply(String, status[2]);
        }
        break;
      case "disallowed_STD3_valid":
        if (useSTD3) {
          hasError = true;
        }

        processed += String.fromCodePoint(codePoint);
        break;
    }
  }

  return {
    string: processed,
    error: hasError
  };
}

var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;

function validateLabel(label, processing_option) {
  if (label.substr(0, 4) === "xn--") {
    label = punycode.toUnicode(label);
    processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
  }

  var error = false;

  if (normalize(label) !== label ||
      (label[3] === "-" && label[4] === "-") ||
      label[0] === "-" || label[label.length - 1] === "-" ||
      label.indexOf(".") !== -1 ||
      label.search(combiningMarksRegex) === 0) {
    error = true;
  }

  var len = countSymbols(label);
  for (var i = 0; i < len; ++i) {
    var status = findStatus(label.codePointAt(i));
    if ((processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid") ||
        (processing === PROCESSING_OPTIONS.NONTRANSITIONAL &&
         status[1] !== "valid" && status[1] !== "deviation")) {
      error = true;
      break;
    }
  }

  return {
    label: label,
    error: error
  };
}

function processing(domain_name, useSTD3, processing_option) {
  var result = mapChars(domain_name, useSTD3, processing_option);
  result.string = normalize(result.string);

  var labels = result.string.split(".");
  for (var i = 0; i < labels.length; ++i) {
    try {
      var validation = validateLabel(labels[i]);
      labels[i] = validation.label;
      result.error = result.error || validation.error;
    } catch(e) {
      result.error = true;
    }
  }

  return {
    string: labels.join("."),
    error: result.error
  };
}

module.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
  var result = processing(domain_name, useSTD3, processing_option);
  var labels = result.string.split(".");
  labels = labels.map(function(l) {
    try {
      return punycode.toASCII(l);
    } catch(e) {
      result.error = true;
      return l;
    }
  });

  if (verifyDnsLength) {
    var total = labels.slice(0, labels.length - 1).join(".").length;
    if (total.length > 253 || total.length === 0) {
      result.error = true;
    }

    for (var i=0; i < labels.length; ++i) {
      if (labels.length > 63 || labels.length === 0) {
        result.error = true;
        break;
      }
    }
  }

  if (result.error) return null;
  return labels.join(".");
};

module.exports.toUnicode = function(domain_name, useSTD3) {
  var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);

  return {
    domain: result.string,
    error: result.error
  };
};

module.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;


/***/ }),
/* 36 */
/***/ (function(module) {

module.exports = JSON.parse("[[[0,44],\"disallowed_STD3_valid\"],[[45,46],\"valid\"],[[47,47],\"disallowed_STD3_valid\"],[[48,57],\"valid\"],[[58,64],\"disallowed_STD3_valid\"],[[65,65],\"mapped\",[97]],[[66,66],\"mapped\",[98]],[[67,67],\"mapped\",[99]],[[68,68],\"mapped\",[100]],[[69,69],\"mapped\",[101]],[[70,70],\"mapped\",[102]],[[71,71],\"mapped\",[103]],[[72,72],\"mapped\",[104]],[[73,73],\"mapped\",[105]],[[74,74],\"mapped\",[106]],[[75,75],\"mapped\",[107]],[[76,76],\"mapped\",[108]],[[77,77],\"mapped\",[109]],[[78,78],\"mapped\",[110]],[[79,79],\"mapped\",[111]],[[80,80],\"mapped\",[112]],[[81,81],\"mapped\",[113]],[[82,82],\"mapped\",[114]],[[83,83],\"mapped\",[115]],[[84,84],\"mapped\",[116]],[[85,85],\"mapped\",[117]],[[86,86],\"mapped\",[118]],[[87,87],\"mapped\",[119]],[[88,88],\"mapped\",[120]],[[89,89],\"mapped\",[121]],[[90,90],\"mapped\",[122]],[[91,96],\"disallowed_STD3_valid\"],[[97,122],\"valid\"],[[123,127],\"disallowed_STD3_valid\"],[[128,159],\"disallowed\"],[[160,160],\"disallowed_STD3_mapped\",[32]],[[161,167],\"valid\",[],\"NV8\"],[[168,168],\"disallowed_STD3_mapped\",[32,776]],[[169,169],\"valid\",[],\"NV8\"],[[170,170],\"mapped\",[97]],[[171,172],\"valid\",[],\"NV8\"],[[173,173],\"ignored\"],[[174,174],\"valid\",[],\"NV8\"],[[175,175],\"disallowed_STD3_mapped\",[32,772]],[[176,177],\"valid\",[],\"NV8\"],[[178,178],\"mapped\",[50]],[[179,179],\"mapped\",[51]],[[180,180],\"disallowed_STD3_mapped\",[32,769]],[[181,181],\"mapped\",[956]],[[182,182],\"valid\",[],\"NV8\"],[[183,183],\"valid\"],[[184,184],\"disallowed_STD3_mapped\",[32,807]],[[185,185],\"mapped\",[49]],[[186,186],\"mapped\",[111]],[[187,187],\"valid\",[],\"NV8\"],[[188,188],\"mapped\",[49,8260,52]],[[189,189],\"mapped\",[49,8260,50]],[[190,190],\"mapped\",[51,8260,52]],[[191,191],\"valid\",[],\"NV8\"],[[192,192],\"mapped\",[224]],[[193,193],\"mapped\",[225]],[[194,194],\"mapped\",[226]],[[195,195],\"mapped\",[227]],[[196,196],\"mapped\",[228]],[[197,197],\"mapped\",[229]],[[198,198],\"mapped\",[230]],[[199,199],\"mapped\",[231]],[[200,200],\"mapped\",[232]],[[201,201],\"mapped\",[233]],[[202,202],\"mapped\",[234]],[[203,203],\"mapped\",[235]],[[204,204],\"mapped\",[236]],[[205,205],\"mapped\",[237]],[[206,206],\"mapped\",[238]],[[207,207],\"mapped\",[239]],[[208,208],\"mapped\",[240]],[[209,209],\"mapped\",[241]],[[210,210],\"mapped\",[242]],[[211,211],\"mapped\",[243]],[[212,212],\"mapped\",[244]],[[213,213],\"mapped\",[245]],[[214,214],\"mapped\",[246]],[[215,215],\"valid\",[],\"NV8\"],[[216,216],\"mapped\",[248]],[[217,217],\"mapped\",[249]],[[218,218],\"mapped\",[250]],[[219,219],\"mapped\",[251]],[[220,220],\"mapped\",[252]],[[221,221],\"mapped\",[253]],[[222,222],\"mapped\",[254]],[[223,223],\"deviation\",[115,115]],[[224,246],\"valid\"],[[247,247],\"valid\",[],\"NV8\"],[[248,255],\"valid\"],[[256,256],\"mapped\",[257]],[[257,257],\"valid\"],[[258,258],\"mapped\",[259]],[[259,259],\"valid\"],[[260,260],\"mapped\",[261]],[[261,261],\"valid\"],[[262,262],\"mapped\",[263]],[[263,263],\"valid\"],[[264,264],\"mapped\",[265]],[[265,265],\"valid\"],[[266,266],\"mapped\",[267]],[[267,267],\"valid\"],[[268,268],\"mapped\",[269]],[[269,269],\"valid\"],[[270,270],\"mapped\",[271]],[[271,271],\"valid\"],[[272,272],\"mapped\",[273]],[[273,273],\"valid\"],[[274,274],\"mapped\",[275]],[[275,275],\"valid\"],[[276,276],\"mapped\",[277]],[[277,277],\"valid\"],[[278,278],\"mapped\",[279]],[[279,279],\"valid\"],[[280,280],\"mapped\",[281]],[[281,281],\"valid\"],[[282,282],\"mapped\",[283]],[[283,283],\"valid\"],[[284,284],\"mapped\",[285]],[[285,285],\"valid\"],[[286,286],\"mapped\",[287]],[[287,287],\"valid\"],[[288,288],\"mapped\",[289]],[[289,289],\"valid\"],[[290,290],\"mapped\",[291]],[[291,291],\"valid\"],[[292,292],\"mapped\",[293]],[[293,293],\"valid\"],[[294,294],\"mapped\",[295]],[[295,295],\"valid\"],[[296,296],\"mapped\",[297]],[[297,297],\"valid\"],[[298,298],\"mapped\",[299]],[[299,299],\"valid\"],[[300,300],\"mapped\",[301]],[[301,301],\"valid\"],[[302,302],\"mapped\",[303]],[[303,303],\"valid\"],[[304,304],\"mapped\",[105,775]],[[305,305],\"valid\"],[[306,307],\"mapped\",[105,106]],[[308,308],\"mapped\",[309]],[[309,309],\"valid\"],[[310,310],\"mapped\",[311]],[[311,312],\"valid\"],[[313,313],\"mapped\",[314]],[[314,314],\"valid\"],[[315,315],\"mapped\",[316]],[[316,316],\"valid\"],[[317,317],\"mapped\",[318]],[[318,318],\"valid\"],[[319,320],\"mapped\",[108,183]],[[321,321],\"mapped\",[322]],[[322,322],\"valid\"],[[323,323],\"mapped\",[324]],[[324,324],\"valid\"],[[325,325],\"mapped\",[326]],[[326,326],\"valid\"],[[327,327],\"mapped\",[328]],[[328,328],\"valid\"],[[329,329],\"mapped\",[700,110]],[[330,330],\"mapped\",[331]],[[331,331],\"valid\"],[[332,332],\"mapped\",[333]],[[333,333],\"valid\"],[[334,334],\"mapped\",[335]],[[335,335],\"valid\"],[[336,336],\"mapped\",[337]],[[337,337],\"valid\"],[[338,338],\"mapped\",[339]],[[339,339],\"valid\"],[[340,340],\"mapped\",[341]],[[341,341],\"valid\"],[[342,342],\"mapped\",[343]],[[343,343],\"valid\"],[[344,344],\"mapped\",[345]],[[345,345],\"valid\"],[[346,346],\"mapped\",[347]],[[347,347],\"valid\"],[[348,348],\"mapped\",[349]],[[349,349],\"valid\"],[[350,350],\"mapped\",[351]],[[351,351],\"valid\"],[[352,352],\"mapped\",[353]],[[353,353],\"valid\"],[[354,354],\"mapped\",[355]],[[355,355],\"valid\"],[[356,356],\"mapped\",[357]],[[357,357],\"valid\"],[[358,358],\"mapped\",[359]],[[359,359],\"valid\"],[[360,360],\"mapped\",[361]],[[361,361],\"valid\"],[[362,362],\"mapped\",[363]],[[363,363],\"valid\"],[[364,364],\"mapped\",[365]],[[365,365],\"valid\"],[[366,366],\"mapped\",[367]],[[367,367],\"valid\"],[[368,368],\"mapped\",[369]],[[369,369],\"valid\"],[[370,370],\"mapped\",[371]],[[371,371],\"valid\"],[[372,372],\"mapped\",[373]],[[373,373],\"valid\"],[[374,374],\"mapped\",[375]],[[375,375],\"valid\"],[[376,376],\"mapped\",[255]],[[377,377],\"mapped\",[378]],[[378,378],\"valid\"],[[379,379],\"mapped\",[380]],[[380,380],\"valid\"],[[381,381],\"mapped\",[382]],[[382,382],\"valid\"],[[383,383],\"mapped\",[115]],[[384,384],\"valid\"],[[385,385],\"mapped\",[595]],[[386,386],\"mapped\",[387]],[[387,387],\"valid\"],[[388,388],\"mapped\",[389]],[[389,389],\"valid\"],[[390,390],\"mapped\",[596]],[[391,391],\"mapped\",[392]],[[392,392],\"valid\"],[[393,393],\"mapped\",[598]],[[394,394],\"mapped\",[599]],[[395,395],\"mapped\",[396]],[[396,397],\"valid\"],[[398,398],\"mapped\",[477]],[[399,399],\"mapped\",[601]],[[400,400],\"mapped\",[603]],[[401,401],\"mapped\",[402]],[[402,402],\"valid\"],[[403,403],\"mapped\",[608]],[[404,404],\"mapped\",[611]],[[405,405],\"valid\"],[[406,406],\"mapped\",[617]],[[407,407],\"mapped\",[616]],[[408,408],\"mapped\",[409]],[[409,411],\"valid\"],[[412,412],\"mapped\",[623]],[[413,413],\"mapped\",[626]],[[414,414],\"valid\"],[[415,415],\"mapped\",[629]],[[416,416],\"mapped\",[417]],[[417,417],\"valid\"],[[418,418],\"mapped\",[419]],[[419,419],\"valid\"],[[420,420],\"mapped\",[421]],[[421,421],\"valid\"],[[422,422],\"mapped\",[640]],[[423,423],\"mapped\",[424]],[[424,424],\"valid\"],[[425,425],\"mapped\",[643]],[[426,427],\"valid\"],[[428,428],\"mapped\",[429]],[[429,429],\"valid\"],[[430,430],\"mapped\",[648]],[[431,431],\"mapped\",[432]],[[432,432],\"valid\"],[[433,433],\"mapped\",[650]],[[434,434],\"mapped\",[651]],[[435,435],\"mapped\",[436]],[[436,436],\"valid\"],[[437,437],\"mapped\",[438]],[[438,438],\"valid\"],[[439,439],\"mapped\",[658]],[[440,440],\"mapped\",[441]],[[441,443],\"valid\"],[[444,444],\"mapped\",[445]],[[445,451],\"valid\"],[[452,454],\"mapped\",[100,382]],[[455,457],\"mapped\",[108,106]],[[458,460],\"mapped\",[110,106]],[[461,461],\"mapped\",[462]],[[462,462],\"valid\"],[[463,463],\"mapped\",[464]],[[464,464],\"valid\"],[[465,465],\"mapped\",[466]],[[466,466],\"valid\"],[[467,467],\"mapped\",[468]],[[468,468],\"valid\"],[[469,469],\"mapped\",[470]],[[470,470],\"valid\"],[[471,471],\"mapped\",[472]],[[472,472],\"valid\"],[[473,473],\"mapped\",[474]],[[474,474],\"valid\"],[[475,475],\"mapped\",[476]],[[476,477],\"valid\"],[[478,478],\"mapped\",[479]],[[479,479],\"valid\"],[[480,480],\"mapped\",[481]],[[481,481],\"valid\"],[[482,482],\"mapped\",[483]],[[483,483],\"valid\"],[[484,484],\"mapped\",[485]],[[485,485],\"valid\"],[[486,486],\"mapped\",[487]],[[487,487],\"valid\"],[[488,488],\"mapped\",[489]],[[489,489],\"valid\"],[[490,490],\"mapped\",[491]],[[491,491],\"valid\"],[[492,492],\"mapped\",[493]],[[493,493],\"valid\"],[[494,494],\"mapped\",[495]],[[495,496],\"valid\"],[[497,499],\"mapped\",[100,122]],[[500,500],\"mapped\",[501]],[[501,501],\"valid\"],[[502,502],\"mapped\",[405]],[[503,503],\"mapped\",[447]],[[504,504],\"mapped\",[505]],[[505,505],\"valid\"],[[506,506],\"mapped\",[507]],[[507,507],\"valid\"],[[508,508],\"mapped\",[509]],[[509,509],\"valid\"],[[510,510],\"mapped\",[511]],[[511,511],\"valid\"],[[512,512],\"mapped\",[513]],[[513,513],\"valid\"],[[514,514],\"mapped\",[515]],[[515,515],\"valid\"],[[516,516],\"mapped\",[517]],[[517,517],\"valid\"],[[518,518],\"mapped\",[519]],[[519,519],\"valid\"],[[520,520],\"mapped\",[521]],[[521,521],\"valid\"],[[522,522],\"mapped\",[523]],[[523,523],\"valid\"],[[524,524],\"mapped\",[525]],[[525,525],\"valid\"],[[526,526],\"mapped\",[527]],[[527,527],\"valid\"],[[528,528],\"mapped\",[529]],[[529,529],\"valid\"],[[530,530],\"mapped\",[531]],[[531,531],\"valid\"],[[532,532],\"mapped\",[533]],[[533,533],\"valid\"],[[534,534],\"mapped\",[535]],[[535,535],\"valid\"],[[536,536],\"mapped\",[537]],[[537,537],\"valid\"],[[538,538],\"mapped\",[539]],[[539,539],\"valid\"],[[540,540],\"mapped\",[541]],[[541,541],\"valid\"],[[542,542],\"mapped\",[543]],[[543,543],\"valid\"],[[544,544],\"mapped\",[414]],[[545,545],\"valid\"],[[546,546],\"mapped\",[547]],[[547,547],\"valid\"],[[548,548],\"mapped\",[549]],[[549,549],\"valid\"],[[550,550],\"mapped\",[551]],[[551,551],\"valid\"],[[552,552],\"mapped\",[553]],[[553,553],\"valid\"],[[554,554],\"mapped\",[555]],[[555,555],\"valid\"],[[556,556],\"mapped\",[557]],[[557,557],\"valid\"],[[558,558],\"mapped\",[559]],[[559,559],\"valid\"],[[560,560],\"mapped\",[561]],[[561,561],\"valid\"],[[562,562],\"mapped\",[563]],[[563,563],\"valid\"],[[564,566],\"valid\"],[[567,569],\"valid\"],[[570,570],\"mapped\",[11365]],[[571,571],\"mapped\",[572]],[[572,572],\"valid\"],[[573,573],\"mapped\",[410]],[[574,574],\"mapped\",[11366]],[[575,576],\"valid\"],[[577,577],\"mapped\",[578]],[[578,578],\"valid\"],[[579,579],\"mapped\",[384]],[[580,580],\"mapped\",[649]],[[581,581],\"mapped\",[652]],[[582,582],\"mapped\",[583]],[[583,583],\"valid\"],[[584,584],\"mapped\",[585]],[[585,585],\"valid\"],[[586,586],\"mapped\",[587]],[[587,587],\"valid\"],[[588,588],\"mapped\",[589]],[[589,589],\"valid\"],[[590,590],\"mapped\",[591]],[[591,591],\"valid\"],[[592,680],\"valid\"],[[681,685],\"valid\"],[[686,687],\"valid\"],[[688,688],\"mapped\",[104]],[[689,689],\"mapped\",[614]],[[690,690],\"mapped\",[106]],[[691,691],\"mapped\",[114]],[[692,692],\"mapped\",[633]],[[693,693],\"mapped\",[635]],[[694,694],\"mapped\",[641]],[[695,695],\"mapped\",[119]],[[696,696],\"mapped\",[121]],[[697,705],\"valid\"],[[706,709],\"valid\",[],\"NV8\"],[[710,721],\"valid\"],[[722,727],\"valid\",[],\"NV8\"],[[728,728],\"disallowed_STD3_mapped\",[32,774]],[[729,729],\"disallowed_STD3_mapped\",[32,775]],[[730,730],\"disallowed_STD3_mapped\",[32,778]],[[731,731],\"disallowed_STD3_mapped\",[32,808]],[[732,732],\"disallowed_STD3_mapped\",[32,771]],[[733,733],\"disallowed_STD3_mapped\",[32,779]],[[734,734],\"valid\",[],\"NV8\"],[[735,735],\"valid\",[],\"NV8\"],[[736,736],\"mapped\",[611]],[[737,737],\"mapped\",[108]],[[738,738],\"mapped\",[115]],[[739,739],\"mapped\",[120]],[[740,740],\"mapped\",[661]],[[741,745],\"valid\",[],\"NV8\"],[[746,747],\"valid\",[],\"NV8\"],[[748,748],\"valid\"],[[749,749],\"valid\",[],\"NV8\"],[[750,750],\"valid\"],[[751,767],\"valid\",[],\"NV8\"],[[768,831],\"valid\"],[[832,832],\"mapped\",[768]],[[833,833],\"mapped\",[769]],[[834,834],\"valid\"],[[835,835],\"mapped\",[787]],[[836,836],\"mapped\",[776,769]],[[837,837],\"mapped\",[953]],[[838,846],\"valid\"],[[847,847],\"ignored\"],[[848,855],\"valid\"],[[856,860],\"valid\"],[[861,863],\"valid\"],[[864,865],\"valid\"],[[866,866],\"valid\"],[[867,879],\"valid\"],[[880,880],\"mapped\",[881]],[[881,881],\"valid\"],[[882,882],\"mapped\",[883]],[[883,883],\"valid\"],[[884,884],\"mapped\",[697]],[[885,885],\"valid\"],[[886,886],\"mapped\",[887]],[[887,887],\"valid\"],[[888,889],\"disallowed\"],[[890,890],\"disallowed_STD3_mapped\",[32,953]],[[891,893],\"valid\"],[[894,894],\"disallowed_STD3_mapped\",[59]],[[895,895],\"mapped\",[1011]],[[896,899],\"disallowed\"],[[900,900],\"disallowed_STD3_mapped\",[32,769]],[[901,901],\"disallowed_STD3_mapped\",[32,776,769]],[[902,902],\"mapped\",[940]],[[903,903],\"mapped\",[183]],[[904,904],\"mapped\",[941]],[[905,905],\"mapped\",[942]],[[906,906],\"mapped\",[943]],[[907,907],\"disallowed\"],[[908,908],\"mapped\",[972]],[[909,909],\"disallowed\"],[[910,910],\"mapped\",[973]],[[911,911],\"mapped\",[974]],[[912,912],\"valid\"],[[913,913],\"mapped\",[945]],[[914,914],\"mapped\",[946]],[[915,915],\"mapped\",[947]],[[916,916],\"mapped\",[948]],[[917,917],\"mapped\",[949]],[[918,918],\"mapped\",[950]],[[919,919],\"mapped\",[951]],[[920,920],\"mapped\",[952]],[[921,921],\"mapped\",[953]],[[922,922],\"mapped\",[954]],[[923,923],\"mapped\",[955]],[[924,924],\"mapped\",[956]],[[925,925],\"mapped\",[957]],[[926,926],\"mapped\",[958]],[[927,927],\"mapped\",[959]],[[928,928],\"mapped\",[960]],[[929,929],\"mapped\",[961]],[[930,930],\"disallowed\"],[[931,931],\"mapped\",[963]],[[932,932],\"mapped\",[964]],[[933,933],\"mapped\",[965]],[[934,934],\"mapped\",[966]],[[935,935],\"mapped\",[967]],[[936,936],\"mapped\",[968]],[[937,937],\"mapped\",[969]],[[938,938],\"mapped\",[970]],[[939,939],\"mapped\",[971]],[[940,961],\"valid\"],[[962,962],\"deviation\",[963]],[[963,974],\"valid\"],[[975,975],\"mapped\",[983]],[[976,976],\"mapped\",[946]],[[977,977],\"mapped\",[952]],[[978,978],\"mapped\",[965]],[[979,979],\"mapped\",[973]],[[980,980],\"mapped\",[971]],[[981,981],\"mapped\",[966]],[[982,982],\"mapped\",[960]],[[983,983],\"valid\"],[[984,984],\"mapped\",[985]],[[985,985],\"valid\"],[[986,986],\"mapped\",[987]],[[987,987],\"valid\"],[[988,988],\"mapped\",[989]],[[989,989],\"valid\"],[[990,990],\"mapped\",[991]],[[991,991],\"valid\"],[[992,992],\"mapped\",[993]],[[993,993],\"valid\"],[[994,994],\"mapped\",[995]],[[995,995],\"valid\"],[[996,996],\"mapped\",[997]],[[997,997],\"valid\"],[[998,998],\"mapped\",[999]],[[999,999],\"valid\"],[[1000,1000],\"mapped\",[1001]],[[1001,1001],\"valid\"],[[1002,1002],\"mapped\",[1003]],[[1003,1003],\"valid\"],[[1004,1004],\"mapped\",[1005]],[[1005,1005],\"valid\"],[[1006,1006],\"mapped\",[1007]],[[1007,1007],\"valid\"],[[1008,1008],\"mapped\",[954]],[[1009,1009],\"mapped\",[961]],[[1010,1010],\"mapped\",[963]],[[1011,1011],\"valid\"],[[1012,1012],\"mapped\",[952]],[[1013,1013],\"mapped\",[949]],[[1014,1014],\"valid\",[],\"NV8\"],[[1015,1015],\"mapped\",[1016]],[[1016,1016],\"valid\"],[[1017,1017],\"mapped\",[963]],[[1018,1018],\"mapped\",[1019]],[[1019,1019],\"valid\"],[[1020,1020],\"valid\"],[[1021,1021],\"mapped\",[891]],[[1022,1022],\"mapped\",[892]],[[1023,1023],\"mapped\",[893]],[[1024,1024],\"mapped\",[1104]],[[1025,1025],\"mapped\",[1105]],[[1026,1026],\"mapped\",[1106]],[[1027,1027],\"mapped\",[1107]],[[1028,1028],\"mapped\",[1108]],[[1029,1029],\"mapped\",[1109]],[[1030,1030],\"mapped\",[1110]],[[1031,1031],\"mapped\",[1111]],[[1032,1032],\"mapped\",[1112]],[[1033,1033],\"mapped\",[1113]],[[1034,1034],\"mapped\",[1114]],[[1035,1035],\"mapped\",[1115]],[[1036,1036],\"mapped\",[1116]],[[1037,1037],\"mapped\",[1117]],[[1038,1038],\"mapped\",[1118]],[[1039,1039],\"mapped\",[1119]],[[1040,1040],\"mapped\",[1072]],[[1041,1041],\"mapped\",[1073]],[[1042,1042],\"mapped\",[1074]],[[1043,1043],\"mapped\",[1075]],[[1044,1044],\"mapped\",[1076]],[[1045,1045],\"mapped\",[1077]],[[1046,1046],\"mapped\",[1078]],[[1047,1047],\"mapped\",[1079]],[[1048,1048],\"mapped\",[1080]],[[1049,1049],\"mapped\",[1081]],[[1050,1050],\"mapped\",[1082]],[[1051,1051],\"mapped\",[1083]],[[1052,1052],\"mapped\",[1084]],[[1053,1053],\"mapped\",[1085]],[[1054,1054],\"mapped\",[1086]],[[1055,1055],\"mapped\",[1087]],[[1056,1056],\"mapped\",[1088]],[[1057,1057],\"mapped\",[1089]],[[1058,1058],\"mapped\",[1090]],[[1059,1059],\"mapped\",[1091]],[[1060,1060],\"mapped\",[1092]],[[1061,1061],\"mapped\",[1093]],[[1062,1062],\"mapped\",[1094]],[[1063,1063],\"mapped\",[1095]],[[1064,1064],\"mapped\",[1096]],[[1065,1065],\"mapped\",[1097]],[[1066,1066],\"mapped\",[1098]],[[1067,1067],\"mapped\",[1099]],[[1068,1068],\"mapped\",[1100]],[[1069,1069],\"mapped\",[1101]],[[1070,1070],\"mapped\",[1102]],[[1071,1071],\"mapped\",[1103]],[[1072,1103],\"valid\"],[[1104,1104],\"valid\"],[[1105,1116],\"valid\"],[[1117,1117],\"valid\"],[[1118,1119],\"valid\"],[[1120,1120],\"mapped\",[1121]],[[1121,1121],\"valid\"],[[1122,1122],\"mapped\",[1123]],[[1123,1123],\"valid\"],[[1124,1124],\"mapped\",[1125]],[[1125,1125],\"valid\"],[[1126,1126],\"mapped\",[1127]],[[1127,1127],\"valid\"],[[1128,1128],\"mapped\",[1129]],[[1129,1129],\"valid\"],[[1130,1130],\"mapped\",[1131]],[[1131,1131],\"valid\"],[[1132,1132],\"mapped\",[1133]],[[1133,1133],\"valid\"],[[1134,1134],\"mapped\",[1135]],[[1135,1135],\"valid\"],[[1136,1136],\"mapped\",[1137]],[[1137,1137],\"valid\"],[[1138,1138],\"mapped\",[1139]],[[1139,1139],\"valid\"],[[1140,1140],\"mapped\",[1141]],[[1141,1141],\"valid\"],[[1142,1142],\"mapped\",[1143]],[[1143,1143],\"valid\"],[[1144,1144],\"mapped\",[1145]],[[1145,1145],\"valid\"],[[1146,1146],\"mapped\",[1147]],[[1147,1147],\"valid\"],[[1148,1148],\"mapped\",[1149]],[[1149,1149],\"valid\"],[[1150,1150],\"mapped\",[1151]],[[1151,1151],\"valid\"],[[1152,1152],\"mapped\",[1153]],[[1153,1153],\"valid\"],[[1154,1154],\"valid\",[],\"NV8\"],[[1155,1158],\"valid\"],[[1159,1159],\"valid\"],[[1160,1161],\"valid\",[],\"NV8\"],[[1162,1162],\"mapped\",[1163]],[[1163,1163],\"valid\"],[[1164,1164],\"mapped\",[1165]],[[1165,1165],\"valid\"],[[1166,1166],\"mapped\",[1167]],[[1167,1167],\"valid\"],[[1168,1168],\"mapped\",[1169]],[[1169,1169],\"valid\"],[[1170,1170],\"mapped\",[1171]],[[1171,1171],\"valid\"],[[1172,1172],\"mapped\",[1173]],[[1173,1173],\"valid\"],[[1174,1174],\"mapped\",[1175]],[[1175,1175],\"valid\"],[[1176,1176],\"mapped\",[1177]],[[1177,1177],\"valid\"],[[1178,1178],\"mapped\",[1179]],[[1179,1179],\"valid\"],[[1180,1180],\"mapped\",[1181]],[[1181,1181],\"valid\"],[[1182,1182],\"mapped\",[1183]],[[1183,1183],\"valid\"],[[1184,1184],\"mapped\",[1185]],[[1185,1185],\"valid\"],[[1186,1186],\"mapped\",[1187]],[[1187,1187],\"valid\"],[[1188,1188],\"mapped\",[1189]],[[1189,1189],\"valid\"],[[1190,1190],\"mapped\",[1191]],[[1191,1191],\"valid\"],[[1192,1192],\"mapped\",[1193]],[[1193,1193],\"valid\"],[[1194,1194],\"mapped\",[1195]],[[1195,1195],\"valid\"],[[1196,1196],\"mapped\",[1197]],[[1197,1197],\"valid\"],[[1198,1198],\"mapped\",[1199]],[[1199,1199],\"valid\"],[[1200,1200],\"mapped\",[1201]],[[1201,1201],\"valid\"],[[1202,1202],\"mapped\",[1203]],[[1203,1203],\"valid\"],[[1204,1204],\"mapped\",[1205]],[[1205,1205],\"valid\"],[[1206,1206],\"mapped\",[1207]],[[1207,1207],\"valid\"],[[1208,1208],\"mapped\",[1209]],[[1209,1209],\"valid\"],[[1210,1210],\"mapped\",[1211]],[[1211,1211],\"valid\"],[[1212,1212],\"mapped\",[1213]],[[1213,1213],\"valid\"],[[1214,1214],\"mapped\",[1215]],[[1215,1215],\"valid\"],[[1216,1216],\"disallowed\"],[[1217,1217],\"mapped\",[1218]],[[1218,1218],\"valid\"],[[1219,1219],\"mapped\",[1220]],[[1220,1220],\"valid\"],[[1221,1221],\"mapped\",[1222]],[[1222,1222],\"valid\"],[[1223,1223],\"mapped\",[1224]],[[1224,1224],\"valid\"],[[1225,1225],\"mapped\",[1226]],[[1226,1226],\"valid\"],[[1227,1227],\"mapped\",[1228]],[[1228,1228],\"valid\"],[[1229,1229],\"mapped\",[1230]],[[1230,1230],\"valid\"],[[1231,1231],\"valid\"],[[1232,1232],\"mapped\",[1233]],[[1233,1233],\"valid\"],[[1234,1234],\"mapped\",[1235]],[[1235,1235],\"valid\"],[[1236,1236],\"mapped\",[1237]],[[1237,1237],\"valid\"],[[1238,1238],\"mapped\",[1239]],[[1239,1239],\"valid\"],[[1240,1240],\"mapped\",[1241]],[[1241,1241],\"valid\"],[[1242,1242],\"mapped\",[1243]],[[1243,1243],\"valid\"],[[1244,1244],\"mapped\",[1245]],[[1245,1245],\"valid\"],[[1246,1246],\"mapped\",[1247]],[[1247,1247],\"valid\"],[[1248,1248],\"mapped\",[1249]],[[1249,1249],\"valid\"],[[1250,1250],\"mapped\",[1251]],[[1251,1251],\"valid\"],[[1252,1252],\"mapped\",[1253]],[[1253,1253],\"valid\"],[[1254,1254],\"mapped\",[1255]],[[1255,1255],\"valid\"],[[1256,1256],\"mapped\",[1257]],[[1257,1257],\"valid\"],[[1258,1258],\"mapped\",[1259]],[[1259,1259],\"valid\"],[[1260,1260],\"mapped\",[1261]],[[1261,1261],\"valid\"],[[1262,1262],\"mapped\",[1263]],[[1263,1263],\"valid\"],[[1264,1264],\"mapped\",[1265]],[[1265,1265],\"valid\"],[[1266,1266],\"mapped\",[1267]],[[1267,1267],\"valid\"],[[1268,1268],\"mapped\",[1269]],[[1269,1269],\"valid\"],[[1270,1270],\"mapped\",[1271]],[[1271,1271],\"valid\"],[[1272,1272],\"mapped\",[1273]],[[1273,1273],\"valid\"],[[1274,1274],\"mapped\",[1275]],[[1275,1275],\"valid\"],[[1276,1276],\"mapped\",[1277]],[[1277,1277],\"valid\"],[[1278,1278],\"mapped\",[1279]],[[1279,1279],\"valid\"],[[1280,1280],\"mapped\",[1281]],[[1281,1281],\"valid\"],[[1282,1282],\"mapped\",[1283]],[[1283,1283],\"valid\"],[[1284,1284],\"mapped\",[1285]],[[1285,1285],\"valid\"],[[1286,1286],\"mapped\",[1287]],[[1287,1287],\"valid\"],[[1288,1288],\"mapped\",[1289]],[[1289,1289],\"valid\"],[[1290,1290],\"mapped\",[1291]],[[1291,1291],\"valid\"],[[1292,1292],\"mapped\",[1293]],[[1293,1293],\"valid\"],[[1294,1294],\"mapped\",[1295]],[[1295,1295],\"valid\"],[[1296,1296],\"mapped\",[1297]],[[1297,1297],\"valid\"],[[1298,1298],\"mapped\",[1299]],[[1299,1299],\"valid\"],[[1300,1300],\"mapped\",[1301]],[[1301,1301],\"valid\"],[[1302,1302],\"mapped\",[1303]],[[1303,1303],\"valid\"],[[1304,1304],\"mapped\",[1305]],[[1305,1305],\"valid\"],[[1306,1306],\"mapped\",[1307]],[[1307,1307],\"valid\"],[[1308,1308],\"mapped\",[1309]],[[1309,1309],\"valid\"],[[1310,1310],\"mapped\",[1311]],[[1311,1311],\"valid\"],[[1312,1312],\"mapped\",[1313]],[[1313,1313],\"valid\"],[[1314,1314],\"mapped\",[1315]],[[1315,1315],\"valid\"],[[1316,1316],\"mapped\",[1317]],[[1317,1317],\"valid\"],[[1318,1318],\"mapped\",[1319]],[[1319,1319],\"valid\"],[[1320,1320],\"mapped\",[1321]],[[1321,1321],\"valid\"],[[1322,1322],\"mapped\",[1323]],[[1323,1323],\"valid\"],[[1324,1324],\"mapped\",[1325]],[[1325,1325],\"valid\"],[[1326,1326],\"mapped\",[1327]],[[1327,1327],\"valid\"],[[1328,1328],\"disallowed\"],[[1329,1329],\"mapped\",[1377]],[[1330,1330],\"mapped\",[1378]],[[1331,1331],\"mapped\",[1379]],[[1332,1332],\"mapped\",[1380]],[[1333,1333],\"mapped\",[1381]],[[1334,1334],\"mapped\",[1382]],[[1335,1335],\"mapped\",[1383]],[[1336,1336],\"mapped\",[1384]],[[1337,1337],\"mapped\",[1385]],[[1338,1338],\"mapped\",[1386]],[[1339,1339],\"mapped\",[1387]],[[1340,1340],\"mapped\",[1388]],[[1341,1341],\"mapped\",[1389]],[[1342,1342],\"mapped\",[1390]],[[1343,1343],\"mapped\",[1391]],[[1344,1344],\"mapped\",[1392]],[[1345,1345],\"mapped\",[1393]],[[1346,1346],\"mapped\",[1394]],[[1347,1347],\"mapped\",[1395]],[[1348,1348],\"mapped\",[1396]],[[1349,1349],\"mapped\",[1397]],[[1350,1350],\"mapped\",[1398]],[[1351,1351],\"mapped\",[1399]],[[1352,1352],\"mapped\",[1400]],[[1353,1353],\"mapped\",[1401]],[[1354,1354],\"mapped\",[1402]],[[1355,1355],\"mapped\",[1403]],[[1356,1356],\"mapped\",[1404]],[[1357,1357],\"mapped\",[1405]],[[1358,1358],\"mapped\",[1406]],[[1359,1359],\"mapped\",[1407]],[[1360,1360],\"mapped\",[1408]],[[1361,1361],\"mapped\",[1409]],[[1362,1362],\"mapped\",[1410]],[[1363,1363],\"mapped\",[1411]],[[1364,1364],\"mapped\",[1412]],[[1365,1365],\"mapped\",[1413]],[[1366,1366],\"mapped\",[1414]],[[1367,1368],\"disallowed\"],[[1369,1369],\"valid\"],[[1370,1375],\"valid\",[],\"NV8\"],[[1376,1376],\"disallowed\"],[[1377,1414],\"valid\"],[[1415,1415],\"mapped\",[1381,1410]],[[1416,1416],\"disallowed\"],[[1417,1417],\"valid\",[],\"NV8\"],[[1418,1418],\"valid\",[],\"NV8\"],[[1419,1420],\"disallowed\"],[[1421,1422],\"valid\",[],\"NV8\"],[[1423,1423],\"valid\",[],\"NV8\"],[[1424,1424],\"disallowed\"],[[1425,1441],\"valid\"],[[1442,1442],\"valid\"],[[1443,1455],\"valid\"],[[1456,1465],\"valid\"],[[1466,1466],\"valid\"],[[1467,1469],\"valid\"],[[1470,1470],\"valid\",[],\"NV8\"],[[1471,1471],\"valid\"],[[1472,1472],\"valid\",[],\"NV8\"],[[1473,1474],\"valid\"],[[1475,1475],\"valid\",[],\"NV8\"],[[1476,1476],\"valid\"],[[1477,1477],\"valid\"],[[1478,1478],\"valid\",[],\"NV8\"],[[1479,1479],\"valid\"],[[1480,1487],\"disallowed\"],[[1488,1514],\"valid\"],[[1515,1519],\"disallowed\"],[[1520,1524],\"valid\"],[[1525,1535],\"disallowed\"],[[1536,1539],\"disallowed\"],[[1540,1540],\"disallowed\"],[[1541,1541],\"disallowed\"],[[1542,1546],\"valid\",[],\"NV8\"],[[1547,1547],\"valid\",[],\"NV8\"],[[1548,1548],\"valid\",[],\"NV8\"],[[1549,1551],\"valid\",[],\"NV8\"],[[1552,1557],\"valid\"],[[1558,1562],\"valid\"],[[1563,1563],\"valid\",[],\"NV8\"],[[1564,1564],\"disallowed\"],[[1565,1565],\"disallowed\"],[[1566,1566],\"valid\",[],\"NV8\"],[[1567,1567],\"valid\",[],\"NV8\"],[[1568,1568],\"valid\"],[[1569,1594],\"valid\"],[[1595,1599],\"valid\"],[[1600,1600],\"valid\",[],\"NV8\"],[[1601,1618],\"valid\"],[[1619,1621],\"valid\"],[[1622,1624],\"valid\"],[[1625,1630],\"valid\"],[[1631,1631],\"valid\"],[[1632,1641],\"valid\"],[[1642,1645],\"valid\",[],\"NV8\"],[[1646,1647],\"valid\"],[[1648,1652],\"valid\"],[[1653,1653],\"mapped\",[1575,1652]],[[1654,1654],\"mapped\",[1608,1652]],[[1655,1655],\"mapped\",[1735,1652]],[[1656,1656],\"mapped\",[1610,1652]],[[1657,1719],\"valid\"],[[1720,1721],\"valid\"],[[1722,1726],\"valid\"],[[1727,1727],\"valid\"],[[1728,1742],\"valid\"],[[1743,1743],\"valid\"],[[1744,1747],\"valid\"],[[1748,1748],\"valid\",[],\"NV8\"],[[1749,1756],\"valid\"],[[1757,1757],\"disallowed\"],[[1758,1758],\"valid\",[],\"NV8\"],[[1759,1768],\"valid\"],[[1769,1769],\"valid\",[],\"NV8\"],[[1770,1773],\"valid\"],[[1774,1775],\"valid\"],[[1776,1785],\"valid\"],[[1786,1790],\"valid\"],[[1791,1791],\"valid\"],[[1792,1805],\"valid\",[],\"NV8\"],[[1806,1806],\"disallowed\"],[[1807,1807],\"disallowed\"],[[1808,1836],\"valid\"],[[1837,1839],\"valid\"],[[1840,1866],\"valid\"],[[1867,1868],\"disallowed\"],[[1869,1871],\"valid\"],[[1872,1901],\"valid\"],[[1902,1919],\"valid\"],[[1920,1968],\"valid\"],[[1969,1969],\"valid\"],[[1970,1983],\"disallowed\"],[[1984,2037],\"valid\"],[[2038,2042],\"valid\",[],\"NV8\"],[[2043,2047],\"disallowed\"],[[2048,2093],\"valid\"],[[2094,2095],\"disallowed\"],[[2096,2110],\"valid\",[],\"NV8\"],[[2111,2111],\"disallowed\"],[[2112,2139],\"valid\"],[[2140,2141],\"disallowed\"],[[2142,2142],\"valid\",[],\"NV8\"],[[2143,2207],\"disallowed\"],[[2208,2208],\"valid\"],[[2209,2209],\"valid\"],[[2210,2220],\"valid\"],[[2221,2226],\"valid\"],[[2227,2228],\"valid\"],[[2229,2274],\"disallowed\"],[[2275,2275],\"valid\"],[[2276,2302],\"valid\"],[[2303,2303],\"valid\"],[[2304,2304],\"valid\"],[[2305,2307],\"valid\"],[[2308,2308],\"valid\"],[[2309,2361],\"valid\"],[[2362,2363],\"valid\"],[[2364,2381],\"valid\"],[[2382,2382],\"valid\"],[[2383,2383],\"valid\"],[[2384,2388],\"valid\"],[[2389,2389],\"valid\"],[[2390,2391],\"valid\"],[[2392,2392],\"mapped\",[2325,2364]],[[2393,2393],\"mapped\",[2326,2364]],[[2394,2394],\"mapped\",[2327,2364]],[[2395,2395],\"mapped\",[2332,2364]],[[2396,2396],\"mapped\",[2337,2364]],[[2397,2397],\"mapped\",[2338,2364]],[[2398,2398],\"mapped\",[2347,2364]],[[2399,2399],\"mapped\",[2351,2364]],[[2400,2403],\"valid\"],[[2404,2405],\"valid\",[],\"NV8\"],[[2406,2415],\"valid\"],[[2416,2416],\"valid\",[],\"NV8\"],[[2417,2418],\"valid\"],[[2419,2423],\"valid\"],[[2424,2424],\"valid\"],[[2425,2426],\"valid\"],[[2427,2428],\"valid\"],[[2429,2429],\"valid\"],[[2430,2431],\"valid\"],[[2432,2432],\"valid\"],[[2433,2435],\"valid\"],[[2436,2436],\"disallowed\"],[[2437,2444],\"valid\"],[[2445,2446],\"disallowed\"],[[2447,2448],\"valid\"],[[2449,2450],\"disallowed\"],[[2451,2472],\"valid\"],[[2473,2473],\"disallowed\"],[[2474,2480],\"valid\"],[[2481,2481],\"disallowed\"],[[2482,2482],\"valid\"],[[2483,2485],\"disallowed\"],[[2486,2489],\"valid\"],[[2490,2491],\"disallowed\"],[[2492,2492],\"valid\"],[[2493,2493],\"valid\"],[[2494,2500],\"valid\"],[[2501,2502],\"disallowed\"],[[2503,2504],\"valid\"],[[2505,2506],\"disallowed\"],[[2507,2509],\"valid\"],[[2510,2510],\"valid\"],[[2511,2518],\"disallowed\"],[[2519,2519],\"valid\"],[[2520,2523],\"disallowed\"],[[2524,2524],\"mapped\",[2465,2492]],[[2525,2525],\"mapped\",[2466,2492]],[[2526,2526],\"disallowed\"],[[2527,2527],\"mapped\",[2479,2492]],[[2528,2531],\"valid\"],[[2532,2533],\"disallowed\"],[[2534,2545],\"valid\"],[[2546,2554],\"valid\",[],\"NV8\"],[[2555,2555],\"valid\",[],\"NV8\"],[[2556,2560],\"disallowed\"],[[2561,2561],\"valid\"],[[2562,2562],\"valid\"],[[2563,2563],\"valid\"],[[2564,2564],\"disallowed\"],[[2565,2570],\"valid\"],[[2571,2574],\"disallowed\"],[[2575,2576],\"valid\"],[[2577,2578],\"disallowed\"],[[2579,2600],\"valid\"],[[2601,2601],\"disallowed\"],[[2602,2608],\"valid\"],[[2609,2609],\"disallowed\"],[[2610,2610],\"valid\"],[[2611,2611],\"mapped\",[2610,2620]],[[2612,2612],\"disallowed\"],[[2613,2613],\"valid\"],[[2614,2614],\"mapped\",[2616,2620]],[[2615,2615],\"disallowed\"],[[2616,2617],\"valid\"],[[2618,2619],\"disallowed\"],[[2620,2620],\"valid\"],[[2621,2621],\"disallowed\"],[[2622,2626],\"valid\"],[[2627,2630],\"disallowed\"],[[2631,2632],\"valid\"],[[2633,2634],\"disallowed\"],[[2635,2637],\"valid\"],[[2638,2640],\"disallowed\"],[[2641,2641],\"valid\"],[[2642,2648],\"disallowed\"],[[2649,2649],\"mapped\",[2582,2620]],[[2650,2650],\"mapped\",[2583,2620]],[[2651,2651],\"mapped\",[2588,2620]],[[2652,2652],\"valid\"],[[2653,2653],\"disallowed\"],[[2654,2654],\"mapped\",[2603,2620]],[[2655,2661],\"disallowed\"],[[2662,2676],\"valid\"],[[2677,2677],\"valid\"],[[2678,2688],\"disallowed\"],[[2689,2691],\"valid\"],[[2692,2692],\"disallowed\"],[[2693,2699],\"valid\"],[[2700,2700],\"valid\"],[[2701,2701],\"valid\"],[[2702,2702],\"disallowed\"],[[2703,2705],\"valid\"],[[2706,2706],\"disallowed\"],[[2707,2728],\"valid\"],[[2729,2729],\"disallowed\"],[[2730,2736],\"valid\"],[[2737,2737],\"disallowed\"],[[2738,2739],\"valid\"],[[2740,2740],\"disallowed\"],[[2741,2745],\"valid\"],[[2746,2747],\"disallowed\"],[[2748,2757],\"valid\"],[[2758,2758],\"disallowed\"],[[2759,2761],\"valid\"],[[2762,2762],\"disallowed\"],[[2763,2765],\"valid\"],[[2766,2767],\"disallowed\"],[[2768,2768],\"valid\"],[[2769,2783],\"disallowed\"],[[2784,2784],\"valid\"],[[2785,2787],\"valid\"],[[2788,2789],\"disallowed\"],[[2790,2799],\"valid\"],[[2800,2800],\"valid\",[],\"NV8\"],[[2801,2801],\"valid\",[],\"NV8\"],[[2802,2808],\"disallowed\"],[[2809,2809],\"valid\"],[[2810,2816],\"disallowed\"],[[2817,2819],\"valid\"],[[2820,2820],\"disallowed\"],[[2821,2828],\"valid\"],[[2829,2830],\"disallowed\"],[[2831,2832],\"valid\"],[[2833,2834],\"disallowed\"],[[2835,2856],\"valid\"],[[2857,2857],\"disallowed\"],[[2858,2864],\"valid\"],[[2865,2865],\"disallowed\"],[[2866,2867],\"valid\"],[[2868,2868],\"disallowed\"],[[2869,2869],\"valid\"],[[2870,2873],\"valid\"],[[2874,2875],\"disallowed\"],[[2876,2883],\"valid\"],[[2884,2884],\"valid\"],[[2885,2886],\"disallowed\"],[[2887,2888],\"valid\"],[[2889,2890],\"disallowed\"],[[2891,2893],\"valid\"],[[2894,2901],\"disallowed\"],[[2902,2903],\"valid\"],[[2904,2907],\"disallowed\"],[[2908,2908],\"mapped\",[2849,2876]],[[2909,2909],\"mapped\",[2850,2876]],[[2910,2910],\"disallowed\"],[[2911,2913],\"valid\"],[[2914,2915],\"valid\"],[[2916,2917],\"disallowed\"],[[2918,2927],\"valid\"],[[2928,2928],\"valid\",[],\"NV8\"],[[2929,2929],\"valid\"],[[2930,2935],\"valid\",[],\"NV8\"],[[2936,2945],\"disallowed\"],[[2946,2947],\"valid\"],[[2948,2948],\"disallowed\"],[[2949,2954],\"valid\"],[[2955,2957],\"disallowed\"],[[2958,2960],\"valid\"],[[2961,2961],\"disallowed\"],[[2962,2965],\"valid\"],[[2966,2968],\"disallowed\"],[[2969,2970],\"valid\"],[[2971,2971],\"disallowed\"],[[2972,2972],\"valid\"],[[2973,2973],\"disallowed\"],[[2974,2975],\"valid\"],[[2976,2978],\"disallowed\"],[[2979,2980],\"valid\"],[[2981,2983],\"disallowed\"],[[2984,2986],\"valid\"],[[2987,2989],\"disallowed\"],[[2990,2997],\"valid\"],[[2998,2998],\"valid\"],[[2999,3001],\"valid\"],[[3002,3005],\"disallowed\"],[[3006,3010],\"valid\"],[[3011,3013],\"disallowed\"],[[3014,3016],\"valid\"],[[3017,3017],\"disallowed\"],[[3018,3021],\"valid\"],[[3022,3023],\"disallowed\"],[[3024,3024],\"valid\"],[[3025,3030],\"disallowed\"],[[3031,3031],\"valid\"],[[3032,3045],\"disallowed\"],[[3046,3046],\"valid\"],[[3047,3055],\"valid\"],[[3056,3058],\"valid\",[],\"NV8\"],[[3059,3066],\"valid\",[],\"NV8\"],[[3067,3071],\"disallowed\"],[[3072,3072],\"valid\"],[[3073,3075],\"valid\"],[[3076,3076],\"disallowed\"],[[3077,3084],\"valid\"],[[3085,3085],\"disallowed\"],[[3086,3088],\"valid\"],[[3089,3089],\"disallowed\"],[[3090,3112],\"valid\"],[[3113,3113],\"disallowed\"],[[3114,3123],\"valid\"],[[3124,3124],\"valid\"],[[3125,3129],\"valid\"],[[3130,3132],\"disallowed\"],[[3133,3133],\"valid\"],[[3134,3140],\"valid\"],[[3141,3141],\"disallowed\"],[[3142,3144],\"valid\"],[[3145,3145],\"disallowed\"],[[3146,3149],\"valid\"],[[3150,3156],\"disallowed\"],[[3157,3158],\"valid\"],[[3159,3159],\"disallowed\"],[[3160,3161],\"valid\"],[[3162,3162],\"valid\"],[[3163,3167],\"disallowed\"],[[3168,3169],\"valid\"],[[3170,3171],\"valid\"],[[3172,3173],\"disallowed\"],[[3174,3183],\"valid\"],[[3184,3191],\"disallowed\"],[[3192,3199],\"valid\",[],\"NV8\"],[[3200,3200],\"disallowed\"],[[3201,3201],\"valid\"],[[3202,3203],\"valid\"],[[3204,3204],\"disallowed\"],[[3205,3212],\"valid\"],[[3213,3213],\"disallowed\"],[[3214,3216],\"valid\"],[[3217,3217],\"disallowed\"],[[3218,3240],\"valid\"],[[3241,3241],\"disallowed\"],[[3242,3251],\"valid\"],[[3252,3252],\"disallowed\"],[[3253,3257],\"valid\"],[[3258,3259],\"disallowed\"],[[3260,3261],\"valid\"],[[3262,3268],\"valid\"],[[3269,3269],\"disallowed\"],[[3270,3272],\"valid\"],[[3273,3273],\"disallowed\"],[[3274,3277],\"valid\"],[[3278,3284],\"disallowed\"],[[3285,3286],\"valid\"],[[3287,3293],\"disallowed\"],[[3294,3294],\"valid\"],[[3295,3295],\"disallowed\"],[[3296,3297],\"valid\"],[[3298,3299],\"valid\"],[[3300,3301],\"disallowed\"],[[3302,3311],\"valid\"],[[3312,3312],\"disallowed\"],[[3313,3314],\"valid\"],[[3315,3328],\"disallowed\"],[[3329,3329],\"valid\"],[[3330,3331],\"valid\"],[[3332,3332],\"disallowed\"],[[3333,3340],\"valid\"],[[3341,3341],\"disallowed\"],[[3342,3344],\"valid\"],[[3345,3345],\"disallowed\"],[[3346,3368],\"valid\"],[[3369,3369],\"valid\"],[[3370,3385],\"valid\"],[[3386,3386],\"valid\"],[[3387,3388],\"disallowed\"],[[3389,3389],\"valid\"],[[3390,3395],\"valid\"],[[3396,3396],\"valid\"],[[3397,3397],\"disallowed\"],[[3398,3400],\"valid\"],[[3401,3401],\"disallowed\"],[[3402,3405],\"valid\"],[[3406,3406],\"valid\"],[[3407,3414],\"disallowed\"],[[3415,3415],\"valid\"],[[3416,3422],\"disallowed\"],[[3423,3423],\"valid\"],[[3424,3425],\"valid\"],[[3426,3427],\"valid\"],[[3428,3429],\"disallowed\"],[[3430,3439],\"valid\"],[[3440,3445],\"valid\",[],\"NV8\"],[[3446,3448],\"disallowed\"],[[3449,3449],\"valid\",[],\"NV8\"],[[3450,3455],\"valid\"],[[3456,3457],\"disallowed\"],[[3458,3459],\"valid\"],[[3460,3460],\"disallowed\"],[[3461,3478],\"valid\"],[[3479,3481],\"disallowed\"],[[3482,3505],\"valid\"],[[3506,3506],\"disallowed\"],[[3507,3515],\"valid\"],[[3516,3516],\"disallowed\"],[[3517,3517],\"valid\"],[[3518,3519],\"disallowed\"],[[3520,3526],\"valid\"],[[3527,3529],\"disallowed\"],[[3530,3530],\"valid\"],[[3531,3534],\"disallowed\"],[[3535,3540],\"valid\"],[[3541,3541],\"disallowed\"],[[3542,3542],\"valid\"],[[3543,3543],\"disallowed\"],[[3544,3551],\"valid\"],[[3552,3557],\"disallowed\"],[[3558,3567],\"valid\"],[[3568,3569],\"disallowed\"],[[3570,3571],\"valid\"],[[3572,3572],\"valid\",[],\"NV8\"],[[3573,3584],\"disallowed\"],[[3585,3634],\"valid\"],[[3635,3635],\"mapped\",[3661,3634]],[[3636,3642],\"valid\"],[[3643,3646],\"disallowed\"],[[3647,3647],\"valid\",[],\"NV8\"],[[3648,3662],\"valid\"],[[3663,3663],\"valid\",[],\"NV8\"],[[3664,3673],\"valid\"],[[3674,3675],\"valid\",[],\"NV8\"],[[3676,3712],\"disallowed\"],[[3713,3714],\"valid\"],[[3715,3715],\"disallowed\"],[[3716,3716],\"valid\"],[[3717,3718],\"disallowed\"],[[3719,3720],\"valid\"],[[3721,3721],\"disallowed\"],[[3722,3722],\"valid\"],[[3723,3724],\"disallowed\"],[[3725,3725],\"valid\"],[[3726,3731],\"disallowed\"],[[3732,3735],\"valid\"],[[3736,3736],\"disallowed\"],[[3737,3743],\"valid\"],[[3744,3744],\"disallowed\"],[[3745,3747],\"valid\"],[[3748,3748],\"disallowed\"],[[3749,3749],\"valid\"],[[3750,3750],\"disallowed\"],[[3751,3751],\"valid\"],[[3752,3753],\"disallowed\"],[[3754,3755],\"valid\"],[[3756,3756],\"disallowed\"],[[3757,3762],\"valid\"],[[3763,3763],\"mapped\",[3789,3762]],[[3764,3769],\"valid\"],[[3770,3770],\"disallowed\"],[[3771,3773],\"valid\"],[[3774,3775],\"disallowed\"],[[3776,3780],\"valid\"],[[3781,3781],\"disallowed\"],[[3782,3782],\"valid\"],[[3783,3783],\"disallowed\"],[[3784,3789],\"valid\"],[[3790,3791],\"disallowed\"],[[3792,3801],\"valid\"],[[3802,3803],\"disallowed\"],[[3804,3804],\"mapped\",[3755,3737]],[[3805,3805],\"mapped\",[3755,3745]],[[3806,3807],\"valid\"],[[3808,3839],\"disallowed\"],[[3840,3840],\"valid\"],[[3841,3850],\"valid\",[],\"NV8\"],[[3851,3851],\"valid\"],[[3852,3852],\"mapped\",[3851]],[[3853,3863],\"valid\",[],\"NV8\"],[[3864,3865],\"valid\"],[[3866,3871],\"valid\",[],\"NV8\"],[[3872,3881],\"valid\"],[[3882,3892],\"valid\",[],\"NV8\"],[[3893,3893],\"valid\"],[[3894,3894],\"valid\",[],\"NV8\"],[[3895,3895],\"valid\"],[[3896,3896],\"valid\",[],\"NV8\"],[[3897,3897],\"valid\"],[[3898,3901],\"valid\",[],\"NV8\"],[[3902,3906],\"valid\"],[[3907,3907],\"mapped\",[3906,4023]],[[3908,3911],\"valid\"],[[3912,3912],\"disallowed\"],[[3913,3916],\"valid\"],[[3917,3917],\"mapped\",[3916,4023]],[[3918,3921],\"valid\"],[[3922,3922],\"mapped\",[3921,4023]],[[3923,3926],\"valid\"],[[3927,3927],\"mapped\",[3926,4023]],[[3928,3931],\"valid\"],[[3932,3932],\"mapped\",[3931,4023]],[[3933,3944],\"valid\"],[[3945,3945],\"mapped\",[3904,4021]],[[3946,3946],\"valid\"],[[3947,3948],\"valid\"],[[3949,3952],\"disallowed\"],[[3953,3954],\"valid\"],[[3955,3955],\"mapped\",[3953,3954]],[[3956,3956],\"valid\"],[[3957,3957],\"mapped\",[3953,3956]],[[3958,3958],\"mapped\",[4018,3968]],[[3959,3959],\"mapped\",[4018,3953,3968]],[[3960,3960],\"mapped\",[4019,3968]],[[3961,3961],\"mapped\",[4019,3953,3968]],[[3962,3968],\"valid\"],[[3969,3969],\"mapped\",[3953,3968]],[[3970,3972],\"valid\"],[[3973,3973],\"valid\",[],\"NV8\"],[[3974,3979],\"valid\"],[[3980,3983],\"valid\"],[[3984,3986],\"valid\"],[[3987,3987],\"mapped\",[3986,4023]],[[3988,3989],\"valid\"],[[3990,3990],\"valid\"],[[3991,3991],\"valid\"],[[3992,3992],\"disallowed\"],[[3993,3996],\"valid\"],[[3997,3997],\"mapped\",[3996,4023]],[[3998,4001],\"valid\"],[[4002,4002],\"mapped\",[4001,4023]],[[4003,4006],\"valid\"],[[4007,4007],\"mapped\",[4006,4023]],[[4008,4011],\"valid\"],[[4012,4012],\"mapped\",[4011,4023]],[[4013,4013],\"valid\"],[[4014,4016],\"valid\"],[[4017,4023],\"valid\"],[[4024,4024],\"valid\"],[[4025,4025],\"mapped\",[3984,4021]],[[4026,4028],\"valid\"],[[4029,4029],\"disallowed\"],[[4030,4037],\"valid\",[],\"NV8\"],[[4038,4038],\"valid\"],[[4039,4044],\"valid\",[],\"NV8\"],[[4045,4045],\"disallowed\"],[[4046,4046],\"valid\",[],\"NV8\"],[[4047,4047],\"valid\",[],\"NV8\"],[[4048,4049],\"valid\",[],\"NV8\"],[[4050,4052],\"valid\",[],\"NV8\"],[[4053,4056],\"valid\",[],\"NV8\"],[[4057,4058],\"valid\",[],\"NV8\"],[[4059,4095],\"disallowed\"],[[4096,4129],\"valid\"],[[4130,4130],\"valid\"],[[4131,4135],\"valid\"],[[4136,4136],\"valid\"],[[4137,4138],\"valid\"],[[4139,4139],\"valid\"],[[4140,4146],\"valid\"],[[4147,4149],\"valid\"],[[4150,4153],\"valid\"],[[4154,4159],\"valid\"],[[4160,4169],\"valid\"],[[4170,4175],\"valid\",[],\"NV8\"],[[4176,4185],\"valid\"],[[4186,4249],\"valid\"],[[4250,4253],\"valid\"],[[4254,4255],\"valid\",[],\"NV8\"],[[4256,4293],\"disallowed\"],[[4294,4294],\"disallowed\"],[[4295,4295],\"mapped\",[11559]],[[4296,4300],\"disallowed\"],[[4301,4301],\"mapped\",[11565]],[[4302,4303],\"disallowed\"],[[4304,4342],\"valid\"],[[4343,4344],\"valid\"],[[4345,4346],\"valid\"],[[4347,4347],\"valid\",[],\"NV8\"],[[4348,4348],\"mapped\",[4316]],[[4349,4351],\"valid\"],[[4352,4441],\"valid\",[],\"NV8\"],[[4442,4446],\"valid\",[],\"NV8\"],[[4447,4448],\"disallowed\"],[[4449,4514],\"valid\",[],\"NV8\"],[[4515,4519],\"valid\",[],\"NV8\"],[[4520,4601],\"valid\",[],\"NV8\"],[[4602,4607],\"valid\",[],\"NV8\"],[[4608,4614],\"valid\"],[[4615,4615],\"valid\"],[[4616,4678],\"valid\"],[[4679,4679],\"valid\"],[[4680,4680],\"valid\"],[[4681,4681],\"disallowed\"],[[4682,4685],\"valid\"],[[4686,4687],\"disallowed\"],[[4688,4694],\"valid\"],[[4695,4695],\"disallowed\"],[[4696,4696],\"valid\"],[[4697,4697],\"disallowed\"],[[4698,4701],\"valid\"],[[4702,4703],\"disallowed\"],[[4704,4742],\"valid\"],[[4743,4743],\"valid\"],[[4744,4744],\"valid\"],[[4745,4745],\"disallowed\"],[[4746,4749],\"valid\"],[[4750,4751],\"disallowed\"],[[4752,4782],\"valid\"],[[4783,4783],\"valid\"],[[4784,4784],\"valid\"],[[4785,4785],\"disallowed\"],[[4786,4789],\"valid\"],[[4790,4791],\"disallowed\"],[[4792,4798],\"valid\"],[[4799,4799],\"disallowed\"],[[4800,4800],\"valid\"],[[4801,4801],\"disallowed\"],[[4802,4805],\"valid\"],[[4806,4807],\"disallowed\"],[[4808,4814],\"valid\"],[[4815,4815],\"valid\"],[[4816,4822],\"valid\"],[[4823,4823],\"disallowed\"],[[4824,4846],\"valid\"],[[4847,4847],\"valid\"],[[4848,4878],\"valid\"],[[4879,4879],\"valid\"],[[4880,4880],\"valid\"],[[4881,4881],\"disallowed\"],[[4882,4885],\"valid\"],[[4886,4887],\"disallowed\"],[[4888,4894],\"valid\"],[[4895,4895],\"valid\"],[[4896,4934],\"valid\"],[[4935,4935],\"valid\"],[[4936,4954],\"valid\"],[[4955,4956],\"disallowed\"],[[4957,4958],\"valid\"],[[4959,4959],\"valid\"],[[4960,4960],\"valid\",[],\"NV8\"],[[4961,4988],\"valid\",[],\"NV8\"],[[4989,4991],\"disallowed\"],[[4992,5007],\"valid\"],[[5008,5017],\"valid\",[],\"NV8\"],[[5018,5023],\"disallowed\"],[[5024,5108],\"valid\"],[[5109,5109],\"valid\"],[[5110,5111],\"disallowed\"],[[5112,5112],\"mapped\",[5104]],[[5113,5113],\"mapped\",[5105]],[[5114,5114],\"mapped\",[5106]],[[5115,5115],\"mapped\",[5107]],[[5116,5116],\"mapped\",[5108]],[[5117,5117],\"mapped\",[5109]],[[5118,5119],\"disallowed\"],[[5120,5120],\"valid\",[],\"NV8\"],[[5121,5740],\"valid\"],[[5741,5742],\"valid\",[],\"NV8\"],[[5743,5750],\"valid\"],[[5751,5759],\"valid\"],[[5760,5760],\"disallowed\"],[[5761,5786],\"valid\"],[[5787,5788],\"valid\",[],\"NV8\"],[[5789,5791],\"disallowed\"],[[5792,5866],\"valid\"],[[5867,5872],\"valid\",[],\"NV8\"],[[5873,5880],\"valid\"],[[5881,5887],\"disallowed\"],[[5888,5900],\"valid\"],[[5901,5901],\"disallowed\"],[[5902,5908],\"valid\"],[[5909,5919],\"disallowed\"],[[5920,5940],\"valid\"],[[5941,5942],\"valid\",[],\"NV8\"],[[5943,5951],\"disallowed\"],[[5952,5971],\"valid\"],[[5972,5983],\"disallowed\"],[[5984,5996],\"valid\"],[[5997,5997],\"disallowed\"],[[5998,6000],\"valid\"],[[6001,6001],\"disallowed\"],[[6002,6003],\"valid\"],[[6004,6015],\"disallowed\"],[[6016,6067],\"valid\"],[[6068,6069],\"disallowed\"],[[6070,6099],\"valid\"],[[6100,6102],\"valid\",[],\"NV8\"],[[6103,6103],\"valid\"],[[6104,6107],\"valid\",[],\"NV8\"],[[6108,6108],\"valid\"],[[6109,6109],\"valid\"],[[6110,6111],\"disallowed\"],[[6112,6121],\"valid\"],[[6122,6127],\"disallowed\"],[[6128,6137],\"valid\",[],\"NV8\"],[[6138,6143],\"disallowed\"],[[6144,6149],\"valid\",[],\"NV8\"],[[6150,6150],\"disallowed\"],[[6151,6154],\"valid\",[],\"NV8\"],[[6155,6157],\"ignored\"],[[6158,6158],\"disallowed\"],[[6159,6159],\"disallowed\"],[[6160,6169],\"valid\"],[[6170,6175],\"disallowed\"],[[6176,6263],\"valid\"],[[6264,6271],\"disallowed\"],[[6272,6313],\"valid\"],[[6314,6314],\"valid\"],[[6315,6319],\"disallowed\"],[[6320,6389],\"valid\"],[[6390,6399],\"disallowed\"],[[6400,6428],\"valid\"],[[6429,6430],\"valid\"],[[6431,6431],\"disallowed\"],[[6432,6443],\"valid\"],[[6444,6447],\"disallowed\"],[[6448,6459],\"valid\"],[[6460,6463],\"disallowed\"],[[6464,6464],\"valid\",[],\"NV8\"],[[6465,6467],\"disallowed\"],[[6468,6469],\"valid\",[],\"NV8\"],[[6470,6509],\"valid\"],[[6510,6511],\"disallowed\"],[[6512,6516],\"valid\"],[[6517,6527],\"disallowed\"],[[6528,6569],\"valid\"],[[6570,6571],\"valid\"],[[6572,6575],\"disallowed\"],[[6576,6601],\"valid\"],[[6602,6607],\"disallowed\"],[[6608,6617],\"valid\"],[[6618,6618],\"valid\",[],\"XV8\"],[[6619,6621],\"disallowed\"],[[6622,6623],\"valid\",[],\"NV8\"],[[6624,6655],\"valid\",[],\"NV8\"],[[6656,6683],\"valid\"],[[6684,6685],\"disallowed\"],[[6686,6687],\"valid\",[],\"NV8\"],[[6688,6750],\"valid\"],[[6751,6751],\"disallowed\"],[[6752,6780],\"valid\"],[[6781,6782],\"disallowed\"],[[6783,6793],\"valid\"],[[6794,6799],\"disallowed\"],[[6800,6809],\"valid\"],[[6810,6815],\"disallowed\"],[[6816,6822],\"valid\",[],\"NV8\"],[[6823,6823],\"valid\"],[[6824,6829],\"valid\",[],\"NV8\"],[[6830,6831],\"disallowed\"],[[6832,6845],\"valid\"],[[6846,6846],\"valid\",[],\"NV8\"],[[6847,6911],\"disallowed\"],[[6912,6987],\"valid\"],[[6988,6991],\"disallowed\"],[[6992,7001],\"valid\"],[[7002,7018],\"valid\",[],\"NV8\"],[[7019,7027],\"valid\"],[[7028,7036],\"valid\",[],\"NV8\"],[[7037,7039],\"disallowed\"],[[7040,7082],\"valid\"],[[7083,7085],\"valid\"],[[7086,7097],\"valid\"],[[7098,7103],\"valid\"],[[7104,7155],\"valid\"],[[7156,7163],\"disallowed\"],[[7164,7167],\"valid\",[],\"NV8\"],[[7168,7223],\"valid\"],[[7224,7226],\"disallowed\"],[[7227,7231],\"valid\",[],\"NV8\"],[[7232,7241],\"valid\"],[[7242,7244],\"disallowed\"],[[7245,7293],\"valid\"],[[7294,7295],\"valid\",[],\"NV8\"],[[7296,7359],\"disallowed\"],[[7360,7367],\"valid\",[],\"NV8\"],[[7368,7375],\"disallowed\"],[[7376,7378],\"valid\"],[[7379,7379],\"valid\",[],\"NV8\"],[[7380,7410],\"valid\"],[[7411,7414],\"valid\"],[[7415,7415],\"disallowed\"],[[7416,7417],\"valid\"],[[7418,7423],\"disallowed\"],[[7424,7467],\"valid\"],[[7468,7468],\"mapped\",[97]],[[7469,7469],\"mapped\",[230]],[[7470,7470],\"mapped\",[98]],[[7471,7471],\"valid\"],[[7472,7472],\"mapped\",[100]],[[7473,7473],\"mapped\",[101]],[[7474,7474],\"mapped\",[477]],[[7475,7475],\"mapped\",[103]],[[7476,7476],\"mapped\",[104]],[[7477,7477],\"mapped\",[105]],[[7478,7478],\"mapped\",[106]],[[7479,7479],\"mapped\",[107]],[[7480,7480],\"mapped\",[108]],[[7481,7481],\"mapped\",[109]],[[7482,7482],\"mapped\",[110]],[[7483,7483],\"valid\"],[[7484,7484],\"mapped\",[111]],[[7485,7485],\"mapped\",[547]],[[7486,7486],\"mapped\",[112]],[[7487,7487],\"mapped\",[114]],[[7488,7488],\"mapped\",[116]],[[7489,7489],\"mapped\",[117]],[[7490,7490],\"mapped\",[119]],[[7491,7491],\"mapped\",[97]],[[7492,7492],\"mapped\",[592]],[[7493,7493],\"mapped\",[593]],[[7494,7494],\"mapped\",[7426]],[[7495,7495],\"mapped\",[98]],[[7496,7496],\"mapped\",[100]],[[7497,7497],\"mapped\",[101]],[[7498,7498],\"mapped\",[601]],[[7499,7499],\"mapped\",[603]],[[7500,7500],\"mapped\",[604]],[[7501,7501],\"mapped\",[103]],[[7502,7502],\"valid\"],[[7503,7503],\"mapped\",[107]],[[7504,7504],\"mapped\",[109]],[[7505,7505],\"mapped\",[331]],[[7506,7506],\"mapped\",[111]],[[7507,7507],\"mapped\",[596]],[[7508,7508],\"mapped\",[7446]],[[7509,7509],\"mapped\",[7447]],[[7510,7510],\"mapped\",[112]],[[7511,7511],\"mapped\",[116]],[[7512,7512],\"mapped\",[117]],[[7513,7513],\"mapped\",[7453]],[[7514,7514],\"mapped\",[623]],[[7515,7515],\"mapped\",[118]],[[7516,7516],\"mapped\",[7461]],[[7517,7517],\"mapped\",[946]],[[7518,7518],\"mapped\",[947]],[[7519,7519],\"mapped\",[948]],[[7520,7520],\"mapped\",[966]],[[7521,7521],\"mapped\",[967]],[[7522,7522],\"mapped\",[105]],[[7523,7523],\"mapped\",[114]],[[7524,7524],\"mapped\",[117]],[[7525,7525],\"mapped\",[118]],[[7526,7526],\"mapped\",[946]],[[7527,7527],\"mapped\",[947]],[[7528,7528],\"mapped\",[961]],[[7529,7529],\"mapped\",[966]],[[7530,7530],\"mapped\",[967]],[[7531,7531],\"valid\"],[[7532,7543],\"valid\"],[[7544,7544],\"mapped\",[1085]],[[7545,7578],\"valid\"],[[7579,7579],\"mapped\",[594]],[[7580,7580],\"mapped\",[99]],[[7581,7581],\"mapped\",[597]],[[7582,7582],\"mapped\",[240]],[[7583,7583],\"mapped\",[604]],[[7584,7584],\"mapped\",[102]],[[7585,7585],\"mapped\",[607]],[[7586,7586],\"mapped\",[609]],[[7587,7587],\"mapped\",[613]],[[7588,7588],\"mapped\",[616]],[[7589,7589],\"mapped\",[617]],[[7590,7590],\"mapped\",[618]],[[7591,7591],\"mapped\",[7547]],[[7592,7592],\"mapped\",[669]],[[7593,7593],\"mapped\",[621]],[[7594,7594],\"mapped\",[7557]],[[7595,7595],\"mapped\",[671]],[[7596,7596],\"mapped\",[625]],[[7597,7597],\"mapped\",[624]],[[7598,7598],\"mapped\",[626]],[[7599,7599],\"mapped\",[627]],[[7600,7600],\"mapped\",[628]],[[7601,7601],\"mapped\",[629]],[[7602,7602],\"mapped\",[632]],[[7603,7603],\"mapped\",[642]],[[7604,7604],\"mapped\",[643]],[[7605,7605],\"mapped\",[427]],[[7606,7606],\"mapped\",[649]],[[7607,7607],\"mapped\",[650]],[[7608,7608],\"mapped\",[7452]],[[7609,7609],\"mapped\",[651]],[[7610,7610],\"mapped\",[652]],[[7611,7611],\"mapped\",[122]],[[7612,7612],\"mapped\",[656]],[[7613,7613],\"mapped\",[657]],[[7614,7614],\"mapped\",[658]],[[7615,7615],\"mapped\",[952]],[[7616,7619],\"valid\"],[[7620,7626],\"valid\"],[[7627,7654],\"valid\"],[[7655,7669],\"valid\"],[[7670,7675],\"disallowed\"],[[7676,7676],\"valid\"],[[7677,7677],\"valid\"],[[7678,7679],\"valid\"],[[7680,7680],\"mapped\",[7681]],[[7681,7681],\"valid\"],[[7682,7682],\"mapped\",[7683]],[[7683,7683],\"valid\"],[[7684,7684],\"mapped\",[7685]],[[7685,7685],\"valid\"],[[7686,7686],\"mapped\",[7687]],[[7687,7687],\"valid\"],[[7688,7688],\"mapped\",[7689]],[[7689,7689],\"valid\"],[[7690,7690],\"mapped\",[7691]],[[7691,7691],\"valid\"],[[7692,7692],\"mapped\",[7693]],[[7693,7693],\"valid\"],[[7694,7694],\"mapped\",[7695]],[[7695,7695],\"valid\"],[[7696,7696],\"mapped\",[7697]],[[7697,7697],\"valid\"],[[7698,7698],\"mapped\",[7699]],[[7699,7699],\"valid\"],[[7700,7700],\"mapped\",[7701]],[[7701,7701],\"valid\"],[[7702,7702],\"mapped\",[7703]],[[7703,7703],\"valid\"],[[7704,7704],\"mapped\",[7705]],[[7705,7705],\"valid\"],[[7706,7706],\"mapped\",[7707]],[[7707,7707],\"valid\"],[[7708,7708],\"mapped\",[7709]],[[7709,7709],\"valid\"],[[7710,7710],\"mapped\",[7711]],[[7711,7711],\"valid\"],[[7712,7712],\"mapped\",[7713]],[[7713,7713],\"valid\"],[[7714,7714],\"mapped\",[7715]],[[7715,7715],\"valid\"],[[7716,7716],\"mapped\",[7717]],[[7717,7717],\"valid\"],[[7718,7718],\"mapped\",[7719]],[[7719,7719],\"valid\"],[[7720,7720],\"mapped\",[7721]],[[7721,7721],\"valid\"],[[7722,7722],\"mapped\",[7723]],[[7723,7723],\"valid\"],[[7724,7724],\"mapped\",[7725]],[[7725,7725],\"valid\"],[[7726,7726],\"mapped\",[7727]],[[7727,7727],\"valid\"],[[7728,7728],\"mapped\",[7729]],[[7729,7729],\"valid\"],[[7730,7730],\"mapped\",[7731]],[[7731,7731],\"valid\"],[[7732,7732],\"mapped\",[7733]],[[7733,7733],\"valid\"],[[7734,7734],\"mapped\",[7735]],[[7735,7735],\"valid\"],[[7736,7736],\"mapped\",[7737]],[[7737,7737],\"valid\"],[[7738,7738],\"mapped\",[7739]],[[7739,7739],\"valid\"],[[7740,7740],\"mapped\",[7741]],[[7741,7741],\"valid\"],[[7742,7742],\"mapped\",[7743]],[[7743,7743],\"valid\"],[[7744,7744],\"mapped\",[7745]],[[7745,7745],\"valid\"],[[7746,7746],\"mapped\",[7747]],[[7747,7747],\"valid\"],[[7748,7748],\"mapped\",[7749]],[[7749,7749],\"valid\"],[[7750,7750],\"mapped\",[7751]],[[7751,7751],\"valid\"],[[7752,7752],\"mapped\",[7753]],[[7753,7753],\"valid\"],[[7754,7754],\"mapped\",[7755]],[[7755,7755],\"valid\"],[[7756,7756],\"mapped\",[7757]],[[7757,7757],\"valid\"],[[7758,7758],\"mapped\",[7759]],[[7759,7759],\"valid\"],[[7760,7760],\"mapped\",[7761]],[[7761,7761],\"valid\"],[[7762,7762],\"mapped\",[7763]],[[7763,7763],\"valid\"],[[7764,7764],\"mapped\",[7765]],[[7765,7765],\"valid\"],[[7766,7766],\"mapped\",[7767]],[[7767,7767],\"valid\"],[[7768,7768],\"mapped\",[7769]],[[7769,7769],\"valid\"],[[7770,7770],\"mapped\",[7771]],[[7771,7771],\"valid\"],[[7772,7772],\"mapped\",[7773]],[[7773,7773],\"valid\"],[[7774,7774],\"mapped\",[7775]],[[7775,7775],\"valid\"],[[7776,7776],\"mapped\",[7777]],[[7777,7777],\"valid\"],[[7778,7778],\"mapped\",[7779]],[[7779,7779],\"valid\"],[[7780,7780],\"mapped\",[7781]],[[7781,7781],\"valid\"],[[7782,7782],\"mapped\",[7783]],[[7783,7783],\"valid\"],[[7784,7784],\"mapped\",[7785]],[[7785,7785],\"valid\"],[[7786,7786],\"mapped\",[7787]],[[7787,7787],\"valid\"],[[7788,7788],\"mapped\",[7789]],[[7789,7789],\"valid\"],[[7790,7790],\"mapped\",[7791]],[[7791,7791],\"valid\"],[[7792,7792],\"mapped\",[7793]],[[7793,7793],\"valid\"],[[7794,7794],\"mapped\",[7795]],[[7795,7795],\"valid\"],[[7796,7796],\"mapped\",[7797]],[[7797,7797],\"valid\"],[[7798,7798],\"mapped\",[7799]],[[7799,7799],\"valid\"],[[7800,7800],\"mapped\",[7801]],[[7801,7801],\"valid\"],[[7802,7802],\"mapped\",[7803]],[[7803,7803],\"valid\"],[[7804,7804],\"mapped\",[7805]],[[7805,7805],\"valid\"],[[7806,7806],\"mapped\",[7807]],[[7807,7807],\"valid\"],[[7808,7808],\"mapped\",[7809]],[[7809,7809],\"valid\"],[[7810,7810],\"mapped\",[7811]],[[7811,7811],\"valid\"],[[7812,7812],\"mapped\",[7813]],[[7813,7813],\"valid\"],[[7814,7814],\"mapped\",[7815]],[[7815,7815],\"valid\"],[[7816,7816],\"mapped\",[7817]],[[7817,7817],\"valid\"],[[7818,7818],\"mapped\",[7819]],[[7819,7819],\"valid\"],[[7820,7820],\"mapped\",[7821]],[[7821,7821],\"valid\"],[[7822,7822],\"mapped\",[7823]],[[7823,7823],\"valid\"],[[7824,7824],\"mapped\",[7825]],[[7825,7825],\"valid\"],[[7826,7826],\"mapped\",[7827]],[[7827,7827],\"valid\"],[[7828,7828],\"mapped\",[7829]],[[7829,7833],\"valid\"],[[7834,7834],\"mapped\",[97,702]],[[7835,7835],\"mapped\",[7777]],[[7836,7837],\"valid\"],[[7838,7838],\"mapped\",[115,115]],[[7839,7839],\"valid\"],[[7840,7840],\"mapped\",[7841]],[[7841,7841],\"valid\"],[[7842,7842],\"mapped\",[7843]],[[7843,7843],\"valid\"],[[7844,7844],\"mapped\",[7845]],[[7845,7845],\"valid\"],[[7846,7846],\"mapped\",[7847]],[[7847,7847],\"valid\"],[[7848,7848],\"mapped\",[7849]],[[7849,7849],\"valid\"],[[7850,7850],\"mapped\",[7851]],[[7851,7851],\"valid\"],[[7852,7852],\"mapped\",[7853]],[[7853,7853],\"valid\"],[[7854,7854],\"mapped\",[7855]],[[7855,7855],\"valid\"],[[7856,7856],\"mapped\",[7857]],[[7857,7857],\"valid\"],[[7858,7858],\"mapped\",[7859]],[[7859,7859],\"valid\"],[[7860,7860],\"mapped\",[7861]],[[7861,7861],\"valid\"],[[7862,7862],\"mapped\",[7863]],[[7863,7863],\"valid\"],[[7864,7864],\"mapped\",[7865]],[[7865,7865],\"valid\"],[[7866,7866],\"mapped\",[7867]],[[7867,7867],\"valid\"],[[7868,7868],\"mapped\",[7869]],[[7869,7869],\"valid\"],[[7870,7870],\"mapped\",[7871]],[[7871,7871],\"valid\"],[[7872,7872],\"mapped\",[7873]],[[7873,7873],\"valid\"],[[7874,7874],\"mapped\",[7875]],[[7875,7875],\"valid\"],[[7876,7876],\"mapped\",[7877]],[[7877,7877],\"valid\"],[[7878,7878],\"mapped\",[7879]],[[7879,7879],\"valid\"],[[7880,7880],\"mapped\",[7881]],[[7881,7881],\"valid\"],[[7882,7882],\"mapped\",[7883]],[[7883,7883],\"valid\"],[[7884,7884],\"mapped\",[7885]],[[7885,7885],\"valid\"],[[7886,7886],\"mapped\",[7887]],[[7887,7887],\"valid\"],[[7888,7888],\"mapped\",[7889]],[[7889,7889],\"valid\"],[[7890,7890],\"mapped\",[7891]],[[7891,7891],\"valid\"],[[7892,7892],\"mapped\",[7893]],[[7893,7893],\"valid\"],[[7894,7894],\"mapped\",[7895]],[[7895,7895],\"valid\"],[[7896,7896],\"mapped\",[7897]],[[7897,7897],\"valid\"],[[7898,7898],\"mapped\",[7899]],[[7899,7899],\"valid\"],[[7900,7900],\"mapped\",[7901]],[[7901,7901],\"valid\"],[[7902,7902],\"mapped\",[7903]],[[7903,7903],\"valid\"],[[7904,7904],\"mapped\",[7905]],[[7905,7905],\"valid\"],[[7906,7906],\"mapped\",[7907]],[[7907,7907],\"valid\"],[[7908,7908],\"mapped\",[7909]],[[7909,7909],\"valid\"],[[7910,7910],\"mapped\",[7911]],[[7911,7911],\"valid\"],[[7912,7912],\"mapped\",[7913]],[[7913,7913],\"valid\"],[[7914,7914],\"mapped\",[7915]],[[7915,7915],\"valid\"],[[7916,7916],\"mapped\",[7917]],[[7917,7917],\"valid\"],[[7918,7918],\"mapped\",[7919]],[[7919,7919],\"valid\"],[[7920,7920],\"mapped\",[7921]],[[7921,7921],\"valid\"],[[7922,7922],\"mapped\",[7923]],[[7923,7923],\"valid\"],[[7924,7924],\"mapped\",[7925]],[[7925,7925],\"valid\"],[[7926,7926],\"mapped\",[7927]],[[7927,7927],\"valid\"],[[7928,7928],\"mapped\",[7929]],[[7929,7929],\"valid\"],[[7930,7930],\"mapped\",[7931]],[[7931,7931],\"valid\"],[[7932,7932],\"mapped\",[7933]],[[7933,7933],\"valid\"],[[7934,7934],\"mapped\",[7935]],[[7935,7935],\"valid\"],[[7936,7943],\"valid\"],[[7944,7944],\"mapped\",[7936]],[[7945,7945],\"mapped\",[7937]],[[7946,7946],\"mapped\",[7938]],[[7947,7947],\"mapped\",[7939]],[[7948,7948],\"mapped\",[7940]],[[7949,7949],\"mapped\",[7941]],[[7950,7950],\"mapped\",[7942]],[[7951,7951],\"mapped\",[7943]],[[7952,7957],\"valid\"],[[7958,7959],\"disallowed\"],[[7960,7960],\"mapped\",[7952]],[[7961,7961],\"mapped\",[7953]],[[7962,7962],\"mapped\",[7954]],[[7963,7963],\"mapped\",[7955]],[[7964,7964],\"mapped\",[7956]],[[7965,7965],\"mapped\",[7957]],[[7966,7967],\"disallowed\"],[[7968,7975],\"valid\"],[[7976,7976],\"mapped\",[7968]],[[7977,7977],\"mapped\",[7969]],[[7978,7978],\"mapped\",[7970]],[[7979,7979],\"mapped\",[7971]],[[7980,7980],\"mapped\",[7972]],[[7981,7981],\"mapped\",[7973]],[[7982,7982],\"mapped\",[7974]],[[7983,7983],\"mapped\",[7975]],[[7984,7991],\"valid\"],[[7992,7992],\"mapped\",[7984]],[[7993,7993],\"mapped\",[7985]],[[7994,7994],\"mapped\",[7986]],[[7995,7995],\"mapped\",[7987]],[[7996,7996],\"mapped\",[7988]],[[7997,7997],\"mapped\",[7989]],[[7998,7998],\"mapped\",[7990]],[[7999,7999],\"mapped\",[7991]],[[8000,8005],\"valid\"],[[8006,8007],\"disallowed\"],[[8008,8008],\"mapped\",[8000]],[[8009,8009],\"mapped\",[8001]],[[8010,8010],\"mapped\",[8002]],[[8011,8011],\"mapped\",[8003]],[[8012,8012],\"mapped\",[8004]],[[8013,8013],\"mapped\",[8005]],[[8014,8015],\"disallowed\"],[[8016,8023],\"valid\"],[[8024,8024],\"disallowed\"],[[8025,8025],\"mapped\",[8017]],[[8026,8026],\"disallowed\"],[[8027,8027],\"mapped\",[8019]],[[8028,8028],\"disallowed\"],[[8029,8029],\"mapped\",[8021]],[[8030,8030],\"disallowed\"],[[8031,8031],\"mapped\",[8023]],[[8032,8039],\"valid\"],[[8040,8040],\"mapped\",[8032]],[[8041,8041],\"mapped\",[8033]],[[8042,8042],\"mapped\",[8034]],[[8043,8043],\"mapped\",[8035]],[[8044,8044],\"mapped\",[8036]],[[8045,8045],\"mapped\",[8037]],[[8046,8046],\"mapped\",[8038]],[[8047,8047],\"mapped\",[8039]],[[8048,8048],\"valid\"],[[8049,8049],\"mapped\",[940]],[[8050,8050],\"valid\"],[[8051,8051],\"mapped\",[941]],[[8052,8052],\"valid\"],[[8053,8053],\"mapped\",[942]],[[8054,8054],\"valid\"],[[8055,8055],\"mapped\",[943]],[[8056,8056],\"valid\"],[[8057,8057],\"mapped\",[972]],[[8058,8058],\"valid\"],[[8059,8059],\"mapped\",[973]],[[8060,8060],\"valid\"],[[8061,8061],\"mapped\",[974]],[[8062,8063],\"disallowed\"],[[8064,8064],\"mapped\",[7936,953]],[[8065,8065],\"mapped\",[7937,953]],[[8066,8066],\"mapped\",[7938,953]],[[8067,8067],\"mapped\",[7939,953]],[[8068,8068],\"mapped\",[7940,953]],[[8069,8069],\"mapped\",[7941,953]],[[8070,8070],\"mapped\",[7942,953]],[[8071,8071],\"mapped\",[7943,953]],[[8072,8072],\"mapped\",[7936,953]],[[8073,8073],\"mapped\",[7937,953]],[[8074,8074],\"mapped\",[7938,953]],[[8075,8075],\"mapped\",[7939,953]],[[8076,8076],\"mapped\",[7940,953]],[[8077,8077],\"mapped\",[7941,953]],[[8078,8078],\"mapped\",[7942,953]],[[8079,8079],\"mapped\",[7943,953]],[[8080,8080],\"mapped\",[7968,953]],[[8081,8081],\"mapped\",[7969,953]],[[8082,8082],\"mapped\",[7970,953]],[[8083,8083],\"mapped\",[7971,953]],[[8084,8084],\"mapped\",[7972,953]],[[8085,8085],\"mapped\",[7973,953]],[[8086,8086],\"mapped\",[7974,953]],[[8087,8087],\"mapped\",[7975,953]],[[8088,8088],\"mapped\",[7968,953]],[[8089,8089],\"mapped\",[7969,953]],[[8090,8090],\"mapped\",[7970,953]],[[8091,8091],\"mapped\",[7971,953]],[[8092,8092],\"mapped\",[7972,953]],[[8093,8093],\"mapped\",[7973,953]],[[8094,8094],\"mapped\",[7974,953]],[[8095,8095],\"mapped\",[7975,953]],[[8096,8096],\"mapped\",[8032,953]],[[8097,8097],\"mapped\",[8033,953]],[[8098,8098],\"mapped\",[8034,953]],[[8099,8099],\"mapped\",[8035,953]],[[8100,8100],\"mapped\",[8036,953]],[[8101,8101],\"mapped\",[8037,953]],[[8102,8102],\"mapped\",[8038,953]],[[8103,8103],\"mapped\",[8039,953]],[[8104,8104],\"mapped\",[8032,953]],[[8105,8105],\"mapped\",[8033,953]],[[8106,8106],\"mapped\",[8034,953]],[[8107,8107],\"mapped\",[8035,953]],[[8108,8108],\"mapped\",[8036,953]],[[8109,8109],\"mapped\",[8037,953]],[[8110,8110],\"mapped\",[8038,953]],[[8111,8111],\"mapped\",[8039,953]],[[8112,8113],\"valid\"],[[8114,8114],\"mapped\",[8048,953]],[[8115,8115],\"mapped\",[945,953]],[[8116,8116],\"mapped\",[940,953]],[[8117,8117],\"disallowed\"],[[8118,8118],\"valid\"],[[8119,8119],\"mapped\",[8118,953]],[[8120,8120],\"mapped\",[8112]],[[8121,8121],\"mapped\",[8113]],[[8122,8122],\"mapped\",[8048]],[[8123,8123],\"mapped\",[940]],[[8124,8124],\"mapped\",[945,953]],[[8125,8125],\"disallowed_STD3_mapped\",[32,787]],[[8126,8126],\"mapped\",[953]],[[8127,8127],\"disallowed_STD3_mapped\",[32,787]],[[8128,8128],\"disallowed_STD3_mapped\",[32,834]],[[8129,8129],\"disallowed_STD3_mapped\",[32,776,834]],[[8130,8130],\"mapped\",[8052,953]],[[8131,8131],\"mapped\",[951,953]],[[8132,8132],\"mapped\",[942,953]],[[8133,8133],\"disallowed\"],[[8134,8134],\"valid\"],[[8135,8135],\"mapped\",[8134,953]],[[8136,8136],\"mapped\",[8050]],[[8137,8137],\"mapped\",[941]],[[8138,8138],\"mapped\",[8052]],[[8139,8139],\"mapped\",[942]],[[8140,8140],\"mapped\",[951,953]],[[8141,8141],\"disallowed_STD3_mapped\",[32,787,768]],[[8142,8142],\"disallowed_STD3_mapped\",[32,787,769]],[[8143,8143],\"disallowed_STD3_mapped\",[32,787,834]],[[8144,8146],\"valid\"],[[8147,8147],\"mapped\",[912]],[[8148,8149],\"disallowed\"],[[8150,8151],\"valid\"],[[8152,8152],\"mapped\",[8144]],[[8153,8153],\"mapped\",[8145]],[[8154,8154],\"mapped\",[8054]],[[8155,8155],\"mapped\",[943]],[[8156,8156],\"disallowed\"],[[8157,8157],\"disallowed_STD3_mapped\",[32,788,768]],[[8158,8158],\"disallowed_STD3_mapped\",[32,788,769]],[[8159,8159],\"disallowed_STD3_mapped\",[32,788,834]],[[8160,8162],\"valid\"],[[8163,8163],\"mapped\",[944]],[[8164,8167],\"valid\"],[[8168,8168],\"mapped\",[8160]],[[8169,8169],\"mapped\",[8161]],[[8170,8170],\"mapped\",[8058]],[[8171,8171],\"mapped\",[973]],[[8172,8172],\"mapped\",[8165]],[[8173,8173],\"disallowed_STD3_mapped\",[32,776,768]],[[8174,8174],\"disallowed_STD3_mapped\",[32,776,769]],[[8175,8175],\"disallowed_STD3_mapped\",[96]],[[8176,8177],\"disallowed\"],[[8178,8178],\"mapped\",[8060,953]],[[8179,8179],\"mapped\",[969,953]],[[8180,8180],\"mapped\",[974,953]],[[8181,8181],\"disallowed\"],[[8182,8182],\"valid\"],[[8183,8183],\"mapped\",[8182,953]],[[8184,8184],\"mapped\",[8056]],[[8185,8185],\"mapped\",[972]],[[8186,8186],\"mapped\",[8060]],[[8187,8187],\"mapped\",[974]],[[8188,8188],\"mapped\",[969,953]],[[8189,8189],\"disallowed_STD3_mapped\",[32,769]],[[8190,8190],\"disallowed_STD3_mapped\",[32,788]],[[8191,8191],\"disallowed\"],[[8192,8202],\"disallowed_STD3_mapped\",[32]],[[8203,8203],\"ignored\"],[[8204,8205],\"deviation\",[]],[[8206,8207],\"disallowed\"],[[8208,8208],\"valid\",[],\"NV8\"],[[8209,8209],\"mapped\",[8208]],[[8210,8214],\"valid\",[],\"NV8\"],[[8215,8215],\"disallowed_STD3_mapped\",[32,819]],[[8216,8227],\"valid\",[],\"NV8\"],[[8228,8230],\"disallowed\"],[[8231,8231],\"valid\",[],\"NV8\"],[[8232,8238],\"disallowed\"],[[8239,8239],\"disallowed_STD3_mapped\",[32]],[[8240,8242],\"valid\",[],\"NV8\"],[[8243,8243],\"mapped\",[8242,8242]],[[8244,8244],\"mapped\",[8242,8242,8242]],[[8245,8245],\"valid\",[],\"NV8\"],[[8246,8246],\"mapped\",[8245,8245]],[[8247,8247],\"mapped\",[8245,8245,8245]],[[8248,8251],\"valid\",[],\"NV8\"],[[8252,8252],\"disallowed_STD3_mapped\",[33,33]],[[8253,8253],\"valid\",[],\"NV8\"],[[8254,8254],\"disallowed_STD3_mapped\",[32,773]],[[8255,8262],\"valid\",[],\"NV8\"],[[8263,8263],\"disallowed_STD3_mapped\",[63,63]],[[8264,8264],\"disallowed_STD3_mapped\",[63,33]],[[8265,8265],\"disallowed_STD3_mapped\",[33,63]],[[8266,8269],\"valid\",[],\"NV8\"],[[8270,8274],\"valid\",[],\"NV8\"],[[8275,8276],\"valid\",[],\"NV8\"],[[8277,8278],\"valid\",[],\"NV8\"],[[8279,8279],\"mapped\",[8242,8242,8242,8242]],[[8280,8286],\"valid\",[],\"NV8\"],[[8287,8287],\"disallowed_STD3_mapped\",[32]],[[8288,8288],\"ignored\"],[[8289,8291],\"disallowed\"],[[8292,8292],\"ignored\"],[[8293,8293],\"disallowed\"],[[8294,8297],\"disallowed\"],[[8298,8303],\"disallowed\"],[[8304,8304],\"mapped\",[48]],[[8305,8305],\"mapped\",[105]],[[8306,8307],\"disallowed\"],[[8308,8308],\"mapped\",[52]],[[8309,8309],\"mapped\",[53]],[[8310,8310],\"mapped\",[54]],[[8311,8311],\"mapped\",[55]],[[8312,8312],\"mapped\",[56]],[[8313,8313],\"mapped\",[57]],[[8314,8314],\"disallowed_STD3_mapped\",[43]],[[8315,8315],\"mapped\",[8722]],[[8316,8316],\"disallowed_STD3_mapped\",[61]],[[8317,8317],\"disallowed_STD3_mapped\",[40]],[[8318,8318],\"disallowed_STD3_mapped\",[41]],[[8319,8319],\"mapped\",[110]],[[8320,8320],\"mapped\",[48]],[[8321,8321],\"mapped\",[49]],[[8322,8322],\"mapped\",[50]],[[8323,8323],\"mapped\",[51]],[[8324,8324],\"mapped\",[52]],[[8325,8325],\"mapped\",[53]],[[8326,8326],\"mapped\",[54]],[[8327,8327],\"mapped\",[55]],[[8328,8328],\"mapped\",[56]],[[8329,8329],\"mapped\",[57]],[[8330,8330],\"disallowed_STD3_mapped\",[43]],[[8331,8331],\"mapped\",[8722]],[[8332,8332],\"disallowed_STD3_mapped\",[61]],[[8333,8333],\"disallowed_STD3_mapped\",[40]],[[8334,8334],\"disallowed_STD3_mapped\",[41]],[[8335,8335],\"disallowed\"],[[8336,8336],\"mapped\",[97]],[[8337,8337],\"mapped\",[101]],[[8338,8338],\"mapped\",[111]],[[8339,8339],\"mapped\",[120]],[[8340,8340],\"mapped\",[601]],[[8341,8341],\"mapped\",[104]],[[8342,8342],\"mapped\",[107]],[[8343,8343],\"mapped\",[108]],[[8344,8344],\"mapped\",[109]],[[8345,8345],\"mapped\",[110]],[[8346,8346],\"mapped\",[112]],[[8347,8347],\"mapped\",[115]],[[8348,8348],\"mapped\",[116]],[[8349,8351],\"disallowed\"],[[8352,8359],\"valid\",[],\"NV8\"],[[8360,8360],\"mapped\",[114,115]],[[8361,8362],\"valid\",[],\"NV8\"],[[8363,8363],\"valid\",[],\"NV8\"],[[8364,8364],\"valid\",[],\"NV8\"],[[8365,8367],\"valid\",[],\"NV8\"],[[8368,8369],\"valid\",[],\"NV8\"],[[8370,8373],\"valid\",[],\"NV8\"],[[8374,8376],\"valid\",[],\"NV8\"],[[8377,8377],\"valid\",[],\"NV8\"],[[8378,8378],\"valid\",[],\"NV8\"],[[8379,8381],\"valid\",[],\"NV8\"],[[8382,8382],\"valid\",[],\"NV8\"],[[8383,8399],\"disallowed\"],[[8400,8417],\"valid\",[],\"NV8\"],[[8418,8419],\"valid\",[],\"NV8\"],[[8420,8426],\"valid\",[],\"NV8\"],[[8427,8427],\"valid\",[],\"NV8\"],[[8428,8431],\"valid\",[],\"NV8\"],[[8432,8432],\"valid\",[],\"NV8\"],[[8433,8447],\"disallowed\"],[[8448,8448],\"disallowed_STD3_mapped\",[97,47,99]],[[8449,8449],\"disallowed_STD3_mapped\",[97,47,115]],[[8450,8450],\"mapped\",[99]],[[8451,8451],\"mapped\",[176,99]],[[8452,8452],\"valid\",[],\"NV8\"],[[8453,8453],\"disallowed_STD3_mapped\",[99,47,111]],[[8454,8454],\"disallowed_STD3_mapped\",[99,47,117]],[[8455,8455],\"mapped\",[603]],[[8456,8456],\"valid\",[],\"NV8\"],[[8457,8457],\"mapped\",[176,102]],[[8458,8458],\"mapped\",[103]],[[8459,8462],\"mapped\",[104]],[[8463,8463],\"mapped\",[295]],[[8464,8465],\"mapped\",[105]],[[8466,8467],\"mapped\",[108]],[[8468,8468],\"valid\",[],\"NV8\"],[[8469,8469],\"mapped\",[110]],[[8470,8470],\"mapped\",[110,111]],[[8471,8472],\"valid\",[],\"NV8\"],[[8473,8473],\"mapped\",[112]],[[8474,8474],\"mapped\",[113]],[[8475,8477],\"mapped\",[114]],[[8478,8479],\"valid\",[],\"NV8\"],[[8480,8480],\"mapped\",[115,109]],[[8481,8481],\"mapped\",[116,101,108]],[[8482,8482],\"mapped\",[116,109]],[[8483,8483],\"valid\",[],\"NV8\"],[[8484,8484],\"mapped\",[122]],[[8485,8485],\"valid\",[],\"NV8\"],[[8486,8486],\"mapped\",[969]],[[8487,8487],\"valid\",[],\"NV8\"],[[8488,8488],\"mapped\",[122]],[[8489,8489],\"valid\",[],\"NV8\"],[[8490,8490],\"mapped\",[107]],[[8491,8491],\"mapped\",[229]],[[8492,8492],\"mapped\",[98]],[[8493,8493],\"mapped\",[99]],[[8494,8494],\"valid\",[],\"NV8\"],[[8495,8496],\"mapped\",[101]],[[8497,8497],\"mapped\",[102]],[[8498,8498],\"disallowed\"],[[8499,8499],\"mapped\",[109]],[[8500,8500],\"mapped\",[111]],[[8501,8501],\"mapped\",[1488]],[[8502,8502],\"mapped\",[1489]],[[8503,8503],\"mapped\",[1490]],[[8504,8504],\"mapped\",[1491]],[[8505,8505],\"mapped\",[105]],[[8506,8506],\"valid\",[],\"NV8\"],[[8507,8507],\"mapped\",[102,97,120]],[[8508,8508],\"mapped\",[960]],[[8509,8510],\"mapped\",[947]],[[8511,8511],\"mapped\",[960]],[[8512,8512],\"mapped\",[8721]],[[8513,8516],\"valid\",[],\"NV8\"],[[8517,8518],\"mapped\",[100]],[[8519,8519],\"mapped\",[101]],[[8520,8520],\"mapped\",[105]],[[8521,8521],\"mapped\",[106]],[[8522,8523],\"valid\",[],\"NV8\"],[[8524,8524],\"valid\",[],\"NV8\"],[[8525,8525],\"valid\",[],\"NV8\"],[[8526,8526],\"valid\"],[[8527,8527],\"valid\",[],\"NV8\"],[[8528,8528],\"mapped\",[49,8260,55]],[[8529,8529],\"mapped\",[49,8260,57]],[[8530,8530],\"mapped\",[49,8260,49,48]],[[8531,8531],\"mapped\",[49,8260,51]],[[8532,8532],\"mapped\",[50,8260,51]],[[8533,8533],\"mapped\",[49,8260,53]],[[8534,8534],\"mapped\",[50,8260,53]],[[8535,8535],\"mapped\",[51,8260,53]],[[8536,8536],\"mapped\",[52,8260,53]],[[8537,8537],\"mapped\",[49,8260,54]],[[8538,8538],\"mapped\",[53,8260,54]],[[8539,8539],\"mapped\",[49,8260,56]],[[8540,8540],\"mapped\",[51,8260,56]],[[8541,8541],\"mapped\",[53,8260,56]],[[8542,8542],\"mapped\",[55,8260,56]],[[8543,8543],\"mapped\",[49,8260]],[[8544,8544],\"mapped\",[105]],[[8545,8545],\"mapped\",[105,105]],[[8546,8546],\"mapped\",[105,105,105]],[[8547,8547],\"mapped\",[105,118]],[[8548,8548],\"mapped\",[118]],[[8549,8549],\"mapped\",[118,105]],[[8550,8550],\"mapped\",[118,105,105]],[[8551,8551],\"mapped\",[118,105,105,105]],[[8552,8552],\"mapped\",[105,120]],[[8553,8553],\"mapped\",[120]],[[8554,8554],\"mapped\",[120,105]],[[8555,8555],\"mapped\",[120,105,105]],[[8556,8556],\"mapped\",[108]],[[8557,8557],\"mapped\",[99]],[[8558,8558],\"mapped\",[100]],[[8559,8559],\"mapped\",[109]],[[8560,8560],\"mapped\",[105]],[[8561,8561],\"mapped\",[105,105]],[[8562,8562],\"mapped\",[105,105,105]],[[8563,8563],\"mapped\",[105,118]],[[8564,8564],\"mapped\",[118]],[[8565,8565],\"mapped\",[118,105]],[[8566,8566],\"mapped\",[118,105,105]],[[8567,8567],\"mapped\",[118,105,105,105]],[[8568,8568],\"mapped\",[105,120]],[[8569,8569],\"mapped\",[120]],[[8570,8570],\"mapped\",[120,105]],[[8571,8571],\"mapped\",[120,105,105]],[[8572,8572],\"mapped\",[108]],[[8573,8573],\"mapped\",[99]],[[8574,8574],\"mapped\",[100]],[[8575,8575],\"mapped\",[109]],[[8576,8578],\"valid\",[],\"NV8\"],[[8579,8579],\"disallowed\"],[[8580,8580],\"valid\"],[[8581,8584],\"valid\",[],\"NV8\"],[[8585,8585],\"mapped\",[48,8260,51]],[[8586,8587],\"valid\",[],\"NV8\"],[[8588,8591],\"disallowed\"],[[8592,8682],\"valid\",[],\"NV8\"],[[8683,8691],\"valid\",[],\"NV8\"],[[8692,8703],\"valid\",[],\"NV8\"],[[8704,8747],\"valid\",[],\"NV8\"],[[8748,8748],\"mapped\",[8747,8747]],[[8749,8749],\"mapped\",[8747,8747,8747]],[[8750,8750],\"valid\",[],\"NV8\"],[[8751,8751],\"mapped\",[8750,8750]],[[8752,8752],\"mapped\",[8750,8750,8750]],[[8753,8799],\"valid\",[],\"NV8\"],[[8800,8800],\"disallowed_STD3_valid\"],[[8801,8813],\"valid\",[],\"NV8\"],[[8814,8815],\"disallowed_STD3_valid\"],[[8816,8945],\"valid\",[],\"NV8\"],[[8946,8959],\"valid\",[],\"NV8\"],[[8960,8960],\"valid\",[],\"NV8\"],[[8961,8961],\"valid\",[],\"NV8\"],[[8962,9000],\"valid\",[],\"NV8\"],[[9001,9001],\"mapped\",[12296]],[[9002,9002],\"mapped\",[12297]],[[9003,9082],\"valid\",[],\"NV8\"],[[9083,9083],\"valid\",[],\"NV8\"],[[9084,9084],\"valid\",[],\"NV8\"],[[9085,9114],\"valid\",[],\"NV8\"],[[9115,9166],\"valid\",[],\"NV8\"],[[9167,9168],\"valid\",[],\"NV8\"],[[9169,9179],\"valid\",[],\"NV8\"],[[9180,9191],\"valid\",[],\"NV8\"],[[9192,9192],\"valid\",[],\"NV8\"],[[9193,9203],\"valid\",[],\"NV8\"],[[9204,9210],\"valid\",[],\"NV8\"],[[9211,9215],\"disallowed\"],[[9216,9252],\"valid\",[],\"NV8\"],[[9253,9254],\"valid\",[],\"NV8\"],[[9255,9279],\"disallowed\"],[[9280,9290],\"valid\",[],\"NV8\"],[[9291,9311],\"disallowed\"],[[9312,9312],\"mapped\",[49]],[[9313,9313],\"mapped\",[50]],[[9314,9314],\"mapped\",[51]],[[9315,9315],\"mapped\",[52]],[[9316,9316],\"mapped\",[53]],[[9317,9317],\"mapped\",[54]],[[9318,9318],\"mapped\",[55]],[[9319,9319],\"mapped\",[56]],[[9320,9320],\"mapped\",[57]],[[9321,9321],\"mapped\",[49,48]],[[9322,9322],\"mapped\",[49,49]],[[9323,9323],\"mapped\",[49,50]],[[9324,9324],\"mapped\",[49,51]],[[9325,9325],\"mapped\",[49,52]],[[9326,9326],\"mapped\",[49,53]],[[9327,9327],\"mapped\",[49,54]],[[9328,9328],\"mapped\",[49,55]],[[9329,9329],\"mapped\",[49,56]],[[9330,9330],\"mapped\",[49,57]],[[9331,9331],\"mapped\",[50,48]],[[9332,9332],\"disallowed_STD3_mapped\",[40,49,41]],[[9333,9333],\"disallowed_STD3_mapped\",[40,50,41]],[[9334,9334],\"disallowed_STD3_mapped\",[40,51,41]],[[9335,9335],\"disallowed_STD3_mapped\",[40,52,41]],[[9336,9336],\"disallowed_STD3_mapped\",[40,53,41]],[[9337,9337],\"disallowed_STD3_mapped\",[40,54,41]],[[9338,9338],\"disallowed_STD3_mapped\",[40,55,41]],[[9339,9339],\"disallowed_STD3_mapped\",[40,56,41]],[[9340,9340],\"disallowed_STD3_mapped\",[40,57,41]],[[9341,9341],\"disallowed_STD3_mapped\",[40,49,48,41]],[[9342,9342],\"disallowed_STD3_mapped\",[40,49,49,41]],[[9343,9343],\"disallowed_STD3_mapped\",[40,49,50,41]],[[9344,9344],\"disallowed_STD3_mapped\",[40,49,51,41]],[[9345,9345],\"disallowed_STD3_mapped\",[40,49,52,41]],[[9346,9346],\"disallowed_STD3_mapped\",[40,49,53,41]],[[9347,9347],\"disallowed_STD3_mapped\",[40,49,54,41]],[[9348,9348],\"disallowed_STD3_mapped\",[40,49,55,41]],[[9349,9349],\"disallowed_STD3_mapped\",[40,49,56,41]],[[9350,9350],\"disallowed_STD3_mapped\",[40,49,57,41]],[[9351,9351],\"disallowed_STD3_mapped\",[40,50,48,41]],[[9352,9371],\"disallowed\"],[[9372,9372],\"disallowed_STD3_mapped\",[40,97,41]],[[9373,9373],\"disallowed_STD3_mapped\",[40,98,41]],[[9374,9374],\"disallowed_STD3_mapped\",[40,99,41]],[[9375,9375],\"disallowed_STD3_mapped\",[40,100,41]],[[9376,9376],\"disallowed_STD3_mapped\",[40,101,41]],[[9377,9377],\"disallowed_STD3_mapped\",[40,102,41]],[[9378,9378],\"disallowed_STD3_mapped\",[40,103,41]],[[9379,9379],\"disallowed_STD3_mapped\",[40,104,41]],[[9380,9380],\"disallowed_STD3_mapped\",[40,105,41]],[[9381,9381],\"disallowed_STD3_mapped\",[40,106,41]],[[9382,9382],\"disallowed_STD3_mapped\",[40,107,41]],[[9383,9383],\"disallowed_STD3_mapped\",[40,108,41]],[[9384,9384],\"disallowed_STD3_mapped\",[40,109,41]],[[9385,9385],\"disallowed_STD3_mapped\",[40,110,41]],[[9386,9386],\"disallowed_STD3_mapped\",[40,111,41]],[[9387,9387],\"disallowed_STD3_mapped\",[40,112,41]],[[9388,9388],\"disallowed_STD3_mapped\",[40,113,41]],[[9389,9389],\"disallowed_STD3_mapped\",[40,114,41]],[[9390,9390],\"disallowed_STD3_mapped\",[40,115,41]],[[9391,9391],\"disallowed_STD3_mapped\",[40,116,41]],[[9392,9392],\"disallowed_STD3_mapped\",[40,117,41]],[[9393,9393],\"disallowed_STD3_mapped\",[40,118,41]],[[9394,9394],\"disallowed_STD3_mapped\",[40,119,41]],[[9395,9395],\"disallowed_STD3_mapped\",[40,120,41]],[[9396,9396],\"disallowed_STD3_mapped\",[40,121,41]],[[9397,9397],\"disallowed_STD3_mapped\",[40,122,41]],[[9398,9398],\"mapped\",[97]],[[9399,9399],\"mapped\",[98]],[[9400,9400],\"mapped\",[99]],[[9401,9401],\"mapped\",[100]],[[9402,9402],\"mapped\",[101]],[[9403,9403],\"mapped\",[102]],[[9404,9404],\"mapped\",[103]],[[9405,9405],\"mapped\",[104]],[[9406,9406],\"mapped\",[105]],[[9407,9407],\"mapped\",[106]],[[9408,9408],\"mapped\",[107]],[[9409,9409],\"mapped\",[108]],[[9410,9410],\"mapped\",[109]],[[9411,9411],\"mapped\",[110]],[[9412,9412],\"mapped\",[111]],[[9413,9413],\"mapped\",[112]],[[9414,9414],\"mapped\",[113]],[[9415,9415],\"mapped\",[114]],[[9416,9416],\"mapped\",[115]],[[9417,9417],\"mapped\",[116]],[[9418,9418],\"mapped\",[117]],[[9419,9419],\"mapped\",[118]],[[9420,9420],\"mapped\",[119]],[[9421,9421],\"mapped\",[120]],[[9422,9422],\"mapped\",[121]],[[9423,9423],\"mapped\",[122]],[[9424,9424],\"mapped\",[97]],[[9425,9425],\"mapped\",[98]],[[9426,9426],\"mapped\",[99]],[[9427,9427],\"mapped\",[100]],[[9428,9428],\"mapped\",[101]],[[9429,9429],\"mapped\",[102]],[[9430,9430],\"mapped\",[103]],[[9431,9431],\"mapped\",[104]],[[9432,9432],\"mapped\",[105]],[[9433,9433],\"mapped\",[106]],[[9434,9434],\"mapped\",[107]],[[9435,9435],\"mapped\",[108]],[[9436,9436],\"mapped\",[109]],[[9437,9437],\"mapped\",[110]],[[9438,9438],\"mapped\",[111]],[[9439,9439],\"mapped\",[112]],[[9440,9440],\"mapped\",[113]],[[9441,9441],\"mapped\",[114]],[[9442,9442],\"mapped\",[115]],[[9443,9443],\"mapped\",[116]],[[9444,9444],\"mapped\",[117]],[[9445,9445],\"mapped\",[118]],[[9446,9446],\"mapped\",[119]],[[9447,9447],\"mapped\",[120]],[[9448,9448],\"mapped\",[121]],[[9449,9449],\"mapped\",[122]],[[9450,9450],\"mapped\",[48]],[[9451,9470],\"valid\",[],\"NV8\"],[[9471,9471],\"valid\",[],\"NV8\"],[[9472,9621],\"valid\",[],\"NV8\"],[[9622,9631],\"valid\",[],\"NV8\"],[[9632,9711],\"valid\",[],\"NV8\"],[[9712,9719],\"valid\",[],\"NV8\"],[[9720,9727],\"valid\",[],\"NV8\"],[[9728,9747],\"valid\",[],\"NV8\"],[[9748,9749],\"valid\",[],\"NV8\"],[[9750,9751],\"valid\",[],\"NV8\"],[[9752,9752],\"valid\",[],\"NV8\"],[[9753,9753],\"valid\",[],\"NV8\"],[[9754,9839],\"valid\",[],\"NV8\"],[[9840,9841],\"valid\",[],\"NV8\"],[[9842,9853],\"valid\",[],\"NV8\"],[[9854,9855],\"valid\",[],\"NV8\"],[[9856,9865],\"valid\",[],\"NV8\"],[[9866,9873],\"valid\",[],\"NV8\"],[[9874,9884],\"valid\",[],\"NV8\"],[[9885,9885],\"valid\",[],\"NV8\"],[[9886,9887],\"valid\",[],\"NV8\"],[[9888,9889],\"valid\",[],\"NV8\"],[[9890,9905],\"valid\",[],\"NV8\"],[[9906,9906],\"valid\",[],\"NV8\"],[[9907,9916],\"valid\",[],\"NV8\"],[[9917,9919],\"valid\",[],\"NV8\"],[[9920,9923],\"valid\",[],\"NV8\"],[[9924,9933],\"valid\",[],\"NV8\"],[[9934,9934],\"valid\",[],\"NV8\"],[[9935,9953],\"valid\",[],\"NV8\"],[[9954,9954],\"valid\",[],\"NV8\"],[[9955,9955],\"valid\",[],\"NV8\"],[[9956,9959],\"valid\",[],\"NV8\"],[[9960,9983],\"valid\",[],\"NV8\"],[[9984,9984],\"valid\",[],\"NV8\"],[[9985,9988],\"valid\",[],\"NV8\"],[[9989,9989],\"valid\",[],\"NV8\"],[[9990,9993],\"valid\",[],\"NV8\"],[[9994,9995],\"valid\",[],\"NV8\"],[[9996,10023],\"valid\",[],\"NV8\"],[[10024,10024],\"valid\",[],\"NV8\"],[[10025,10059],\"valid\",[],\"NV8\"],[[10060,10060],\"valid\",[],\"NV8\"],[[10061,10061],\"valid\",[],\"NV8\"],[[10062,10062],\"valid\",[],\"NV8\"],[[10063,10066],\"valid\",[],\"NV8\"],[[10067,10069],\"valid\",[],\"NV8\"],[[10070,10070],\"valid\",[],\"NV8\"],[[10071,10071],\"valid\",[],\"NV8\"],[[10072,10078],\"valid\",[],\"NV8\"],[[10079,10080],\"valid\",[],\"NV8\"],[[10081,10087],\"valid\",[],\"NV8\"],[[10088,10101],\"valid\",[],\"NV8\"],[[10102,10132],\"valid\",[],\"NV8\"],[[10133,10135],\"valid\",[],\"NV8\"],[[10136,10159],\"valid\",[],\"NV8\"],[[10160,10160],\"valid\",[],\"NV8\"],[[10161,10174],\"valid\",[],\"NV8\"],[[10175,10175],\"valid\",[],\"NV8\"],[[10176,10182],\"valid\",[],\"NV8\"],[[10183,10186],\"valid\",[],\"NV8\"],[[10187,10187],\"valid\",[],\"NV8\"],[[10188,10188],\"valid\",[],\"NV8\"],[[10189,10189],\"valid\",[],\"NV8\"],[[10190,10191],\"valid\",[],\"NV8\"],[[10192,10219],\"valid\",[],\"NV8\"],[[10220,10223],\"valid\",[],\"NV8\"],[[10224,10239],\"valid\",[],\"NV8\"],[[10240,10495],\"valid\",[],\"NV8\"],[[10496,10763],\"valid\",[],\"NV8\"],[[10764,10764],\"mapped\",[8747,8747,8747,8747]],[[10765,10867],\"valid\",[],\"NV8\"],[[10868,10868],\"disallowed_STD3_mapped\",[58,58,61]],[[10869,10869],\"disallowed_STD3_mapped\",[61,61]],[[10870,10870],\"disallowed_STD3_mapped\",[61,61,61]],[[10871,10971],\"valid\",[],\"NV8\"],[[10972,10972],\"mapped\",[10973,824]],[[10973,11007],\"valid\",[],\"NV8\"],[[11008,11021],\"valid\",[],\"NV8\"],[[11022,11027],\"valid\",[],\"NV8\"],[[11028,11034],\"valid\",[],\"NV8\"],[[11035,11039],\"valid\",[],\"NV8\"],[[11040,11043],\"valid\",[],\"NV8\"],[[11044,11084],\"valid\",[],\"NV8\"],[[11085,11087],\"valid\",[],\"NV8\"],[[11088,11092],\"valid\",[],\"NV8\"],[[11093,11097],\"valid\",[],\"NV8\"],[[11098,11123],\"valid\",[],\"NV8\"],[[11124,11125],\"disallowed\"],[[11126,11157],\"valid\",[],\"NV8\"],[[11158,11159],\"disallowed\"],[[11160,11193],\"valid\",[],\"NV8\"],[[11194,11196],\"disallowed\"],[[11197,11208],\"valid\",[],\"NV8\"],[[11209,11209],\"disallowed\"],[[11210,11217],\"valid\",[],\"NV8\"],[[11218,11243],\"disallowed\"],[[11244,11247],\"valid\",[],\"NV8\"],[[11248,11263],\"disallowed\"],[[11264,11264],\"mapped\",[11312]],[[11265,11265],\"mapped\",[11313]],[[11266,11266],\"mapped\",[11314]],[[11267,11267],\"mapped\",[11315]],[[11268,11268],\"mapped\",[11316]],[[11269,11269],\"mapped\",[11317]],[[11270,11270],\"mapped\",[11318]],[[11271,11271],\"mapped\",[11319]],[[11272,11272],\"mapped\",[11320]],[[11273,11273],\"mapped\",[11321]],[[11274,11274],\"mapped\",[11322]],[[11275,11275],\"mapped\",[11323]],[[11276,11276],\"mapped\",[11324]],[[11277,11277],\"mapped\",[11325]],[[11278,11278],\"mapped\",[11326]],[[11279,11279],\"mapped\",[11327]],[[11280,11280],\"mapped\",[11328]],[[11281,11281],\"mapped\",[11329]],[[11282,11282],\"mapped\",[11330]],[[11283,11283],\"mapped\",[11331]],[[11284,11284],\"mapped\",[11332]],[[11285,11285],\"mapped\",[11333]],[[11286,11286],\"mapped\",[11334]],[[11287,11287],\"mapped\",[11335]],[[11288,11288],\"mapped\",[11336]],[[11289,11289],\"mapped\",[11337]],[[11290,11290],\"mapped\",[11338]],[[11291,11291],\"mapped\",[11339]],[[11292,11292],\"mapped\",[11340]],[[11293,11293],\"mapped\",[11341]],[[11294,11294],\"mapped\",[11342]],[[11295,11295],\"mapped\",[11343]],[[11296,11296],\"mapped\",[11344]],[[11297,11297],\"mapped\",[11345]],[[11298,11298],\"mapped\",[11346]],[[11299,11299],\"mapped\",[11347]],[[11300,11300],\"mapped\",[11348]],[[11301,11301],\"mapped\",[11349]],[[11302,11302],\"mapped\",[11350]],[[11303,11303],\"mapped\",[11351]],[[11304,11304],\"mapped\",[11352]],[[11305,11305],\"mapped\",[11353]],[[11306,11306],\"mapped\",[11354]],[[11307,11307],\"mapped\",[11355]],[[11308,11308],\"mapped\",[11356]],[[11309,11309],\"mapped\",[11357]],[[11310,11310],\"mapped\",[11358]],[[11311,11311],\"disallowed\"],[[11312,11358],\"valid\"],[[11359,11359],\"disallowed\"],[[11360,11360],\"mapped\",[11361]],[[11361,11361],\"valid\"],[[11362,11362],\"mapped\",[619]],[[11363,11363],\"mapped\",[7549]],[[11364,11364],\"mapped\",[637]],[[11365,11366],\"valid\"],[[11367,11367],\"mapped\",[11368]],[[11368,11368],\"valid\"],[[11369,11369],\"mapped\",[11370]],[[11370,11370],\"valid\"],[[11371,11371],\"mapped\",[11372]],[[11372,11372],\"valid\"],[[11373,11373],\"mapped\",[593]],[[11374,11374],\"mapped\",[625]],[[11375,11375],\"mapped\",[592]],[[11376,11376],\"mapped\",[594]],[[11377,11377],\"valid\"],[[11378,11378],\"mapped\",[11379]],[[11379,11379],\"valid\"],[[11380,11380],\"valid\"],[[11381,11381],\"mapped\",[11382]],[[11382,11383],\"valid\"],[[11384,11387],\"valid\"],[[11388,11388],\"mapped\",[106]],[[11389,11389],\"mapped\",[118]],[[11390,11390],\"mapped\",[575]],[[11391,11391],\"mapped\",[576]],[[11392,11392],\"mapped\",[11393]],[[11393,11393],\"valid\"],[[11394,11394],\"mapped\",[11395]],[[11395,11395],\"valid\"],[[11396,11396],\"mapped\",[11397]],[[11397,11397],\"valid\"],[[11398,11398],\"mapped\",[11399]],[[11399,11399],\"valid\"],[[11400,11400],\"mapped\",[11401]],[[11401,11401],\"valid\"],[[11402,11402],\"mapped\",[11403]],[[11403,11403],\"valid\"],[[11404,11404],\"mapped\",[11405]],[[11405,11405],\"valid\"],[[11406,11406],\"mapped\",[11407]],[[11407,11407],\"valid\"],[[11408,11408],\"mapped\",[11409]],[[11409,11409],\"valid\"],[[11410,11410],\"mapped\",[11411]],[[11411,11411],\"valid\"],[[11412,11412],\"mapped\",[11413]],[[11413,11413],\"valid\"],[[11414,11414],\"mapped\",[11415]],[[11415,11415],\"valid\"],[[11416,11416],\"mapped\",[11417]],[[11417,11417],\"valid\"],[[11418,11418],\"mapped\",[11419]],[[11419,11419],\"valid\"],[[11420,11420],\"mapped\",[11421]],[[11421,11421],\"valid\"],[[11422,11422],\"mapped\",[11423]],[[11423,11423],\"valid\"],[[11424,11424],\"mapped\",[11425]],[[11425,11425],\"valid\"],[[11426,11426],\"mapped\",[11427]],[[11427,11427],\"valid\"],[[11428,11428],\"mapped\",[11429]],[[11429,11429],\"valid\"],[[11430,11430],\"mapped\",[11431]],[[11431,11431],\"valid\"],[[11432,11432],\"mapped\",[11433]],[[11433,11433],\"valid\"],[[11434,11434],\"mapped\",[11435]],[[11435,11435],\"valid\"],[[11436,11436],\"mapped\",[11437]],[[11437,11437],\"valid\"],[[11438,11438],\"mapped\",[11439]],[[11439,11439],\"valid\"],[[11440,11440],\"mapped\",[11441]],[[11441,11441],\"valid\"],[[11442,11442],\"mapped\",[11443]],[[11443,11443],\"valid\"],[[11444,11444],\"mapped\",[11445]],[[11445,11445],\"valid\"],[[11446,11446],\"mapped\",[11447]],[[11447,11447],\"valid\"],[[11448,11448],\"mapped\",[11449]],[[11449,11449],\"valid\"],[[11450,11450],\"mapped\",[11451]],[[11451,11451],\"valid\"],[[11452,11452],\"mapped\",[11453]],[[11453,11453],\"valid\"],[[11454,11454],\"mapped\",[11455]],[[11455,11455],\"valid\"],[[11456,11456],\"mapped\",[11457]],[[11457,11457],\"valid\"],[[11458,11458],\"mapped\",[11459]],[[11459,11459],\"valid\"],[[11460,11460],\"mapped\",[11461]],[[11461,11461],\"valid\"],[[11462,11462],\"mapped\",[11463]],[[11463,11463],\"valid\"],[[11464,11464],\"mapped\",[11465]],[[11465,11465],\"valid\"],[[11466,11466],\"mapped\",[11467]],[[11467,11467],\"valid\"],[[11468,11468],\"mapped\",[11469]],[[11469,11469],\"valid\"],[[11470,11470],\"mapped\",[11471]],[[11471,11471],\"valid\"],[[11472,11472],\"mapped\",[11473]],[[11473,11473],\"valid\"],[[11474,11474],\"mapped\",[11475]],[[11475,11475],\"valid\"],[[11476,11476],\"mapped\",[11477]],[[11477,11477],\"valid\"],[[11478,11478],\"mapped\",[11479]],[[11479,11479],\"valid\"],[[11480,11480],\"mapped\",[11481]],[[11481,11481],\"valid\"],[[11482,11482],\"mapped\",[11483]],[[11483,11483],\"valid\"],[[11484,11484],\"mapped\",[11485]],[[11485,11485],\"valid\"],[[11486,11486],\"mapped\",[11487]],[[11487,11487],\"valid\"],[[11488,11488],\"mapped\",[11489]],[[11489,11489],\"valid\"],[[11490,11490],\"mapped\",[11491]],[[11491,11492],\"valid\"],[[11493,11498],\"valid\",[],\"NV8\"],[[11499,11499],\"mapped\",[11500]],[[11500,11500],\"valid\"],[[11501,11501],\"mapped\",[11502]],[[11502,11505],\"valid\"],[[11506,11506],\"mapped\",[11507]],[[11507,11507],\"valid\"],[[11508,11512],\"disallowed\"],[[11513,11519],\"valid\",[],\"NV8\"],[[11520,11557],\"valid\"],[[11558,11558],\"disallowed\"],[[11559,11559],\"valid\"],[[11560,11564],\"disallowed\"],[[11565,11565],\"valid\"],[[11566,11567],\"disallowed\"],[[11568,11621],\"valid\"],[[11622,11623],\"valid\"],[[11624,11630],\"disallowed\"],[[11631,11631],\"mapped\",[11617]],[[11632,11632],\"valid\",[],\"NV8\"],[[11633,11646],\"disallowed\"],[[11647,11647],\"valid\"],[[11648,11670],\"valid\"],[[11671,11679],\"disallowed\"],[[11680,11686],\"valid\"],[[11687,11687],\"disallowed\"],[[11688,11694],\"valid\"],[[11695,11695],\"disallowed\"],[[11696,11702],\"valid\"],[[11703,11703],\"disallowed\"],[[11704,11710],\"valid\"],[[11711,11711],\"disallowed\"],[[11712,11718],\"valid\"],[[11719,11719],\"disallowed\"],[[11720,11726],\"valid\"],[[11727,11727],\"disallowed\"],[[11728,11734],\"valid\"],[[11735,11735],\"disallowed\"],[[11736,11742],\"valid\"],[[11743,11743],\"disallowed\"],[[11744,11775],\"valid\"],[[11776,11799],\"valid\",[],\"NV8\"],[[11800,11803],\"valid\",[],\"NV8\"],[[11804,11805],\"valid\",[],\"NV8\"],[[11806,11822],\"valid\",[],\"NV8\"],[[11823,11823],\"valid\"],[[11824,11824],\"valid\",[],\"NV8\"],[[11825,11825],\"valid\",[],\"NV8\"],[[11826,11835],\"valid\",[],\"NV8\"],[[11836,11842],\"valid\",[],\"NV8\"],[[11843,11903],\"disallowed\"],[[11904,11929],\"valid\",[],\"NV8\"],[[11930,11930],\"disallowed\"],[[11931,11934],\"valid\",[],\"NV8\"],[[11935,11935],\"mapped\",[27597]],[[11936,12018],\"valid\",[],\"NV8\"],[[12019,12019],\"mapped\",[40863]],[[12020,12031],\"disallowed\"],[[12032,12032],\"mapped\",[19968]],[[12033,12033],\"mapped\",[20008]],[[12034,12034],\"mapped\",[20022]],[[12035,12035],\"mapped\",[20031]],[[12036,12036],\"mapped\",[20057]],[[12037,12037],\"mapped\",[20101]],[[12038,12038],\"mapped\",[20108]],[[12039,12039],\"mapped\",[20128]],[[12040,12040],\"mapped\",[20154]],[[12041,12041],\"mapped\",[20799]],[[12042,12042],\"mapped\",[20837]],[[12043,12043],\"mapped\",[20843]],[[12044,12044],\"mapped\",[20866]],[[12045,12045],\"mapped\",[20886]],[[12046,12046],\"mapped\",[20907]],[[12047,12047],\"mapped\",[20960]],[[12048,12048],\"mapped\",[20981]],[[12049,12049],\"mapped\",[20992]],[[12050,12050],\"mapped\",[21147]],[[12051,12051],\"mapped\",[21241]],[[12052,12052],\"mapped\",[21269]],[[12053,12053],\"mapped\",[21274]],[[12054,12054],\"mapped\",[21304]],[[12055,12055],\"mapped\",[21313]],[[12056,12056],\"mapped\",[21340]],[[12057,12057],\"mapped\",[21353]],[[12058,12058],\"mapped\",[21378]],[[12059,12059],\"mapped\",[21430]],[[12060,12060],\"mapped\",[21448]],[[12061,12061],\"mapped\",[21475]],[[12062,12062],\"mapped\",[22231]],[[12063,12063],\"mapped\",[22303]],[[12064,12064],\"mapped\",[22763]],[[12065,12065],\"mapped\",[22786]],[[12066,12066],\"mapped\",[22794]],[[12067,12067],\"mapped\",[22805]],[[12068,12068],\"mapped\",[22823]],[[12069,12069],\"mapped\",[22899]],[[12070,12070],\"mapped\",[23376]],[[12071,12071],\"mapped\",[23424]],[[12072,12072],\"mapped\",[23544]],[[12073,12073],\"mapped\",[23567]],[[12074,12074],\"mapped\",[23586]],[[12075,12075],\"mapped\",[23608]],[[12076,12076],\"mapped\",[23662]],[[12077,12077],\"mapped\",[23665]],[[12078,12078],\"mapped\",[24027]],[[12079,12079],\"mapped\",[24037]],[[12080,12080],\"mapped\",[24049]],[[12081,12081],\"mapped\",[24062]],[[12082,12082],\"mapped\",[24178]],[[12083,12083],\"mapped\",[24186]],[[12084,12084],\"mapped\",[24191]],[[12085,12085],\"mapped\",[24308]],[[12086,12086],\"mapped\",[24318]],[[12087,12087],\"mapped\",[24331]],[[12088,12088],\"mapped\",[24339]],[[12089,12089],\"mapped\",[24400]],[[12090,12090],\"mapped\",[24417]],[[12091,12091],\"mapped\",[24435]],[[12092,12092],\"mapped\",[24515]],[[12093,12093],\"mapped\",[25096]],[[12094,12094],\"mapped\",[25142]],[[12095,12095],\"mapped\",[25163]],[[12096,12096],\"mapped\",[25903]],[[12097,12097],\"mapped\",[25908]],[[12098,12098],\"mapped\",[25991]],[[12099,12099],\"mapped\",[26007]],[[12100,12100],\"mapped\",[26020]],[[12101,12101],\"mapped\",[26041]],[[12102,12102],\"mapped\",[26080]],[[12103,12103],\"mapped\",[26085]],[[12104,12104],\"mapped\",[26352]],[[12105,12105],\"mapped\",[26376]],[[12106,12106],\"mapped\",[26408]],[[12107,12107],\"mapped\",[27424]],[[12108,12108],\"mapped\",[27490]],[[12109,12109],\"mapped\",[27513]],[[12110,12110],\"mapped\",[27571]],[[12111,12111],\"mapped\",[27595]],[[12112,12112],\"mapped\",[27604]],[[12113,12113],\"mapped\",[27611]],[[12114,12114],\"mapped\",[27663]],[[12115,12115],\"mapped\",[27668]],[[12116,12116],\"mapped\",[27700]],[[12117,12117],\"mapped\",[28779]],[[12118,12118],\"mapped\",[29226]],[[12119,12119],\"mapped\",[29238]],[[12120,12120],\"mapped\",[29243]],[[12121,12121],\"mapped\",[29247]],[[12122,12122],\"mapped\",[29255]],[[12123,12123],\"mapped\",[29273]],[[12124,12124],\"mapped\",[29275]],[[12125,12125],\"mapped\",[29356]],[[12126,12126],\"mapped\",[29572]],[[12127,12127],\"mapped\",[29577]],[[12128,12128],\"mapped\",[29916]],[[12129,12129],\"mapped\",[29926]],[[12130,12130],\"mapped\",[29976]],[[12131,12131],\"mapped\",[29983]],[[12132,12132],\"mapped\",[29992]],[[12133,12133],\"mapped\",[30000]],[[12134,12134],\"mapped\",[30091]],[[12135,12135],\"mapped\",[30098]],[[12136,12136],\"mapped\",[30326]],[[12137,12137],\"mapped\",[30333]],[[12138,12138],\"mapped\",[30382]],[[12139,12139],\"mapped\",[30399]],[[12140,12140],\"mapped\",[30446]],[[12141,12141],\"mapped\",[30683]],[[12142,12142],\"mapped\",[30690]],[[12143,12143],\"mapped\",[30707]],[[12144,12144],\"mapped\",[31034]],[[12145,12145],\"mapped\",[31160]],[[12146,12146],\"mapped\",[31166]],[[12147,12147],\"mapped\",[31348]],[[12148,12148],\"mapped\",[31435]],[[12149,12149],\"mapped\",[31481]],[[12150,12150],\"mapped\",[31859]],[[12151,12151],\"mapped\",[31992]],[[12152,12152],\"mapped\",[32566]],[[12153,12153],\"mapped\",[32593]],[[12154,12154],\"mapped\",[32650]],[[12155,12155],\"mapped\",[32701]],[[12156,12156],\"mapped\",[32769]],[[12157,12157],\"mapped\",[32780]],[[12158,12158],\"mapped\",[32786]],[[12159,12159],\"mapped\",[32819]],[[12160,12160],\"mapped\",[32895]],[[12161,12161],\"mapped\",[32905]],[[12162,12162],\"mapped\",[33251]],[[12163,12163],\"mapped\",[33258]],[[12164,12164],\"mapped\",[33267]],[[12165,12165],\"mapped\",[33276]],[[12166,12166],\"mapped\",[33292]],[[12167,12167],\"mapped\",[33307]],[[12168,12168],\"mapped\",[33311]],[[12169,12169],\"mapped\",[33390]],[[12170,12170],\"mapped\",[33394]],[[12171,12171],\"mapped\",[33400]],[[12172,12172],\"mapped\",[34381]],[[12173,12173],\"mapped\",[34411]],[[12174,12174],\"mapped\",[34880]],[[12175,12175],\"mapped\",[34892]],[[12176,12176],\"mapped\",[34915]],[[12177,12177],\"mapped\",[35198]],[[12178,12178],\"mapped\",[35211]],[[12179,12179],\"mapped\",[35282]],[[12180,12180],\"mapped\",[35328]],[[12181,12181],\"mapped\",[35895]],[[12182,12182],\"mapped\",[35910]],[[12183,12183],\"mapped\",[35925]],[[12184,12184],\"mapped\",[35960]],[[12185,12185],\"mapped\",[35997]],[[12186,12186],\"mapped\",[36196]],[[12187,12187],\"mapped\",[36208]],[[12188,12188],\"mapped\",[36275]],[[12189,12189],\"mapped\",[36523]],[[12190,12190],\"mapped\",[36554]],[[12191,12191],\"mapped\",[36763]],[[12192,12192],\"mapped\",[36784]],[[12193,12193],\"mapped\",[36789]],[[12194,12194],\"mapped\",[37009]],[[12195,12195],\"mapped\",[37193]],[[12196,12196],\"mapped\",[37318]],[[12197,12197],\"mapped\",[37324]],[[12198,12198],\"mapped\",[37329]],[[12199,12199],\"mapped\",[38263]],[[12200,12200],\"mapped\",[38272]],[[12201,12201],\"mapped\",[38428]],[[12202,12202],\"mapped\",[38582]],[[12203,12203],\"mapped\",[38585]],[[12204,12204],\"mapped\",[38632]],[[12205,12205],\"mapped\",[38737]],[[12206,12206],\"mapped\",[38750]],[[12207,12207],\"mapped\",[38754]],[[12208,12208],\"mapped\",[38761]],[[12209,12209],\"mapped\",[38859]],[[12210,12210],\"mapped\",[38893]],[[12211,12211],\"mapped\",[38899]],[[12212,12212],\"mapped\",[38913]],[[12213,12213],\"mapped\",[39080]],[[12214,12214],\"mapped\",[39131]],[[12215,12215],\"mapped\",[39135]],[[12216,12216],\"mapped\",[39318]],[[12217,12217],\"mapped\",[39321]],[[12218,12218],\"mapped\",[39340]],[[12219,12219],\"mapped\",[39592]],[[12220,12220],\"mapped\",[39640]],[[12221,12221],\"mapped\",[39647]],[[12222,12222],\"mapped\",[39717]],[[12223,12223],\"mapped\",[39727]],[[12224,12224],\"mapped\",[39730]],[[12225,12225],\"mapped\",[39740]],[[12226,12226],\"mapped\",[39770]],[[12227,12227],\"mapped\",[40165]],[[12228,12228],\"mapped\",[40565]],[[12229,12229],\"mapped\",[40575]],[[12230,12230],\"mapped\",[40613]],[[12231,12231],\"mapped\",[40635]],[[12232,12232],\"mapped\",[40643]],[[12233,12233],\"mapped\",[40653]],[[12234,12234],\"mapped\",[40657]],[[12235,12235],\"mapped\",[40697]],[[12236,12236],\"mapped\",[40701]],[[12237,12237],\"mapped\",[40718]],[[12238,12238],\"mapped\",[40723]],[[12239,12239],\"mapped\",[40736]],[[12240,12240],\"mapped\",[40763]],[[12241,12241],\"mapped\",[40778]],[[12242,12242],\"mapped\",[40786]],[[12243,12243],\"mapped\",[40845]],[[12244,12244],\"mapped\",[40860]],[[12245,12245],\"mapped\",[40864]],[[12246,12271],\"disallowed\"],[[12272,12283],\"disallowed\"],[[12284,12287],\"disallowed\"],[[12288,12288],\"disallowed_STD3_mapped\",[32]],[[12289,12289],\"valid\",[],\"NV8\"],[[12290,12290],\"mapped\",[46]],[[12291,12292],\"valid\",[],\"NV8\"],[[12293,12295],\"valid\"],[[12296,12329],\"valid\",[],\"NV8\"],[[12330,12333],\"valid\"],[[12334,12341],\"valid\",[],\"NV8\"],[[12342,12342],\"mapped\",[12306]],[[12343,12343],\"valid\",[],\"NV8\"],[[12344,12344],\"mapped\",[21313]],[[12345,12345],\"mapped\",[21316]],[[12346,12346],\"mapped\",[21317]],[[12347,12347],\"valid\",[],\"NV8\"],[[12348,12348],\"valid\"],[[12349,12349],\"valid\",[],\"NV8\"],[[12350,12350],\"valid\",[],\"NV8\"],[[12351,12351],\"valid\",[],\"NV8\"],[[12352,12352],\"disallowed\"],[[12353,12436],\"valid\"],[[12437,12438],\"valid\"],[[12439,12440],\"disallowed\"],[[12441,12442],\"valid\"],[[12443,12443],\"disallowed_STD3_mapped\",[32,12441]],[[12444,12444],\"disallowed_STD3_mapped\",[32,12442]],[[12445,12446],\"valid\"],[[12447,12447],\"mapped\",[12424,12426]],[[12448,12448],\"valid\",[],\"NV8\"],[[12449,12542],\"valid\"],[[12543,12543],\"mapped\",[12467,12488]],[[12544,12548],\"disallowed\"],[[12549,12588],\"valid\"],[[12589,12589],\"valid\"],[[12590,12592],\"disallowed\"],[[12593,12593],\"mapped\",[4352]],[[12594,12594],\"mapped\",[4353]],[[12595,12595],\"mapped\",[4522]],[[12596,12596],\"mapped\",[4354]],[[12597,12597],\"mapped\",[4524]],[[12598,12598],\"mapped\",[4525]],[[12599,12599],\"mapped\",[4355]],[[12600,12600],\"mapped\",[4356]],[[12601,12601],\"mapped\",[4357]],[[12602,12602],\"mapped\",[4528]],[[12603,12603],\"mapped\",[4529]],[[12604,12604],\"mapped\",[4530]],[[12605,12605],\"mapped\",[4531]],[[12606,12606],\"mapped\",[4532]],[[12607,12607],\"mapped\",[4533]],[[12608,12608],\"mapped\",[4378]],[[12609,12609],\"mapped\",[4358]],[[12610,12610],\"mapped\",[4359]],[[12611,12611],\"mapped\",[4360]],[[12612,12612],\"mapped\",[4385]],[[12613,12613],\"mapped\",[4361]],[[12614,12614],\"mapped\",[4362]],[[12615,12615],\"mapped\",[4363]],[[12616,12616],\"mapped\",[4364]],[[12617,12617],\"mapped\",[4365]],[[12618,12618],\"mapped\",[4366]],[[12619,12619],\"mapped\",[4367]],[[12620,12620],\"mapped\",[4368]],[[12621,12621],\"mapped\",[4369]],[[12622,12622],\"mapped\",[4370]],[[12623,12623],\"mapped\",[4449]],[[12624,12624],\"mapped\",[4450]],[[12625,12625],\"mapped\",[4451]],[[12626,12626],\"mapped\",[4452]],[[12627,12627],\"mapped\",[4453]],[[12628,12628],\"mapped\",[4454]],[[12629,12629],\"mapped\",[4455]],[[12630,12630],\"mapped\",[4456]],[[12631,12631],\"mapped\",[4457]],[[12632,12632],\"mapped\",[4458]],[[12633,12633],\"mapped\",[4459]],[[12634,12634],\"mapped\",[4460]],[[12635,12635],\"mapped\",[4461]],[[12636,12636],\"mapped\",[4462]],[[12637,12637],\"mapped\",[4463]],[[12638,12638],\"mapped\",[4464]],[[12639,12639],\"mapped\",[4465]],[[12640,12640],\"mapped\",[4466]],[[12641,12641],\"mapped\",[4467]],[[12642,12642],\"mapped\",[4468]],[[12643,12643],\"mapped\",[4469]],[[12644,12644],\"disallowed\"],[[12645,12645],\"mapped\",[4372]],[[12646,12646],\"mapped\",[4373]],[[12647,12647],\"mapped\",[4551]],[[12648,12648],\"mapped\",[4552]],[[12649,12649],\"mapped\",[4556]],[[12650,12650],\"mapped\",[4558]],[[12651,12651],\"mapped\",[4563]],[[12652,12652],\"mapped\",[4567]],[[12653,12653],\"mapped\",[4569]],[[12654,12654],\"mapped\",[4380]],[[12655,12655],\"mapped\",[4573]],[[12656,12656],\"mapped\",[4575]],[[12657,12657],\"mapped\",[4381]],[[12658,12658],\"mapped\",[4382]],[[12659,12659],\"mapped\",[4384]],[[12660,12660],\"mapped\",[4386]],[[12661,12661],\"mapped\",[4387]],[[12662,12662],\"mapped\",[4391]],[[12663,12663],\"mapped\",[4393]],[[12664,12664],\"mapped\",[4395]],[[12665,12665],\"mapped\",[4396]],[[12666,12666],\"mapped\",[4397]],[[12667,12667],\"mapped\",[4398]],[[12668,12668],\"mapped\",[4399]],[[12669,12669],\"mapped\",[4402]],[[12670,12670],\"mapped\",[4406]],[[12671,12671],\"mapped\",[4416]],[[12672,12672],\"mapped\",[4423]],[[12673,12673],\"mapped\",[4428]],[[12674,12674],\"mapped\",[4593]],[[12675,12675],\"mapped\",[4594]],[[12676,12676],\"mapped\",[4439]],[[12677,12677],\"mapped\",[4440]],[[12678,12678],\"mapped\",[4441]],[[12679,12679],\"mapped\",[4484]],[[12680,12680],\"mapped\",[4485]],[[12681,12681],\"mapped\",[4488]],[[12682,12682],\"mapped\",[4497]],[[12683,12683],\"mapped\",[4498]],[[12684,12684],\"mapped\",[4500]],[[12685,12685],\"mapped\",[4510]],[[12686,12686],\"mapped\",[4513]],[[12687,12687],\"disallowed\"],[[12688,12689],\"valid\",[],\"NV8\"],[[12690,12690],\"mapped\",[19968]],[[12691,12691],\"mapped\",[20108]],[[12692,12692],\"mapped\",[19977]],[[12693,12693],\"mapped\",[22235]],[[12694,12694],\"mapped\",[19978]],[[12695,12695],\"mapped\",[20013]],[[12696,12696],\"mapped\",[19979]],[[12697,12697],\"mapped\",[30002]],[[12698,12698],\"mapped\",[20057]],[[12699,12699],\"mapped\",[19993]],[[12700,12700],\"mapped\",[19969]],[[12701,12701],\"mapped\",[22825]],[[12702,12702],\"mapped\",[22320]],[[12703,12703],\"mapped\",[20154]],[[12704,12727],\"valid\"],[[12728,12730],\"valid\"],[[12731,12735],\"disallowed\"],[[12736,12751],\"valid\",[],\"NV8\"],[[12752,12771],\"valid\",[],\"NV8\"],[[12772,12783],\"disallowed\"],[[12784,12799],\"valid\"],[[12800,12800],\"disallowed_STD3_mapped\",[40,4352,41]],[[12801,12801],\"disallowed_STD3_mapped\",[40,4354,41]],[[12802,12802],\"disallowed_STD3_mapped\",[40,4355,41]],[[12803,12803],\"disallowed_STD3_mapped\",[40,4357,41]],[[12804,12804],\"disallowed_STD3_mapped\",[40,4358,41]],[[12805,12805],\"disallowed_STD3_mapped\",[40,4359,41]],[[12806,12806],\"disallowed_STD3_mapped\",[40,4361,41]],[[12807,12807],\"disallowed_STD3_mapped\",[40,4363,41]],[[12808,12808],\"disallowed_STD3_mapped\",[40,4364,41]],[[12809,12809],\"disallowed_STD3_mapped\",[40,4366,41]],[[12810,12810],\"disallowed_STD3_mapped\",[40,4367,41]],[[12811,12811],\"disallowed_STD3_mapped\",[40,4368,41]],[[12812,12812],\"disallowed_STD3_mapped\",[40,4369,41]],[[12813,12813],\"disallowed_STD3_mapped\",[40,4370,41]],[[12814,12814],\"disallowed_STD3_mapped\",[40,44032,41]],[[12815,12815],\"disallowed_STD3_mapped\",[40,45208,41]],[[12816,12816],\"disallowed_STD3_mapped\",[40,45796,41]],[[12817,12817],\"disallowed_STD3_mapped\",[40,46972,41]],[[12818,12818],\"disallowed_STD3_mapped\",[40,47560,41]],[[12819,12819],\"disallowed_STD3_mapped\",[40,48148,41]],[[12820,12820],\"disallowed_STD3_mapped\",[40,49324,41]],[[12821,12821],\"disallowed_STD3_mapped\",[40,50500,41]],[[12822,12822],\"disallowed_STD3_mapped\",[40,51088,41]],[[12823,12823],\"disallowed_STD3_mapped\",[40,52264,41]],[[12824,12824],\"disallowed_STD3_mapped\",[40,52852,41]],[[12825,12825],\"disallowed_STD3_mapped\",[40,53440,41]],[[12826,12826],\"disallowed_STD3_mapped\",[40,54028,41]],[[12827,12827],\"disallowed_STD3_mapped\",[40,54616,41]],[[12828,12828],\"disallowed_STD3_mapped\",[40,51452,41]],[[12829,12829],\"disallowed_STD3_mapped\",[40,50724,51204,41]],[[12830,12830],\"disallowed_STD3_mapped\",[40,50724,54980,41]],[[12831,12831],\"disallowed\"],[[12832,12832],\"disallowed_STD3_mapped\",[40,19968,41]],[[12833,12833],\"disallowed_STD3_mapped\",[40,20108,41]],[[12834,12834],\"disallowed_STD3_mapped\",[40,19977,41]],[[12835,12835],\"disallowed_STD3_mapped\",[40,22235,41]],[[12836,12836],\"disallowed_STD3_mapped\",[40,20116,41]],[[12837,12837],\"disallowed_STD3_mapped\",[40,20845,41]],[[12838,12838],\"disallowed_STD3_mapped\",[40,19971,41]],[[12839,12839],\"disallowed_STD3_mapped\",[40,20843,41]],[[12840,12840],\"disallowed_STD3_mapped\",[40,20061,41]],[[12841,12841],\"disallowed_STD3_mapped\",[40,21313,41]],[[12842,12842],\"disallowed_STD3_mapped\",[40,26376,41]],[[12843,12843],\"disallowed_STD3_mapped\",[40,28779,41]],[[12844,12844],\"disallowed_STD3_mapped\",[40,27700,41]],[[12845,12845],\"disallowed_STD3_mapped\",[40,26408,41]],[[12846,12846],\"disallowed_STD3_mapped\",[40,37329,41]],[[12847,12847],\"disallowed_STD3_mapped\",[40,22303,41]],[[12848,12848],\"disallowed_STD3_mapped\",[40,26085,41]],[[12849,12849],\"disallowed_STD3_mapped\",[40,26666,41]],[[12850,12850],\"disallowed_STD3_mapped\",[40,26377,41]],[[12851,12851],\"disallowed_STD3_mapped\",[40,31038,41]],[[12852,12852],\"disallowed_STD3_mapped\",[40,21517,41]],[[12853,12853],\"disallowed_STD3_mapped\",[40,29305,41]],[[12854,12854],\"disallowed_STD3_mapped\",[40,36001,41]],[[12855,12855],\"disallowed_STD3_mapped\",[40,31069,41]],[[12856,12856],\"disallowed_STD3_mapped\",[40,21172,41]],[[12857,12857],\"disallowed_STD3_mapped\",[40,20195,41]],[[12858,12858],\"disallowed_STD3_mapped\",[40,21628,41]],[[12859,12859],\"disallowed_STD3_mapped\",[40,23398,41]],[[12860,12860],\"disallowed_STD3_mapped\",[40,30435,41]],[[12861,12861],\"disallowed_STD3_mapped\",[40,20225,41]],[[12862,12862],\"disallowed_STD3_mapped\",[40,36039,41]],[[12863,12863],\"disallowed_STD3_mapped\",[40,21332,41]],[[12864,12864],\"disallowed_STD3_mapped\",[40,31085,41]],[[12865,12865],\"disallowed_STD3_mapped\",[40,20241,41]],[[12866,12866],\"disallowed_STD3_mapped\",[40,33258,41]],[[12867,12867],\"disallowed_STD3_mapped\",[40,33267,41]],[[12868,12868],\"mapped\",[21839]],[[12869,12869],\"mapped\",[24188]],[[12870,12870],\"mapped\",[25991]],[[12871,12871],\"mapped\",[31631]],[[12872,12879],\"valid\",[],\"NV8\"],[[12880,12880],\"mapped\",[112,116,101]],[[12881,12881],\"mapped\",[50,49]],[[12882,12882],\"mapped\",[50,50]],[[12883,12883],\"mapped\",[50,51]],[[12884,12884],\"mapped\",[50,52]],[[12885,12885],\"mapped\",[50,53]],[[12886,12886],\"mapped\",[50,54]],[[12887,12887],\"mapped\",[50,55]],[[12888,12888],\"mapped\",[50,56]],[[12889,12889],\"mapped\",[50,57]],[[12890,12890],\"mapped\",[51,48]],[[12891,12891],\"mapped\",[51,49]],[[12892,12892],\"mapped\",[51,50]],[[12893,12893],\"mapped\",[51,51]],[[12894,12894],\"mapped\",[51,52]],[[12895,12895],\"mapped\",[51,53]],[[12896,12896],\"mapped\",[4352]],[[12897,12897],\"mapped\",[4354]],[[12898,12898],\"mapped\",[4355]],[[12899,12899],\"mapped\",[4357]],[[12900,12900],\"mapped\",[4358]],[[12901,12901],\"mapped\",[4359]],[[12902,12902],\"mapped\",[4361]],[[12903,12903],\"mapped\",[4363]],[[12904,12904],\"mapped\",[4364]],[[12905,12905],\"mapped\",[4366]],[[12906,12906],\"mapped\",[4367]],[[12907,12907],\"mapped\",[4368]],[[12908,12908],\"mapped\",[4369]],[[12909,12909],\"mapped\",[4370]],[[12910,12910],\"mapped\",[44032]],[[12911,12911],\"mapped\",[45208]],[[12912,12912],\"mapped\",[45796]],[[12913,12913],\"mapped\",[46972]],[[12914,12914],\"mapped\",[47560]],[[12915,12915],\"mapped\",[48148]],[[12916,12916],\"mapped\",[49324]],[[12917,12917],\"mapped\",[50500]],[[12918,12918],\"mapped\",[51088]],[[12919,12919],\"mapped\",[52264]],[[12920,12920],\"mapped\",[52852]],[[12921,12921],\"mapped\",[53440]],[[12922,12922],\"mapped\",[54028]],[[12923,12923],\"mapped\",[54616]],[[12924,12924],\"mapped\",[52280,44256]],[[12925,12925],\"mapped\",[51452,51032]],[[12926,12926],\"mapped\",[50864]],[[12927,12927],\"valid\",[],\"NV8\"],[[12928,12928],\"mapped\",[19968]],[[12929,12929],\"mapped\",[20108]],[[12930,12930],\"mapped\",[19977]],[[12931,12931],\"mapped\",[22235]],[[12932,12932],\"mapped\",[20116]],[[12933,12933],\"mapped\",[20845]],[[12934,12934],\"mapped\",[19971]],[[12935,12935],\"mapped\",[20843]],[[12936,12936],\"mapped\",[20061]],[[12937,12937],\"mapped\",[21313]],[[12938,12938],\"mapped\",[26376]],[[12939,12939],\"mapped\",[28779]],[[12940,12940],\"mapped\",[27700]],[[12941,12941],\"mapped\",[26408]],[[12942,12942],\"mapped\",[37329]],[[12943,12943],\"mapped\",[22303]],[[12944,12944],\"mapped\",[26085]],[[12945,12945],\"mapped\",[26666]],[[12946,12946],\"mapped\",[26377]],[[12947,12947],\"mapped\",[31038]],[[12948,12948],\"mapped\",[21517]],[[12949,12949],\"mapped\",[29305]],[[12950,12950],\"mapped\",[36001]],[[12951,12951],\"mapped\",[31069]],[[12952,12952],\"mapped\",[21172]],[[12953,12953],\"mapped\",[31192]],[[12954,12954],\"mapped\",[30007]],[[12955,12955],\"mapped\",[22899]],[[12956,12956],\"mapped\",[36969]],[[12957,12957],\"mapped\",[20778]],[[12958,12958],\"mapped\",[21360]],[[12959,12959],\"mapped\",[27880]],[[12960,12960],\"mapped\",[38917]],[[12961,12961],\"mapped\",[20241]],[[12962,12962],\"mapped\",[20889]],[[12963,12963],\"mapped\",[27491]],[[12964,12964],\"mapped\",[19978]],[[12965,12965],\"mapped\",[20013]],[[12966,12966],\"mapped\",[19979]],[[12967,12967],\"mapped\",[24038]],[[12968,12968],\"mapped\",[21491]],[[12969,12969],\"mapped\",[21307]],[[12970,12970],\"mapped\",[23447]],[[12971,12971],\"mapped\",[23398]],[[12972,12972],\"mapped\",[30435]],[[12973,12973],\"mapped\",[20225]],[[12974,12974],\"mapped\",[36039]],[[12975,12975],\"mapped\",[21332]],[[12976,12976],\"mapped\",[22812]],[[12977,12977],\"mapped\",[51,54]],[[12978,12978],\"mapped\",[51,55]],[[12979,12979],\"mapped\",[51,56]],[[12980,12980],\"mapped\",[51,57]],[[12981,12981],\"mapped\",[52,48]],[[12982,12982],\"mapped\",[52,49]],[[12983,12983],\"mapped\",[52,50]],[[12984,12984],\"mapped\",[52,51]],[[12985,12985],\"mapped\",[52,52]],[[12986,12986],\"mapped\",[52,53]],[[12987,12987],\"mapped\",[52,54]],[[12988,12988],\"mapped\",[52,55]],[[12989,12989],\"mapped\",[52,56]],[[12990,12990],\"mapped\",[52,57]],[[12991,12991],\"mapped\",[53,48]],[[12992,12992],\"mapped\",[49,26376]],[[12993,12993],\"mapped\",[50,26376]],[[12994,12994],\"mapped\",[51,26376]],[[12995,12995],\"mapped\",[52,26376]],[[12996,12996],\"mapped\",[53,26376]],[[12997,12997],\"mapped\",[54,26376]],[[12998,12998],\"mapped\",[55,26376]],[[12999,12999],\"mapped\",[56,26376]],[[13000,13000],\"mapped\",[57,26376]],[[13001,13001],\"mapped\",[49,48,26376]],[[13002,13002],\"mapped\",[49,49,26376]],[[13003,13003],\"mapped\",[49,50,26376]],[[13004,13004],\"mapped\",[104,103]],[[13005,13005],\"mapped\",[101,114,103]],[[13006,13006],\"mapped\",[101,118]],[[13007,13007],\"mapped\",[108,116,100]],[[13008,13008],\"mapped\",[12450]],[[13009,13009],\"mapped\",[12452]],[[13010,13010],\"mapped\",[12454]],[[13011,13011],\"mapped\",[12456]],[[13012,13012],\"mapped\",[12458]],[[13013,13013],\"mapped\",[12459]],[[13014,13014],\"mapped\",[12461]],[[13015,13015],\"mapped\",[12463]],[[13016,13016],\"mapped\",[12465]],[[13017,13017],\"mapped\",[12467]],[[13018,13018],\"mapped\",[12469]],[[13019,13019],\"mapped\",[12471]],[[13020,13020],\"mapped\",[12473]],[[13021,13021],\"mapped\",[12475]],[[13022,13022],\"mapped\",[12477]],[[13023,13023],\"mapped\",[12479]],[[13024,13024],\"mapped\",[12481]],[[13025,13025],\"mapped\",[12484]],[[13026,13026],\"mapped\",[12486]],[[13027,13027],\"mapped\",[12488]],[[13028,13028],\"mapped\",[12490]],[[13029,13029],\"mapped\",[12491]],[[13030,13030],\"mapped\",[12492]],[[13031,13031],\"mapped\",[12493]],[[13032,13032],\"mapped\",[12494]],[[13033,13033],\"mapped\",[12495]],[[13034,13034],\"mapped\",[12498]],[[13035,13035],\"mapped\",[12501]],[[13036,13036],\"mapped\",[12504]],[[13037,13037],\"mapped\",[12507]],[[13038,13038],\"mapped\",[12510]],[[13039,13039],\"mapped\",[12511]],[[13040,13040],\"mapped\",[12512]],[[13041,13041],\"mapped\",[12513]],[[13042,13042],\"mapped\",[12514]],[[13043,13043],\"mapped\",[12516]],[[13044,13044],\"mapped\",[12518]],[[13045,13045],\"mapped\",[12520]],[[13046,13046],\"mapped\",[12521]],[[13047,13047],\"mapped\",[12522]],[[13048,13048],\"mapped\",[12523]],[[13049,13049],\"mapped\",[12524]],[[13050,13050],\"mapped\",[12525]],[[13051,13051],\"mapped\",[12527]],[[13052,13052],\"mapped\",[12528]],[[13053,13053],\"mapped\",[12529]],[[13054,13054],\"mapped\",[12530]],[[13055,13055],\"disallowed\"],[[13056,13056],\"mapped\",[12450,12497,12540,12488]],[[13057,13057],\"mapped\",[12450,12523,12501,12449]],[[13058,13058],\"mapped\",[12450,12531,12506,12450]],[[13059,13059],\"mapped\",[12450,12540,12523]],[[13060,13060],\"mapped\",[12452,12491,12531,12464]],[[13061,13061],\"mapped\",[12452,12531,12481]],[[13062,13062],\"mapped\",[12454,12457,12531]],[[13063,13063],\"mapped\",[12456,12473,12463,12540,12489]],[[13064,13064],\"mapped\",[12456,12540,12459,12540]],[[13065,13065],\"mapped\",[12458,12531,12473]],[[13066,13066],\"mapped\",[12458,12540,12512]],[[13067,13067],\"mapped\",[12459,12452,12522]],[[13068,13068],\"mapped\",[12459,12521,12483,12488]],[[13069,13069],\"mapped\",[12459,12525,12522,12540]],[[13070,13070],\"mapped\",[12460,12525,12531]],[[13071,13071],\"mapped\",[12460,12531,12510]],[[13072,13072],\"mapped\",[12462,12460]],[[13073,13073],\"mapped\",[12462,12491,12540]],[[13074,13074],\"mapped\",[12461,12517,12522,12540]],[[13075,13075],\"mapped\",[12462,12523,12480,12540]],[[13076,13076],\"mapped\",[12461,12525]],[[13077,13077],\"mapped\",[12461,12525,12464,12521,12512]],[[13078,13078],\"mapped\",[12461,12525,12513,12540,12488,12523]],[[13079,13079],\"mapped\",[12461,12525,12527,12483,12488]],[[13080,13080],\"mapped\",[12464,12521,12512]],[[13081,13081],\"mapped\",[12464,12521,12512,12488,12531]],[[13082,13082],\"mapped\",[12463,12523,12476,12452,12525]],[[13083,13083],\"mapped\",[12463,12525,12540,12493]],[[13084,13084],\"mapped\",[12465,12540,12473]],[[13085,13085],\"mapped\",[12467,12523,12490]],[[13086,13086],\"mapped\",[12467,12540,12509]],[[13087,13087],\"mapped\",[12469,12452,12463,12523]],[[13088,13088],\"mapped\",[12469,12531,12481,12540,12512]],[[13089,13089],\"mapped\",[12471,12522,12531,12464]],[[13090,13090],\"mapped\",[12475,12531,12481]],[[13091,13091],\"mapped\",[12475,12531,12488]],[[13092,13092],\"mapped\",[12480,12540,12473]],[[13093,13093],\"mapped\",[12487,12471]],[[13094,13094],\"mapped\",[12489,12523]],[[13095,13095],\"mapped\",[12488,12531]],[[13096,13096],\"mapped\",[12490,12494]],[[13097,13097],\"mapped\",[12494,12483,12488]],[[13098,13098],\"mapped\",[12495,12452,12484]],[[13099,13099],\"mapped\",[12497,12540,12475,12531,12488]],[[13100,13100],\"mapped\",[12497,12540,12484]],[[13101,13101],\"mapped\",[12496,12540,12524,12523]],[[13102,13102],\"mapped\",[12500,12450,12473,12488,12523]],[[13103,13103],\"mapped\",[12500,12463,12523]],[[13104,13104],\"mapped\",[12500,12467]],[[13105,13105],\"mapped\",[12499,12523]],[[13106,13106],\"mapped\",[12501,12449,12521,12483,12489]],[[13107,13107],\"mapped\",[12501,12451,12540,12488]],[[13108,13108],\"mapped\",[12502,12483,12471,12455,12523]],[[13109,13109],\"mapped\",[12501,12521,12531]],[[13110,13110],\"mapped\",[12504,12463,12479,12540,12523]],[[13111,13111],\"mapped\",[12506,12477]],[[13112,13112],\"mapped\",[12506,12491,12498]],[[13113,13113],\"mapped\",[12504,12523,12484]],[[13114,13114],\"mapped\",[12506,12531,12473]],[[13115,13115],\"mapped\",[12506,12540,12472]],[[13116,13116],\"mapped\",[12505,12540,12479]],[[13117,13117],\"mapped\",[12509,12452,12531,12488]],[[13118,13118],\"mapped\",[12508,12523,12488]],[[13119,13119],\"mapped\",[12507,12531]],[[13120,13120],\"mapped\",[12509,12531,12489]],[[13121,13121],\"mapped\",[12507,12540,12523]],[[13122,13122],\"mapped\",[12507,12540,12531]],[[13123,13123],\"mapped\",[12510,12452,12463,12525]],[[13124,13124],\"mapped\",[12510,12452,12523]],[[13125,13125],\"mapped\",[12510,12483,12495]],[[13126,13126],\"mapped\",[12510,12523,12463]],[[13127,13127],\"mapped\",[12510,12531,12471,12519,12531]],[[13128,13128],\"mapped\",[12511,12463,12525,12531]],[[13129,13129],\"mapped\",[12511,12522]],[[13130,13130],\"mapped\",[12511,12522,12496,12540,12523]],[[13131,13131],\"mapped\",[12513,12460]],[[13132,13132],\"mapped\",[12513,12460,12488,12531]],[[13133,13133],\"mapped\",[12513,12540,12488,12523]],[[13134,13134],\"mapped\",[12516,12540,12489]],[[13135,13135],\"mapped\",[12516,12540,12523]],[[13136,13136],\"mapped\",[12518,12450,12531]],[[13137,13137],\"mapped\",[12522,12483,12488,12523]],[[13138,13138],\"mapped\",[12522,12521]],[[13139,13139],\"mapped\",[12523,12500,12540]],[[13140,13140],\"mapped\",[12523,12540,12502,12523]],[[13141,13141],\"mapped\",[12524,12512]],[[13142,13142],\"mapped\",[12524,12531,12488,12466,12531]],[[13143,13143],\"mapped\",[12527,12483,12488]],[[13144,13144],\"mapped\",[48,28857]],[[13145,13145],\"mapped\",[49,28857]],[[13146,13146],\"mapped\",[50,28857]],[[13147,13147],\"mapped\",[51,28857]],[[13148,13148],\"mapped\",[52,28857]],[[13149,13149],\"mapped\",[53,28857]],[[13150,13150],\"mapped\",[54,28857]],[[13151,13151],\"mapped\",[55,28857]],[[13152,13152],\"mapped\",[56,28857]],[[13153,13153],\"mapped\",[57,28857]],[[13154,13154],\"mapped\",[49,48,28857]],[[13155,13155],\"mapped\",[49,49,28857]],[[13156,13156],\"mapped\",[49,50,28857]],[[13157,13157],\"mapped\",[49,51,28857]],[[13158,13158],\"mapped\",[49,52,28857]],[[13159,13159],\"mapped\",[49,53,28857]],[[13160,13160],\"mapped\",[49,54,28857]],[[13161,13161],\"mapped\",[49,55,28857]],[[13162,13162],\"mapped\",[49,56,28857]],[[13163,13163],\"mapped\",[49,57,28857]],[[13164,13164],\"mapped\",[50,48,28857]],[[13165,13165],\"mapped\",[50,49,28857]],[[13166,13166],\"mapped\",[50,50,28857]],[[13167,13167],\"mapped\",[50,51,28857]],[[13168,13168],\"mapped\",[50,52,28857]],[[13169,13169],\"mapped\",[104,112,97]],[[13170,13170],\"mapped\",[100,97]],[[13171,13171],\"mapped\",[97,117]],[[13172,13172],\"mapped\",[98,97,114]],[[13173,13173],\"mapped\",[111,118]],[[13174,13174],\"mapped\",[112,99]],[[13175,13175],\"mapped\",[100,109]],[[13176,13176],\"mapped\",[100,109,50]],[[13177,13177],\"mapped\",[100,109,51]],[[13178,13178],\"mapped\",[105,117]],[[13179,13179],\"mapped\",[24179,25104]],[[13180,13180],\"mapped\",[26157,21644]],[[13181,13181],\"mapped\",[22823,27491]],[[13182,13182],\"mapped\",[26126,27835]],[[13183,13183],\"mapped\",[26666,24335,20250,31038]],[[13184,13184],\"mapped\",[112,97]],[[13185,13185],\"mapped\",[110,97]],[[13186,13186],\"mapped\",[956,97]],[[13187,13187],\"mapped\",[109,97]],[[13188,13188],\"mapped\",[107,97]],[[13189,13189],\"mapped\",[107,98]],[[13190,13190],\"mapped\",[109,98]],[[13191,13191],\"mapped\",[103,98]],[[13192,13192],\"mapped\",[99,97,108]],[[13193,13193],\"mapped\",[107,99,97,108]],[[13194,13194],\"mapped\",[112,102]],[[13195,13195],\"mapped\",[110,102]],[[13196,13196],\"mapped\",[956,102]],[[13197,13197],\"mapped\",[956,103]],[[13198,13198],\"mapped\",[109,103]],[[13199,13199],\"mapped\",[107,103]],[[13200,13200],\"mapped\",[104,122]],[[13201,13201],\"mapped\",[107,104,122]],[[13202,13202],\"mapped\",[109,104,122]],[[13203,13203],\"mapped\",[103,104,122]],[[13204,13204],\"mapped\",[116,104,122]],[[13205,13205],\"mapped\",[956,108]],[[13206,13206],\"mapped\",[109,108]],[[13207,13207],\"mapped\",[100,108]],[[13208,13208],\"mapped\",[107,108]],[[13209,13209],\"mapped\",[102,109]],[[13210,13210],\"mapped\",[110,109]],[[13211,13211],\"mapped\",[956,109]],[[13212,13212],\"mapped\",[109,109]],[[13213,13213],\"mapped\",[99,109]],[[13214,13214],\"mapped\",[107,109]],[[13215,13215],\"mapped\",[109,109,50]],[[13216,13216],\"mapped\",[99,109,50]],[[13217,13217],\"mapped\",[109,50]],[[13218,13218],\"mapped\",[107,109,50]],[[13219,13219],\"mapped\",[109,109,51]],[[13220,13220],\"mapped\",[99,109,51]],[[13221,13221],\"mapped\",[109,51]],[[13222,13222],\"mapped\",[107,109,51]],[[13223,13223],\"mapped\",[109,8725,115]],[[13224,13224],\"mapped\",[109,8725,115,50]],[[13225,13225],\"mapped\",[112,97]],[[13226,13226],\"mapped\",[107,112,97]],[[13227,13227],\"mapped\",[109,112,97]],[[13228,13228],\"mapped\",[103,112,97]],[[13229,13229],\"mapped\",[114,97,100]],[[13230,13230],\"mapped\",[114,97,100,8725,115]],[[13231,13231],\"mapped\",[114,97,100,8725,115,50]],[[13232,13232],\"mapped\",[112,115]],[[13233,13233],\"mapped\",[110,115]],[[13234,13234],\"mapped\",[956,115]],[[13235,13235],\"mapped\",[109,115]],[[13236,13236],\"mapped\",[112,118]],[[13237,13237],\"mapped\",[110,118]],[[13238,13238],\"mapped\",[956,118]],[[13239,13239],\"mapped\",[109,118]],[[13240,13240],\"mapped\",[107,118]],[[13241,13241],\"mapped\",[109,118]],[[13242,13242],\"mapped\",[112,119]],[[13243,13243],\"mapped\",[110,119]],[[13244,13244],\"mapped\",[956,119]],[[13245,13245],\"mapped\",[109,119]],[[13246,13246],\"mapped\",[107,119]],[[13247,13247],\"mapped\",[109,119]],[[13248,13248],\"mapped\",[107,969]],[[13249,13249],\"mapped\",[109,969]],[[13250,13250],\"disallowed\"],[[13251,13251],\"mapped\",[98,113]],[[13252,13252],\"mapped\",[99,99]],[[13253,13253],\"mapped\",[99,100]],[[13254,13254],\"mapped\",[99,8725,107,103]],[[13255,13255],\"disallowed\"],[[13256,13256],\"mapped\",[100,98]],[[13257,13257],\"mapped\",[103,121]],[[13258,13258],\"mapped\",[104,97]],[[13259,13259],\"mapped\",[104,112]],[[13260,13260],\"mapped\",[105,110]],[[13261,13261],\"mapped\",[107,107]],[[13262,13262],\"mapped\",[107,109]],[[13263,13263],\"mapped\",[107,116]],[[13264,13264],\"mapped\",[108,109]],[[13265,13265],\"mapped\",[108,110]],[[13266,13266],\"mapped\",[108,111,103]],[[13267,13267],\"mapped\",[108,120]],[[13268,13268],\"mapped\",[109,98]],[[13269,13269],\"mapped\",[109,105,108]],[[13270,13270],\"mapped\",[109,111,108]],[[13271,13271],\"mapped\",[112,104]],[[13272,13272],\"disallowed\"],[[13273,13273],\"mapped\",[112,112,109]],[[13274,13274],\"mapped\",[112,114]],[[13275,13275],\"mapped\",[115,114]],[[13276,13276],\"mapped\",[115,118]],[[13277,13277],\"mapped\",[119,98]],[[13278,13278],\"mapped\",[118,8725,109]],[[13279,13279],\"mapped\",[97,8725,109]],[[13280,13280],\"mapped\",[49,26085]],[[13281,13281],\"mapped\",[50,26085]],[[13282,13282],\"mapped\",[51,26085]],[[13283,13283],\"mapped\",[52,26085]],[[13284,13284],\"mapped\",[53,26085]],[[13285,13285],\"mapped\",[54,26085]],[[13286,13286],\"mapped\",[55,26085]],[[13287,13287],\"mapped\",[56,26085]],[[13288,13288],\"mapped\",[57,26085]],[[13289,13289],\"mapped\",[49,48,26085]],[[13290,13290],\"mapped\",[49,49,26085]],[[13291,13291],\"mapped\",[49,50,26085]],[[13292,13292],\"mapped\",[49,51,26085]],[[13293,13293],\"mapped\",[49,52,26085]],[[13294,13294],\"mapped\",[49,53,26085]],[[13295,13295],\"mapped\",[49,54,26085]],[[13296,13296],\"mapped\",[49,55,26085]],[[13297,13297],\"mapped\",[49,56,26085]],[[13298,13298],\"mapped\",[49,57,26085]],[[13299,13299],\"mapped\",[50,48,26085]],[[13300,13300],\"mapped\",[50,49,26085]],[[13301,13301],\"mapped\",[50,50,26085]],[[13302,13302],\"mapped\",[50,51,26085]],[[13303,13303],\"mapped\",[50,52,26085]],[[13304,13304],\"mapped\",[50,53,26085]],[[13305,13305],\"mapped\",[50,54,26085]],[[13306,13306],\"mapped\",[50,55,26085]],[[13307,13307],\"mapped\",[50,56,26085]],[[13308,13308],\"mapped\",[50,57,26085]],[[13309,13309],\"mapped\",[51,48,26085]],[[13310,13310],\"mapped\",[51,49,26085]],[[13311,13311],\"mapped\",[103,97,108]],[[13312,19893],\"valid\"],[[19894,19903],\"disallowed\"],[[19904,19967],\"valid\",[],\"NV8\"],[[19968,40869],\"valid\"],[[40870,40891],\"valid\"],[[40892,40899],\"valid\"],[[40900,40907],\"valid\"],[[40908,40908],\"valid\"],[[40909,40917],\"valid\"],[[40918,40959],\"disallowed\"],[[40960,42124],\"valid\"],[[42125,42127],\"disallowed\"],[[42128,42145],\"valid\",[],\"NV8\"],[[42146,42147],\"valid\",[],\"NV8\"],[[42148,42163],\"valid\",[],\"NV8\"],[[42164,42164],\"valid\",[],\"NV8\"],[[42165,42176],\"valid\",[],\"NV8\"],[[42177,42177],\"valid\",[],\"NV8\"],[[42178,42180],\"valid\",[],\"NV8\"],[[42181,42181],\"valid\",[],\"NV8\"],[[42182,42182],\"valid\",[],\"NV8\"],[[42183,42191],\"disallowed\"],[[42192,42237],\"valid\"],[[42238,42239],\"valid\",[],\"NV8\"],[[42240,42508],\"valid\"],[[42509,42511],\"valid\",[],\"NV8\"],[[42512,42539],\"valid\"],[[42540,42559],\"disallowed\"],[[42560,42560],\"mapped\",[42561]],[[42561,42561],\"valid\"],[[42562,42562],\"mapped\",[42563]],[[42563,42563],\"valid\"],[[42564,42564],\"mapped\",[42565]],[[42565,42565],\"valid\"],[[42566,42566],\"mapped\",[42567]],[[42567,42567],\"valid\"],[[42568,42568],\"mapped\",[42569]],[[42569,42569],\"valid\"],[[42570,42570],\"mapped\",[42571]],[[42571,42571],\"valid\"],[[42572,42572],\"mapped\",[42573]],[[42573,42573],\"valid\"],[[42574,42574],\"mapped\",[42575]],[[42575,42575],\"valid\"],[[42576,42576],\"mapped\",[42577]],[[42577,42577],\"valid\"],[[42578,42578],\"mapped\",[42579]],[[42579,42579],\"valid\"],[[42580,42580],\"mapped\",[42581]],[[42581,42581],\"valid\"],[[42582,42582],\"mapped\",[42583]],[[42583,42583],\"valid\"],[[42584,42584],\"mapped\",[42585]],[[42585,42585],\"valid\"],[[42586,42586],\"mapped\",[42587]],[[42587,42587],\"valid\"],[[42588,42588],\"mapped\",[42589]],[[42589,42589],\"valid\"],[[42590,42590],\"mapped\",[42591]],[[42591,42591],\"valid\"],[[42592,42592],\"mapped\",[42593]],[[42593,42593],\"valid\"],[[42594,42594],\"mapped\",[42595]],[[42595,42595],\"valid\"],[[42596,42596],\"mapped\",[42597]],[[42597,42597],\"valid\"],[[42598,42598],\"mapped\",[42599]],[[42599,42599],\"valid\"],[[42600,42600],\"mapped\",[42601]],[[42601,42601],\"valid\"],[[42602,42602],\"mapped\",[42603]],[[42603,42603],\"valid\"],[[42604,42604],\"mapped\",[42605]],[[42605,42607],\"valid\"],[[42608,42611],\"valid\",[],\"NV8\"],[[42612,42619],\"valid\"],[[42620,42621],\"valid\"],[[42622,42622],\"valid\",[],\"NV8\"],[[42623,42623],\"valid\"],[[42624,42624],\"mapped\",[42625]],[[42625,42625],\"valid\"],[[42626,42626],\"mapped\",[42627]],[[42627,42627],\"valid\"],[[42628,42628],\"mapped\",[42629]],[[42629,42629],\"valid\"],[[42630,42630],\"mapped\",[42631]],[[42631,42631],\"valid\"],[[42632,42632],\"mapped\",[42633]],[[42633,42633],\"valid\"],[[42634,42634],\"mapped\",[42635]],[[42635,42635],\"valid\"],[[42636,42636],\"mapped\",[42637]],[[42637,42637],\"valid\"],[[42638,42638],\"mapped\",[42639]],[[42639,42639],\"valid\"],[[42640,42640],\"mapped\",[42641]],[[42641,42641],\"valid\"],[[42642,42642],\"mapped\",[42643]],[[42643,42643],\"valid\"],[[42644,42644],\"mapped\",[42645]],[[42645,42645],\"valid\"],[[42646,42646],\"mapped\",[42647]],[[42647,42647],\"valid\"],[[42648,42648],\"mapped\",[42649]],[[42649,42649],\"valid\"],[[42650,42650],\"mapped\",[42651]],[[42651,42651],\"valid\"],[[42652,42652],\"mapped\",[1098]],[[42653,42653],\"mapped\",[1100]],[[42654,42654],\"valid\"],[[42655,42655],\"valid\"],[[42656,42725],\"valid\"],[[42726,42735],\"valid\",[],\"NV8\"],[[42736,42737],\"valid\"],[[42738,42743],\"valid\",[],\"NV8\"],[[42744,42751],\"disallowed\"],[[42752,42774],\"valid\",[],\"NV8\"],[[42775,42778],\"valid\"],[[42779,42783],\"valid\"],[[42784,42785],\"valid\",[],\"NV8\"],[[42786,42786],\"mapped\",[42787]],[[42787,42787],\"valid\"],[[42788,42788],\"mapped\",[42789]],[[42789,42789],\"valid\"],[[42790,42790],\"mapped\",[42791]],[[42791,42791],\"valid\"],[[42792,42792],\"mapped\",[42793]],[[42793,42793],\"valid\"],[[42794,42794],\"mapped\",[42795]],[[42795,42795],\"valid\"],[[42796,42796],\"mapped\",[42797]],[[42797,42797],\"valid\"],[[42798,42798],\"mapped\",[42799]],[[42799,42801],\"valid\"],[[42802,42802],\"mapped\",[42803]],[[42803,42803],\"valid\"],[[42804,42804],\"mapped\",[42805]],[[42805,42805],\"valid\"],[[42806,42806],\"mapped\",[42807]],[[42807,42807],\"valid\"],[[42808,42808],\"mapped\",[42809]],[[42809,42809],\"valid\"],[[42810,42810],\"mapped\",[42811]],[[42811,42811],\"valid\"],[[42812,42812],\"mapped\",[42813]],[[42813,42813],\"valid\"],[[42814,42814],\"mapped\",[42815]],[[42815,42815],\"valid\"],[[42816,42816],\"mapped\",[42817]],[[42817,42817],\"valid\"],[[42818,42818],\"mapped\",[42819]],[[42819,42819],\"valid\"],[[42820,42820],\"mapped\",[42821]],[[42821,42821],\"valid\"],[[42822,42822],\"mapped\",[42823]],[[42823,42823],\"valid\"],[[42824,42824],\"mapped\",[42825]],[[42825,42825],\"valid\"],[[42826,42826],\"mapped\",[42827]],[[42827,42827],\"valid\"],[[42828,42828],\"mapped\",[42829]],[[42829,42829],\"valid\"],[[42830,42830],\"mapped\",[42831]],[[42831,42831],\"valid\"],[[42832,42832],\"mapped\",[42833]],[[42833,42833],\"valid\"],[[42834,42834],\"mapped\",[42835]],[[42835,42835],\"valid\"],[[42836,42836],\"mapped\",[42837]],[[42837,42837],\"valid\"],[[42838,42838],\"mapped\",[42839]],[[42839,42839],\"valid\"],[[42840,42840],\"mapped\",[42841]],[[42841,42841],\"valid\"],[[42842,42842],\"mapped\",[42843]],[[42843,42843],\"valid\"],[[42844,42844],\"mapped\",[42845]],[[42845,42845],\"valid\"],[[42846,42846],\"mapped\",[42847]],[[42847,42847],\"valid\"],[[42848,42848],\"mapped\",[42849]],[[42849,42849],\"valid\"],[[42850,42850],\"mapped\",[42851]],[[42851,42851],\"valid\"],[[42852,42852],\"mapped\",[42853]],[[42853,42853],\"valid\"],[[42854,42854],\"mapped\",[42855]],[[42855,42855],\"valid\"],[[42856,42856],\"mapped\",[42857]],[[42857,42857],\"valid\"],[[42858,42858],\"mapped\",[42859]],[[42859,42859],\"valid\"],[[42860,42860],\"mapped\",[42861]],[[42861,42861],\"valid\"],[[42862,42862],\"mapped\",[42863]],[[42863,42863],\"valid\"],[[42864,42864],\"mapped\",[42863]],[[42865,42872],\"valid\"],[[42873,42873],\"mapped\",[42874]],[[42874,42874],\"valid\"],[[42875,42875],\"mapped\",[42876]],[[42876,42876],\"valid\"],[[42877,42877],\"mapped\",[7545]],[[42878,42878],\"mapped\",[42879]],[[42879,42879],\"valid\"],[[42880,42880],\"mapped\",[42881]],[[42881,42881],\"valid\"],[[42882,42882],\"mapped\",[42883]],[[42883,42883],\"valid\"],[[42884,42884],\"mapped\",[42885]],[[42885,42885],\"valid\"],[[42886,42886],\"mapped\",[42887]],[[42887,42888],\"valid\"],[[42889,42890],\"valid\",[],\"NV8\"],[[42891,42891],\"mapped\",[42892]],[[42892,42892],\"valid\"],[[42893,42893],\"mapped\",[613]],[[42894,42894],\"valid\"],[[42895,42895],\"valid\"],[[42896,42896],\"mapped\",[42897]],[[42897,42897],\"valid\"],[[42898,42898],\"mapped\",[42899]],[[42899,42899],\"valid\"],[[42900,42901],\"valid\"],[[42902,42902],\"mapped\",[42903]],[[42903,42903],\"valid\"],[[42904,42904],\"mapped\",[42905]],[[42905,42905],\"valid\"],[[42906,42906],\"mapped\",[42907]],[[42907,42907],\"valid\"],[[42908,42908],\"mapped\",[42909]],[[42909,42909],\"valid\"],[[42910,42910],\"mapped\",[42911]],[[42911,42911],\"valid\"],[[42912,42912],\"mapped\",[42913]],[[42913,42913],\"valid\"],[[42914,42914],\"mapped\",[42915]],[[42915,42915],\"valid\"],[[42916,42916],\"mapped\",[42917]],[[42917,42917],\"valid\"],[[42918,42918],\"mapped\",[42919]],[[42919,42919],\"valid\"],[[42920,42920],\"mapped\",[42921]],[[42921,42921],\"valid\"],[[42922,42922],\"mapped\",[614]],[[42923,42923],\"mapped\",[604]],[[42924,42924],\"mapped\",[609]],[[42925,42925],\"mapped\",[620]],[[42926,42927],\"disallowed\"],[[42928,42928],\"mapped\",[670]],[[42929,42929],\"mapped\",[647]],[[42930,42930],\"mapped\",[669]],[[42931,42931],\"mapped\",[43859]],[[42932,42932],\"mapped\",[42933]],[[42933,42933],\"valid\"],[[42934,42934],\"mapped\",[42935]],[[42935,42935],\"valid\"],[[42936,42998],\"disallowed\"],[[42999,42999],\"valid\"],[[43000,43000],\"mapped\",[295]],[[43001,43001],\"mapped\",[339]],[[43002,43002],\"valid\"],[[43003,43007],\"valid\"],[[43008,43047],\"valid\"],[[43048,43051],\"valid\",[],\"NV8\"],[[43052,43055],\"disallowed\"],[[43056,43065],\"valid\",[],\"NV8\"],[[43066,43071],\"disallowed\"],[[43072,43123],\"valid\"],[[43124,43127],\"valid\",[],\"NV8\"],[[43128,43135],\"disallowed\"],[[43136,43204],\"valid\"],[[43205,43213],\"disallowed\"],[[43214,43215],\"valid\",[],\"NV8\"],[[43216,43225],\"valid\"],[[43226,43231],\"disallowed\"],[[43232,43255],\"valid\"],[[43256,43258],\"valid\",[],\"NV8\"],[[43259,43259],\"valid\"],[[43260,43260],\"valid\",[],\"NV8\"],[[43261,43261],\"valid\"],[[43262,43263],\"disallowed\"],[[43264,43309],\"valid\"],[[43310,43311],\"valid\",[],\"NV8\"],[[43312,43347],\"valid\"],[[43348,43358],\"disallowed\"],[[43359,43359],\"valid\",[],\"NV8\"],[[43360,43388],\"valid\",[],\"NV8\"],[[43389,43391],\"disallowed\"],[[43392,43456],\"valid\"],[[43457,43469],\"valid\",[],\"NV8\"],[[43470,43470],\"disallowed\"],[[43471,43481],\"valid\"],[[43482,43485],\"disallowed\"],[[43486,43487],\"valid\",[],\"NV8\"],[[43488,43518],\"valid\"],[[43519,43519],\"disallowed\"],[[43520,43574],\"valid\"],[[43575,43583],\"disallowed\"],[[43584,43597],\"valid\"],[[43598,43599],\"disallowed\"],[[43600,43609],\"valid\"],[[43610,43611],\"disallowed\"],[[43612,43615],\"valid\",[],\"NV8\"],[[43616,43638],\"valid\"],[[43639,43641],\"valid\",[],\"NV8\"],[[43642,43643],\"valid\"],[[43644,43647],\"valid\"],[[43648,43714],\"valid\"],[[43715,43738],\"disallowed\"],[[43739,43741],\"valid\"],[[43742,43743],\"valid\",[],\"NV8\"],[[43744,43759],\"valid\"],[[43760,43761],\"valid\",[],\"NV8\"],[[43762,43766],\"valid\"],[[43767,43776],\"disallowed\"],[[43777,43782],\"valid\"],[[43783,43784],\"disallowed\"],[[43785,43790],\"valid\"],[[43791,43792],\"disallowed\"],[[43793,43798],\"valid\"],[[43799,43807],\"disallowed\"],[[43808,43814],\"valid\"],[[43815,43815],\"disallowed\"],[[43816,43822],\"valid\"],[[43823,43823],\"disallowed\"],[[43824,43866],\"valid\"],[[43867,43867],\"valid\",[],\"NV8\"],[[43868,43868],\"mapped\",[42791]],[[43869,43869],\"mapped\",[43831]],[[43870,43870],\"mapped\",[619]],[[43871,43871],\"mapped\",[43858]],[[43872,43875],\"valid\"],[[43876,43877],\"valid\"],[[43878,43887],\"disallowed\"],[[43888,43888],\"mapped\",[5024]],[[43889,43889],\"mapped\",[5025]],[[43890,43890],\"mapped\",[5026]],[[43891,43891],\"mapped\",[5027]],[[43892,43892],\"mapped\",[5028]],[[43893,43893],\"mapped\",[5029]],[[43894,43894],\"mapped\",[5030]],[[43895,43895],\"mapped\",[5031]],[[43896,43896],\"mapped\",[5032]],[[43897,43897],\"mapped\",[5033]],[[43898,43898],\"mapped\",[5034]],[[43899,43899],\"mapped\",[5035]],[[43900,43900],\"mapped\",[5036]],[[43901,43901],\"mapped\",[5037]],[[43902,43902],\"mapped\",[5038]],[[43903,43903],\"mapped\",[5039]],[[43904,43904],\"mapped\",[5040]],[[43905,43905],\"mapped\",[5041]],[[43906,43906],\"mapped\",[5042]],[[43907,43907],\"mapped\",[5043]],[[43908,43908],\"mapped\",[5044]],[[43909,43909],\"mapped\",[5045]],[[43910,43910],\"mapped\",[5046]],[[43911,43911],\"mapped\",[5047]],[[43912,43912],\"mapped\",[5048]],[[43913,43913],\"mapped\",[5049]],[[43914,43914],\"mapped\",[5050]],[[43915,43915],\"mapped\",[5051]],[[43916,43916],\"mapped\",[5052]],[[43917,43917],\"mapped\",[5053]],[[43918,43918],\"mapped\",[5054]],[[43919,43919],\"mapped\",[5055]],[[43920,43920],\"mapped\",[5056]],[[43921,43921],\"mapped\",[5057]],[[43922,43922],\"mapped\",[5058]],[[43923,43923],\"mapped\",[5059]],[[43924,43924],\"mapped\",[5060]],[[43925,43925],\"mapped\",[5061]],[[43926,43926],\"mapped\",[5062]],[[43927,43927],\"mapped\",[5063]],[[43928,43928],\"mapped\",[5064]],[[43929,43929],\"mapped\",[5065]],[[43930,43930],\"mapped\",[5066]],[[43931,43931],\"mapped\",[5067]],[[43932,43932],\"mapped\",[5068]],[[43933,43933],\"mapped\",[5069]],[[43934,43934],\"mapped\",[5070]],[[43935,43935],\"mapped\",[5071]],[[43936,43936],\"mapped\",[5072]],[[43937,43937],\"mapped\",[5073]],[[43938,43938],\"mapped\",[5074]],[[43939,43939],\"mapped\",[5075]],[[43940,43940],\"mapped\",[5076]],[[43941,43941],\"mapped\",[5077]],[[43942,43942],\"mapped\",[5078]],[[43943,43943],\"mapped\",[5079]],[[43944,43944],\"mapped\",[5080]],[[43945,43945],\"mapped\",[5081]],[[43946,43946],\"mapped\",[5082]],[[43947,43947],\"mapped\",[5083]],[[43948,43948],\"mapped\",[5084]],[[43949,43949],\"mapped\",[5085]],[[43950,43950],\"mapped\",[5086]],[[43951,43951],\"mapped\",[5087]],[[43952,43952],\"mapped\",[5088]],[[43953,43953],\"mapped\",[5089]],[[43954,43954],\"mapped\",[5090]],[[43955,43955],\"mapped\",[5091]],[[43956,43956],\"mapped\",[5092]],[[43957,43957],\"mapped\",[5093]],[[43958,43958],\"mapped\",[5094]],[[43959,43959],\"mapped\",[5095]],[[43960,43960],\"mapped\",[5096]],[[43961,43961],\"mapped\",[5097]],[[43962,43962],\"mapped\",[5098]],[[43963,43963],\"mapped\",[5099]],[[43964,43964],\"mapped\",[5100]],[[43965,43965],\"mapped\",[5101]],[[43966,43966],\"mapped\",[5102]],[[43967,43967],\"mapped\",[5103]],[[43968,44010],\"valid\"],[[44011,44011],\"valid\",[],\"NV8\"],[[44012,44013],\"valid\"],[[44014,44015],\"disallowed\"],[[44016,44025],\"valid\"],[[44026,44031],\"disallowed\"],[[44032,55203],\"valid\"],[[55204,55215],\"disallowed\"],[[55216,55238],\"valid\",[],\"NV8\"],[[55239,55242],\"disallowed\"],[[55243,55291],\"valid\",[],\"NV8\"],[[55292,55295],\"disallowed\"],[[55296,57343],\"disallowed\"],[[57344,63743],\"disallowed\"],[[63744,63744],\"mapped\",[35912]],[[63745,63745],\"mapped\",[26356]],[[63746,63746],\"mapped\",[36554]],[[63747,63747],\"mapped\",[36040]],[[63748,63748],\"mapped\",[28369]],[[63749,63749],\"mapped\",[20018]],[[63750,63750],\"mapped\",[21477]],[[63751,63752],\"mapped\",[40860]],[[63753,63753],\"mapped\",[22865]],[[63754,63754],\"mapped\",[37329]],[[63755,63755],\"mapped\",[21895]],[[63756,63756],\"mapped\",[22856]],[[63757,63757],\"mapped\",[25078]],[[63758,63758],\"mapped\",[30313]],[[63759,63759],\"mapped\",[32645]],[[63760,63760],\"mapped\",[34367]],[[63761,63761],\"mapped\",[34746]],[[63762,63762],\"mapped\",[35064]],[[63763,63763],\"mapped\",[37007]],[[63764,63764],\"mapped\",[27138]],[[63765,63765],\"mapped\",[27931]],[[63766,63766],\"mapped\",[28889]],[[63767,63767],\"mapped\",[29662]],[[63768,63768],\"mapped\",[33853]],[[63769,63769],\"mapped\",[37226]],[[63770,63770],\"mapped\",[39409]],[[63771,63771],\"mapped\",[20098]],[[63772,63772],\"mapped\",[21365]],[[63773,63773],\"mapped\",[27396]],[[63774,63774],\"mapped\",[29211]],[[63775,63775],\"mapped\",[34349]],[[63776,63776],\"mapped\",[40478]],[[63777,63777],\"mapped\",[23888]],[[63778,63778],\"mapped\",[28651]],[[63779,63779],\"mapped\",[34253]],[[63780,63780],\"mapped\",[35172]],[[63781,63781],\"mapped\",[25289]],[[63782,63782],\"mapped\",[33240]],[[63783,63783],\"mapped\",[34847]],[[63784,63784],\"mapped\",[24266]],[[63785,63785],\"mapped\",[26391]],[[63786,63786],\"mapped\",[28010]],[[63787,63787],\"mapped\",[29436]],[[63788,63788],\"mapped\",[37070]],[[63789,63789],\"mapped\",[20358]],[[63790,63790],\"mapped\",[20919]],[[63791,63791],\"mapped\",[21214]],[[63792,63792],\"mapped\",[25796]],[[63793,63793],\"mapped\",[27347]],[[63794,63794],\"mapped\",[29200]],[[63795,63795],\"mapped\",[30439]],[[63796,63796],\"mapped\",[32769]],[[63797,63797],\"mapped\",[34310]],[[63798,63798],\"mapped\",[34396]],[[63799,63799],\"mapped\",[36335]],[[63800,63800],\"mapped\",[38706]],[[63801,63801],\"mapped\",[39791]],[[63802,63802],\"mapped\",[40442]],[[63803,63803],\"mapped\",[30860]],[[63804,63804],\"mapped\",[31103]],[[63805,63805],\"mapped\",[32160]],[[63806,63806],\"mapped\",[33737]],[[63807,63807],\"mapped\",[37636]],[[63808,63808],\"mapped\",[40575]],[[63809,63809],\"mapped\",[35542]],[[63810,63810],\"mapped\",[22751]],[[63811,63811],\"mapped\",[24324]],[[63812,63812],\"mapped\",[31840]],[[63813,63813],\"mapped\",[32894]],[[63814,63814],\"mapped\",[29282]],[[63815,63815],\"mapped\",[30922]],[[63816,63816],\"mapped\",[36034]],[[63817,63817],\"mapped\",[38647]],[[63818,63818],\"mapped\",[22744]],[[63819,63819],\"mapped\",[23650]],[[63820,63820],\"mapped\",[27155]],[[63821,63821],\"mapped\",[28122]],[[63822,63822],\"mapped\",[28431]],[[63823,63823],\"mapped\",[32047]],[[63824,63824],\"mapped\",[32311]],[[63825,63825],\"mapped\",[38475]],[[63826,63826],\"mapped\",[21202]],[[63827,63827],\"mapped\",[32907]],[[63828,63828],\"mapped\",[20956]],[[63829,63829],\"mapped\",[20940]],[[63830,63830],\"mapped\",[31260]],[[63831,63831],\"mapped\",[32190]],[[63832,63832],\"mapped\",[33777]],[[63833,63833],\"mapped\",[38517]],[[63834,63834],\"mapped\",[35712]],[[63835,63835],\"mapped\",[25295]],[[63836,63836],\"mapped\",[27138]],[[63837,63837],\"mapped\",[35582]],[[63838,63838],\"mapped\",[20025]],[[63839,63839],\"mapped\",[23527]],[[63840,63840],\"mapped\",[24594]],[[63841,63841],\"mapped\",[29575]],[[63842,63842],\"mapped\",[30064]],[[63843,63843],\"mapped\",[21271]],[[63844,63844],\"mapped\",[30971]],[[63845,63845],\"mapped\",[20415]],[[63846,63846],\"mapped\",[24489]],[[63847,63847],\"mapped\",[19981]],[[63848,63848],\"mapped\",[27852]],[[63849,63849],\"mapped\",[25976]],[[63850,63850],\"mapped\",[32034]],[[63851,63851],\"mapped\",[21443]],[[63852,63852],\"mapped\",[22622]],[[63853,63853],\"mapped\",[30465]],[[63854,63854],\"mapped\",[33865]],[[63855,63855],\"mapped\",[35498]],[[63856,63856],\"mapped\",[27578]],[[63857,63857],\"mapped\",[36784]],[[63858,63858],\"mapped\",[27784]],[[63859,63859],\"mapped\",[25342]],[[63860,63860],\"mapped\",[33509]],[[63861,63861],\"mapped\",[25504]],[[63862,63862],\"mapped\",[30053]],[[63863,63863],\"mapped\",[20142]],[[63864,63864],\"mapped\",[20841]],[[63865,63865],\"mapped\",[20937]],[[63866,63866],\"mapped\",[26753]],[[63867,63867],\"mapped\",[31975]],[[63868,63868],\"mapped\",[33391]],[[63869,63869],\"mapped\",[35538]],[[63870,63870],\"mapped\",[37327]],[[63871,63871],\"mapped\",[21237]],[[63872,63872],\"mapped\",[21570]],[[63873,63873],\"mapped\",[22899]],[[63874,63874],\"mapped\",[24300]],[[63875,63875],\"mapped\",[26053]],[[63876,63876],\"mapped\",[28670]],[[63877,63877],\"mapped\",[31018]],[[63878,63878],\"mapped\",[38317]],[[63879,63879],\"mapped\",[39530]],[[63880,63880],\"mapped\",[40599]],[[63881,63881],\"mapped\",[40654]],[[63882,63882],\"mapped\",[21147]],[[63883,63883],\"mapped\",[26310]],[[63884,63884],\"mapped\",[27511]],[[63885,63885],\"mapped\",[36706]],[[63886,63886],\"mapped\",[24180]],[[63887,63887],\"mapped\",[24976]],[[63888,63888],\"mapped\",[25088]],[[63889,63889],\"mapped\",[25754]],[[63890,63890],\"mapped\",[28451]],[[63891,63891],\"mapped\",[29001]],[[63892,63892],\"mapped\",[29833]],[[63893,63893],\"mapped\",[31178]],[[63894,63894],\"mapped\",[32244]],[[63895,63895],\"mapped\",[32879]],[[63896,63896],\"mapped\",[36646]],[[63897,63897],\"mapped\",[34030]],[[63898,63898],\"mapped\",[36899]],[[63899,63899],\"mapped\",[37706]],[[63900,63900],\"mapped\",[21015]],[[63901,63901],\"mapped\",[21155]],[[63902,63902],\"mapped\",[21693]],[[63903,63903],\"mapped\",[28872]],[[63904,63904],\"mapped\",[35010]],[[63905,63905],\"mapped\",[35498]],[[63906,63906],\"mapped\",[24265]],[[63907,63907],\"mapped\",[24565]],[[63908,63908],\"mapped\",[25467]],[[63909,63909],\"mapped\",[27566]],[[63910,63910],\"mapped\",[31806]],[[63911,63911],\"mapped\",[29557]],[[63912,63912],\"mapped\",[20196]],[[63913,63913],\"mapped\",[22265]],[[63914,63914],\"mapped\",[23527]],[[63915,63915],\"mapped\",[23994]],[[63916,63916],\"mapped\",[24604]],[[63917,63917],\"mapped\",[29618]],[[63918,63918],\"mapped\",[29801]],[[63919,63919],\"mapped\",[32666]],[[63920,63920],\"mapped\",[32838]],[[63921,63921],\"mapped\",[37428]],[[63922,63922],\"mapped\",[38646]],[[63923,63923],\"mapped\",[38728]],[[63924,63924],\"mapped\",[38936]],[[63925,63925],\"mapped\",[20363]],[[63926,63926],\"mapped\",[31150]],[[63927,63927],\"mapped\",[37300]],[[63928,63928],\"mapped\",[38584]],[[63929,63929],\"mapped\",[24801]],[[63930,63930],\"mapped\",[20102]],[[63931,63931],\"mapped\",[20698]],[[63932,63932],\"mapped\",[23534]],[[63933,63933],\"mapped\",[23615]],[[63934,63934],\"mapped\",[26009]],[[63935,63935],\"mapped\",[27138]],[[63936,63936],\"mapped\",[29134]],[[63937,63937],\"mapped\",[30274]],[[63938,63938],\"mapped\",[34044]],[[63939,63939],\"mapped\",[36988]],[[63940,63940],\"mapped\",[40845]],[[63941,63941],\"mapped\",[26248]],[[63942,63942],\"mapped\",[38446]],[[63943,63943],\"mapped\",[21129]],[[63944,63944],\"mapped\",[26491]],[[63945,63945],\"mapped\",[26611]],[[63946,63946],\"mapped\",[27969]],[[63947,63947],\"mapped\",[28316]],[[63948,63948],\"mapped\",[29705]],[[63949,63949],\"mapped\",[30041]],[[63950,63950],\"mapped\",[30827]],[[63951,63951],\"mapped\",[32016]],[[63952,63952],\"mapped\",[39006]],[[63953,63953],\"mapped\",[20845]],[[63954,63954],\"mapped\",[25134]],[[63955,63955],\"mapped\",[38520]],[[63956,63956],\"mapped\",[20523]],[[63957,63957],\"mapped\",[23833]],[[63958,63958],\"mapped\",[28138]],[[63959,63959],\"mapped\",[36650]],[[63960,63960],\"mapped\",[24459]],[[63961,63961],\"mapped\",[24900]],[[63962,63962],\"mapped\",[26647]],[[63963,63963],\"mapped\",[29575]],[[63964,63964],\"mapped\",[38534]],[[63965,63965],\"mapped\",[21033]],[[63966,63966],\"mapped\",[21519]],[[63967,63967],\"mapped\",[23653]],[[63968,63968],\"mapped\",[26131]],[[63969,63969],\"mapped\",[26446]],[[63970,63970],\"mapped\",[26792]],[[63971,63971],\"mapped\",[27877]],[[63972,63972],\"mapped\",[29702]],[[63973,63973],\"mapped\",[30178]],[[63974,63974],\"mapped\",[32633]],[[63975,63975],\"mapped\",[35023]],[[63976,63976],\"mapped\",[35041]],[[63977,63977],\"mapped\",[37324]],[[63978,63978],\"mapped\",[38626]],[[63979,63979],\"mapped\",[21311]],[[63980,63980],\"mapped\",[28346]],[[63981,63981],\"mapped\",[21533]],[[63982,63982],\"mapped\",[29136]],[[63983,63983],\"mapped\",[29848]],[[63984,63984],\"mapped\",[34298]],[[63985,63985],\"mapped\",[38563]],[[63986,63986],\"mapped\",[40023]],[[63987,63987],\"mapped\",[40607]],[[63988,63988],\"mapped\",[26519]],[[63989,63989],\"mapped\",[28107]],[[63990,63990],\"mapped\",[33256]],[[63991,63991],\"mapped\",[31435]],[[63992,63992],\"mapped\",[31520]],[[63993,63993],\"mapped\",[31890]],[[63994,63994],\"mapped\",[29376]],[[63995,63995],\"mapped\",[28825]],[[63996,63996],\"mapped\",[35672]],[[63997,63997],\"mapped\",[20160]],[[63998,63998],\"mapped\",[33590]],[[63999,63999],\"mapped\",[21050]],[[64000,64000],\"mapped\",[20999]],[[64001,64001],\"mapped\",[24230]],[[64002,64002],\"mapped\",[25299]],[[64003,64003],\"mapped\",[31958]],[[64004,64004],\"mapped\",[23429]],[[64005,64005],\"mapped\",[27934]],[[64006,64006],\"mapped\",[26292]],[[64007,64007],\"mapped\",[36667]],[[64008,64008],\"mapped\",[34892]],[[64009,64009],\"mapped\",[38477]],[[64010,64010],\"mapped\",[35211]],[[64011,64011],\"mapped\",[24275]],[[64012,64012],\"mapped\",[20800]],[[64013,64013],\"mapped\",[21952]],[[64014,64015],\"valid\"],[[64016,64016],\"mapped\",[22618]],[[64017,64017],\"valid\"],[[64018,64018],\"mapped\",[26228]],[[64019,64020],\"valid\"],[[64021,64021],\"mapped\",[20958]],[[64022,64022],\"mapped\",[29482]],[[64023,64023],\"mapped\",[30410]],[[64024,64024],\"mapped\",[31036]],[[64025,64025],\"mapped\",[31070]],[[64026,64026],\"mapped\",[31077]],[[64027,64027],\"mapped\",[31119]],[[64028,64028],\"mapped\",[38742]],[[64029,64029],\"mapped\",[31934]],[[64030,64030],\"mapped\",[32701]],[[64031,64031],\"valid\"],[[64032,64032],\"mapped\",[34322]],[[64033,64033],\"valid\"],[[64034,64034],\"mapped\",[35576]],[[64035,64036],\"valid\"],[[64037,64037],\"mapped\",[36920]],[[64038,64038],\"mapped\",[37117]],[[64039,64041],\"valid\"],[[64042,64042],\"mapped\",[39151]],[[64043,64043],\"mapped\",[39164]],[[64044,64044],\"mapped\",[39208]],[[64045,64045],\"mapped\",[40372]],[[64046,64046],\"mapped\",[37086]],[[64047,64047],\"mapped\",[38583]],[[64048,64048],\"mapped\",[20398]],[[64049,64049],\"mapped\",[20711]],[[64050,64050],\"mapped\",[20813]],[[64051,64051],\"mapped\",[21193]],[[64052,64052],\"mapped\",[21220]],[[64053,64053],\"mapped\",[21329]],[[64054,64054],\"mapped\",[21917]],[[64055,64055],\"mapped\",[22022]],[[64056,64056],\"mapped\",[22120]],[[64057,64057],\"mapped\",[22592]],[[64058,64058],\"mapped\",[22696]],[[64059,64059],\"mapped\",[23652]],[[64060,64060],\"mapped\",[23662]],[[64061,64061],\"mapped\",[24724]],[[64062,64062],\"mapped\",[24936]],[[64063,64063],\"mapped\",[24974]],[[64064,64064],\"mapped\",[25074]],[[64065,64065],\"mapped\",[25935]],[[64066,64066],\"mapped\",[26082]],[[64067,64067],\"mapped\",[26257]],[[64068,64068],\"mapped\",[26757]],[[64069,64069],\"mapped\",[28023]],[[64070,64070],\"mapped\",[28186]],[[64071,64071],\"mapped\",[28450]],[[64072,64072],\"mapped\",[29038]],[[64073,64073],\"mapped\",[29227]],[[64074,64074],\"mapped\",[29730]],[[64075,64075],\"mapped\",[30865]],[[64076,64076],\"mapped\",[31038]],[[64077,64077],\"mapped\",[31049]],[[64078,64078],\"mapped\",[31048]],[[64079,64079],\"mapped\",[31056]],[[64080,64080],\"mapped\",[31062]],[[64081,64081],\"mapped\",[31069]],[[64082,64082],\"mapped\",[31117]],[[64083,64083],\"mapped\",[31118]],[[64084,64084],\"mapped\",[31296]],[[64085,64085],\"mapped\",[31361]],[[64086,64086],\"mapped\",[31680]],[[64087,64087],\"mapped\",[32244]],[[64088,64088],\"mapped\",[32265]],[[64089,64089],\"mapped\",[32321]],[[64090,64090],\"mapped\",[32626]],[[64091,64091],\"mapped\",[32773]],[[64092,64092],\"mapped\",[33261]],[[64093,64094],\"mapped\",[33401]],[[64095,64095],\"mapped\",[33879]],[[64096,64096],\"mapped\",[35088]],[[64097,64097],\"mapped\",[35222]],[[64098,64098],\"mapped\",[35585]],[[64099,64099],\"mapped\",[35641]],[[64100,64100],\"mapped\",[36051]],[[64101,64101],\"mapped\",[36104]],[[64102,64102],\"mapped\",[36790]],[[64103,64103],\"mapped\",[36920]],[[64104,64104],\"mapped\",[38627]],[[64105,64105],\"mapped\",[38911]],[[64106,64106],\"mapped\",[38971]],[[64107,64107],\"mapped\",[24693]],[[64108,64108],\"mapped\",[148206]],[[64109,64109],\"mapped\",[33304]],[[64110,64111],\"disallowed\"],[[64112,64112],\"mapped\",[20006]],[[64113,64113],\"mapped\",[20917]],[[64114,64114],\"mapped\",[20840]],[[64115,64115],\"mapped\",[20352]],[[64116,64116],\"mapped\",[20805]],[[64117,64117],\"mapped\",[20864]],[[64118,64118],\"mapped\",[21191]],[[64119,64119],\"mapped\",[21242]],[[64120,64120],\"mapped\",[21917]],[[64121,64121],\"mapped\",[21845]],[[64122,64122],\"mapped\",[21913]],[[64123,64123],\"mapped\",[21986]],[[64124,64124],\"mapped\",[22618]],[[64125,64125],\"mapped\",[22707]],[[64126,64126],\"mapped\",[22852]],[[64127,64127],\"mapped\",[22868]],[[64128,64128],\"mapped\",[23138]],[[64129,64129],\"mapped\",[23336]],[[64130,64130],\"mapped\",[24274]],[[64131,64131],\"mapped\",[24281]],[[64132,64132],\"mapped\",[24425]],[[64133,64133],\"mapped\",[24493]],[[64134,64134],\"mapped\",[24792]],[[64135,64135],\"mapped\",[24910]],[[64136,64136],\"mapped\",[24840]],[[64137,64137],\"mapped\",[24974]],[[64138,64138],\"mapped\",[24928]],[[64139,64139],\"mapped\",[25074]],[[64140,64140],\"mapped\",[25140]],[[64141,64141],\"mapped\",[25540]],[[64142,64142],\"mapped\",[25628]],[[64143,64143],\"mapped\",[25682]],[[64144,64144],\"mapped\",[25942]],[[64145,64145],\"mapped\",[26228]],[[64146,64146],\"mapped\",[26391]],[[64147,64147],\"mapped\",[26395]],[[64148,64148],\"mapped\",[26454]],[[64149,64149],\"mapped\",[27513]],[[64150,64150],\"mapped\",[27578]],[[64151,64151],\"mapped\",[27969]],[[64152,64152],\"mapped\",[28379]],[[64153,64153],\"mapped\",[28363]],[[64154,64154],\"mapped\",[28450]],[[64155,64155],\"mapped\",[28702]],[[64156,64156],\"mapped\",[29038]],[[64157,64157],\"mapped\",[30631]],[[64158,64158],\"mapped\",[29237]],[[64159,64159],\"mapped\",[29359]],[[64160,64160],\"mapped\",[29482]],[[64161,64161],\"mapped\",[29809]],[[64162,64162],\"mapped\",[29958]],[[64163,64163],\"mapped\",[30011]],[[64164,64164],\"mapped\",[30237]],[[64165,64165],\"mapped\",[30239]],[[64166,64166],\"mapped\",[30410]],[[64167,64167],\"mapped\",[30427]],[[64168,64168],\"mapped\",[30452]],[[64169,64169],\"mapped\",[30538]],[[64170,64170],\"mapped\",[30528]],[[64171,64171],\"mapped\",[30924]],[[64172,64172],\"mapped\",[31409]],[[64173,64173],\"mapped\",[31680]],[[64174,64174],\"mapped\",[31867]],[[64175,64175],\"mapped\",[32091]],[[64176,64176],\"mapped\",[32244]],[[64177,64177],\"mapped\",[32574]],[[64178,64178],\"mapped\",[32773]],[[64179,64179],\"mapped\",[33618]],[[64180,64180],\"mapped\",[33775]],[[64181,64181],\"mapped\",[34681]],[[64182,64182],\"mapped\",[35137]],[[64183,64183],\"mapped\",[35206]],[[64184,64184],\"mapped\",[35222]],[[64185,64185],\"mapped\",[35519]],[[64186,64186],\"mapped\",[35576]],[[64187,64187],\"mapped\",[35531]],[[64188,64188],\"mapped\",[35585]],[[64189,64189],\"mapped\",[35582]],[[64190,64190],\"mapped\",[35565]],[[64191,64191],\"mapped\",[35641]],[[64192,64192],\"mapped\",[35722]],[[64193,64193],\"mapped\",[36104]],[[64194,64194],\"mapped\",[36664]],[[64195,64195],\"mapped\",[36978]],[[64196,64196],\"mapped\",[37273]],[[64197,64197],\"mapped\",[37494]],[[64198,64198],\"mapped\",[38524]],[[64199,64199],\"mapped\",[38627]],[[64200,64200],\"mapped\",[38742]],[[64201,64201],\"mapped\",[38875]],[[64202,64202],\"mapped\",[38911]],[[64203,64203],\"mapped\",[38923]],[[64204,64204],\"mapped\",[38971]],[[64205,64205],\"mapped\",[39698]],[[64206,64206],\"mapped\",[40860]],[[64207,64207],\"mapped\",[141386]],[[64208,64208],\"mapped\",[141380]],[[64209,64209],\"mapped\",[144341]],[[64210,64210],\"mapped\",[15261]],[[64211,64211],\"mapped\",[16408]],[[64212,64212],\"mapped\",[16441]],[[64213,64213],\"mapped\",[152137]],[[64214,64214],\"mapped\",[154832]],[[64215,64215],\"mapped\",[163539]],[[64216,64216],\"mapped\",[40771]],[[64217,64217],\"mapped\",[40846]],[[64218,64255],\"disallowed\"],[[64256,64256],\"mapped\",[102,102]],[[64257,64257],\"mapped\",[102,105]],[[64258,64258],\"mapped\",[102,108]],[[64259,64259],\"mapped\",[102,102,105]],[[64260,64260],\"mapped\",[102,102,108]],[[64261,64262],\"mapped\",[115,116]],[[64263,64274],\"disallowed\"],[[64275,64275],\"mapped\",[1396,1398]],[[64276,64276],\"mapped\",[1396,1381]],[[64277,64277],\"mapped\",[1396,1387]],[[64278,64278],\"mapped\",[1406,1398]],[[64279,64279],\"mapped\",[1396,1389]],[[64280,64284],\"disallowed\"],[[64285,64285],\"mapped\",[1497,1460]],[[64286,64286],\"valid\"],[[64287,64287],\"mapped\",[1522,1463]],[[64288,64288],\"mapped\",[1506]],[[64289,64289],\"mapped\",[1488]],[[64290,64290],\"mapped\",[1491]],[[64291,64291],\"mapped\",[1492]],[[64292,64292],\"mapped\",[1499]],[[64293,64293],\"mapped\",[1500]],[[64294,64294],\"mapped\",[1501]],[[64295,64295],\"mapped\",[1512]],[[64296,64296],\"mapped\",[1514]],[[64297,64297],\"disallowed_STD3_mapped\",[43]],[[64298,64298],\"mapped\",[1513,1473]],[[64299,64299],\"mapped\",[1513,1474]],[[64300,64300],\"mapped\",[1513,1468,1473]],[[64301,64301],\"mapped\",[1513,1468,1474]],[[64302,64302],\"mapped\",[1488,1463]],[[64303,64303],\"mapped\",[1488,1464]],[[64304,64304],\"mapped\",[1488,1468]],[[64305,64305],\"mapped\",[1489,1468]],[[64306,64306],\"mapped\",[1490,1468]],[[64307,64307],\"mapped\",[1491,1468]],[[64308,64308],\"mapped\",[1492,1468]],[[64309,64309],\"mapped\",[1493,1468]],[[64310,64310],\"mapped\",[1494,1468]],[[64311,64311],\"disallowed\"],[[64312,64312],\"mapped\",[1496,1468]],[[64313,64313],\"mapped\",[1497,1468]],[[64314,64314],\"mapped\",[1498,1468]],[[64315,64315],\"mapped\",[1499,1468]],[[64316,64316],\"mapped\",[1500,1468]],[[64317,64317],\"disallowed\"],[[64318,64318],\"mapped\",[1502,1468]],[[64319,64319],\"disallowed\"],[[64320,64320],\"mapped\",[1504,1468]],[[64321,64321],\"mapped\",[1505,1468]],[[64322,64322],\"disallowed\"],[[64323,64323],\"mapped\",[1507,1468]],[[64324,64324],\"mapped\",[1508,1468]],[[64325,64325],\"disallowed\"],[[64326,64326],\"mapped\",[1510,1468]],[[64327,64327],\"mapped\",[1511,1468]],[[64328,64328],\"mapped\",[1512,1468]],[[64329,64329],\"mapped\",[1513,1468]],[[64330,64330],\"mapped\",[1514,1468]],[[64331,64331],\"mapped\",[1493,1465]],[[64332,64332],\"mapped\",[1489,1471]],[[64333,64333],\"mapped\",[1499,1471]],[[64334,64334],\"mapped\",[1508,1471]],[[64335,64335],\"mapped\",[1488,1500]],[[64336,64337],\"mapped\",[1649]],[[64338,64341],\"mapped\",[1659]],[[64342,64345],\"mapped\",[1662]],[[64346,64349],\"mapped\",[1664]],[[64350,64353],\"mapped\",[1658]],[[64354,64357],\"mapped\",[1663]],[[64358,64361],\"mapped\",[1657]],[[64362,64365],\"mapped\",[1700]],[[64366,64369],\"mapped\",[1702]],[[64370,64373],\"mapped\",[1668]],[[64374,64377],\"mapped\",[1667]],[[64378,64381],\"mapped\",[1670]],[[64382,64385],\"mapped\",[1671]],[[64386,64387],\"mapped\",[1677]],[[64388,64389],\"mapped\",[1676]],[[64390,64391],\"mapped\",[1678]],[[64392,64393],\"mapped\",[1672]],[[64394,64395],\"mapped\",[1688]],[[64396,64397],\"mapped\",[1681]],[[64398,64401],\"mapped\",[1705]],[[64402,64405],\"mapped\",[1711]],[[64406,64409],\"mapped\",[1715]],[[64410,64413],\"mapped\",[1713]],[[64414,64415],\"mapped\",[1722]],[[64416,64419],\"mapped\",[1723]],[[64420,64421],\"mapped\",[1728]],[[64422,64425],\"mapped\",[1729]],[[64426,64429],\"mapped\",[1726]],[[64430,64431],\"mapped\",[1746]],[[64432,64433],\"mapped\",[1747]],[[64434,64449],\"valid\",[],\"NV8\"],[[64450,64466],\"disallowed\"],[[64467,64470],\"mapped\",[1709]],[[64471,64472],\"mapped\",[1735]],[[64473,64474],\"mapped\",[1734]],[[64475,64476],\"mapped\",[1736]],[[64477,64477],\"mapped\",[1735,1652]],[[64478,64479],\"mapped\",[1739]],[[64480,64481],\"mapped\",[1733]],[[64482,64483],\"mapped\",[1737]],[[64484,64487],\"mapped\",[1744]],[[64488,64489],\"mapped\",[1609]],[[64490,64491],\"mapped\",[1574,1575]],[[64492,64493],\"mapped\",[1574,1749]],[[64494,64495],\"mapped\",[1574,1608]],[[64496,64497],\"mapped\",[1574,1735]],[[64498,64499],\"mapped\",[1574,1734]],[[64500,64501],\"mapped\",[1574,1736]],[[64502,64504],\"mapped\",[1574,1744]],[[64505,64507],\"mapped\",[1574,1609]],[[64508,64511],\"mapped\",[1740]],[[64512,64512],\"mapped\",[1574,1580]],[[64513,64513],\"mapped\",[1574,1581]],[[64514,64514],\"mapped\",[1574,1605]],[[64515,64515],\"mapped\",[1574,1609]],[[64516,64516],\"mapped\",[1574,1610]],[[64517,64517],\"mapped\",[1576,1580]],[[64518,64518],\"mapped\",[1576,1581]],[[64519,64519],\"mapped\",[1576,1582]],[[64520,64520],\"mapped\",[1576,1605]],[[64521,64521],\"mapped\",[1576,1609]],[[64522,64522],\"mapped\",[1576,1610]],[[64523,64523],\"mapped\",[1578,1580]],[[64524,64524],\"mapped\",[1578,1581]],[[64525,64525],\"mapped\",[1578,1582]],[[64526,64526],\"mapped\",[1578,1605]],[[64527,64527],\"mapped\",[1578,1609]],[[64528,64528],\"mapped\",[1578,1610]],[[64529,64529],\"mapped\",[1579,1580]],[[64530,64530],\"mapped\",[1579,1605]],[[64531,64531],\"mapped\",[1579,1609]],[[64532,64532],\"mapped\",[1579,1610]],[[64533,64533],\"mapped\",[1580,1581]],[[64534,64534],\"mapped\",[1580,1605]],[[64535,64535],\"mapped\",[1581,1580]],[[64536,64536],\"mapped\",[1581,1605]],[[64537,64537],\"mapped\",[1582,1580]],[[64538,64538],\"mapped\",[1582,1581]],[[64539,64539],\"mapped\",[1582,1605]],[[64540,64540],\"mapped\",[1587,1580]],[[64541,64541],\"mapped\",[1587,1581]],[[64542,64542],\"mapped\",[1587,1582]],[[64543,64543],\"mapped\",[1587,1605]],[[64544,64544],\"mapped\",[1589,1581]],[[64545,64545],\"mapped\",[1589,1605]],[[64546,64546],\"mapped\",[1590,1580]],[[64547,64547],\"mapped\",[1590,1581]],[[64548,64548],\"mapped\",[1590,1582]],[[64549,64549],\"mapped\",[1590,1605]],[[64550,64550],\"mapped\",[1591,1581]],[[64551,64551],\"mapped\",[1591,1605]],[[64552,64552],\"mapped\",[1592,1605]],[[64553,64553],\"mapped\",[1593,1580]],[[64554,64554],\"mapped\",[1593,1605]],[[64555,64555],\"mapped\",[1594,1580]],[[64556,64556],\"mapped\",[1594,1605]],[[64557,64557],\"mapped\",[1601,1580]],[[64558,64558],\"mapped\",[1601,1581]],[[64559,64559],\"mapped\",[1601,1582]],[[64560,64560],\"mapped\",[1601,1605]],[[64561,64561],\"mapped\",[1601,1609]],[[64562,64562],\"mapped\",[1601,1610]],[[64563,64563],\"mapped\",[1602,1581]],[[64564,64564],\"mapped\",[1602,1605]],[[64565,64565],\"mapped\",[1602,1609]],[[64566,64566],\"mapped\",[1602,1610]],[[64567,64567],\"mapped\",[1603,1575]],[[64568,64568],\"mapped\",[1603,1580]],[[64569,64569],\"mapped\",[1603,1581]],[[64570,64570],\"mapped\",[1603,1582]],[[64571,64571],\"mapped\",[1603,1604]],[[64572,64572],\"mapped\",[1603,1605]],[[64573,64573],\"mapped\",[1603,1609]],[[64574,64574],\"mapped\",[1603,1610]],[[64575,64575],\"mapped\",[1604,1580]],[[64576,64576],\"mapped\",[1604,1581]],[[64577,64577],\"mapped\",[1604,1582]],[[64578,64578],\"mapped\",[1604,1605]],[[64579,64579],\"mapped\",[1604,1609]],[[64580,64580],\"mapped\",[1604,1610]],[[64581,64581],\"mapped\",[1605,1580]],[[64582,64582],\"mapped\",[1605,1581]],[[64583,64583],\"mapped\",[1605,1582]],[[64584,64584],\"mapped\",[1605,1605]],[[64585,64585],\"mapped\",[1605,1609]],[[64586,64586],\"mapped\",[1605,1610]],[[64587,64587],\"mapped\",[1606,1580]],[[64588,64588],\"mapped\",[1606,1581]],[[64589,64589],\"mapped\",[1606,1582]],[[64590,64590],\"mapped\",[1606,1605]],[[64591,64591],\"mapped\",[1606,1609]],[[64592,64592],\"mapped\",[1606,1610]],[[64593,64593],\"mapped\",[1607,1580]],[[64594,64594],\"mapped\",[1607,1605]],[[64595,64595],\"mapped\",[1607,1609]],[[64596,64596],\"mapped\",[1607,1610]],[[64597,64597],\"mapped\",[1610,1580]],[[64598,64598],\"mapped\",[1610,1581]],[[64599,64599],\"mapped\",[1610,1582]],[[64600,64600],\"mapped\",[1610,1605]],[[64601,64601],\"mapped\",[1610,1609]],[[64602,64602],\"mapped\",[1610,1610]],[[64603,64603],\"mapped\",[1584,1648]],[[64604,64604],\"mapped\",[1585,1648]],[[64605,64605],\"mapped\",[1609,1648]],[[64606,64606],\"disallowed_STD3_mapped\",[32,1612,1617]],[[64607,64607],\"disallowed_STD3_mapped\",[32,1613,1617]],[[64608,64608],\"disallowed_STD3_mapped\",[32,1614,1617]],[[64609,64609],\"disallowed_STD3_mapped\",[32,1615,1617]],[[64610,64610],\"disallowed_STD3_mapped\",[32,1616,1617]],[[64611,64611],\"disallowed_STD3_mapped\",[32,1617,1648]],[[64612,64612],\"mapped\",[1574,1585]],[[64613,64613],\"mapped\",[1574,1586]],[[64614,64614],\"mapped\",[1574,1605]],[[64615,64615],\"mapped\",[1574,1606]],[[64616,64616],\"mapped\",[1574,1609]],[[64617,64617],\"mapped\",[1574,1610]],[[64618,64618],\"mapped\",[1576,1585]],[[64619,64619],\"mapped\",[1576,1586]],[[64620,64620],\"mapped\",[1576,1605]],[[64621,64621],\"mapped\",[1576,1606]],[[64622,64622],\"mapped\",[1576,1609]],[[64623,64623],\"mapped\",[1576,1610]],[[64624,64624],\"mapped\",[1578,1585]],[[64625,64625],\"mapped\",[1578,1586]],[[64626,64626],\"mapped\",[1578,1605]],[[64627,64627],\"mapped\",[1578,1606]],[[64628,64628],\"mapped\",[1578,1609]],[[64629,64629],\"mapped\",[1578,1610]],[[64630,64630],\"mapped\",[1579,1585]],[[64631,64631],\"mapped\",[1579,1586]],[[64632,64632],\"mapped\",[1579,1605]],[[64633,64633],\"mapped\",[1579,1606]],[[64634,64634],\"mapped\",[1579,1609]],[[64635,64635],\"mapped\",[1579,1610]],[[64636,64636],\"mapped\",[1601,1609]],[[64637,64637],\"mapped\",[1601,1610]],[[64638,64638],\"mapped\",[1602,1609]],[[64639,64639],\"mapped\",[1602,1610]],[[64640,64640],\"mapped\",[1603,1575]],[[64641,64641],\"mapped\",[1603,1604]],[[64642,64642],\"mapped\",[1603,1605]],[[64643,64643],\"mapped\",[1603,1609]],[[64644,64644],\"mapped\",[1603,1610]],[[64645,64645],\"mapped\",[1604,1605]],[[64646,64646],\"mapped\",[1604,1609]],[[64647,64647],\"mapped\",[1604,1610]],[[64648,64648],\"mapped\",[1605,1575]],[[64649,64649],\"mapped\",[1605,1605]],[[64650,64650],\"mapped\",[1606,1585]],[[64651,64651],\"mapped\",[1606,1586]],[[64652,64652],\"mapped\",[1606,1605]],[[64653,64653],\"mapped\",[1606,1606]],[[64654,64654],\"mapped\",[1606,1609]],[[64655,64655],\"mapped\",[1606,1610]],[[64656,64656],\"mapped\",[1609,1648]],[[64657,64657],\"mapped\",[1610,1585]],[[64658,64658],\"mapped\",[1610,1586]],[[64659,64659],\"mapped\",[1610,1605]],[[64660,64660],\"mapped\",[1610,1606]],[[64661,64661],\"mapped\",[1610,1609]],[[64662,64662],\"mapped\",[1610,1610]],[[64663,64663],\"mapped\",[1574,1580]],[[64664,64664],\"mapped\",[1574,1581]],[[64665,64665],\"mapped\",[1574,1582]],[[64666,64666],\"mapped\",[1574,1605]],[[64667,64667],\"mapped\",[1574,1607]],[[64668,64668],\"mapped\",[1576,1580]],[[64669,64669],\"mapped\",[1576,1581]],[[64670,64670],\"mapped\",[1576,1582]],[[64671,64671],\"mapped\",[1576,1605]],[[64672,64672],\"mapped\",[1576,1607]],[[64673,64673],\"mapped\",[1578,1580]],[[64674,64674],\"mapped\",[1578,1581]],[[64675,64675],\"mapped\",[1578,1582]],[[64676,64676],\"mapped\",[1578,1605]],[[64677,64677],\"mapped\",[1578,1607]],[[64678,64678],\"mapped\",[1579,1605]],[[64679,64679],\"mapped\",[1580,1581]],[[64680,64680],\"mapped\",[1580,1605]],[[64681,64681],\"mapped\",[1581,1580]],[[64682,64682],\"mapped\",[1581,1605]],[[64683,64683],\"mapped\",[1582,1580]],[[64684,64684],\"mapped\",[1582,1605]],[[64685,64685],\"mapped\",[1587,1580]],[[64686,64686],\"mapped\",[1587,1581]],[[64687,64687],\"mapped\",[1587,1582]],[[64688,64688],\"mapped\",[1587,1605]],[[64689,64689],\"mapped\",[1589,1581]],[[64690,64690],\"mapped\",[1589,1582]],[[64691,64691],\"mapped\",[1589,1605]],[[64692,64692],\"mapped\",[1590,1580]],[[64693,64693],\"mapped\",[1590,1581]],[[64694,64694],\"mapped\",[1590,1582]],[[64695,64695],\"mapped\",[1590,1605]],[[64696,64696],\"mapped\",[1591,1581]],[[64697,64697],\"mapped\",[1592,1605]],[[64698,64698],\"mapped\",[1593,1580]],[[64699,64699],\"mapped\",[1593,1605]],[[64700,64700],\"mapped\",[1594,1580]],[[64701,64701],\"mapped\",[1594,1605]],[[64702,64702],\"mapped\",[1601,1580]],[[64703,64703],\"mapped\",[1601,1581]],[[64704,64704],\"mapped\",[1601,1582]],[[64705,64705],\"mapped\",[1601,1605]],[[64706,64706],\"mapped\",[1602,1581]],[[64707,64707],\"mapped\",[1602,1605]],[[64708,64708],\"mapped\",[1603,1580]],[[64709,64709],\"mapped\",[1603,1581]],[[64710,64710],\"mapped\",[1603,1582]],[[64711,64711],\"mapped\",[1603,1604]],[[64712,64712],\"mapped\",[1603,1605]],[[64713,64713],\"mapped\",[1604,1580]],[[64714,64714],\"mapped\",[1604,1581]],[[64715,64715],\"mapped\",[1604,1582]],[[64716,64716],\"mapped\",[1604,1605]],[[64717,64717],\"mapped\",[1604,1607]],[[64718,64718],\"mapped\",[1605,1580]],[[64719,64719],\"mapped\",[1605,1581]],[[64720,64720],\"mapped\",[1605,1582]],[[64721,64721],\"mapped\",[1605,1605]],[[64722,64722],\"mapped\",[1606,1580]],[[64723,64723],\"mapped\",[1606,1581]],[[64724,64724],\"mapped\",[1606,1582]],[[64725,64725],\"mapped\",[1606,1605]],[[64726,64726],\"mapped\",[1606,1607]],[[64727,64727],\"mapped\",[1607,1580]],[[64728,64728],\"mapped\",[1607,1605]],[[64729,64729],\"mapped\",[1607,1648]],[[64730,64730],\"mapped\",[1610,1580]],[[64731,64731],\"mapped\",[1610,1581]],[[64732,64732],\"mapped\",[1610,1582]],[[64733,64733],\"mapped\",[1610,1605]],[[64734,64734],\"mapped\",[1610,1607]],[[64735,64735],\"mapped\",[1574,1605]],[[64736,64736],\"mapped\",[1574,1607]],[[64737,64737],\"mapped\",[1576,1605]],[[64738,64738],\"mapped\",[1576,1607]],[[64739,64739],\"mapped\",[1578,1605]],[[64740,64740],\"mapped\",[1578,1607]],[[64741,64741],\"mapped\",[1579,1605]],[[64742,64742],\"mapped\",[1579,1607]],[[64743,64743],\"mapped\",[1587,1605]],[[64744,64744],\"mapped\",[1587,1607]],[[64745,64745],\"mapped\",[1588,1605]],[[64746,64746],\"mapped\",[1588,1607]],[[64747,64747],\"mapped\",[1603,1604]],[[64748,64748],\"mapped\",[1603,1605]],[[64749,64749],\"mapped\",[1604,1605]],[[64750,64750],\"mapped\",[1606,1605]],[[64751,64751],\"mapped\",[1606,1607]],[[64752,64752],\"mapped\",[1610,1605]],[[64753,64753],\"mapped\",[1610,1607]],[[64754,64754],\"mapped\",[1600,1614,1617]],[[64755,64755],\"mapped\",[1600,1615,1617]],[[64756,64756],\"mapped\",[1600,1616,1617]],[[64757,64757],\"mapped\",[1591,1609]],[[64758,64758],\"mapped\",[1591,1610]],[[64759,64759],\"mapped\",[1593,1609]],[[64760,64760],\"mapped\",[1593,1610]],[[64761,64761],\"mapped\",[1594,1609]],[[64762,64762],\"mapped\",[1594,1610]],[[64763,64763],\"mapped\",[1587,1609]],[[64764,64764],\"mapped\",[1587,1610]],[[64765,64765],\"mapped\",[1588,1609]],[[64766,64766],\"mapped\",[1588,1610]],[[64767,64767],\"mapped\",[1581,1609]],[[64768,64768],\"mapped\",[1581,1610]],[[64769,64769],\"mapped\",[1580,1609]],[[64770,64770],\"mapped\",[1580,1610]],[[64771,64771],\"mapped\",[1582,1609]],[[64772,64772],\"mapped\",[1582,1610]],[[64773,64773],\"mapped\",[1589,1609]],[[64774,64774],\"mapped\",[1589,1610]],[[64775,64775],\"mapped\",[1590,1609]],[[64776,64776],\"mapped\",[1590,1610]],[[64777,64777],\"mapped\",[1588,1580]],[[64778,64778],\"mapped\",[1588,1581]],[[64779,64779],\"mapped\",[1588,1582]],[[64780,64780],\"mapped\",[1588,1605]],[[64781,64781],\"mapped\",[1588,1585]],[[64782,64782],\"mapped\",[1587,1585]],[[64783,64783],\"mapped\",[1589,1585]],[[64784,64784],\"mapped\",[1590,1585]],[[64785,64785],\"mapped\",[1591,1609]],[[64786,64786],\"mapped\",[1591,1610]],[[64787,64787],\"mapped\",[1593,1609]],[[64788,64788],\"mapped\",[1593,1610]],[[64789,64789],\"mapped\",[1594,1609]],[[64790,64790],\"mapped\",[1594,1610]],[[64791,64791],\"mapped\",[1587,1609]],[[64792,64792],\"mapped\",[1587,1610]],[[64793,64793],\"mapped\",[1588,1609]],[[64794,64794],\"mapped\",[1588,1610]],[[64795,64795],\"mapped\",[1581,1609]],[[64796,64796],\"mapped\",[1581,1610]],[[64797,64797],\"mapped\",[1580,1609]],[[64798,64798],\"mapped\",[1580,1610]],[[64799,64799],\"mapped\",[1582,1609]],[[64800,64800],\"mapped\",[1582,1610]],[[64801,64801],\"mapped\",[1589,1609]],[[64802,64802],\"mapped\",[1589,1610]],[[64803,64803],\"mapped\",[1590,1609]],[[64804,64804],\"mapped\",[1590,1610]],[[64805,64805],\"mapped\",[1588,1580]],[[64806,64806],\"mapped\",[1588,1581]],[[64807,64807],\"mapped\",[1588,1582]],[[64808,64808],\"mapped\",[1588,1605]],[[64809,64809],\"mapped\",[1588,1585]],[[64810,64810],\"mapped\",[1587,1585]],[[64811,64811],\"mapped\",[1589,1585]],[[64812,64812],\"mapped\",[1590,1585]],[[64813,64813],\"mapped\",[1588,1580]],[[64814,64814],\"mapped\",[1588,1581]],[[64815,64815],\"mapped\",[1588,1582]],[[64816,64816],\"mapped\",[1588,1605]],[[64817,64817],\"mapped\",[1587,1607]],[[64818,64818],\"mapped\",[1588,1607]],[[64819,64819],\"mapped\",[1591,1605]],[[64820,64820],\"mapped\",[1587,1580]],[[64821,64821],\"mapped\",[1587,1581]],[[64822,64822],\"mapped\",[1587,1582]],[[64823,64823],\"mapped\",[1588,1580]],[[64824,64824],\"mapped\",[1588,1581]],[[64825,64825],\"mapped\",[1588,1582]],[[64826,64826],\"mapped\",[1591,1605]],[[64827,64827],\"mapped\",[1592,1605]],[[64828,64829],\"mapped\",[1575,1611]],[[64830,64831],\"valid\",[],\"NV8\"],[[64832,64847],\"disallowed\"],[[64848,64848],\"mapped\",[1578,1580,1605]],[[64849,64850],\"mapped\",[1578,1581,1580]],[[64851,64851],\"mapped\",[1578,1581,1605]],[[64852,64852],\"mapped\",[1578,1582,1605]],[[64853,64853],\"mapped\",[1578,1605,1580]],[[64854,64854],\"mapped\",[1578,1605,1581]],[[64855,64855],\"mapped\",[1578,1605,1582]],[[64856,64857],\"mapped\",[1580,1605,1581]],[[64858,64858],\"mapped\",[1581,1605,1610]],[[64859,64859],\"mapped\",[1581,1605,1609]],[[64860,64860],\"mapped\",[1587,1581,1580]],[[64861,64861],\"mapped\",[1587,1580,1581]],[[64862,64862],\"mapped\",[1587,1580,1609]],[[64863,64864],\"mapped\",[1587,1605,1581]],[[64865,64865],\"mapped\",[1587,1605,1580]],[[64866,64867],\"mapped\",[1587,1605,1605]],[[64868,64869],\"mapped\",[1589,1581,1581]],[[64870,64870],\"mapped\",[1589,1605,1605]],[[64871,64872],\"mapped\",[1588,1581,1605]],[[64873,64873],\"mapped\",[1588,1580,1610]],[[64874,64875],\"mapped\",[1588,1605,1582]],[[64876,64877],\"mapped\",[1588,1605,1605]],[[64878,64878],\"mapped\",[1590,1581,1609]],[[64879,64880],\"mapped\",[1590,1582,1605]],[[64881,64882],\"mapped\",[1591,1605,1581]],[[64883,64883],\"mapped\",[1591,1605,1605]],[[64884,64884],\"mapped\",[1591,1605,1610]],[[64885,64885],\"mapped\",[1593,1580,1605]],[[64886,64887],\"mapped\",[1593,1605,1605]],[[64888,64888],\"mapped\",[1593,1605,1609]],[[64889,64889],\"mapped\",[1594,1605,1605]],[[64890,64890],\"mapped\",[1594,1605,1610]],[[64891,64891],\"mapped\",[1594,1605,1609]],[[64892,64893],\"mapped\",[1601,1582,1605]],[[64894,64894],\"mapped\",[1602,1605,1581]],[[64895,64895],\"mapped\",[1602,1605,1605]],[[64896,64896],\"mapped\",[1604,1581,1605]],[[64897,64897],\"mapped\",[1604,1581,1610]],[[64898,64898],\"mapped\",[1604,1581,1609]],[[64899,64900],\"mapped\",[1604,1580,1580]],[[64901,64902],\"mapped\",[1604,1582,1605]],[[64903,64904],\"mapped\",[1604,1605,1581]],[[64905,64905],\"mapped\",[1605,1581,1580]],[[64906,64906],\"mapped\",[1605,1581,1605]],[[64907,64907],\"mapped\",[1605,1581,1610]],[[64908,64908],\"mapped\",[1605,1580,1581]],[[64909,64909],\"mapped\",[1605,1580,1605]],[[64910,64910],\"mapped\",[1605,1582,1580]],[[64911,64911],\"mapped\",[1605,1582,1605]],[[64912,64913],\"disallowed\"],[[64914,64914],\"mapped\",[1605,1580,1582]],[[64915,64915],\"mapped\",[1607,1605,1580]],[[64916,64916],\"mapped\",[1607,1605,1605]],[[64917,64917],\"mapped\",[1606,1581,1605]],[[64918,64918],\"mapped\",[1606,1581,1609]],[[64919,64920],\"mapped\",[1606,1580,1605]],[[64921,64921],\"mapped\",[1606,1580,1609]],[[64922,64922],\"mapped\",[1606,1605,1610]],[[64923,64923],\"mapped\",[1606,1605,1609]],[[64924,64925],\"mapped\",[1610,1605,1605]],[[64926,64926],\"mapped\",[1576,1582,1610]],[[64927,64927],\"mapped\",[1578,1580,1610]],[[64928,64928],\"mapped\",[1578,1580,1609]],[[64929,64929],\"mapped\",[1578,1582,1610]],[[64930,64930],\"mapped\",[1578,1582,1609]],[[64931,64931],\"mapped\",[1578,1605,1610]],[[64932,64932],\"mapped\",[1578,1605,1609]],[[64933,64933],\"mapped\",[1580,1605,1610]],[[64934,64934],\"mapped\",[1580,1581,1609]],[[64935,64935],\"mapped\",[1580,1605,1609]],[[64936,64936],\"mapped\",[1587,1582,1609]],[[64937,64937],\"mapped\",[1589,1581,1610]],[[64938,64938],\"mapped\",[1588,1581,1610]],[[64939,64939],\"mapped\",[1590,1581,1610]],[[64940,64940],\"mapped\",[1604,1580,1610]],[[64941,64941],\"mapped\",[1604,1605,1610]],[[64942,64942],\"mapped\",[1610,1581,1610]],[[64943,64943],\"mapped\",[1610,1580,1610]],[[64944,64944],\"mapped\",[1610,1605,1610]],[[64945,64945],\"mapped\",[1605,1605,1610]],[[64946,64946],\"mapped\",[1602,1605,1610]],[[64947,64947],\"mapped\",[1606,1581,1610]],[[64948,64948],\"mapped\",[1602,1605,1581]],[[64949,64949],\"mapped\",[1604,1581,1605]],[[64950,64950],\"mapped\",[1593,1605,1610]],[[64951,64951],\"mapped\",[1603,1605,1610]],[[64952,64952],\"mapped\",[1606,1580,1581]],[[64953,64953],\"mapped\",[1605,1582,1610]],[[64954,64954],\"mapped\",[1604,1580,1605]],[[64955,64955],\"mapped\",[1603,1605,1605]],[[64956,64956],\"mapped\",[1604,1580,1605]],[[64957,64957],\"mapped\",[1606,1580,1581]],[[64958,64958],\"mapped\",[1580,1581,1610]],[[64959,64959],\"mapped\",[1581,1580,1610]],[[64960,64960],\"mapped\",[1605,1580,1610]],[[64961,64961],\"mapped\",[1601,1605,1610]],[[64962,64962],\"mapped\",[1576,1581,1610]],[[64963,64963],\"mapped\",[1603,1605,1605]],[[64964,64964],\"mapped\",[1593,1580,1605]],[[64965,64965],\"mapped\",[1589,1605,1605]],[[64966,64966],\"mapped\",[1587,1582,1610]],[[64967,64967],\"mapped\",[1606,1580,1610]],[[64968,64975],\"disallowed\"],[[64976,65007],\"disallowed\"],[[65008,65008],\"mapped\",[1589,1604,1746]],[[65009,65009],\"mapped\",[1602,1604,1746]],[[65010,65010],\"mapped\",[1575,1604,1604,1607]],[[65011,65011],\"mapped\",[1575,1603,1576,1585]],[[65012,65012],\"mapped\",[1605,1581,1605,1583]],[[65013,65013],\"mapped\",[1589,1604,1593,1605]],[[65014,65014],\"mapped\",[1585,1587,1608,1604]],[[65015,65015],\"mapped\",[1593,1604,1610,1607]],[[65016,65016],\"mapped\",[1608,1587,1604,1605]],[[65017,65017],\"mapped\",[1589,1604,1609]],[[65018,65018],\"disallowed_STD3_mapped\",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],\"disallowed_STD3_mapped\",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],\"mapped\",[1585,1740,1575,1604]],[[65021,65021],\"valid\",[],\"NV8\"],[[65022,65023],\"disallowed\"],[[65024,65039],\"ignored\"],[[65040,65040],\"disallowed_STD3_mapped\",[44]],[[65041,65041],\"mapped\",[12289]],[[65042,65042],\"disallowed\"],[[65043,65043],\"disallowed_STD3_mapped\",[58]],[[65044,65044],\"disallowed_STD3_mapped\",[59]],[[65045,65045],\"disallowed_STD3_mapped\",[33]],[[65046,65046],\"disallowed_STD3_mapped\",[63]],[[65047,65047],\"mapped\",[12310]],[[65048,65048],\"mapped\",[12311]],[[65049,65049],\"disallowed\"],[[65050,65055],\"disallowed\"],[[65056,65059],\"valid\"],[[65060,65062],\"valid\"],[[65063,65069],\"valid\"],[[65070,65071],\"valid\"],[[65072,65072],\"disallowed\"],[[65073,65073],\"mapped\",[8212]],[[65074,65074],\"mapped\",[8211]],[[65075,65076],\"disallowed_STD3_mapped\",[95]],[[65077,65077],\"disallowed_STD3_mapped\",[40]],[[65078,65078],\"disallowed_STD3_mapped\",[41]],[[65079,65079],\"disallowed_STD3_mapped\",[123]],[[65080,65080],\"disallowed_STD3_mapped\",[125]],[[65081,65081],\"mapped\",[12308]],[[65082,65082],\"mapped\",[12309]],[[65083,65083],\"mapped\",[12304]],[[65084,65084],\"mapped\",[12305]],[[65085,65085],\"mapped\",[12298]],[[65086,65086],\"mapped\",[12299]],[[65087,65087],\"mapped\",[12296]],[[65088,65088],\"mapped\",[12297]],[[65089,65089],\"mapped\",[12300]],[[65090,65090],\"mapped\",[12301]],[[65091,65091],\"mapped\",[12302]],[[65092,65092],\"mapped\",[12303]],[[65093,65094],\"valid\",[],\"NV8\"],[[65095,65095],\"disallowed_STD3_mapped\",[91]],[[65096,65096],\"disallowed_STD3_mapped\",[93]],[[65097,65100],\"disallowed_STD3_mapped\",[32,773]],[[65101,65103],\"disallowed_STD3_mapped\",[95]],[[65104,65104],\"disallowed_STD3_mapped\",[44]],[[65105,65105],\"mapped\",[12289]],[[65106,65106],\"disallowed\"],[[65107,65107],\"disallowed\"],[[65108,65108],\"disallowed_STD3_mapped\",[59]],[[65109,65109],\"disallowed_STD3_mapped\",[58]],[[65110,65110],\"disallowed_STD3_mapped\",[63]],[[65111,65111],\"disallowed_STD3_mapped\",[33]],[[65112,65112],\"mapped\",[8212]],[[65113,65113],\"disallowed_STD3_mapped\",[40]],[[65114,65114],\"disallowed_STD3_mapped\",[41]],[[65115,65115],\"disallowed_STD3_mapped\",[123]],[[65116,65116],\"disallowed_STD3_mapped\",[125]],[[65117,65117],\"mapped\",[12308]],[[65118,65118],\"mapped\",[12309]],[[65119,65119],\"disallowed_STD3_mapped\",[35]],[[65120,65120],\"disallowed_STD3_mapped\",[38]],[[65121,65121],\"disallowed_STD3_mapped\",[42]],[[65122,65122],\"disallowed_STD3_mapped\",[43]],[[65123,65123],\"mapped\",[45]],[[65124,65124],\"disallowed_STD3_mapped\",[60]],[[65125,65125],\"disallowed_STD3_mapped\",[62]],[[65126,65126],\"disallowed_STD3_mapped\",[61]],[[65127,65127],\"disallowed\"],[[65128,65128],\"disallowed_STD3_mapped\",[92]],[[65129,65129],\"disallowed_STD3_mapped\",[36]],[[65130,65130],\"disallowed_STD3_mapped\",[37]],[[65131,65131],\"disallowed_STD3_mapped\",[64]],[[65132,65135],\"disallowed\"],[[65136,65136],\"disallowed_STD3_mapped\",[32,1611]],[[65137,65137],\"mapped\",[1600,1611]],[[65138,65138],\"disallowed_STD3_mapped\",[32,1612]],[[65139,65139],\"valid\"],[[65140,65140],\"disallowed_STD3_mapped\",[32,1613]],[[65141,65141],\"disallowed\"],[[65142,65142],\"disallowed_STD3_mapped\",[32,1614]],[[65143,65143],\"mapped\",[1600,1614]],[[65144,65144],\"disallowed_STD3_mapped\",[32,1615]],[[65145,65145],\"mapped\",[1600,1615]],[[65146,65146],\"disallowed_STD3_mapped\",[32,1616]],[[65147,65147],\"mapped\",[1600,1616]],[[65148,65148],\"disallowed_STD3_mapped\",[32,1617]],[[65149,65149],\"mapped\",[1600,1617]],[[65150,65150],\"disallowed_STD3_mapped\",[32,1618]],[[65151,65151],\"mapped\",[1600,1618]],[[65152,65152],\"mapped\",[1569]],[[65153,65154],\"mapped\",[1570]],[[65155,65156],\"mapped\",[1571]],[[65157,65158],\"mapped\",[1572]],[[65159,65160],\"mapped\",[1573]],[[65161,65164],\"mapped\",[1574]],[[65165,65166],\"mapped\",[1575]],[[65167,65170],\"mapped\",[1576]],[[65171,65172],\"mapped\",[1577]],[[65173,65176],\"mapped\",[1578]],[[65177,65180],\"mapped\",[1579]],[[65181,65184],\"mapped\",[1580]],[[65185,65188],\"mapped\",[1581]],[[65189,65192],\"mapped\",[1582]],[[65193,65194],\"mapped\",[1583]],[[65195,65196],\"mapped\",[1584]],[[65197,65198],\"mapped\",[1585]],[[65199,65200],\"mapped\",[1586]],[[65201,65204],\"mapped\",[1587]],[[65205,65208],\"mapped\",[1588]],[[65209,65212],\"mapped\",[1589]],[[65213,65216],\"mapped\",[1590]],[[65217,65220],\"mapped\",[1591]],[[65221,65224],\"mapped\",[1592]],[[65225,65228],\"mapped\",[1593]],[[65229,65232],\"mapped\",[1594]],[[65233,65236],\"mapped\",[1601]],[[65237,65240],\"mapped\",[1602]],[[65241,65244],\"mapped\",[1603]],[[65245,65248],\"mapped\",[1604]],[[65249,65252],\"mapped\",[1605]],[[65253,65256],\"mapped\",[1606]],[[65257,65260],\"mapped\",[1607]],[[65261,65262],\"mapped\",[1608]],[[65263,65264],\"mapped\",[1609]],[[65265,65268],\"mapped\",[1610]],[[65269,65270],\"mapped\",[1604,1570]],[[65271,65272],\"mapped\",[1604,1571]],[[65273,65274],\"mapped\",[1604,1573]],[[65275,65276],\"mapped\",[1604,1575]],[[65277,65278],\"disallowed\"],[[65279,65279],\"ignored\"],[[65280,65280],\"disallowed\"],[[65281,65281],\"disallowed_STD3_mapped\",[33]],[[65282,65282],\"disallowed_STD3_mapped\",[34]],[[65283,65283],\"disallowed_STD3_mapped\",[35]],[[65284,65284],\"disallowed_STD3_mapped\",[36]],[[65285,65285],\"disallowed_STD3_mapped\",[37]],[[65286,65286],\"disallowed_STD3_mapped\",[38]],[[65287,65287],\"disallowed_STD3_mapped\",[39]],[[65288,65288],\"disallowed_STD3_mapped\",[40]],[[65289,65289],\"disallowed_STD3_mapped\",[41]],[[65290,65290],\"disallowed_STD3_mapped\",[42]],[[65291,65291],\"disallowed_STD3_mapped\",[43]],[[65292,65292],\"disallowed_STD3_mapped\",[44]],[[65293,65293],\"mapped\",[45]],[[65294,65294],\"mapped\",[46]],[[65295,65295],\"disallowed_STD3_mapped\",[47]],[[65296,65296],\"mapped\",[48]],[[65297,65297],\"mapped\",[49]],[[65298,65298],\"mapped\",[50]],[[65299,65299],\"mapped\",[51]],[[65300,65300],\"mapped\",[52]],[[65301,65301],\"mapped\",[53]],[[65302,65302],\"mapped\",[54]],[[65303,65303],\"mapped\",[55]],[[65304,65304],\"mapped\",[56]],[[65305,65305],\"mapped\",[57]],[[65306,65306],\"disallowed_STD3_mapped\",[58]],[[65307,65307],\"disallowed_STD3_mapped\",[59]],[[65308,65308],\"disallowed_STD3_mapped\",[60]],[[65309,65309],\"disallowed_STD3_mapped\",[61]],[[65310,65310],\"disallowed_STD3_mapped\",[62]],[[65311,65311],\"disallowed_STD3_mapped\",[63]],[[65312,65312],\"disallowed_STD3_mapped\",[64]],[[65313,65313],\"mapped\",[97]],[[65314,65314],\"mapped\",[98]],[[65315,65315],\"mapped\",[99]],[[65316,65316],\"mapped\",[100]],[[65317,65317],\"mapped\",[101]],[[65318,65318],\"mapped\",[102]],[[65319,65319],\"mapped\",[103]],[[65320,65320],\"mapped\",[104]],[[65321,65321],\"mapped\",[105]],[[65322,65322],\"mapped\",[106]],[[65323,65323],\"mapped\",[107]],[[65324,65324],\"mapped\",[108]],[[65325,65325],\"mapped\",[109]],[[65326,65326],\"mapped\",[110]],[[65327,65327],\"mapped\",[111]],[[65328,65328],\"mapped\",[112]],[[65329,65329],\"mapped\",[113]],[[65330,65330],\"mapped\",[114]],[[65331,65331],\"mapped\",[115]],[[65332,65332],\"mapped\",[116]],[[65333,65333],\"mapped\",[117]],[[65334,65334],\"mapped\",[118]],[[65335,65335],\"mapped\",[119]],[[65336,65336],\"mapped\",[120]],[[65337,65337],\"mapped\",[121]],[[65338,65338],\"mapped\",[122]],[[65339,65339],\"disallowed_STD3_mapped\",[91]],[[65340,65340],\"disallowed_STD3_mapped\",[92]],[[65341,65341],\"disallowed_STD3_mapped\",[93]],[[65342,65342],\"disallowed_STD3_mapped\",[94]],[[65343,65343],\"disallowed_STD3_mapped\",[95]],[[65344,65344],\"disallowed_STD3_mapped\",[96]],[[65345,65345],\"mapped\",[97]],[[65346,65346],\"mapped\",[98]],[[65347,65347],\"mapped\",[99]],[[65348,65348],\"mapped\",[100]],[[65349,65349],\"mapped\",[101]],[[65350,65350],\"mapped\",[102]],[[65351,65351],\"mapped\",[103]],[[65352,65352],\"mapped\",[104]],[[65353,65353],\"mapped\",[105]],[[65354,65354],\"mapped\",[106]],[[65355,65355],\"mapped\",[107]],[[65356,65356],\"mapped\",[108]],[[65357,65357],\"mapped\",[109]],[[65358,65358],\"mapped\",[110]],[[65359,65359],\"mapped\",[111]],[[65360,65360],\"mapped\",[112]],[[65361,65361],\"mapped\",[113]],[[65362,65362],\"mapped\",[114]],[[65363,65363],\"mapped\",[115]],[[65364,65364],\"mapped\",[116]],[[65365,65365],\"mapped\",[117]],[[65366,65366],\"mapped\",[118]],[[65367,65367],\"mapped\",[119]],[[65368,65368],\"mapped\",[120]],[[65369,65369],\"mapped\",[121]],[[65370,65370],\"mapped\",[122]],[[65371,65371],\"disallowed_STD3_mapped\",[123]],[[65372,65372],\"disallowed_STD3_mapped\",[124]],[[65373,65373],\"disallowed_STD3_mapped\",[125]],[[65374,65374],\"disallowed_STD3_mapped\",[126]],[[65375,65375],\"mapped\",[10629]],[[65376,65376],\"mapped\",[10630]],[[65377,65377],\"mapped\",[46]],[[65378,65378],\"mapped\",[12300]],[[65379,65379],\"mapped\",[12301]],[[65380,65380],\"mapped\",[12289]],[[65381,65381],\"mapped\",[12539]],[[65382,65382],\"mapped\",[12530]],[[65383,65383],\"mapped\",[12449]],[[65384,65384],\"mapped\",[12451]],[[65385,65385],\"mapped\",[12453]],[[65386,65386],\"mapped\",[12455]],[[65387,65387],\"mapped\",[12457]],[[65388,65388],\"mapped\",[12515]],[[65389,65389],\"mapped\",[12517]],[[65390,65390],\"mapped\",[12519]],[[65391,65391],\"mapped\",[12483]],[[65392,65392],\"mapped\",[12540]],[[65393,65393],\"mapped\",[12450]],[[65394,65394],\"mapped\",[12452]],[[65395,65395],\"mapped\",[12454]],[[65396,65396],\"mapped\",[12456]],[[65397,65397],\"mapped\",[12458]],[[65398,65398],\"mapped\",[12459]],[[65399,65399],\"mapped\",[12461]],[[65400,65400],\"mapped\",[12463]],[[65401,65401],\"mapped\",[12465]],[[65402,65402],\"mapped\",[12467]],[[65403,65403],\"mapped\",[12469]],[[65404,65404],\"mapped\",[12471]],[[65405,65405],\"mapped\",[12473]],[[65406,65406],\"mapped\",[12475]],[[65407,65407],\"mapped\",[12477]],[[65408,65408],\"mapped\",[12479]],[[65409,65409],\"mapped\",[12481]],[[65410,65410],\"mapped\",[12484]],[[65411,65411],\"mapped\",[12486]],[[65412,65412],\"mapped\",[12488]],[[65413,65413],\"mapped\",[12490]],[[65414,65414],\"mapped\",[12491]],[[65415,65415],\"mapped\",[12492]],[[65416,65416],\"mapped\",[12493]],[[65417,65417],\"mapped\",[12494]],[[65418,65418],\"mapped\",[12495]],[[65419,65419],\"mapped\",[12498]],[[65420,65420],\"mapped\",[12501]],[[65421,65421],\"mapped\",[12504]],[[65422,65422],\"mapped\",[12507]],[[65423,65423],\"mapped\",[12510]],[[65424,65424],\"mapped\",[12511]],[[65425,65425],\"mapped\",[12512]],[[65426,65426],\"mapped\",[12513]],[[65427,65427],\"mapped\",[12514]],[[65428,65428],\"mapped\",[12516]],[[65429,65429],\"mapped\",[12518]],[[65430,65430],\"mapped\",[12520]],[[65431,65431],\"mapped\",[12521]],[[65432,65432],\"mapped\",[12522]],[[65433,65433],\"mapped\",[12523]],[[65434,65434],\"mapped\",[12524]],[[65435,65435],\"mapped\",[12525]],[[65436,65436],\"mapped\",[12527]],[[65437,65437],\"mapped\",[12531]],[[65438,65438],\"mapped\",[12441]],[[65439,65439],\"mapped\",[12442]],[[65440,65440],\"disallowed\"],[[65441,65441],\"mapped\",[4352]],[[65442,65442],\"mapped\",[4353]],[[65443,65443],\"mapped\",[4522]],[[65444,65444],\"mapped\",[4354]],[[65445,65445],\"mapped\",[4524]],[[65446,65446],\"mapped\",[4525]],[[65447,65447],\"mapped\",[4355]],[[65448,65448],\"mapped\",[4356]],[[65449,65449],\"mapped\",[4357]],[[65450,65450],\"mapped\",[4528]],[[65451,65451],\"mapped\",[4529]],[[65452,65452],\"mapped\",[4530]],[[65453,65453],\"mapped\",[4531]],[[65454,65454],\"mapped\",[4532]],[[65455,65455],\"mapped\",[4533]],[[65456,65456],\"mapped\",[4378]],[[65457,65457],\"mapped\",[4358]],[[65458,65458],\"mapped\",[4359]],[[65459,65459],\"mapped\",[4360]],[[65460,65460],\"mapped\",[4385]],[[65461,65461],\"mapped\",[4361]],[[65462,65462],\"mapped\",[4362]],[[65463,65463],\"mapped\",[4363]],[[65464,65464],\"mapped\",[4364]],[[65465,65465],\"mapped\",[4365]],[[65466,65466],\"mapped\",[4366]],[[65467,65467],\"mapped\",[4367]],[[65468,65468],\"mapped\",[4368]],[[65469,65469],\"mapped\",[4369]],[[65470,65470],\"mapped\",[4370]],[[65471,65473],\"disallowed\"],[[65474,65474],\"mapped\",[4449]],[[65475,65475],\"mapped\",[4450]],[[65476,65476],\"mapped\",[4451]],[[65477,65477],\"mapped\",[4452]],[[65478,65478],\"mapped\",[4453]],[[65479,65479],\"mapped\",[4454]],[[65480,65481],\"disallowed\"],[[65482,65482],\"mapped\",[4455]],[[65483,65483],\"mapped\",[4456]],[[65484,65484],\"mapped\",[4457]],[[65485,65485],\"mapped\",[4458]],[[65486,65486],\"mapped\",[4459]],[[65487,65487],\"mapped\",[4460]],[[65488,65489],\"disallowed\"],[[65490,65490],\"mapped\",[4461]],[[65491,65491],\"mapped\",[4462]],[[65492,65492],\"mapped\",[4463]],[[65493,65493],\"mapped\",[4464]],[[65494,65494],\"mapped\",[4465]],[[65495,65495],\"mapped\",[4466]],[[65496,65497],\"disallowed\"],[[65498,65498],\"mapped\",[4467]],[[65499,65499],\"mapped\",[4468]],[[65500,65500],\"mapped\",[4469]],[[65501,65503],\"disallowed\"],[[65504,65504],\"mapped\",[162]],[[65505,65505],\"mapped\",[163]],[[65506,65506],\"mapped\",[172]],[[65507,65507],\"disallowed_STD3_mapped\",[32,772]],[[65508,65508],\"mapped\",[166]],[[65509,65509],\"mapped\",[165]],[[65510,65510],\"mapped\",[8361]],[[65511,65511],\"disallowed\"],[[65512,65512],\"mapped\",[9474]],[[65513,65513],\"mapped\",[8592]],[[65514,65514],\"mapped\",[8593]],[[65515,65515],\"mapped\",[8594]],[[65516,65516],\"mapped\",[8595]],[[65517,65517],\"mapped\",[9632]],[[65518,65518],\"mapped\",[9675]],[[65519,65528],\"disallowed\"],[[65529,65531],\"disallowed\"],[[65532,65532],\"disallowed\"],[[65533,65533],\"disallowed\"],[[65534,65535],\"disallowed\"],[[65536,65547],\"valid\"],[[65548,65548],\"disallowed\"],[[65549,65574],\"valid\"],[[65575,65575],\"disallowed\"],[[65576,65594],\"valid\"],[[65595,65595],\"disallowed\"],[[65596,65597],\"valid\"],[[65598,65598],\"disallowed\"],[[65599,65613],\"valid\"],[[65614,65615],\"disallowed\"],[[65616,65629],\"valid\"],[[65630,65663],\"disallowed\"],[[65664,65786],\"valid\"],[[65787,65791],\"disallowed\"],[[65792,65794],\"valid\",[],\"NV8\"],[[65795,65798],\"disallowed\"],[[65799,65843],\"valid\",[],\"NV8\"],[[65844,65846],\"disallowed\"],[[65847,65855],\"valid\",[],\"NV8\"],[[65856,65930],\"valid\",[],\"NV8\"],[[65931,65932],\"valid\",[],\"NV8\"],[[65933,65935],\"disallowed\"],[[65936,65947],\"valid\",[],\"NV8\"],[[65948,65951],\"disallowed\"],[[65952,65952],\"valid\",[],\"NV8\"],[[65953,65999],\"disallowed\"],[[66000,66044],\"valid\",[],\"NV8\"],[[66045,66045],\"valid\"],[[66046,66175],\"disallowed\"],[[66176,66204],\"valid\"],[[66205,66207],\"disallowed\"],[[66208,66256],\"valid\"],[[66257,66271],\"disallowed\"],[[66272,66272],\"valid\"],[[66273,66299],\"valid\",[],\"NV8\"],[[66300,66303],\"disallowed\"],[[66304,66334],\"valid\"],[[66335,66335],\"valid\"],[[66336,66339],\"valid\",[],\"NV8\"],[[66340,66351],\"disallowed\"],[[66352,66368],\"valid\"],[[66369,66369],\"valid\",[],\"NV8\"],[[66370,66377],\"valid\"],[[66378,66378],\"valid\",[],\"NV8\"],[[66379,66383],\"disallowed\"],[[66384,66426],\"valid\"],[[66427,66431],\"disallowed\"],[[66432,66461],\"valid\"],[[66462,66462],\"disallowed\"],[[66463,66463],\"valid\",[],\"NV8\"],[[66464,66499],\"valid\"],[[66500,66503],\"disallowed\"],[[66504,66511],\"valid\"],[[66512,66517],\"valid\",[],\"NV8\"],[[66518,66559],\"disallowed\"],[[66560,66560],\"mapped\",[66600]],[[66561,66561],\"mapped\",[66601]],[[66562,66562],\"mapped\",[66602]],[[66563,66563],\"mapped\",[66603]],[[66564,66564],\"mapped\",[66604]],[[66565,66565],\"mapped\",[66605]],[[66566,66566],\"mapped\",[66606]],[[66567,66567],\"mapped\",[66607]],[[66568,66568],\"mapped\",[66608]],[[66569,66569],\"mapped\",[66609]],[[66570,66570],\"mapped\",[66610]],[[66571,66571],\"mapped\",[66611]],[[66572,66572],\"mapped\",[66612]],[[66573,66573],\"mapped\",[66613]],[[66574,66574],\"mapped\",[66614]],[[66575,66575],\"mapped\",[66615]],[[66576,66576],\"mapped\",[66616]],[[66577,66577],\"mapped\",[66617]],[[66578,66578],\"mapped\",[66618]],[[66579,66579],\"mapped\",[66619]],[[66580,66580],\"mapped\",[66620]],[[66581,66581],\"mapped\",[66621]],[[66582,66582],\"mapped\",[66622]],[[66583,66583],\"mapped\",[66623]],[[66584,66584],\"mapped\",[66624]],[[66585,66585],\"mapped\",[66625]],[[66586,66586],\"mapped\",[66626]],[[66587,66587],\"mapped\",[66627]],[[66588,66588],\"mapped\",[66628]],[[66589,66589],\"mapped\",[66629]],[[66590,66590],\"mapped\",[66630]],[[66591,66591],\"mapped\",[66631]],[[66592,66592],\"mapped\",[66632]],[[66593,66593],\"mapped\",[66633]],[[66594,66594],\"mapped\",[66634]],[[66595,66595],\"mapped\",[66635]],[[66596,66596],\"mapped\",[66636]],[[66597,66597],\"mapped\",[66637]],[[66598,66598],\"mapped\",[66638]],[[66599,66599],\"mapped\",[66639]],[[66600,66637],\"valid\"],[[66638,66717],\"valid\"],[[66718,66719],\"disallowed\"],[[66720,66729],\"valid\"],[[66730,66815],\"disallowed\"],[[66816,66855],\"valid\"],[[66856,66863],\"disallowed\"],[[66864,66915],\"valid\"],[[66916,66926],\"disallowed\"],[[66927,66927],\"valid\",[],\"NV8\"],[[66928,67071],\"disallowed\"],[[67072,67382],\"valid\"],[[67383,67391],\"disallowed\"],[[67392,67413],\"valid\"],[[67414,67423],\"disallowed\"],[[67424,67431],\"valid\"],[[67432,67583],\"disallowed\"],[[67584,67589],\"valid\"],[[67590,67591],\"disallowed\"],[[67592,67592],\"valid\"],[[67593,67593],\"disallowed\"],[[67594,67637],\"valid\"],[[67638,67638],\"disallowed\"],[[67639,67640],\"valid\"],[[67641,67643],\"disallowed\"],[[67644,67644],\"valid\"],[[67645,67646],\"disallowed\"],[[67647,67647],\"valid\"],[[67648,67669],\"valid\"],[[67670,67670],\"disallowed\"],[[67671,67679],\"valid\",[],\"NV8\"],[[67680,67702],\"valid\"],[[67703,67711],\"valid\",[],\"NV8\"],[[67712,67742],\"valid\"],[[67743,67750],\"disallowed\"],[[67751,67759],\"valid\",[],\"NV8\"],[[67760,67807],\"disallowed\"],[[67808,67826],\"valid\"],[[67827,67827],\"disallowed\"],[[67828,67829],\"valid\"],[[67830,67834],\"disallowed\"],[[67835,67839],\"valid\",[],\"NV8\"],[[67840,67861],\"valid\"],[[67862,67865],\"valid\",[],\"NV8\"],[[67866,67867],\"valid\",[],\"NV8\"],[[67868,67870],\"disallowed\"],[[67871,67871],\"valid\",[],\"NV8\"],[[67872,67897],\"valid\"],[[67898,67902],\"disallowed\"],[[67903,67903],\"valid\",[],\"NV8\"],[[67904,67967],\"disallowed\"],[[67968,68023],\"valid\"],[[68024,68027],\"disallowed\"],[[68028,68029],\"valid\",[],\"NV8\"],[[68030,68031],\"valid\"],[[68032,68047],\"valid\",[],\"NV8\"],[[68048,68049],\"disallowed\"],[[68050,68095],\"valid\",[],\"NV8\"],[[68096,68099],\"valid\"],[[68100,68100],\"disallowed\"],[[68101,68102],\"valid\"],[[68103,68107],\"disallowed\"],[[68108,68115],\"valid\"],[[68116,68116],\"disallowed\"],[[68117,68119],\"valid\"],[[68120,68120],\"disallowed\"],[[68121,68147],\"valid\"],[[68148,68151],\"disallowed\"],[[68152,68154],\"valid\"],[[68155,68158],\"disallowed\"],[[68159,68159],\"valid\"],[[68160,68167],\"valid\",[],\"NV8\"],[[68168,68175],\"disallowed\"],[[68176,68184],\"valid\",[],\"NV8\"],[[68185,68191],\"disallowed\"],[[68192,68220],\"valid\"],[[68221,68223],\"valid\",[],\"NV8\"],[[68224,68252],\"valid\"],[[68253,68255],\"valid\",[],\"NV8\"],[[68256,68287],\"disallowed\"],[[68288,68295],\"valid\"],[[68296,68296],\"valid\",[],\"NV8\"],[[68297,68326],\"valid\"],[[68327,68330],\"disallowed\"],[[68331,68342],\"valid\",[],\"NV8\"],[[68343,68351],\"disallowed\"],[[68352,68405],\"valid\"],[[68406,68408],\"disallowed\"],[[68409,68415],\"valid\",[],\"NV8\"],[[68416,68437],\"valid\"],[[68438,68439],\"disallowed\"],[[68440,68447],\"valid\",[],\"NV8\"],[[68448,68466],\"valid\"],[[68467,68471],\"disallowed\"],[[68472,68479],\"valid\",[],\"NV8\"],[[68480,68497],\"valid\"],[[68498,68504],\"disallowed\"],[[68505,68508],\"valid\",[],\"NV8\"],[[68509,68520],\"disallowed\"],[[68521,68527],\"valid\",[],\"NV8\"],[[68528,68607],\"disallowed\"],[[68608,68680],\"valid\"],[[68681,68735],\"disallowed\"],[[68736,68736],\"mapped\",[68800]],[[68737,68737],\"mapped\",[68801]],[[68738,68738],\"mapped\",[68802]],[[68739,68739],\"mapped\",[68803]],[[68740,68740],\"mapped\",[68804]],[[68741,68741],\"mapped\",[68805]],[[68742,68742],\"mapped\",[68806]],[[68743,68743],\"mapped\",[68807]],[[68744,68744],\"mapped\",[68808]],[[68745,68745],\"mapped\",[68809]],[[68746,68746],\"mapped\",[68810]],[[68747,68747],\"mapped\",[68811]],[[68748,68748],\"mapped\",[68812]],[[68749,68749],\"mapped\",[68813]],[[68750,68750],\"mapped\",[68814]],[[68751,68751],\"mapped\",[68815]],[[68752,68752],\"mapped\",[68816]],[[68753,68753],\"mapped\",[68817]],[[68754,68754],\"mapped\",[68818]],[[68755,68755],\"mapped\",[68819]],[[68756,68756],\"mapped\",[68820]],[[68757,68757],\"mapped\",[68821]],[[68758,68758],\"mapped\",[68822]],[[68759,68759],\"mapped\",[68823]],[[68760,68760],\"mapped\",[68824]],[[68761,68761],\"mapped\",[68825]],[[68762,68762],\"mapped\",[68826]],[[68763,68763],\"mapped\",[68827]],[[68764,68764],\"mapped\",[68828]],[[68765,68765],\"mapped\",[68829]],[[68766,68766],\"mapped\",[68830]],[[68767,68767],\"mapped\",[68831]],[[68768,68768],\"mapped\",[68832]],[[68769,68769],\"mapped\",[68833]],[[68770,68770],\"mapped\",[68834]],[[68771,68771],\"mapped\",[68835]],[[68772,68772],\"mapped\",[68836]],[[68773,68773],\"mapped\",[68837]],[[68774,68774],\"mapped\",[68838]],[[68775,68775],\"mapped\",[68839]],[[68776,68776],\"mapped\",[68840]],[[68777,68777],\"mapped\",[68841]],[[68778,68778],\"mapped\",[68842]],[[68779,68779],\"mapped\",[68843]],[[68780,68780],\"mapped\",[68844]],[[68781,68781],\"mapped\",[68845]],[[68782,68782],\"mapped\",[68846]],[[68783,68783],\"mapped\",[68847]],[[68784,68784],\"mapped\",[68848]],[[68785,68785],\"mapped\",[68849]],[[68786,68786],\"mapped\",[68850]],[[68787,68799],\"disallowed\"],[[68800,68850],\"valid\"],[[68851,68857],\"disallowed\"],[[68858,68863],\"valid\",[],\"NV8\"],[[68864,69215],\"disallowed\"],[[69216,69246],\"valid\",[],\"NV8\"],[[69247,69631],\"disallowed\"],[[69632,69702],\"valid\"],[[69703,69709],\"valid\",[],\"NV8\"],[[69710,69713],\"disallowed\"],[[69714,69733],\"valid\",[],\"NV8\"],[[69734,69743],\"valid\"],[[69744,69758],\"disallowed\"],[[69759,69759],\"valid\"],[[69760,69818],\"valid\"],[[69819,69820],\"valid\",[],\"NV8\"],[[69821,69821],\"disallowed\"],[[69822,69825],\"valid\",[],\"NV8\"],[[69826,69839],\"disallowed\"],[[69840,69864],\"valid\"],[[69865,69871],\"disallowed\"],[[69872,69881],\"valid\"],[[69882,69887],\"disallowed\"],[[69888,69940],\"valid\"],[[69941,69941],\"disallowed\"],[[69942,69951],\"valid\"],[[69952,69955],\"valid\",[],\"NV8\"],[[69956,69967],\"disallowed\"],[[69968,70003],\"valid\"],[[70004,70005],\"valid\",[],\"NV8\"],[[70006,70006],\"valid\"],[[70007,70015],\"disallowed\"],[[70016,70084],\"valid\"],[[70085,70088],\"valid\",[],\"NV8\"],[[70089,70089],\"valid\",[],\"NV8\"],[[70090,70092],\"valid\"],[[70093,70093],\"valid\",[],\"NV8\"],[[70094,70095],\"disallowed\"],[[70096,70105],\"valid\"],[[70106,70106],\"valid\"],[[70107,70107],\"valid\",[],\"NV8\"],[[70108,70108],\"valid\"],[[70109,70111],\"valid\",[],\"NV8\"],[[70112,70112],\"disallowed\"],[[70113,70132],\"valid\",[],\"NV8\"],[[70133,70143],\"disallowed\"],[[70144,70161],\"valid\"],[[70162,70162],\"disallowed\"],[[70163,70199],\"valid\"],[[70200,70205],\"valid\",[],\"NV8\"],[[70206,70271],\"disallowed\"],[[70272,70278],\"valid\"],[[70279,70279],\"disallowed\"],[[70280,70280],\"valid\"],[[70281,70281],\"disallowed\"],[[70282,70285],\"valid\"],[[70286,70286],\"disallowed\"],[[70287,70301],\"valid\"],[[70302,70302],\"disallowed\"],[[70303,70312],\"valid\"],[[70313,70313],\"valid\",[],\"NV8\"],[[70314,70319],\"disallowed\"],[[70320,70378],\"valid\"],[[70379,70383],\"disallowed\"],[[70384,70393],\"valid\"],[[70394,70399],\"disallowed\"],[[70400,70400],\"valid\"],[[70401,70403],\"valid\"],[[70404,70404],\"disallowed\"],[[70405,70412],\"valid\"],[[70413,70414],\"disallowed\"],[[70415,70416],\"valid\"],[[70417,70418],\"disallowed\"],[[70419,70440],\"valid\"],[[70441,70441],\"disallowed\"],[[70442,70448],\"valid\"],[[70449,70449],\"disallowed\"],[[70450,70451],\"valid\"],[[70452,70452],\"disallowed\"],[[70453,70457],\"valid\"],[[70458,70459],\"disallowed\"],[[70460,70468],\"valid\"],[[70469,70470],\"disallowed\"],[[70471,70472],\"valid\"],[[70473,70474],\"disallowed\"],[[70475,70477],\"valid\"],[[70478,70479],\"disallowed\"],[[70480,70480],\"valid\"],[[70481,70486],\"disallowed\"],[[70487,70487],\"valid\"],[[70488,70492],\"disallowed\"],[[70493,70499],\"valid\"],[[70500,70501],\"disallowed\"],[[70502,70508],\"valid\"],[[70509,70511],\"disallowed\"],[[70512,70516],\"valid\"],[[70517,70783],\"disallowed\"],[[70784,70853],\"valid\"],[[70854,70854],\"valid\",[],\"NV8\"],[[70855,70855],\"valid\"],[[70856,70863],\"disallowed\"],[[70864,70873],\"valid\"],[[70874,71039],\"disallowed\"],[[71040,71093],\"valid\"],[[71094,71095],\"disallowed\"],[[71096,71104],\"valid\"],[[71105,71113],\"valid\",[],\"NV8\"],[[71114,71127],\"valid\",[],\"NV8\"],[[71128,71133],\"valid\"],[[71134,71167],\"disallowed\"],[[71168,71232],\"valid\"],[[71233,71235],\"valid\",[],\"NV8\"],[[71236,71236],\"valid\"],[[71237,71247],\"disallowed\"],[[71248,71257],\"valid\"],[[71258,71295],\"disallowed\"],[[71296,71351],\"valid\"],[[71352,71359],\"disallowed\"],[[71360,71369],\"valid\"],[[71370,71423],\"disallowed\"],[[71424,71449],\"valid\"],[[71450,71452],\"disallowed\"],[[71453,71467],\"valid\"],[[71468,71471],\"disallowed\"],[[71472,71481],\"valid\"],[[71482,71487],\"valid\",[],\"NV8\"],[[71488,71839],\"disallowed\"],[[71840,71840],\"mapped\",[71872]],[[71841,71841],\"mapped\",[71873]],[[71842,71842],\"mapped\",[71874]],[[71843,71843],\"mapped\",[71875]],[[71844,71844],\"mapped\",[71876]],[[71845,71845],\"mapped\",[71877]],[[71846,71846],\"mapped\",[71878]],[[71847,71847],\"mapped\",[71879]],[[71848,71848],\"mapped\",[71880]],[[71849,71849],\"mapped\",[71881]],[[71850,71850],\"mapped\",[71882]],[[71851,71851],\"mapped\",[71883]],[[71852,71852],\"mapped\",[71884]],[[71853,71853],\"mapped\",[71885]],[[71854,71854],\"mapped\",[71886]],[[71855,71855],\"mapped\",[71887]],[[71856,71856],\"mapped\",[71888]],[[71857,71857],\"mapped\",[71889]],[[71858,71858],\"mapped\",[71890]],[[71859,71859],\"mapped\",[71891]],[[71860,71860],\"mapped\",[71892]],[[71861,71861],\"mapped\",[71893]],[[71862,71862],\"mapped\",[71894]],[[71863,71863],\"mapped\",[71895]],[[71864,71864],\"mapped\",[71896]],[[71865,71865],\"mapped\",[71897]],[[71866,71866],\"mapped\",[71898]],[[71867,71867],\"mapped\",[71899]],[[71868,71868],\"mapped\",[71900]],[[71869,71869],\"mapped\",[71901]],[[71870,71870],\"mapped\",[71902]],[[71871,71871],\"mapped\",[71903]],[[71872,71913],\"valid\"],[[71914,71922],\"valid\",[],\"NV8\"],[[71923,71934],\"disallowed\"],[[71935,71935],\"valid\"],[[71936,72383],\"disallowed\"],[[72384,72440],\"valid\"],[[72441,73727],\"disallowed\"],[[73728,74606],\"valid\"],[[74607,74648],\"valid\"],[[74649,74649],\"valid\"],[[74650,74751],\"disallowed\"],[[74752,74850],\"valid\",[],\"NV8\"],[[74851,74862],\"valid\",[],\"NV8\"],[[74863,74863],\"disallowed\"],[[74864,74867],\"valid\",[],\"NV8\"],[[74868,74868],\"valid\",[],\"NV8\"],[[74869,74879],\"disallowed\"],[[74880,75075],\"valid\"],[[75076,77823],\"disallowed\"],[[77824,78894],\"valid\"],[[78895,82943],\"disallowed\"],[[82944,83526],\"valid\"],[[83527,92159],\"disallowed\"],[[92160,92728],\"valid\"],[[92729,92735],\"disallowed\"],[[92736,92766],\"valid\"],[[92767,92767],\"disallowed\"],[[92768,92777],\"valid\"],[[92778,92781],\"disallowed\"],[[92782,92783],\"valid\",[],\"NV8\"],[[92784,92879],\"disallowed\"],[[92880,92909],\"valid\"],[[92910,92911],\"disallowed\"],[[92912,92916],\"valid\"],[[92917,92917],\"valid\",[],\"NV8\"],[[92918,92927],\"disallowed\"],[[92928,92982],\"valid\"],[[92983,92991],\"valid\",[],\"NV8\"],[[92992,92995],\"valid\"],[[92996,92997],\"valid\",[],\"NV8\"],[[92998,93007],\"disallowed\"],[[93008,93017],\"valid\"],[[93018,93018],\"disallowed\"],[[93019,93025],\"valid\",[],\"NV8\"],[[93026,93026],\"disallowed\"],[[93027,93047],\"valid\"],[[93048,93052],\"disallowed\"],[[93053,93071],\"valid\"],[[93072,93951],\"disallowed\"],[[93952,94020],\"valid\"],[[94021,94031],\"disallowed\"],[[94032,94078],\"valid\"],[[94079,94094],\"disallowed\"],[[94095,94111],\"valid\"],[[94112,110591],\"disallowed\"],[[110592,110593],\"valid\"],[[110594,113663],\"disallowed\"],[[113664,113770],\"valid\"],[[113771,113775],\"disallowed\"],[[113776,113788],\"valid\"],[[113789,113791],\"disallowed\"],[[113792,113800],\"valid\"],[[113801,113807],\"disallowed\"],[[113808,113817],\"valid\"],[[113818,113819],\"disallowed\"],[[113820,113820],\"valid\",[],\"NV8\"],[[113821,113822],\"valid\"],[[113823,113823],\"valid\",[],\"NV8\"],[[113824,113827],\"ignored\"],[[113828,118783],\"disallowed\"],[[118784,119029],\"valid\",[],\"NV8\"],[[119030,119039],\"disallowed\"],[[119040,119078],\"valid\",[],\"NV8\"],[[119079,119080],\"disallowed\"],[[119081,119081],\"valid\",[],\"NV8\"],[[119082,119133],\"valid\",[],\"NV8\"],[[119134,119134],\"mapped\",[119127,119141]],[[119135,119135],\"mapped\",[119128,119141]],[[119136,119136],\"mapped\",[119128,119141,119150]],[[119137,119137],\"mapped\",[119128,119141,119151]],[[119138,119138],\"mapped\",[119128,119141,119152]],[[119139,119139],\"mapped\",[119128,119141,119153]],[[119140,119140],\"mapped\",[119128,119141,119154]],[[119141,119154],\"valid\",[],\"NV8\"],[[119155,119162],\"disallowed\"],[[119163,119226],\"valid\",[],\"NV8\"],[[119227,119227],\"mapped\",[119225,119141]],[[119228,119228],\"mapped\",[119226,119141]],[[119229,119229],\"mapped\",[119225,119141,119150]],[[119230,119230],\"mapped\",[119226,119141,119150]],[[119231,119231],\"mapped\",[119225,119141,119151]],[[119232,119232],\"mapped\",[119226,119141,119151]],[[119233,119261],\"valid\",[],\"NV8\"],[[119262,119272],\"valid\",[],\"NV8\"],[[119273,119295],\"disallowed\"],[[119296,119365],\"valid\",[],\"NV8\"],[[119366,119551],\"disallowed\"],[[119552,119638],\"valid\",[],\"NV8\"],[[119639,119647],\"disallowed\"],[[119648,119665],\"valid\",[],\"NV8\"],[[119666,119807],\"disallowed\"],[[119808,119808],\"mapped\",[97]],[[119809,119809],\"mapped\",[98]],[[119810,119810],\"mapped\",[99]],[[119811,119811],\"mapped\",[100]],[[119812,119812],\"mapped\",[101]],[[119813,119813],\"mapped\",[102]],[[119814,119814],\"mapped\",[103]],[[119815,119815],\"mapped\",[104]],[[119816,119816],\"mapped\",[105]],[[119817,119817],\"mapped\",[106]],[[119818,119818],\"mapped\",[107]],[[119819,119819],\"mapped\",[108]],[[119820,119820],\"mapped\",[109]],[[119821,119821],\"mapped\",[110]],[[119822,119822],\"mapped\",[111]],[[119823,119823],\"mapped\",[112]],[[119824,119824],\"mapped\",[113]],[[119825,119825],\"mapped\",[114]],[[119826,119826],\"mapped\",[115]],[[119827,119827],\"mapped\",[116]],[[119828,119828],\"mapped\",[117]],[[119829,119829],\"mapped\",[118]],[[119830,119830],\"mapped\",[119]],[[119831,119831],\"mapped\",[120]],[[119832,119832],\"mapped\",[121]],[[119833,119833],\"mapped\",[122]],[[119834,119834],\"mapped\",[97]],[[119835,119835],\"mapped\",[98]],[[119836,119836],\"mapped\",[99]],[[119837,119837],\"mapped\",[100]],[[119838,119838],\"mapped\",[101]],[[119839,119839],\"mapped\",[102]],[[119840,119840],\"mapped\",[103]],[[119841,119841],\"mapped\",[104]],[[119842,119842],\"mapped\",[105]],[[119843,119843],\"mapped\",[106]],[[119844,119844],\"mapped\",[107]],[[119845,119845],\"mapped\",[108]],[[119846,119846],\"mapped\",[109]],[[119847,119847],\"mapped\",[110]],[[119848,119848],\"mapped\",[111]],[[119849,119849],\"mapped\",[112]],[[119850,119850],\"mapped\",[113]],[[119851,119851],\"mapped\",[114]],[[119852,119852],\"mapped\",[115]],[[119853,119853],\"mapped\",[116]],[[119854,119854],\"mapped\",[117]],[[119855,119855],\"mapped\",[118]],[[119856,119856],\"mapped\",[119]],[[119857,119857],\"mapped\",[120]],[[119858,119858],\"mapped\",[121]],[[119859,119859],\"mapped\",[122]],[[119860,119860],\"mapped\",[97]],[[119861,119861],\"mapped\",[98]],[[119862,119862],\"mapped\",[99]],[[119863,119863],\"mapped\",[100]],[[119864,119864],\"mapped\",[101]],[[119865,119865],\"mapped\",[102]],[[119866,119866],\"mapped\",[103]],[[119867,119867],\"mapped\",[104]],[[119868,119868],\"mapped\",[105]],[[119869,119869],\"mapped\",[106]],[[119870,119870],\"mapped\",[107]],[[119871,119871],\"mapped\",[108]],[[119872,119872],\"mapped\",[109]],[[119873,119873],\"mapped\",[110]],[[119874,119874],\"mapped\",[111]],[[119875,119875],\"mapped\",[112]],[[119876,119876],\"mapped\",[113]],[[119877,119877],\"mapped\",[114]],[[119878,119878],\"mapped\",[115]],[[119879,119879],\"mapped\",[116]],[[119880,119880],\"mapped\",[117]],[[119881,119881],\"mapped\",[118]],[[119882,119882],\"mapped\",[119]],[[119883,119883],\"mapped\",[120]],[[119884,119884],\"mapped\",[121]],[[119885,119885],\"mapped\",[122]],[[119886,119886],\"mapped\",[97]],[[119887,119887],\"mapped\",[98]],[[119888,119888],\"mapped\",[99]],[[119889,119889],\"mapped\",[100]],[[119890,119890],\"mapped\",[101]],[[119891,119891],\"mapped\",[102]],[[119892,119892],\"mapped\",[103]],[[119893,119893],\"disallowed\"],[[119894,119894],\"mapped\",[105]],[[119895,119895],\"mapped\",[106]],[[119896,119896],\"mapped\",[107]],[[119897,119897],\"mapped\",[108]],[[119898,119898],\"mapped\",[109]],[[119899,119899],\"mapped\",[110]],[[119900,119900],\"mapped\",[111]],[[119901,119901],\"mapped\",[112]],[[119902,119902],\"mapped\",[113]],[[119903,119903],\"mapped\",[114]],[[119904,119904],\"mapped\",[115]],[[119905,119905],\"mapped\",[116]],[[119906,119906],\"mapped\",[117]],[[119907,119907],\"mapped\",[118]],[[119908,119908],\"mapped\",[119]],[[119909,119909],\"mapped\",[120]],[[119910,119910],\"mapped\",[121]],[[119911,119911],\"mapped\",[122]],[[119912,119912],\"mapped\",[97]],[[119913,119913],\"mapped\",[98]],[[119914,119914],\"mapped\",[99]],[[119915,119915],\"mapped\",[100]],[[119916,119916],\"mapped\",[101]],[[119917,119917],\"mapped\",[102]],[[119918,119918],\"mapped\",[103]],[[119919,119919],\"mapped\",[104]],[[119920,119920],\"mapped\",[105]],[[119921,119921],\"mapped\",[106]],[[119922,119922],\"mapped\",[107]],[[119923,119923],\"mapped\",[108]],[[119924,119924],\"mapped\",[109]],[[119925,119925],\"mapped\",[110]],[[119926,119926],\"mapped\",[111]],[[119927,119927],\"mapped\",[112]],[[119928,119928],\"mapped\",[113]],[[119929,119929],\"mapped\",[114]],[[119930,119930],\"mapped\",[115]],[[119931,119931],\"mapped\",[116]],[[119932,119932],\"mapped\",[117]],[[119933,119933],\"mapped\",[118]],[[119934,119934],\"mapped\",[119]],[[119935,119935],\"mapped\",[120]],[[119936,119936],\"mapped\",[121]],[[119937,119937],\"mapped\",[122]],[[119938,119938],\"mapped\",[97]],[[119939,119939],\"mapped\",[98]],[[119940,119940],\"mapped\",[99]],[[119941,119941],\"mapped\",[100]],[[119942,119942],\"mapped\",[101]],[[119943,119943],\"mapped\",[102]],[[119944,119944],\"mapped\",[103]],[[119945,119945],\"mapped\",[104]],[[119946,119946],\"mapped\",[105]],[[119947,119947],\"mapped\",[106]],[[119948,119948],\"mapped\",[107]],[[119949,119949],\"mapped\",[108]],[[119950,119950],\"mapped\",[109]],[[119951,119951],\"mapped\",[110]],[[119952,119952],\"mapped\",[111]],[[119953,119953],\"mapped\",[112]],[[119954,119954],\"mapped\",[113]],[[119955,119955],\"mapped\",[114]],[[119956,119956],\"mapped\",[115]],[[119957,119957],\"mapped\",[116]],[[119958,119958],\"mapped\",[117]],[[119959,119959],\"mapped\",[118]],[[119960,119960],\"mapped\",[119]],[[119961,119961],\"mapped\",[120]],[[119962,119962],\"mapped\",[121]],[[119963,119963],\"mapped\",[122]],[[119964,119964],\"mapped\",[97]],[[119965,119965],\"disallowed\"],[[119966,119966],\"mapped\",[99]],[[119967,119967],\"mapped\",[100]],[[119968,119969],\"disallowed\"],[[119970,119970],\"mapped\",[103]],[[119971,119972],\"disallowed\"],[[119973,119973],\"mapped\",[106]],[[119974,119974],\"mapped\",[107]],[[119975,119976],\"disallowed\"],[[119977,119977],\"mapped\",[110]],[[119978,119978],\"mapped\",[111]],[[119979,119979],\"mapped\",[112]],[[119980,119980],\"mapped\",[113]],[[119981,119981],\"disallowed\"],[[119982,119982],\"mapped\",[115]],[[119983,119983],\"mapped\",[116]],[[119984,119984],\"mapped\",[117]],[[119985,119985],\"mapped\",[118]],[[119986,119986],\"mapped\",[119]],[[119987,119987],\"mapped\",[120]],[[119988,119988],\"mapped\",[121]],[[119989,119989],\"mapped\",[122]],[[119990,119990],\"mapped\",[97]],[[119991,119991],\"mapped\",[98]],[[119992,119992],\"mapped\",[99]],[[119993,119993],\"mapped\",[100]],[[119994,119994],\"disallowed\"],[[119995,119995],\"mapped\",[102]],[[119996,119996],\"disallowed\"],[[119997,119997],\"mapped\",[104]],[[119998,119998],\"mapped\",[105]],[[119999,119999],\"mapped\",[106]],[[120000,120000],\"mapped\",[107]],[[120001,120001],\"mapped\",[108]],[[120002,120002],\"mapped\",[109]],[[120003,120003],\"mapped\",[110]],[[120004,120004],\"disallowed\"],[[120005,120005],\"mapped\",[112]],[[120006,120006],\"mapped\",[113]],[[120007,120007],\"mapped\",[114]],[[120008,120008],\"mapped\",[115]],[[120009,120009],\"mapped\",[116]],[[120010,120010],\"mapped\",[117]],[[120011,120011],\"mapped\",[118]],[[120012,120012],\"mapped\",[119]],[[120013,120013],\"mapped\",[120]],[[120014,120014],\"mapped\",[121]],[[120015,120015],\"mapped\",[122]],[[120016,120016],\"mapped\",[97]],[[120017,120017],\"mapped\",[98]],[[120018,120018],\"mapped\",[99]],[[120019,120019],\"mapped\",[100]],[[120020,120020],\"mapped\",[101]],[[120021,120021],\"mapped\",[102]],[[120022,120022],\"mapped\",[103]],[[120023,120023],\"mapped\",[104]],[[120024,120024],\"mapped\",[105]],[[120025,120025],\"mapped\",[106]],[[120026,120026],\"mapped\",[107]],[[120027,120027],\"mapped\",[108]],[[120028,120028],\"mapped\",[109]],[[120029,120029],\"mapped\",[110]],[[120030,120030],\"mapped\",[111]],[[120031,120031],\"mapped\",[112]],[[120032,120032],\"mapped\",[113]],[[120033,120033],\"mapped\",[114]],[[120034,120034],\"mapped\",[115]],[[120035,120035],\"mapped\",[116]],[[120036,120036],\"mapped\",[117]],[[120037,120037],\"mapped\",[118]],[[120038,120038],\"mapped\",[119]],[[120039,120039],\"mapped\",[120]],[[120040,120040],\"mapped\",[121]],[[120041,120041],\"mapped\",[122]],[[120042,120042],\"mapped\",[97]],[[120043,120043],\"mapped\",[98]],[[120044,120044],\"mapped\",[99]],[[120045,120045],\"mapped\",[100]],[[120046,120046],\"mapped\",[101]],[[120047,120047],\"mapped\",[102]],[[120048,120048],\"mapped\",[103]],[[120049,120049],\"mapped\",[104]],[[120050,120050],\"mapped\",[105]],[[120051,120051],\"mapped\",[106]],[[120052,120052],\"mapped\",[107]],[[120053,120053],\"mapped\",[108]],[[120054,120054],\"mapped\",[109]],[[120055,120055],\"mapped\",[110]],[[120056,120056],\"mapped\",[111]],[[120057,120057],\"mapped\",[112]],[[120058,120058],\"mapped\",[113]],[[120059,120059],\"mapped\",[114]],[[120060,120060],\"mapped\",[115]],[[120061,120061],\"mapped\",[116]],[[120062,120062],\"mapped\",[117]],[[120063,120063],\"mapped\",[118]],[[120064,120064],\"mapped\",[119]],[[120065,120065],\"mapped\",[120]],[[120066,120066],\"mapped\",[121]],[[120067,120067],\"mapped\",[122]],[[120068,120068],\"mapped\",[97]],[[120069,120069],\"mapped\",[98]],[[120070,120070],\"disallowed\"],[[120071,120071],\"mapped\",[100]],[[120072,120072],\"mapped\",[101]],[[120073,120073],\"mapped\",[102]],[[120074,120074],\"mapped\",[103]],[[120075,120076],\"disallowed\"],[[120077,120077],\"mapped\",[106]],[[120078,120078],\"mapped\",[107]],[[120079,120079],\"mapped\",[108]],[[120080,120080],\"mapped\",[109]],[[120081,120081],\"mapped\",[110]],[[120082,120082],\"mapped\",[111]],[[120083,120083],\"mapped\",[112]],[[120084,120084],\"mapped\",[113]],[[120085,120085],\"disallowed\"],[[120086,120086],\"mapped\",[115]],[[120087,120087],\"mapped\",[116]],[[120088,120088],\"mapped\",[117]],[[120089,120089],\"mapped\",[118]],[[120090,120090],\"mapped\",[119]],[[120091,120091],\"mapped\",[120]],[[120092,120092],\"mapped\",[121]],[[120093,120093],\"disallowed\"],[[120094,120094],\"mapped\",[97]],[[120095,120095],\"mapped\",[98]],[[120096,120096],\"mapped\",[99]],[[120097,120097],\"mapped\",[100]],[[120098,120098],\"mapped\",[101]],[[120099,120099],\"mapped\",[102]],[[120100,120100],\"mapped\",[103]],[[120101,120101],\"mapped\",[104]],[[120102,120102],\"mapped\",[105]],[[120103,120103],\"mapped\",[106]],[[120104,120104],\"mapped\",[107]],[[120105,120105],\"mapped\",[108]],[[120106,120106],\"mapped\",[109]],[[120107,120107],\"mapped\",[110]],[[120108,120108],\"mapped\",[111]],[[120109,120109],\"mapped\",[112]],[[120110,120110],\"mapped\",[113]],[[120111,120111],\"mapped\",[114]],[[120112,120112],\"mapped\",[115]],[[120113,120113],\"mapped\",[116]],[[120114,120114],\"mapped\",[117]],[[120115,120115],\"mapped\",[118]],[[120116,120116],\"mapped\",[119]],[[120117,120117],\"mapped\",[120]],[[120118,120118],\"mapped\",[121]],[[120119,120119],\"mapped\",[122]],[[120120,120120],\"mapped\",[97]],[[120121,120121],\"mapped\",[98]],[[120122,120122],\"disallowed\"],[[120123,120123],\"mapped\",[100]],[[120124,120124],\"mapped\",[101]],[[120125,120125],\"mapped\",[102]],[[120126,120126],\"mapped\",[103]],[[120127,120127],\"disallowed\"],[[120128,120128],\"mapped\",[105]],[[120129,120129],\"mapped\",[106]],[[120130,120130],\"mapped\",[107]],[[120131,120131],\"mapped\",[108]],[[120132,120132],\"mapped\",[109]],[[120133,120133],\"disallowed\"],[[120134,120134],\"mapped\",[111]],[[120135,120137],\"disallowed\"],[[120138,120138],\"mapped\",[115]],[[120139,120139],\"mapped\",[116]],[[120140,120140],\"mapped\",[117]],[[120141,120141],\"mapped\",[118]],[[120142,120142],\"mapped\",[119]],[[120143,120143],\"mapped\",[120]],[[120144,120144],\"mapped\",[121]],[[120145,120145],\"disallowed\"],[[120146,120146],\"mapped\",[97]],[[120147,120147],\"mapped\",[98]],[[120148,120148],\"mapped\",[99]],[[120149,120149],\"mapped\",[100]],[[120150,120150],\"mapped\",[101]],[[120151,120151],\"mapped\",[102]],[[120152,120152],\"mapped\",[103]],[[120153,120153],\"mapped\",[104]],[[120154,120154],\"mapped\",[105]],[[120155,120155],\"mapped\",[106]],[[120156,120156],\"mapped\",[107]],[[120157,120157],\"mapped\",[108]],[[120158,120158],\"mapped\",[109]],[[120159,120159],\"mapped\",[110]],[[120160,120160],\"mapped\",[111]],[[120161,120161],\"mapped\",[112]],[[120162,120162],\"mapped\",[113]],[[120163,120163],\"mapped\",[114]],[[120164,120164],\"mapped\",[115]],[[120165,120165],\"mapped\",[116]],[[120166,120166],\"mapped\",[117]],[[120167,120167],\"mapped\",[118]],[[120168,120168],\"mapped\",[119]],[[120169,120169],\"mapped\",[120]],[[120170,120170],\"mapped\",[121]],[[120171,120171],\"mapped\",[122]],[[120172,120172],\"mapped\",[97]],[[120173,120173],\"mapped\",[98]],[[120174,120174],\"mapped\",[99]],[[120175,120175],\"mapped\",[100]],[[120176,120176],\"mapped\",[101]],[[120177,120177],\"mapped\",[102]],[[120178,120178],\"mapped\",[103]],[[120179,120179],\"mapped\",[104]],[[120180,120180],\"mapped\",[105]],[[120181,120181],\"mapped\",[106]],[[120182,120182],\"mapped\",[107]],[[120183,120183],\"mapped\",[108]],[[120184,120184],\"mapped\",[109]],[[120185,120185],\"mapped\",[110]],[[120186,120186],\"mapped\",[111]],[[120187,120187],\"mapped\",[112]],[[120188,120188],\"mapped\",[113]],[[120189,120189],\"mapped\",[114]],[[120190,120190],\"mapped\",[115]],[[120191,120191],\"mapped\",[116]],[[120192,120192],\"mapped\",[117]],[[120193,120193],\"mapped\",[118]],[[120194,120194],\"mapped\",[119]],[[120195,120195],\"mapped\",[120]],[[120196,120196],\"mapped\",[121]],[[120197,120197],\"mapped\",[122]],[[120198,120198],\"mapped\",[97]],[[120199,120199],\"mapped\",[98]],[[120200,120200],\"mapped\",[99]],[[120201,120201],\"mapped\",[100]],[[120202,120202],\"mapped\",[101]],[[120203,120203],\"mapped\",[102]],[[120204,120204],\"mapped\",[103]],[[120205,120205],\"mapped\",[104]],[[120206,120206],\"mapped\",[105]],[[120207,120207],\"mapped\",[106]],[[120208,120208],\"mapped\",[107]],[[120209,120209],\"mapped\",[108]],[[120210,120210],\"mapped\",[109]],[[120211,120211],\"mapped\",[110]],[[120212,120212],\"mapped\",[111]],[[120213,120213],\"mapped\",[112]],[[120214,120214],\"mapped\",[113]],[[120215,120215],\"mapped\",[114]],[[120216,120216],\"mapped\",[115]],[[120217,120217],\"mapped\",[116]],[[120218,120218],\"mapped\",[117]],[[120219,120219],\"mapped\",[118]],[[120220,120220],\"mapped\",[119]],[[120221,120221],\"mapped\",[120]],[[120222,120222],\"mapped\",[121]],[[120223,120223],\"mapped\",[122]],[[120224,120224],\"mapped\",[97]],[[120225,120225],\"mapped\",[98]],[[120226,120226],\"mapped\",[99]],[[120227,120227],\"mapped\",[100]],[[120228,120228],\"mapped\",[101]],[[120229,120229],\"mapped\",[102]],[[120230,120230],\"mapped\",[103]],[[120231,120231],\"mapped\",[104]],[[120232,120232],\"mapped\",[105]],[[120233,120233],\"mapped\",[106]],[[120234,120234],\"mapped\",[107]],[[120235,120235],\"mapped\",[108]],[[120236,120236],\"mapped\",[109]],[[120237,120237],\"mapped\",[110]],[[120238,120238],\"mapped\",[111]],[[120239,120239],\"mapped\",[112]],[[120240,120240],\"mapped\",[113]],[[120241,120241],\"mapped\",[114]],[[120242,120242],\"mapped\",[115]],[[120243,120243],\"mapped\",[116]],[[120244,120244],\"mapped\",[117]],[[120245,120245],\"mapped\",[118]],[[120246,120246],\"mapped\",[119]],[[120247,120247],\"mapped\",[120]],[[120248,120248],\"mapped\",[121]],[[120249,120249],\"mapped\",[122]],[[120250,120250],\"mapped\",[97]],[[120251,120251],\"mapped\",[98]],[[120252,120252],\"mapped\",[99]],[[120253,120253],\"mapped\",[100]],[[120254,120254],\"mapped\",[101]],[[120255,120255],\"mapped\",[102]],[[120256,120256],\"mapped\",[103]],[[120257,120257],\"mapped\",[104]],[[120258,120258],\"mapped\",[105]],[[120259,120259],\"mapped\",[106]],[[120260,120260],\"mapped\",[107]],[[120261,120261],\"mapped\",[108]],[[120262,120262],\"mapped\",[109]],[[120263,120263],\"mapped\",[110]],[[120264,120264],\"mapped\",[111]],[[120265,120265],\"mapped\",[112]],[[120266,120266],\"mapped\",[113]],[[120267,120267],\"mapped\",[114]],[[120268,120268],\"mapped\",[115]],[[120269,120269],\"mapped\",[116]],[[120270,120270],\"mapped\",[117]],[[120271,120271],\"mapped\",[118]],[[120272,120272],\"mapped\",[119]],[[120273,120273],\"mapped\",[120]],[[120274,120274],\"mapped\",[121]],[[120275,120275],\"mapped\",[122]],[[120276,120276],\"mapped\",[97]],[[120277,120277],\"mapped\",[98]],[[120278,120278],\"mapped\",[99]],[[120279,120279],\"mapped\",[100]],[[120280,120280],\"mapped\",[101]],[[120281,120281],\"mapped\",[102]],[[120282,120282],\"mapped\",[103]],[[120283,120283],\"mapped\",[104]],[[120284,120284],\"mapped\",[105]],[[120285,120285],\"mapped\",[106]],[[120286,120286],\"mapped\",[107]],[[120287,120287],\"mapped\",[108]],[[120288,120288],\"mapped\",[109]],[[120289,120289],\"mapped\",[110]],[[120290,120290],\"mapped\",[111]],[[120291,120291],\"mapped\",[112]],[[120292,120292],\"mapped\",[113]],[[120293,120293],\"mapped\",[114]],[[120294,120294],\"mapped\",[115]],[[120295,120295],\"mapped\",[116]],[[120296,120296],\"mapped\",[117]],[[120297,120297],\"mapped\",[118]],[[120298,120298],\"mapped\",[119]],[[120299,120299],\"mapped\",[120]],[[120300,120300],\"mapped\",[121]],[[120301,120301],\"mapped\",[122]],[[120302,120302],\"mapped\",[97]],[[120303,120303],\"mapped\",[98]],[[120304,120304],\"mapped\",[99]],[[120305,120305],\"mapped\",[100]],[[120306,120306],\"mapped\",[101]],[[120307,120307],\"mapped\",[102]],[[120308,120308],\"mapped\",[103]],[[120309,120309],\"mapped\",[104]],[[120310,120310],\"mapped\",[105]],[[120311,120311],\"mapped\",[106]],[[120312,120312],\"mapped\",[107]],[[120313,120313],\"mapped\",[108]],[[120314,120314],\"mapped\",[109]],[[120315,120315],\"mapped\",[110]],[[120316,120316],\"mapped\",[111]],[[120317,120317],\"mapped\",[112]],[[120318,120318],\"mapped\",[113]],[[120319,120319],\"mapped\",[114]],[[120320,120320],\"mapped\",[115]],[[120321,120321],\"mapped\",[116]],[[120322,120322],\"mapped\",[117]],[[120323,120323],\"mapped\",[118]],[[120324,120324],\"mapped\",[119]],[[120325,120325],\"mapped\",[120]],[[120326,120326],\"mapped\",[121]],[[120327,120327],\"mapped\",[122]],[[120328,120328],\"mapped\",[97]],[[120329,120329],\"mapped\",[98]],[[120330,120330],\"mapped\",[99]],[[120331,120331],\"mapped\",[100]],[[120332,120332],\"mapped\",[101]],[[120333,120333],\"mapped\",[102]],[[120334,120334],\"mapped\",[103]],[[120335,120335],\"mapped\",[104]],[[120336,120336],\"mapped\",[105]],[[120337,120337],\"mapped\",[106]],[[120338,120338],\"mapped\",[107]],[[120339,120339],\"mapped\",[108]],[[120340,120340],\"mapped\",[109]],[[120341,120341],\"mapped\",[110]],[[120342,120342],\"mapped\",[111]],[[120343,120343],\"mapped\",[112]],[[120344,120344],\"mapped\",[113]],[[120345,120345],\"mapped\",[114]],[[120346,120346],\"mapped\",[115]],[[120347,120347],\"mapped\",[116]],[[120348,120348],\"mapped\",[117]],[[120349,120349],\"mapped\",[118]],[[120350,120350],\"mapped\",[119]],[[120351,120351],\"mapped\",[120]],[[120352,120352],\"mapped\",[121]],[[120353,120353],\"mapped\",[122]],[[120354,120354],\"mapped\",[97]],[[120355,120355],\"mapped\",[98]],[[120356,120356],\"mapped\",[99]],[[120357,120357],\"mapped\",[100]],[[120358,120358],\"mapped\",[101]],[[120359,120359],\"mapped\",[102]],[[120360,120360],\"mapped\",[103]],[[120361,120361],\"mapped\",[104]],[[120362,120362],\"mapped\",[105]],[[120363,120363],\"mapped\",[106]],[[120364,120364],\"mapped\",[107]],[[120365,120365],\"mapped\",[108]],[[120366,120366],\"mapped\",[109]],[[120367,120367],\"mapped\",[110]],[[120368,120368],\"mapped\",[111]],[[120369,120369],\"mapped\",[112]],[[120370,120370],\"mapped\",[113]],[[120371,120371],\"mapped\",[114]],[[120372,120372],\"mapped\",[115]],[[120373,120373],\"mapped\",[116]],[[120374,120374],\"mapped\",[117]],[[120375,120375],\"mapped\",[118]],[[120376,120376],\"mapped\",[119]],[[120377,120377],\"mapped\",[120]],[[120378,120378],\"mapped\",[121]],[[120379,120379],\"mapped\",[122]],[[120380,120380],\"mapped\",[97]],[[120381,120381],\"mapped\",[98]],[[120382,120382],\"mapped\",[99]],[[120383,120383],\"mapped\",[100]],[[120384,120384],\"mapped\",[101]],[[120385,120385],\"mapped\",[102]],[[120386,120386],\"mapped\",[103]],[[120387,120387],\"mapped\",[104]],[[120388,120388],\"mapped\",[105]],[[120389,120389],\"mapped\",[106]],[[120390,120390],\"mapped\",[107]],[[120391,120391],\"mapped\",[108]],[[120392,120392],\"mapped\",[109]],[[120393,120393],\"mapped\",[110]],[[120394,120394],\"mapped\",[111]],[[120395,120395],\"mapped\",[112]],[[120396,120396],\"mapped\",[113]],[[120397,120397],\"mapped\",[114]],[[120398,120398],\"mapped\",[115]],[[120399,120399],\"mapped\",[116]],[[120400,120400],\"mapped\",[117]],[[120401,120401],\"mapped\",[118]],[[120402,120402],\"mapped\",[119]],[[120403,120403],\"mapped\",[120]],[[120404,120404],\"mapped\",[121]],[[120405,120405],\"mapped\",[122]],[[120406,120406],\"mapped\",[97]],[[120407,120407],\"mapped\",[98]],[[120408,120408],\"mapped\",[99]],[[120409,120409],\"mapped\",[100]],[[120410,120410],\"mapped\",[101]],[[120411,120411],\"mapped\",[102]],[[120412,120412],\"mapped\",[103]],[[120413,120413],\"mapped\",[104]],[[120414,120414],\"mapped\",[105]],[[120415,120415],\"mapped\",[106]],[[120416,120416],\"mapped\",[107]],[[120417,120417],\"mapped\",[108]],[[120418,120418],\"mapped\",[109]],[[120419,120419],\"mapped\",[110]],[[120420,120420],\"mapped\",[111]],[[120421,120421],\"mapped\",[112]],[[120422,120422],\"mapped\",[113]],[[120423,120423],\"mapped\",[114]],[[120424,120424],\"mapped\",[115]],[[120425,120425],\"mapped\",[116]],[[120426,120426],\"mapped\",[117]],[[120427,120427],\"mapped\",[118]],[[120428,120428],\"mapped\",[119]],[[120429,120429],\"mapped\",[120]],[[120430,120430],\"mapped\",[121]],[[120431,120431],\"mapped\",[122]],[[120432,120432],\"mapped\",[97]],[[120433,120433],\"mapped\",[98]],[[120434,120434],\"mapped\",[99]],[[120435,120435],\"mapped\",[100]],[[120436,120436],\"mapped\",[101]],[[120437,120437],\"mapped\",[102]],[[120438,120438],\"mapped\",[103]],[[120439,120439],\"mapped\",[104]],[[120440,120440],\"mapped\",[105]],[[120441,120441],\"mapped\",[106]],[[120442,120442],\"mapped\",[107]],[[120443,120443],\"mapped\",[108]],[[120444,120444],\"mapped\",[109]],[[120445,120445],\"mapped\",[110]],[[120446,120446],\"mapped\",[111]],[[120447,120447],\"mapped\",[112]],[[120448,120448],\"mapped\",[113]],[[120449,120449],\"mapped\",[114]],[[120450,120450],\"mapped\",[115]],[[120451,120451],\"mapped\",[116]],[[120452,120452],\"mapped\",[117]],[[120453,120453],\"mapped\",[118]],[[120454,120454],\"mapped\",[119]],[[120455,120455],\"mapped\",[120]],[[120456,120456],\"mapped\",[121]],[[120457,120457],\"mapped\",[122]],[[120458,120458],\"mapped\",[97]],[[120459,120459],\"mapped\",[98]],[[120460,120460],\"mapped\",[99]],[[120461,120461],\"mapped\",[100]],[[120462,120462],\"mapped\",[101]],[[120463,120463],\"mapped\",[102]],[[120464,120464],\"mapped\",[103]],[[120465,120465],\"mapped\",[104]],[[120466,120466],\"mapped\",[105]],[[120467,120467],\"mapped\",[106]],[[120468,120468],\"mapped\",[107]],[[120469,120469],\"mapped\",[108]],[[120470,120470],\"mapped\",[109]],[[120471,120471],\"mapped\",[110]],[[120472,120472],\"mapped\",[111]],[[120473,120473],\"mapped\",[112]],[[120474,120474],\"mapped\",[113]],[[120475,120475],\"mapped\",[114]],[[120476,120476],\"mapped\",[115]],[[120477,120477],\"mapped\",[116]],[[120478,120478],\"mapped\",[117]],[[120479,120479],\"mapped\",[118]],[[120480,120480],\"mapped\",[119]],[[120481,120481],\"mapped\",[120]],[[120482,120482],\"mapped\",[121]],[[120483,120483],\"mapped\",[122]],[[120484,120484],\"mapped\",[305]],[[120485,120485],\"mapped\",[567]],[[120486,120487],\"disallowed\"],[[120488,120488],\"mapped\",[945]],[[120489,120489],\"mapped\",[946]],[[120490,120490],\"mapped\",[947]],[[120491,120491],\"mapped\",[948]],[[120492,120492],\"mapped\",[949]],[[120493,120493],\"mapped\",[950]],[[120494,120494],\"mapped\",[951]],[[120495,120495],\"mapped\",[952]],[[120496,120496],\"mapped\",[953]],[[120497,120497],\"mapped\",[954]],[[120498,120498],\"mapped\",[955]],[[120499,120499],\"mapped\",[956]],[[120500,120500],\"mapped\",[957]],[[120501,120501],\"mapped\",[958]],[[120502,120502],\"mapped\",[959]],[[120503,120503],\"mapped\",[960]],[[120504,120504],\"mapped\",[961]],[[120505,120505],\"mapped\",[952]],[[120506,120506],\"mapped\",[963]],[[120507,120507],\"mapped\",[964]],[[120508,120508],\"mapped\",[965]],[[120509,120509],\"mapped\",[966]],[[120510,120510],\"mapped\",[967]],[[120511,120511],\"mapped\",[968]],[[120512,120512],\"mapped\",[969]],[[120513,120513],\"mapped\",[8711]],[[120514,120514],\"mapped\",[945]],[[120515,120515],\"mapped\",[946]],[[120516,120516],\"mapped\",[947]],[[120517,120517],\"mapped\",[948]],[[120518,120518],\"mapped\",[949]],[[120519,120519],\"mapped\",[950]],[[120520,120520],\"mapped\",[951]],[[120521,120521],\"mapped\",[952]],[[120522,120522],\"mapped\",[953]],[[120523,120523],\"mapped\",[954]],[[120524,120524],\"mapped\",[955]],[[120525,120525],\"mapped\",[956]],[[120526,120526],\"mapped\",[957]],[[120527,120527],\"mapped\",[958]],[[120528,120528],\"mapped\",[959]],[[120529,120529],\"mapped\",[960]],[[120530,120530],\"mapped\",[961]],[[120531,120532],\"mapped\",[963]],[[120533,120533],\"mapped\",[964]],[[120534,120534],\"mapped\",[965]],[[120535,120535],\"mapped\",[966]],[[120536,120536],\"mapped\",[967]],[[120537,120537],\"mapped\",[968]],[[120538,120538],\"mapped\",[969]],[[120539,120539],\"mapped\",[8706]],[[120540,120540],\"mapped\",[949]],[[120541,120541],\"mapped\",[952]],[[120542,120542],\"mapped\",[954]],[[120543,120543],\"mapped\",[966]],[[120544,120544],\"mapped\",[961]],[[120545,120545],\"mapped\",[960]],[[120546,120546],\"mapped\",[945]],[[120547,120547],\"mapped\",[946]],[[120548,120548],\"mapped\",[947]],[[120549,120549],\"mapped\",[948]],[[120550,120550],\"mapped\",[949]],[[120551,120551],\"mapped\",[950]],[[120552,120552],\"mapped\",[951]],[[120553,120553],\"mapped\",[952]],[[120554,120554],\"mapped\",[953]],[[120555,120555],\"mapped\",[954]],[[120556,120556],\"mapped\",[955]],[[120557,120557],\"mapped\",[956]],[[120558,120558],\"mapped\",[957]],[[120559,120559],\"mapped\",[958]],[[120560,120560],\"mapped\",[959]],[[120561,120561],\"mapped\",[960]],[[120562,120562],\"mapped\",[961]],[[120563,120563],\"mapped\",[952]],[[120564,120564],\"mapped\",[963]],[[120565,120565],\"mapped\",[964]],[[120566,120566],\"mapped\",[965]],[[120567,120567],\"mapped\",[966]],[[120568,120568],\"mapped\",[967]],[[120569,120569],\"mapped\",[968]],[[120570,120570],\"mapped\",[969]],[[120571,120571],\"mapped\",[8711]],[[120572,120572],\"mapped\",[945]],[[120573,120573],\"mapped\",[946]],[[120574,120574],\"mapped\",[947]],[[120575,120575],\"mapped\",[948]],[[120576,120576],\"mapped\",[949]],[[120577,120577],\"mapped\",[950]],[[120578,120578],\"mapped\",[951]],[[120579,120579],\"mapped\",[952]],[[120580,120580],\"mapped\",[953]],[[120581,120581],\"mapped\",[954]],[[120582,120582],\"mapped\",[955]],[[120583,120583],\"mapped\",[956]],[[120584,120584],\"mapped\",[957]],[[120585,120585],\"mapped\",[958]],[[120586,120586],\"mapped\",[959]],[[120587,120587],\"mapped\",[960]],[[120588,120588],\"mapped\",[961]],[[120589,120590],\"mapped\",[963]],[[120591,120591],\"mapped\",[964]],[[120592,120592],\"mapped\",[965]],[[120593,120593],\"mapped\",[966]],[[120594,120594],\"mapped\",[967]],[[120595,120595],\"mapped\",[968]],[[120596,120596],\"mapped\",[969]],[[120597,120597],\"mapped\",[8706]],[[120598,120598],\"mapped\",[949]],[[120599,120599],\"mapped\",[952]],[[120600,120600],\"mapped\",[954]],[[120601,120601],\"mapped\",[966]],[[120602,120602],\"mapped\",[961]],[[120603,120603],\"mapped\",[960]],[[120604,120604],\"mapped\",[945]],[[120605,120605],\"mapped\",[946]],[[120606,120606],\"mapped\",[947]],[[120607,120607],\"mapped\",[948]],[[120608,120608],\"mapped\",[949]],[[120609,120609],\"mapped\",[950]],[[120610,120610],\"mapped\",[951]],[[120611,120611],\"mapped\",[952]],[[120612,120612],\"mapped\",[953]],[[120613,120613],\"mapped\",[954]],[[120614,120614],\"mapped\",[955]],[[120615,120615],\"mapped\",[956]],[[120616,120616],\"mapped\",[957]],[[120617,120617],\"mapped\",[958]],[[120618,120618],\"mapped\",[959]],[[120619,120619],\"mapped\",[960]],[[120620,120620],\"mapped\",[961]],[[120621,120621],\"mapped\",[952]],[[120622,120622],\"mapped\",[963]],[[120623,120623],\"mapped\",[964]],[[120624,120624],\"mapped\",[965]],[[120625,120625],\"mapped\",[966]],[[120626,120626],\"mapped\",[967]],[[120627,120627],\"mapped\",[968]],[[120628,120628],\"mapped\",[969]],[[120629,120629],\"mapped\",[8711]],[[120630,120630],\"mapped\",[945]],[[120631,120631],\"mapped\",[946]],[[120632,120632],\"mapped\",[947]],[[120633,120633],\"mapped\",[948]],[[120634,120634],\"mapped\",[949]],[[120635,120635],\"mapped\",[950]],[[120636,120636],\"mapped\",[951]],[[120637,120637],\"mapped\",[952]],[[120638,120638],\"mapped\",[953]],[[120639,120639],\"mapped\",[954]],[[120640,120640],\"mapped\",[955]],[[120641,120641],\"mapped\",[956]],[[120642,120642],\"mapped\",[957]],[[120643,120643],\"mapped\",[958]],[[120644,120644],\"mapped\",[959]],[[120645,120645],\"mapped\",[960]],[[120646,120646],\"mapped\",[961]],[[120647,120648],\"mapped\",[963]],[[120649,120649],\"mapped\",[964]],[[120650,120650],\"mapped\",[965]],[[120651,120651],\"mapped\",[966]],[[120652,120652],\"mapped\",[967]],[[120653,120653],\"mapped\",[968]],[[120654,120654],\"mapped\",[969]],[[120655,120655],\"mapped\",[8706]],[[120656,120656],\"mapped\",[949]],[[120657,120657],\"mapped\",[952]],[[120658,120658],\"mapped\",[954]],[[120659,120659],\"mapped\",[966]],[[120660,120660],\"mapped\",[961]],[[120661,120661],\"mapped\",[960]],[[120662,120662],\"mapped\",[945]],[[120663,120663],\"mapped\",[946]],[[120664,120664],\"mapped\",[947]],[[120665,120665],\"mapped\",[948]],[[120666,120666],\"mapped\",[949]],[[120667,120667],\"mapped\",[950]],[[120668,120668],\"mapped\",[951]],[[120669,120669],\"mapped\",[952]],[[120670,120670],\"mapped\",[953]],[[120671,120671],\"mapped\",[954]],[[120672,120672],\"mapped\",[955]],[[120673,120673],\"mapped\",[956]],[[120674,120674],\"mapped\",[957]],[[120675,120675],\"mapped\",[958]],[[120676,120676],\"mapped\",[959]],[[120677,120677],\"mapped\",[960]],[[120678,120678],\"mapped\",[961]],[[120679,120679],\"mapped\",[952]],[[120680,120680],\"mapped\",[963]],[[120681,120681],\"mapped\",[964]],[[120682,120682],\"mapped\",[965]],[[120683,120683],\"mapped\",[966]],[[120684,120684],\"mapped\",[967]],[[120685,120685],\"mapped\",[968]],[[120686,120686],\"mapped\",[969]],[[120687,120687],\"mapped\",[8711]],[[120688,120688],\"mapped\",[945]],[[120689,120689],\"mapped\",[946]],[[120690,120690],\"mapped\",[947]],[[120691,120691],\"mapped\",[948]],[[120692,120692],\"mapped\",[949]],[[120693,120693],\"mapped\",[950]],[[120694,120694],\"mapped\",[951]],[[120695,120695],\"mapped\",[952]],[[120696,120696],\"mapped\",[953]],[[120697,120697],\"mapped\",[954]],[[120698,120698],\"mapped\",[955]],[[120699,120699],\"mapped\",[956]],[[120700,120700],\"mapped\",[957]],[[120701,120701],\"mapped\",[958]],[[120702,120702],\"mapped\",[959]],[[120703,120703],\"mapped\",[960]],[[120704,120704],\"mapped\",[961]],[[120705,120706],\"mapped\",[963]],[[120707,120707],\"mapped\",[964]],[[120708,120708],\"mapped\",[965]],[[120709,120709],\"mapped\",[966]],[[120710,120710],\"mapped\",[967]],[[120711,120711],\"mapped\",[968]],[[120712,120712],\"mapped\",[969]],[[120713,120713],\"mapped\",[8706]],[[120714,120714],\"mapped\",[949]],[[120715,120715],\"mapped\",[952]],[[120716,120716],\"mapped\",[954]],[[120717,120717],\"mapped\",[966]],[[120718,120718],\"mapped\",[961]],[[120719,120719],\"mapped\",[960]],[[120720,120720],\"mapped\",[945]],[[120721,120721],\"mapped\",[946]],[[120722,120722],\"mapped\",[947]],[[120723,120723],\"mapped\",[948]],[[120724,120724],\"mapped\",[949]],[[120725,120725],\"mapped\",[950]],[[120726,120726],\"mapped\",[951]],[[120727,120727],\"mapped\",[952]],[[120728,120728],\"mapped\",[953]],[[120729,120729],\"mapped\",[954]],[[120730,120730],\"mapped\",[955]],[[120731,120731],\"mapped\",[956]],[[120732,120732],\"mapped\",[957]],[[120733,120733],\"mapped\",[958]],[[120734,120734],\"mapped\",[959]],[[120735,120735],\"mapped\",[960]],[[120736,120736],\"mapped\",[961]],[[120737,120737],\"mapped\",[952]],[[120738,120738],\"mapped\",[963]],[[120739,120739],\"mapped\",[964]],[[120740,120740],\"mapped\",[965]],[[120741,120741],\"mapped\",[966]],[[120742,120742],\"mapped\",[967]],[[120743,120743],\"mapped\",[968]],[[120744,120744],\"mapped\",[969]],[[120745,120745],\"mapped\",[8711]],[[120746,120746],\"mapped\",[945]],[[120747,120747],\"mapped\",[946]],[[120748,120748],\"mapped\",[947]],[[120749,120749],\"mapped\",[948]],[[120750,120750],\"mapped\",[949]],[[120751,120751],\"mapped\",[950]],[[120752,120752],\"mapped\",[951]],[[120753,120753],\"mapped\",[952]],[[120754,120754],\"mapped\",[953]],[[120755,120755],\"mapped\",[954]],[[120756,120756],\"mapped\",[955]],[[120757,120757],\"mapped\",[956]],[[120758,120758],\"mapped\",[957]],[[120759,120759],\"mapped\",[958]],[[120760,120760],\"mapped\",[959]],[[120761,120761],\"mapped\",[960]],[[120762,120762],\"mapped\",[961]],[[120763,120764],\"mapped\",[963]],[[120765,120765],\"mapped\",[964]],[[120766,120766],\"mapped\",[965]],[[120767,120767],\"mapped\",[966]],[[120768,120768],\"mapped\",[967]],[[120769,120769],\"mapped\",[968]],[[120770,120770],\"mapped\",[969]],[[120771,120771],\"mapped\",[8706]],[[120772,120772],\"mapped\",[949]],[[120773,120773],\"mapped\",[952]],[[120774,120774],\"mapped\",[954]],[[120775,120775],\"mapped\",[966]],[[120776,120776],\"mapped\",[961]],[[120777,120777],\"mapped\",[960]],[[120778,120779],\"mapped\",[989]],[[120780,120781],\"disallowed\"],[[120782,120782],\"mapped\",[48]],[[120783,120783],\"mapped\",[49]],[[120784,120784],\"mapped\",[50]],[[120785,120785],\"mapped\",[51]],[[120786,120786],\"mapped\",[52]],[[120787,120787],\"mapped\",[53]],[[120788,120788],\"mapped\",[54]],[[120789,120789],\"mapped\",[55]],[[120790,120790],\"mapped\",[56]],[[120791,120791],\"mapped\",[57]],[[120792,120792],\"mapped\",[48]],[[120793,120793],\"mapped\",[49]],[[120794,120794],\"mapped\",[50]],[[120795,120795],\"mapped\",[51]],[[120796,120796],\"mapped\",[52]],[[120797,120797],\"mapped\",[53]],[[120798,120798],\"mapped\",[54]],[[120799,120799],\"mapped\",[55]],[[120800,120800],\"mapped\",[56]],[[120801,120801],\"mapped\",[57]],[[120802,120802],\"mapped\",[48]],[[120803,120803],\"mapped\",[49]],[[120804,120804],\"mapped\",[50]],[[120805,120805],\"mapped\",[51]],[[120806,120806],\"mapped\",[52]],[[120807,120807],\"mapped\",[53]],[[120808,120808],\"mapped\",[54]],[[120809,120809],\"mapped\",[55]],[[120810,120810],\"mapped\",[56]],[[120811,120811],\"mapped\",[57]],[[120812,120812],\"mapped\",[48]],[[120813,120813],\"mapped\",[49]],[[120814,120814],\"mapped\",[50]],[[120815,120815],\"mapped\",[51]],[[120816,120816],\"mapped\",[52]],[[120817,120817],\"mapped\",[53]],[[120818,120818],\"mapped\",[54]],[[120819,120819],\"mapped\",[55]],[[120820,120820],\"mapped\",[56]],[[120821,120821],\"mapped\",[57]],[[120822,120822],\"mapped\",[48]],[[120823,120823],\"mapped\",[49]],[[120824,120824],\"mapped\",[50]],[[120825,120825],\"mapped\",[51]],[[120826,120826],\"mapped\",[52]],[[120827,120827],\"mapped\",[53]],[[120828,120828],\"mapped\",[54]],[[120829,120829],\"mapped\",[55]],[[120830,120830],\"mapped\",[56]],[[120831,120831],\"mapped\",[57]],[[120832,121343],\"valid\",[],\"NV8\"],[[121344,121398],\"valid\"],[[121399,121402],\"valid\",[],\"NV8\"],[[121403,121452],\"valid\"],[[121453,121460],\"valid\",[],\"NV8\"],[[121461,121461],\"valid\"],[[121462,121475],\"valid\",[],\"NV8\"],[[121476,121476],\"valid\"],[[121477,121483],\"valid\",[],\"NV8\"],[[121484,121498],\"disallowed\"],[[121499,121503],\"valid\"],[[121504,121504],\"disallowed\"],[[121505,121519],\"valid\"],[[121520,124927],\"disallowed\"],[[124928,125124],\"valid\"],[[125125,125126],\"disallowed\"],[[125127,125135],\"valid\",[],\"NV8\"],[[125136,125142],\"valid\"],[[125143,126463],\"disallowed\"],[[126464,126464],\"mapped\",[1575]],[[126465,126465],\"mapped\",[1576]],[[126466,126466],\"mapped\",[1580]],[[126467,126467],\"mapped\",[1583]],[[126468,126468],\"disallowed\"],[[126469,126469],\"mapped\",[1608]],[[126470,126470],\"mapped\",[1586]],[[126471,126471],\"mapped\",[1581]],[[126472,126472],\"mapped\",[1591]],[[126473,126473],\"mapped\",[1610]],[[126474,126474],\"mapped\",[1603]],[[126475,126475],\"mapped\",[1604]],[[126476,126476],\"mapped\",[1605]],[[126477,126477],\"mapped\",[1606]],[[126478,126478],\"mapped\",[1587]],[[126479,126479],\"mapped\",[1593]],[[126480,126480],\"mapped\",[1601]],[[126481,126481],\"mapped\",[1589]],[[126482,126482],\"mapped\",[1602]],[[126483,126483],\"mapped\",[1585]],[[126484,126484],\"mapped\",[1588]],[[126485,126485],\"mapped\",[1578]],[[126486,126486],\"mapped\",[1579]],[[126487,126487],\"mapped\",[1582]],[[126488,126488],\"mapped\",[1584]],[[126489,126489],\"mapped\",[1590]],[[126490,126490],\"mapped\",[1592]],[[126491,126491],\"mapped\",[1594]],[[126492,126492],\"mapped\",[1646]],[[126493,126493],\"mapped\",[1722]],[[126494,126494],\"mapped\",[1697]],[[126495,126495],\"mapped\",[1647]],[[126496,126496],\"disallowed\"],[[126497,126497],\"mapped\",[1576]],[[126498,126498],\"mapped\",[1580]],[[126499,126499],\"disallowed\"],[[126500,126500],\"mapped\",[1607]],[[126501,126502],\"disallowed\"],[[126503,126503],\"mapped\",[1581]],[[126504,126504],\"disallowed\"],[[126505,126505],\"mapped\",[1610]],[[126506,126506],\"mapped\",[1603]],[[126507,126507],\"mapped\",[1604]],[[126508,126508],\"mapped\",[1605]],[[126509,126509],\"mapped\",[1606]],[[126510,126510],\"mapped\",[1587]],[[126511,126511],\"mapped\",[1593]],[[126512,126512],\"mapped\",[1601]],[[126513,126513],\"mapped\",[1589]],[[126514,126514],\"mapped\",[1602]],[[126515,126515],\"disallowed\"],[[126516,126516],\"mapped\",[1588]],[[126517,126517],\"mapped\",[1578]],[[126518,126518],\"mapped\",[1579]],[[126519,126519],\"mapped\",[1582]],[[126520,126520],\"disallowed\"],[[126521,126521],\"mapped\",[1590]],[[126522,126522],\"disallowed\"],[[126523,126523],\"mapped\",[1594]],[[126524,126529],\"disallowed\"],[[126530,126530],\"mapped\",[1580]],[[126531,126534],\"disallowed\"],[[126535,126535],\"mapped\",[1581]],[[126536,126536],\"disallowed\"],[[126537,126537],\"mapped\",[1610]],[[126538,126538],\"disallowed\"],[[126539,126539],\"mapped\",[1604]],[[126540,126540],\"disallowed\"],[[126541,126541],\"mapped\",[1606]],[[126542,126542],\"mapped\",[1587]],[[126543,126543],\"mapped\",[1593]],[[126544,126544],\"disallowed\"],[[126545,126545],\"mapped\",[1589]],[[126546,126546],\"mapped\",[1602]],[[126547,126547],\"disallowed\"],[[126548,126548],\"mapped\",[1588]],[[126549,126550],\"disallowed\"],[[126551,126551],\"mapped\",[1582]],[[126552,126552],\"disallowed\"],[[126553,126553],\"mapped\",[1590]],[[126554,126554],\"disallowed\"],[[126555,126555],\"mapped\",[1594]],[[126556,126556],\"disallowed\"],[[126557,126557],\"mapped\",[1722]],[[126558,126558],\"disallowed\"],[[126559,126559],\"mapped\",[1647]],[[126560,126560],\"disallowed\"],[[126561,126561],\"mapped\",[1576]],[[126562,126562],\"mapped\",[1580]],[[126563,126563],\"disallowed\"],[[126564,126564],\"mapped\",[1607]],[[126565,126566],\"disallowed\"],[[126567,126567],\"mapped\",[1581]],[[126568,126568],\"mapped\",[1591]],[[126569,126569],\"mapped\",[1610]],[[126570,126570],\"mapped\",[1603]],[[126571,126571],\"disallowed\"],[[126572,126572],\"mapped\",[1605]],[[126573,126573],\"mapped\",[1606]],[[126574,126574],\"mapped\",[1587]],[[126575,126575],\"mapped\",[1593]],[[126576,126576],\"mapped\",[1601]],[[126577,126577],\"mapped\",[1589]],[[126578,126578],\"mapped\",[1602]],[[126579,126579],\"disallowed\"],[[126580,126580],\"mapped\",[1588]],[[126581,126581],\"mapped\",[1578]],[[126582,126582],\"mapped\",[1579]],[[126583,126583],\"mapped\",[1582]],[[126584,126584],\"disallowed\"],[[126585,126585],\"mapped\",[1590]],[[126586,126586],\"mapped\",[1592]],[[126587,126587],\"mapped\",[1594]],[[126588,126588],\"mapped\",[1646]],[[126589,126589],\"disallowed\"],[[126590,126590],\"mapped\",[1697]],[[126591,126591],\"disallowed\"],[[126592,126592],\"mapped\",[1575]],[[126593,126593],\"mapped\",[1576]],[[126594,126594],\"mapped\",[1580]],[[126595,126595],\"mapped\",[1583]],[[126596,126596],\"mapped\",[1607]],[[126597,126597],\"mapped\",[1608]],[[126598,126598],\"mapped\",[1586]],[[126599,126599],\"mapped\",[1581]],[[126600,126600],\"mapped\",[1591]],[[126601,126601],\"mapped\",[1610]],[[126602,126602],\"disallowed\"],[[126603,126603],\"mapped\",[1604]],[[126604,126604],\"mapped\",[1605]],[[126605,126605],\"mapped\",[1606]],[[126606,126606],\"mapped\",[1587]],[[126607,126607],\"mapped\",[1593]],[[126608,126608],\"mapped\",[1601]],[[126609,126609],\"mapped\",[1589]],[[126610,126610],\"mapped\",[1602]],[[126611,126611],\"mapped\",[1585]],[[126612,126612],\"mapped\",[1588]],[[126613,126613],\"mapped\",[1578]],[[126614,126614],\"mapped\",[1579]],[[126615,126615],\"mapped\",[1582]],[[126616,126616],\"mapped\",[1584]],[[126617,126617],\"mapped\",[1590]],[[126618,126618],\"mapped\",[1592]],[[126619,126619],\"mapped\",[1594]],[[126620,126624],\"disallowed\"],[[126625,126625],\"mapped\",[1576]],[[126626,126626],\"mapped\",[1580]],[[126627,126627],\"mapped\",[1583]],[[126628,126628],\"disallowed\"],[[126629,126629],\"mapped\",[1608]],[[126630,126630],\"mapped\",[1586]],[[126631,126631],\"mapped\",[1581]],[[126632,126632],\"mapped\",[1591]],[[126633,126633],\"mapped\",[1610]],[[126634,126634],\"disallowed\"],[[126635,126635],\"mapped\",[1604]],[[126636,126636],\"mapped\",[1605]],[[126637,126637],\"mapped\",[1606]],[[126638,126638],\"mapped\",[1587]],[[126639,126639],\"mapped\",[1593]],[[126640,126640],\"mapped\",[1601]],[[126641,126641],\"mapped\",[1589]],[[126642,126642],\"mapped\",[1602]],[[126643,126643],\"mapped\",[1585]],[[126644,126644],\"mapped\",[1588]],[[126645,126645],\"mapped\",[1578]],[[126646,126646],\"mapped\",[1579]],[[126647,126647],\"mapped\",[1582]],[[126648,126648],\"mapped\",[1584]],[[126649,126649],\"mapped\",[1590]],[[126650,126650],\"mapped\",[1592]],[[126651,126651],\"mapped\",[1594]],[[126652,126703],\"disallowed\"],[[126704,126705],\"valid\",[],\"NV8\"],[[126706,126975],\"disallowed\"],[[126976,127019],\"valid\",[],\"NV8\"],[[127020,127023],\"disallowed\"],[[127024,127123],\"valid\",[],\"NV8\"],[[127124,127135],\"disallowed\"],[[127136,127150],\"valid\",[],\"NV8\"],[[127151,127152],\"disallowed\"],[[127153,127166],\"valid\",[],\"NV8\"],[[127167,127167],\"valid\",[],\"NV8\"],[[127168,127168],\"disallowed\"],[[127169,127183],\"valid\",[],\"NV8\"],[[127184,127184],\"disallowed\"],[[127185,127199],\"valid\",[],\"NV8\"],[[127200,127221],\"valid\",[],\"NV8\"],[[127222,127231],\"disallowed\"],[[127232,127232],\"disallowed\"],[[127233,127233],\"disallowed_STD3_mapped\",[48,44]],[[127234,127234],\"disallowed_STD3_mapped\",[49,44]],[[127235,127235],\"disallowed_STD3_mapped\",[50,44]],[[127236,127236],\"disallowed_STD3_mapped\",[51,44]],[[127237,127237],\"disallowed_STD3_mapped\",[52,44]],[[127238,127238],\"disallowed_STD3_mapped\",[53,44]],[[127239,127239],\"disallowed_STD3_mapped\",[54,44]],[[127240,127240],\"disallowed_STD3_mapped\",[55,44]],[[127241,127241],\"disallowed_STD3_mapped\",[56,44]],[[127242,127242],\"disallowed_STD3_mapped\",[57,44]],[[127243,127244],\"valid\",[],\"NV8\"],[[127245,127247],\"disallowed\"],[[127248,127248],\"disallowed_STD3_mapped\",[40,97,41]],[[127249,127249],\"disallowed_STD3_mapped\",[40,98,41]],[[127250,127250],\"disallowed_STD3_mapped\",[40,99,41]],[[127251,127251],\"disallowed_STD3_mapped\",[40,100,41]],[[127252,127252],\"disallowed_STD3_mapped\",[40,101,41]],[[127253,127253],\"disallowed_STD3_mapped\",[40,102,41]],[[127254,127254],\"disallowed_STD3_mapped\",[40,103,41]],[[127255,127255],\"disallowed_STD3_mapped\",[40,104,41]],[[127256,127256],\"disallowed_STD3_mapped\",[40,105,41]],[[127257,127257],\"disallowed_STD3_mapped\",[40,106,41]],[[127258,127258],\"disallowed_STD3_mapped\",[40,107,41]],[[127259,127259],\"disallowed_STD3_mapped\",[40,108,41]],[[127260,127260],\"disallowed_STD3_mapped\",[40,109,41]],[[127261,127261],\"disallowed_STD3_mapped\",[40,110,41]],[[127262,127262],\"disallowed_STD3_mapped\",[40,111,41]],[[127263,127263],\"disallowed_STD3_mapped\",[40,112,41]],[[127264,127264],\"disallowed_STD3_mapped\",[40,113,41]],[[127265,127265],\"disallowed_STD3_mapped\",[40,114,41]],[[127266,127266],\"disallowed_STD3_mapped\",[40,115,41]],[[127267,127267],\"disallowed_STD3_mapped\",[40,116,41]],[[127268,127268],\"disallowed_STD3_mapped\",[40,117,41]],[[127269,127269],\"disallowed_STD3_mapped\",[40,118,41]],[[127270,127270],\"disallowed_STD3_mapped\",[40,119,41]],[[127271,127271],\"disallowed_STD3_mapped\",[40,120,41]],[[127272,127272],\"disallowed_STD3_mapped\",[40,121,41]],[[127273,127273],\"disallowed_STD3_mapped\",[40,122,41]],[[127274,127274],\"mapped\",[12308,115,12309]],[[127275,127275],\"mapped\",[99]],[[127276,127276],\"mapped\",[114]],[[127277,127277],\"mapped\",[99,100]],[[127278,127278],\"mapped\",[119,122]],[[127279,127279],\"disallowed\"],[[127280,127280],\"mapped\",[97]],[[127281,127281],\"mapped\",[98]],[[127282,127282],\"mapped\",[99]],[[127283,127283],\"mapped\",[100]],[[127284,127284],\"mapped\",[101]],[[127285,127285],\"mapped\",[102]],[[127286,127286],\"mapped\",[103]],[[127287,127287],\"mapped\",[104]],[[127288,127288],\"mapped\",[105]],[[127289,127289],\"mapped\",[106]],[[127290,127290],\"mapped\",[107]],[[127291,127291],\"mapped\",[108]],[[127292,127292],\"mapped\",[109]],[[127293,127293],\"mapped\",[110]],[[127294,127294],\"mapped\",[111]],[[127295,127295],\"mapped\",[112]],[[127296,127296],\"mapped\",[113]],[[127297,127297],\"mapped\",[114]],[[127298,127298],\"mapped\",[115]],[[127299,127299],\"mapped\",[116]],[[127300,127300],\"mapped\",[117]],[[127301,127301],\"mapped\",[118]],[[127302,127302],\"mapped\",[119]],[[127303,127303],\"mapped\",[120]],[[127304,127304],\"mapped\",[121]],[[127305,127305],\"mapped\",[122]],[[127306,127306],\"mapped\",[104,118]],[[127307,127307],\"mapped\",[109,118]],[[127308,127308],\"mapped\",[115,100]],[[127309,127309],\"mapped\",[115,115]],[[127310,127310],\"mapped\",[112,112,118]],[[127311,127311],\"mapped\",[119,99]],[[127312,127318],\"valid\",[],\"NV8\"],[[127319,127319],\"valid\",[],\"NV8\"],[[127320,127326],\"valid\",[],\"NV8\"],[[127327,127327],\"valid\",[],\"NV8\"],[[127328,127337],\"valid\",[],\"NV8\"],[[127338,127338],\"mapped\",[109,99]],[[127339,127339],\"mapped\",[109,100]],[[127340,127343],\"disallowed\"],[[127344,127352],\"valid\",[],\"NV8\"],[[127353,127353],\"valid\",[],\"NV8\"],[[127354,127354],\"valid\",[],\"NV8\"],[[127355,127356],\"valid\",[],\"NV8\"],[[127357,127358],\"valid\",[],\"NV8\"],[[127359,127359],\"valid\",[],\"NV8\"],[[127360,127369],\"valid\",[],\"NV8\"],[[127370,127373],\"valid\",[],\"NV8\"],[[127374,127375],\"valid\",[],\"NV8\"],[[127376,127376],\"mapped\",[100,106]],[[127377,127386],\"valid\",[],\"NV8\"],[[127387,127461],\"disallowed\"],[[127462,127487],\"valid\",[],\"NV8\"],[[127488,127488],\"mapped\",[12411,12363]],[[127489,127489],\"mapped\",[12467,12467]],[[127490,127490],\"mapped\",[12469]],[[127491,127503],\"disallowed\"],[[127504,127504],\"mapped\",[25163]],[[127505,127505],\"mapped\",[23383]],[[127506,127506],\"mapped\",[21452]],[[127507,127507],\"mapped\",[12487]],[[127508,127508],\"mapped\",[20108]],[[127509,127509],\"mapped\",[22810]],[[127510,127510],\"mapped\",[35299]],[[127511,127511],\"mapped\",[22825]],[[127512,127512],\"mapped\",[20132]],[[127513,127513],\"mapped\",[26144]],[[127514,127514],\"mapped\",[28961]],[[127515,127515],\"mapped\",[26009]],[[127516,127516],\"mapped\",[21069]],[[127517,127517],\"mapped\",[24460]],[[127518,127518],\"mapped\",[20877]],[[127519,127519],\"mapped\",[26032]],[[127520,127520],\"mapped\",[21021]],[[127521,127521],\"mapped\",[32066]],[[127522,127522],\"mapped\",[29983]],[[127523,127523],\"mapped\",[36009]],[[127524,127524],\"mapped\",[22768]],[[127525,127525],\"mapped\",[21561]],[[127526,127526],\"mapped\",[28436]],[[127527,127527],\"mapped\",[25237]],[[127528,127528],\"mapped\",[25429]],[[127529,127529],\"mapped\",[19968]],[[127530,127530],\"mapped\",[19977]],[[127531,127531],\"mapped\",[36938]],[[127532,127532],\"mapped\",[24038]],[[127533,127533],\"mapped\",[20013]],[[127534,127534],\"mapped\",[21491]],[[127535,127535],\"mapped\",[25351]],[[127536,127536],\"mapped\",[36208]],[[127537,127537],\"mapped\",[25171]],[[127538,127538],\"mapped\",[31105]],[[127539,127539],\"mapped\",[31354]],[[127540,127540],\"mapped\",[21512]],[[127541,127541],\"mapped\",[28288]],[[127542,127542],\"mapped\",[26377]],[[127543,127543],\"mapped\",[26376]],[[127544,127544],\"mapped\",[30003]],[[127545,127545],\"mapped\",[21106]],[[127546,127546],\"mapped\",[21942]],[[127547,127551],\"disallowed\"],[[127552,127552],\"mapped\",[12308,26412,12309]],[[127553,127553],\"mapped\",[12308,19977,12309]],[[127554,127554],\"mapped\",[12308,20108,12309]],[[127555,127555],\"mapped\",[12308,23433,12309]],[[127556,127556],\"mapped\",[12308,28857,12309]],[[127557,127557],\"mapped\",[12308,25171,12309]],[[127558,127558],\"mapped\",[12308,30423,12309]],[[127559,127559],\"mapped\",[12308,21213,12309]],[[127560,127560],\"mapped\",[12308,25943,12309]],[[127561,127567],\"disallowed\"],[[127568,127568],\"mapped\",[24471]],[[127569,127569],\"mapped\",[21487]],[[127570,127743],\"disallowed\"],[[127744,127776],\"valid\",[],\"NV8\"],[[127777,127788],\"valid\",[],\"NV8\"],[[127789,127791],\"valid\",[],\"NV8\"],[[127792,127797],\"valid\",[],\"NV8\"],[[127798,127798],\"valid\",[],\"NV8\"],[[127799,127868],\"valid\",[],\"NV8\"],[[127869,127869],\"valid\",[],\"NV8\"],[[127870,127871],\"valid\",[],\"NV8\"],[[127872,127891],\"valid\",[],\"NV8\"],[[127892,127903],\"valid\",[],\"NV8\"],[[127904,127940],\"valid\",[],\"NV8\"],[[127941,127941],\"valid\",[],\"NV8\"],[[127942,127946],\"valid\",[],\"NV8\"],[[127947,127950],\"valid\",[],\"NV8\"],[[127951,127955],\"valid\",[],\"NV8\"],[[127956,127967],\"valid\",[],\"NV8\"],[[127968,127984],\"valid\",[],\"NV8\"],[[127985,127991],\"valid\",[],\"NV8\"],[[127992,127999],\"valid\",[],\"NV8\"],[[128000,128062],\"valid\",[],\"NV8\"],[[128063,128063],\"valid\",[],\"NV8\"],[[128064,128064],\"valid\",[],\"NV8\"],[[128065,128065],\"valid\",[],\"NV8\"],[[128066,128247],\"valid\",[],\"NV8\"],[[128248,128248],\"valid\",[],\"NV8\"],[[128249,128252],\"valid\",[],\"NV8\"],[[128253,128254],\"valid\",[],\"NV8\"],[[128255,128255],\"valid\",[],\"NV8\"],[[128256,128317],\"valid\",[],\"NV8\"],[[128318,128319],\"valid\",[],\"NV8\"],[[128320,128323],\"valid\",[],\"NV8\"],[[128324,128330],\"valid\",[],\"NV8\"],[[128331,128335],\"valid\",[],\"NV8\"],[[128336,128359],\"valid\",[],\"NV8\"],[[128360,128377],\"valid\",[],\"NV8\"],[[128378,128378],\"disallowed\"],[[128379,128419],\"valid\",[],\"NV8\"],[[128420,128420],\"disallowed\"],[[128421,128506],\"valid\",[],\"NV8\"],[[128507,128511],\"valid\",[],\"NV8\"],[[128512,128512],\"valid\",[],\"NV8\"],[[128513,128528],\"valid\",[],\"NV8\"],[[128529,128529],\"valid\",[],\"NV8\"],[[128530,128532],\"valid\",[],\"NV8\"],[[128533,128533],\"valid\",[],\"NV8\"],[[128534,128534],\"valid\",[],\"NV8\"],[[128535,128535],\"valid\",[],\"NV8\"],[[128536,128536],\"valid\",[],\"NV8\"],[[128537,128537],\"valid\",[],\"NV8\"],[[128538,128538],\"valid\",[],\"NV8\"],[[128539,128539],\"valid\",[],\"NV8\"],[[128540,128542],\"valid\",[],\"NV8\"],[[128543,128543],\"valid\",[],\"NV8\"],[[128544,128549],\"valid\",[],\"NV8\"],[[128550,128551],\"valid\",[],\"NV8\"],[[128552,128555],\"valid\",[],\"NV8\"],[[128556,128556],\"valid\",[],\"NV8\"],[[128557,128557],\"valid\",[],\"NV8\"],[[128558,128559],\"valid\",[],\"NV8\"],[[128560,128563],\"valid\",[],\"NV8\"],[[128564,128564],\"valid\",[],\"NV8\"],[[128565,128576],\"valid\",[],\"NV8\"],[[128577,128578],\"valid\",[],\"NV8\"],[[128579,128580],\"valid\",[],\"NV8\"],[[128581,128591],\"valid\",[],\"NV8\"],[[128592,128639],\"valid\",[],\"NV8\"],[[128640,128709],\"valid\",[],\"NV8\"],[[128710,128719],\"valid\",[],\"NV8\"],[[128720,128720],\"valid\",[],\"NV8\"],[[128721,128735],\"disallowed\"],[[128736,128748],\"valid\",[],\"NV8\"],[[128749,128751],\"disallowed\"],[[128752,128755],\"valid\",[],\"NV8\"],[[128756,128767],\"disallowed\"],[[128768,128883],\"valid\",[],\"NV8\"],[[128884,128895],\"disallowed\"],[[128896,128980],\"valid\",[],\"NV8\"],[[128981,129023],\"disallowed\"],[[129024,129035],\"valid\",[],\"NV8\"],[[129036,129039],\"disallowed\"],[[129040,129095],\"valid\",[],\"NV8\"],[[129096,129103],\"disallowed\"],[[129104,129113],\"valid\",[],\"NV8\"],[[129114,129119],\"disallowed\"],[[129120,129159],\"valid\",[],\"NV8\"],[[129160,129167],\"disallowed\"],[[129168,129197],\"valid\",[],\"NV8\"],[[129198,129295],\"disallowed\"],[[129296,129304],\"valid\",[],\"NV8\"],[[129305,129407],\"disallowed\"],[[129408,129412],\"valid\",[],\"NV8\"],[[129413,129471],\"disallowed\"],[[129472,129472],\"valid\",[],\"NV8\"],[[129473,131069],\"disallowed\"],[[131070,131071],\"disallowed\"],[[131072,173782],\"valid\"],[[173783,173823],\"disallowed\"],[[173824,177972],\"valid\"],[[177973,177983],\"disallowed\"],[[177984,178205],\"valid\"],[[178206,178207],\"disallowed\"],[[178208,183969],\"valid\"],[[183970,194559],\"disallowed\"],[[194560,194560],\"mapped\",[20029]],[[194561,194561],\"mapped\",[20024]],[[194562,194562],\"mapped\",[20033]],[[194563,194563],\"mapped\",[131362]],[[194564,194564],\"mapped\",[20320]],[[194565,194565],\"mapped\",[20398]],[[194566,194566],\"mapped\",[20411]],[[194567,194567],\"mapped\",[20482]],[[194568,194568],\"mapped\",[20602]],[[194569,194569],\"mapped\",[20633]],[[194570,194570],\"mapped\",[20711]],[[194571,194571],\"mapped\",[20687]],[[194572,194572],\"mapped\",[13470]],[[194573,194573],\"mapped\",[132666]],[[194574,194574],\"mapped\",[20813]],[[194575,194575],\"mapped\",[20820]],[[194576,194576],\"mapped\",[20836]],[[194577,194577],\"mapped\",[20855]],[[194578,194578],\"mapped\",[132380]],[[194579,194579],\"mapped\",[13497]],[[194580,194580],\"mapped\",[20839]],[[194581,194581],\"mapped\",[20877]],[[194582,194582],\"mapped\",[132427]],[[194583,194583],\"mapped\",[20887]],[[194584,194584],\"mapped\",[20900]],[[194585,194585],\"mapped\",[20172]],[[194586,194586],\"mapped\",[20908]],[[194587,194587],\"mapped\",[20917]],[[194588,194588],\"mapped\",[168415]],[[194589,194589],\"mapped\",[20981]],[[194590,194590],\"mapped\",[20995]],[[194591,194591],\"mapped\",[13535]],[[194592,194592],\"mapped\",[21051]],[[194593,194593],\"mapped\",[21062]],[[194594,194594],\"mapped\",[21106]],[[194595,194595],\"mapped\",[21111]],[[194596,194596],\"mapped\",[13589]],[[194597,194597],\"mapped\",[21191]],[[194598,194598],\"mapped\",[21193]],[[194599,194599],\"mapped\",[21220]],[[194600,194600],\"mapped\",[21242]],[[194601,194601],\"mapped\",[21253]],[[194602,194602],\"mapped\",[21254]],[[194603,194603],\"mapped\",[21271]],[[194604,194604],\"mapped\",[21321]],[[194605,194605],\"mapped\",[21329]],[[194606,194606],\"mapped\",[21338]],[[194607,194607],\"mapped\",[21363]],[[194608,194608],\"mapped\",[21373]],[[194609,194611],\"mapped\",[21375]],[[194612,194612],\"mapped\",[133676]],[[194613,194613],\"mapped\",[28784]],[[194614,194614],\"mapped\",[21450]],[[194615,194615],\"mapped\",[21471]],[[194616,194616],\"mapped\",[133987]],[[194617,194617],\"mapped\",[21483]],[[194618,194618],\"mapped\",[21489]],[[194619,194619],\"mapped\",[21510]],[[194620,194620],\"mapped\",[21662]],[[194621,194621],\"mapped\",[21560]],[[194622,194622],\"mapped\",[21576]],[[194623,194623],\"mapped\",[21608]],[[194624,194624],\"mapped\",[21666]],[[194625,194625],\"mapped\",[21750]],[[194626,194626],\"mapped\",[21776]],[[194627,194627],\"mapped\",[21843]],[[194628,194628],\"mapped\",[21859]],[[194629,194630],\"mapped\",[21892]],[[194631,194631],\"mapped\",[21913]],[[194632,194632],\"mapped\",[21931]],[[194633,194633],\"mapped\",[21939]],[[194634,194634],\"mapped\",[21954]],[[194635,194635],\"mapped\",[22294]],[[194636,194636],\"mapped\",[22022]],[[194637,194637],\"mapped\",[22295]],[[194638,194638],\"mapped\",[22097]],[[194639,194639],\"mapped\",[22132]],[[194640,194640],\"mapped\",[20999]],[[194641,194641],\"mapped\",[22766]],[[194642,194642],\"mapped\",[22478]],[[194643,194643],\"mapped\",[22516]],[[194644,194644],\"mapped\",[22541]],[[194645,194645],\"mapped\",[22411]],[[194646,194646],\"mapped\",[22578]],[[194647,194647],\"mapped\",[22577]],[[194648,194648],\"mapped\",[22700]],[[194649,194649],\"mapped\",[136420]],[[194650,194650],\"mapped\",[22770]],[[194651,194651],\"mapped\",[22775]],[[194652,194652],\"mapped\",[22790]],[[194653,194653],\"mapped\",[22810]],[[194654,194654],\"mapped\",[22818]],[[194655,194655],\"mapped\",[22882]],[[194656,194656],\"mapped\",[136872]],[[194657,194657],\"mapped\",[136938]],[[194658,194658],\"mapped\",[23020]],[[194659,194659],\"mapped\",[23067]],[[194660,194660],\"mapped\",[23079]],[[194661,194661],\"mapped\",[23000]],[[194662,194662],\"mapped\",[23142]],[[194663,194663],\"mapped\",[14062]],[[194664,194664],\"disallowed\"],[[194665,194665],\"mapped\",[23304]],[[194666,194667],\"mapped\",[23358]],[[194668,194668],\"mapped\",[137672]],[[194669,194669],\"mapped\",[23491]],[[194670,194670],\"mapped\",[23512]],[[194671,194671],\"mapped\",[23527]],[[194672,194672],\"mapped\",[23539]],[[194673,194673],\"mapped\",[138008]],[[194674,194674],\"mapped\",[23551]],[[194675,194675],\"mapped\",[23558]],[[194676,194676],\"disallowed\"],[[194677,194677],\"mapped\",[23586]],[[194678,194678],\"mapped\",[14209]],[[194679,194679],\"mapped\",[23648]],[[194680,194680],\"mapped\",[23662]],[[194681,194681],\"mapped\",[23744]],[[194682,194682],\"mapped\",[23693]],[[194683,194683],\"mapped\",[138724]],[[194684,194684],\"mapped\",[23875]],[[194685,194685],\"mapped\",[138726]],[[194686,194686],\"mapped\",[23918]],[[194687,194687],\"mapped\",[23915]],[[194688,194688],\"mapped\",[23932]],[[194689,194689],\"mapped\",[24033]],[[194690,194690],\"mapped\",[24034]],[[194691,194691],\"mapped\",[14383]],[[194692,194692],\"mapped\",[24061]],[[194693,194693],\"mapped\",[24104]],[[194694,194694],\"mapped\",[24125]],[[194695,194695],\"mapped\",[24169]],[[194696,194696],\"mapped\",[14434]],[[194697,194697],\"mapped\",[139651]],[[194698,194698],\"mapped\",[14460]],[[194699,194699],\"mapped\",[24240]],[[194700,194700],\"mapped\",[24243]],[[194701,194701],\"mapped\",[24246]],[[194702,194702],\"mapped\",[24266]],[[194703,194703],\"mapped\",[172946]],[[194704,194704],\"mapped\",[24318]],[[194705,194706],\"mapped\",[140081]],[[194707,194707],\"mapped\",[33281]],[[194708,194709],\"mapped\",[24354]],[[194710,194710],\"mapped\",[14535]],[[194711,194711],\"mapped\",[144056]],[[194712,194712],\"mapped\",[156122]],[[194713,194713],\"mapped\",[24418]],[[194714,194714],\"mapped\",[24427]],[[194715,194715],\"mapped\",[14563]],[[194716,194716],\"mapped\",[24474]],[[194717,194717],\"mapped\",[24525]],[[194718,194718],\"mapped\",[24535]],[[194719,194719],\"mapped\",[24569]],[[194720,194720],\"mapped\",[24705]],[[194721,194721],\"mapped\",[14650]],[[194722,194722],\"mapped\",[14620]],[[194723,194723],\"mapped\",[24724]],[[194724,194724],\"mapped\",[141012]],[[194725,194725],\"mapped\",[24775]],[[194726,194726],\"mapped\",[24904]],[[194727,194727],\"mapped\",[24908]],[[194728,194728],\"mapped\",[24910]],[[194729,194729],\"mapped\",[24908]],[[194730,194730],\"mapped\",[24954]],[[194731,194731],\"mapped\",[24974]],[[194732,194732],\"mapped\",[25010]],[[194733,194733],\"mapped\",[24996]],[[194734,194734],\"mapped\",[25007]],[[194735,194735],\"mapped\",[25054]],[[194736,194736],\"mapped\",[25074]],[[194737,194737],\"mapped\",[25078]],[[194738,194738],\"mapped\",[25104]],[[194739,194739],\"mapped\",[25115]],[[194740,194740],\"mapped\",[25181]],[[194741,194741],\"mapped\",[25265]],[[194742,194742],\"mapped\",[25300]],[[194743,194743],\"mapped\",[25424]],[[194744,194744],\"mapped\",[142092]],[[194745,194745],\"mapped\",[25405]],[[194746,194746],\"mapped\",[25340]],[[194747,194747],\"mapped\",[25448]],[[194748,194748],\"mapped\",[25475]],[[194749,194749],\"mapped\",[25572]],[[194750,194750],\"mapped\",[142321]],[[194751,194751],\"mapped\",[25634]],[[194752,194752],\"mapped\",[25541]],[[194753,194753],\"mapped\",[25513]],[[194754,194754],\"mapped\",[14894]],[[194755,194755],\"mapped\",[25705]],[[194756,194756],\"mapped\",[25726]],[[194757,194757],\"mapped\",[25757]],[[194758,194758],\"mapped\",[25719]],[[194759,194759],\"mapped\",[14956]],[[194760,194760],\"mapped\",[25935]],[[194761,194761],\"mapped\",[25964]],[[194762,194762],\"mapped\",[143370]],[[194763,194763],\"mapped\",[26083]],[[194764,194764],\"mapped\",[26360]],[[194765,194765],\"mapped\",[26185]],[[194766,194766],\"mapped\",[15129]],[[194767,194767],\"mapped\",[26257]],[[194768,194768],\"mapped\",[15112]],[[194769,194769],\"mapped\",[15076]],[[194770,194770],\"mapped\",[20882]],[[194771,194771],\"mapped\",[20885]],[[194772,194772],\"mapped\",[26368]],[[194773,194773],\"mapped\",[26268]],[[194774,194774],\"mapped\",[32941]],[[194775,194775],\"mapped\",[17369]],[[194776,194776],\"mapped\",[26391]],[[194777,194777],\"mapped\",[26395]],[[194778,194778],\"mapped\",[26401]],[[194779,194779],\"mapped\",[26462]],[[194780,194780],\"mapped\",[26451]],[[194781,194781],\"mapped\",[144323]],[[194782,194782],\"mapped\",[15177]],[[194783,194783],\"mapped\",[26618]],[[194784,194784],\"mapped\",[26501]],[[194785,194785],\"mapped\",[26706]],[[194786,194786],\"mapped\",[26757]],[[194787,194787],\"mapped\",[144493]],[[194788,194788],\"mapped\",[26766]],[[194789,194789],\"mapped\",[26655]],[[194790,194790],\"mapped\",[26900]],[[194791,194791],\"mapped\",[15261]],[[194792,194792],\"mapped\",[26946]],[[194793,194793],\"mapped\",[27043]],[[194794,194794],\"mapped\",[27114]],[[194795,194795],\"mapped\",[27304]],[[194796,194796],\"mapped\",[145059]],[[194797,194797],\"mapped\",[27355]],[[194798,194798],\"mapped\",[15384]],[[194799,194799],\"mapped\",[27425]],[[194800,194800],\"mapped\",[145575]],[[194801,194801],\"mapped\",[27476]],[[194802,194802],\"mapped\",[15438]],[[194803,194803],\"mapped\",[27506]],[[194804,194804],\"mapped\",[27551]],[[194805,194805],\"mapped\",[27578]],[[194806,194806],\"mapped\",[27579]],[[194807,194807],\"mapped\",[146061]],[[194808,194808],\"mapped\",[138507]],[[194809,194809],\"mapped\",[146170]],[[194810,194810],\"mapped\",[27726]],[[194811,194811],\"mapped\",[146620]],[[194812,194812],\"mapped\",[27839]],[[194813,194813],\"mapped\",[27853]],[[194814,194814],\"mapped\",[27751]],[[194815,194815],\"mapped\",[27926]],[[194816,194816],\"mapped\",[27966]],[[194817,194817],\"mapped\",[28023]],[[194818,194818],\"mapped\",[27969]],[[194819,194819],\"mapped\",[28009]],[[194820,194820],\"mapped\",[28024]],[[194821,194821],\"mapped\",[28037]],[[194822,194822],\"mapped\",[146718]],[[194823,194823],\"mapped\",[27956]],[[194824,194824],\"mapped\",[28207]],[[194825,194825],\"mapped\",[28270]],[[194826,194826],\"mapped\",[15667]],[[194827,194827],\"mapped\",[28363]],[[194828,194828],\"mapped\",[28359]],[[194829,194829],\"mapped\",[147153]],[[194830,194830],\"mapped\",[28153]],[[194831,194831],\"mapped\",[28526]],[[194832,194832],\"mapped\",[147294]],[[194833,194833],\"mapped\",[147342]],[[194834,194834],\"mapped\",[28614]],[[194835,194835],\"mapped\",[28729]],[[194836,194836],\"mapped\",[28702]],[[194837,194837],\"mapped\",[28699]],[[194838,194838],\"mapped\",[15766]],[[194839,194839],\"mapped\",[28746]],[[194840,194840],\"mapped\",[28797]],[[194841,194841],\"mapped\",[28791]],[[194842,194842],\"mapped\",[28845]],[[194843,194843],\"mapped\",[132389]],[[194844,194844],\"mapped\",[28997]],[[194845,194845],\"mapped\",[148067]],[[194846,194846],\"mapped\",[29084]],[[194847,194847],\"disallowed\"],[[194848,194848],\"mapped\",[29224]],[[194849,194849],\"mapped\",[29237]],[[194850,194850],\"mapped\",[29264]],[[194851,194851],\"mapped\",[149000]],[[194852,194852],\"mapped\",[29312]],[[194853,194853],\"mapped\",[29333]],[[194854,194854],\"mapped\",[149301]],[[194855,194855],\"mapped\",[149524]],[[194856,194856],\"mapped\",[29562]],[[194857,194857],\"mapped\",[29579]],[[194858,194858],\"mapped\",[16044]],[[194859,194859],\"mapped\",[29605]],[[194860,194861],\"mapped\",[16056]],[[194862,194862],\"mapped\",[29767]],[[194863,194863],\"mapped\",[29788]],[[194864,194864],\"mapped\",[29809]],[[194865,194865],\"mapped\",[29829]],[[194866,194866],\"mapped\",[29898]],[[194867,194867],\"mapped\",[16155]],[[194868,194868],\"mapped\",[29988]],[[194869,194869],\"mapped\",[150582]],[[194870,194870],\"mapped\",[30014]],[[194871,194871],\"mapped\",[150674]],[[194872,194872],\"mapped\",[30064]],[[194873,194873],\"mapped\",[139679]],[[194874,194874],\"mapped\",[30224]],[[194875,194875],\"mapped\",[151457]],[[194876,194876],\"mapped\",[151480]],[[194877,194877],\"mapped\",[151620]],[[194878,194878],\"mapped\",[16380]],[[194879,194879],\"mapped\",[16392]],[[194880,194880],\"mapped\",[30452]],[[194881,194881],\"mapped\",[151795]],[[194882,194882],\"mapped\",[151794]],[[194883,194883],\"mapped\",[151833]],[[194884,194884],\"mapped\",[151859]],[[194885,194885],\"mapped\",[30494]],[[194886,194887],\"mapped\",[30495]],[[194888,194888],\"mapped\",[30538]],[[194889,194889],\"mapped\",[16441]],[[194890,194890],\"mapped\",[30603]],[[194891,194891],\"mapped\",[16454]],[[194892,194892],\"mapped\",[16534]],[[194893,194893],\"mapped\",[152605]],[[194894,194894],\"mapped\",[30798]],[[194895,194895],\"mapped\",[30860]],[[194896,194896],\"mapped\",[30924]],[[194897,194897],\"mapped\",[16611]],[[194898,194898],\"mapped\",[153126]],[[194899,194899],\"mapped\",[31062]],[[194900,194900],\"mapped\",[153242]],[[194901,194901],\"mapped\",[153285]],[[194902,194902],\"mapped\",[31119]],[[194903,194903],\"mapped\",[31211]],[[194904,194904],\"mapped\",[16687]],[[194905,194905],\"mapped\",[31296]],[[194906,194906],\"mapped\",[31306]],[[194907,194907],\"mapped\",[31311]],[[194908,194908],\"mapped\",[153980]],[[194909,194910],\"mapped\",[154279]],[[194911,194911],\"disallowed\"],[[194912,194912],\"mapped\",[16898]],[[194913,194913],\"mapped\",[154539]],[[194914,194914],\"mapped\",[31686]],[[194915,194915],\"mapped\",[31689]],[[194916,194916],\"mapped\",[16935]],[[194917,194917],\"mapped\",[154752]],[[194918,194918],\"mapped\",[31954]],[[194919,194919],\"mapped\",[17056]],[[194920,194920],\"mapped\",[31976]],[[194921,194921],\"mapped\",[31971]],[[194922,194922],\"mapped\",[32000]],[[194923,194923],\"mapped\",[155526]],[[194924,194924],\"mapped\",[32099]],[[194925,194925],\"mapped\",[17153]],[[194926,194926],\"mapped\",[32199]],[[194927,194927],\"mapped\",[32258]],[[194928,194928],\"mapped\",[32325]],[[194929,194929],\"mapped\",[17204]],[[194930,194930],\"mapped\",[156200]],[[194931,194931],\"mapped\",[156231]],[[194932,194932],\"mapped\",[17241]],[[194933,194933],\"mapped\",[156377]],[[194934,194934],\"mapped\",[32634]],[[194935,194935],\"mapped\",[156478]],[[194936,194936],\"mapped\",[32661]],[[194937,194937],\"mapped\",[32762]],[[194938,194938],\"mapped\",[32773]],[[194939,194939],\"mapped\",[156890]],[[194940,194940],\"mapped\",[156963]],[[194941,194941],\"mapped\",[32864]],[[194942,194942],\"mapped\",[157096]],[[194943,194943],\"mapped\",[32880]],[[194944,194944],\"mapped\",[144223]],[[194945,194945],\"mapped\",[17365]],[[194946,194946],\"mapped\",[32946]],[[194947,194947],\"mapped\",[33027]],[[194948,194948],\"mapped\",[17419]],[[194949,194949],\"mapped\",[33086]],[[194950,194950],\"mapped\",[23221]],[[194951,194951],\"mapped\",[157607]],[[194952,194952],\"mapped\",[157621]],[[194953,194953],\"mapped\",[144275]],[[194954,194954],\"mapped\",[144284]],[[194955,194955],\"mapped\",[33281]],[[194956,194956],\"mapped\",[33284]],[[194957,194957],\"mapped\",[36766]],[[194958,194958],\"mapped\",[17515]],[[194959,194959],\"mapped\",[33425]],[[194960,194960],\"mapped\",[33419]],[[194961,194961],\"mapped\",[33437]],[[194962,194962],\"mapped\",[21171]],[[194963,194963],\"mapped\",[33457]],[[194964,194964],\"mapped\",[33459]],[[194965,194965],\"mapped\",[33469]],[[194966,194966],\"mapped\",[33510]],[[194967,194967],\"mapped\",[158524]],[[194968,194968],\"mapped\",[33509]],[[194969,194969],\"mapped\",[33565]],[[194970,194970],\"mapped\",[33635]],[[194971,194971],\"mapped\",[33709]],[[194972,194972],\"mapped\",[33571]],[[194973,194973],\"mapped\",[33725]],[[194974,194974],\"mapped\",[33767]],[[194975,194975],\"mapped\",[33879]],[[194976,194976],\"mapped\",[33619]],[[194977,194977],\"mapped\",[33738]],[[194978,194978],\"mapped\",[33740]],[[194979,194979],\"mapped\",[33756]],[[194980,194980],\"mapped\",[158774]],[[194981,194981],\"mapped\",[159083]],[[194982,194982],\"mapped\",[158933]],[[194983,194983],\"mapped\",[17707]],[[194984,194984],\"mapped\",[34033]],[[194985,194985],\"mapped\",[34035]],[[194986,194986],\"mapped\",[34070]],[[194987,194987],\"mapped\",[160714]],[[194988,194988],\"mapped\",[34148]],[[194989,194989],\"mapped\",[159532]],[[194990,194990],\"mapped\",[17757]],[[194991,194991],\"mapped\",[17761]],[[194992,194992],\"mapped\",[159665]],[[194993,194993],\"mapped\",[159954]],[[194994,194994],\"mapped\",[17771]],[[194995,194995],\"mapped\",[34384]],[[194996,194996],\"mapped\",[34396]],[[194997,194997],\"mapped\",[34407]],[[194998,194998],\"mapped\",[34409]],[[194999,194999],\"mapped\",[34473]],[[195000,195000],\"mapped\",[34440]],[[195001,195001],\"mapped\",[34574]],[[195002,195002],\"mapped\",[34530]],[[195003,195003],\"mapped\",[34681]],[[195004,195004],\"mapped\",[34600]],[[195005,195005],\"mapped\",[34667]],[[195006,195006],\"mapped\",[34694]],[[195007,195007],\"disallowed\"],[[195008,195008],\"mapped\",[34785]],[[195009,195009],\"mapped\",[34817]],[[195010,195010],\"mapped\",[17913]],[[195011,195011],\"mapped\",[34912]],[[195012,195012],\"mapped\",[34915]],[[195013,195013],\"mapped\",[161383]],[[195014,195014],\"mapped\",[35031]],[[195015,195015],\"mapped\",[35038]],[[195016,195016],\"mapped\",[17973]],[[195017,195017],\"mapped\",[35066]],[[195018,195018],\"mapped\",[13499]],[[195019,195019],\"mapped\",[161966]],[[195020,195020],\"mapped\",[162150]],[[195021,195021],\"mapped\",[18110]],[[195022,195022],\"mapped\",[18119]],[[195023,195023],\"mapped\",[35488]],[[195024,195024],\"mapped\",[35565]],[[195025,195025],\"mapped\",[35722]],[[195026,195026],\"mapped\",[35925]],[[195027,195027],\"mapped\",[162984]],[[195028,195028],\"mapped\",[36011]],[[195029,195029],\"mapped\",[36033]],[[195030,195030],\"mapped\",[36123]],[[195031,195031],\"mapped\",[36215]],[[195032,195032],\"mapped\",[163631]],[[195033,195033],\"mapped\",[133124]],[[195034,195034],\"mapped\",[36299]],[[195035,195035],\"mapped\",[36284]],[[195036,195036],\"mapped\",[36336]],[[195037,195037],\"mapped\",[133342]],[[195038,195038],\"mapped\",[36564]],[[195039,195039],\"mapped\",[36664]],[[195040,195040],\"mapped\",[165330]],[[195041,195041],\"mapped\",[165357]],[[195042,195042],\"mapped\",[37012]],[[195043,195043],\"mapped\",[37105]],[[195044,195044],\"mapped\",[37137]],[[195045,195045],\"mapped\",[165678]],[[195046,195046],\"mapped\",[37147]],[[195047,195047],\"mapped\",[37432]],[[195048,195048],\"mapped\",[37591]],[[195049,195049],\"mapped\",[37592]],[[195050,195050],\"mapped\",[37500]],[[195051,195051],\"mapped\",[37881]],[[195052,195052],\"mapped\",[37909]],[[195053,195053],\"mapped\",[166906]],[[195054,195054],\"mapped\",[38283]],[[195055,195055],\"mapped\",[18837]],[[195056,195056],\"mapped\",[38327]],[[195057,195057],\"mapped\",[167287]],[[195058,195058],\"mapped\",[18918]],[[195059,195059],\"mapped\",[38595]],[[195060,195060],\"mapped\",[23986]],[[195061,195061],\"mapped\",[38691]],[[195062,195062],\"mapped\",[168261]],[[195063,195063],\"mapped\",[168474]],[[195064,195064],\"mapped\",[19054]],[[195065,195065],\"mapped\",[19062]],[[195066,195066],\"mapped\",[38880]],[[195067,195067],\"mapped\",[168970]],[[195068,195068],\"mapped\",[19122]],[[195069,195069],\"mapped\",[169110]],[[195070,195071],\"mapped\",[38923]],[[195072,195072],\"mapped\",[38953]],[[195073,195073],\"mapped\",[169398]],[[195074,195074],\"mapped\",[39138]],[[195075,195075],\"mapped\",[19251]],[[195076,195076],\"mapped\",[39209]],[[195077,195077],\"mapped\",[39335]],[[195078,195078],\"mapped\",[39362]],[[195079,195079],\"mapped\",[39422]],[[195080,195080],\"mapped\",[19406]],[[195081,195081],\"mapped\",[170800]],[[195082,195082],\"mapped\",[39698]],[[195083,195083],\"mapped\",[40000]],[[195084,195084],\"mapped\",[40189]],[[195085,195085],\"mapped\",[19662]],[[195086,195086],\"mapped\",[19693]],[[195087,195087],\"mapped\",[40295]],[[195088,195088],\"mapped\",[172238]],[[195089,195089],\"mapped\",[19704]],[[195090,195090],\"mapped\",[172293]],[[195091,195091],\"mapped\",[172558]],[[195092,195092],\"mapped\",[172689]],[[195093,195093],\"mapped\",[40635]],[[195094,195094],\"mapped\",[19798]],[[195095,195095],\"mapped\",[40697]],[[195096,195096],\"mapped\",[40702]],[[195097,195097],\"mapped\",[40709]],[[195098,195098],\"mapped\",[40719]],[[195099,195099],\"mapped\",[40726]],[[195100,195100],\"mapped\",[40763]],[[195101,195101],\"mapped\",[173568]],[[195102,196605],\"disallowed\"],[[196606,196607],\"disallowed\"],[[196608,262141],\"disallowed\"],[[262142,262143],\"disallowed\"],[[262144,327677],\"disallowed\"],[[327678,327679],\"disallowed\"],[[327680,393213],\"disallowed\"],[[393214,393215],\"disallowed\"],[[393216,458749],\"disallowed\"],[[458750,458751],\"disallowed\"],[[458752,524285],\"disallowed\"],[[524286,524287],\"disallowed\"],[[524288,589821],\"disallowed\"],[[589822,589823],\"disallowed\"],[[589824,655357],\"disallowed\"],[[655358,655359],\"disallowed\"],[[655360,720893],\"disallowed\"],[[720894,720895],\"disallowed\"],[[720896,786429],\"disallowed\"],[[786430,786431],\"disallowed\"],[[786432,851965],\"disallowed\"],[[851966,851967],\"disallowed\"],[[851968,917501],\"disallowed\"],[[917502,917503],\"disallowed\"],[[917504,917504],\"disallowed\"],[[917505,917505],\"disallowed\"],[[917506,917535],\"disallowed\"],[[917536,917631],\"disallowed\"],[[917632,917759],\"disallowed\"],[[917760,917999],\"ignored\"],[[918000,983037],\"disallowed\"],[[983038,983039],\"disallowed\"],[[983040,1048573],\"disallowed\"],[[1048574,1048575],\"disallowed\"],[[1048576,1114109],\"disallowed\"],[[1114110,1114111],\"disallowed\"]]");

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

//const axios = require('axios');
//const fs = require('fs');
const fetch = __webpack_require__(18);

exports.wordsApiDictionary = async function (word) {
  let url = `https://wordsapiv1.p.rapidapi.com/words/${word}`; // send request to the WordsAPI

  /*const response = await axios({
      "method":"GET",
      url,
      "headers":{
      "content-type":"application/octet-stream",
      "x-rapidapi-host":"wordsapiv1.p.rapidapi.com",
      "x-rapidapi-key":process.env.RAPIDAPI_KEY
      }
    });*/

  let response = await fetch.fetchTextFromHttpUrl(url, {
    "method": "GET",
    "content-type": "application/octet-stream",
    "x-rapidapi-host": "wordsapiv1.p.rapidapi.com",
    "x-rapidapi-key": process.env.RAPIDAPI_KEY
  }, {
    word
  });
  return response;
};

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MyWords", function() { return MyWords; });
const MyWords = {
  "crap": 1,
  "dear": 1,
  "dumb": 1,
  "freak": 1,
  "jack": 1,
  "bob": 1,
  "jerk": 1,
  "jerry": 1,
  "jimmy": 1,
  "lee": 1,
  "mike": 1,
  "nick": 1,
  "nuts": 1,
  "piss": 1,
  "roger": 1,
  "sam": 1,
  "boo": 1,
  "buck": 1,
  "bust": 1,
  "butt": 1,
  "carter": 1,
  "chill": 1,
  "chuck": 1,
  "closet": 1,
  "cock": 1,
  "coke": 1,
  "cos": 1,
  "crane": 1,
  "crush": 1,
  "cunt": 1,
  "dean": 1,
  "decent": 1,
  "desert": 1,
  "doll": 1,
  "dong": 1,
  "downtown": 1,
  "drag": 1,
  "duck": 1,
  "dump": 1,
  "estate": 1,
  "fabulous": 1,
  "filthy": 1,
  "forth": 1,
  "hail": 1,
  "hop": 1,
  "jay": 1,
  "ken": 1,
  "kitty": 1,
  "maid": 1,
  "mayor": 1,
  "moron": 1,
  "naughty": 1,
  "nasty": 1,
  "pens": 1,
  "pot": 1,
  "precious": 1,
  "prick": 1,
  "principal": 1,
  "pro": 1,
  "punch": 1,
  "punk": 1,
  "purse": 1,
  "raj": 1,
  "ram": 1,
  "realise": 1,
  "recall": 1,
  "rick": 1,
  "rip": 1,
  "rubbish": 1,
  "rude": 1,
  "sally": 1,
  "seal": 1,
  "servant": 1,
  "shore": 1,
  "slut": 1,
  "struck": 1,
  "sue": 1,
  "tears": 1,
  "tear": 1,
  "tip": 1,
  "toast": 1,
  "trigger": 1,
  "trunk": 1,
  "vice": 1,
  "wallet": 1,
  "wanting": 1,
  "woo": 1,
  "ail": 1,
  "alas": 1,
  "amber": 1,
  "aryan": 1,
  "assault": 1,
  "asylum": 1,
  "attic": 1,
  "audition": 1,
  "auto": 1,
  "avenge": 1,
  "attached": 1,
  "bachelor": 1,
  "backed": 1,
  "backup": 1,
  "backyard": 1,
  "bail": 1,
  "bait": 1,
  "banging": 1,
  "bark": 1,
  "barn": 1,
  "bearing": 1,
  "blink": 1,
  "bliss": 1,
  "bloke": 1,
  "bollocks": 1,
  "bolt": 1,
  "booth": 1,
  "booty": 1,
  "booze": 1,
  "bore": 1,
  "bout": 1,
  "brat": 1,
  "breast": 1,
  "breeze": 1,
  "bribe": 1,
  "bud": 1,
  "bugger": 1,
  "bully": 1,
  "bump": 1,
  "bun": 1,
  "busted": 1,
  "cafe": 1,
  "cal": 1,
  "cane": 1,
  "cant": 1,
  "carriage": 1,
  "casey": 1,
  "chad": 1,
  "champ": 1,
  "chanting": 1,
  "chap": 1,
  "chatter": 1,
  "choir": 1,
  "choke": 1,
  "chopper": 1,
  "chorus": 1,
  "chow": 1,
  "clan": 1,
  "clap": 1,
  "classy": 1,
  "clay": 1,
  "clerk": 1,
  "clip": 1,
  "coffin": 1,
  "cole": 1,
  "collector": 1,
  "colony": 1,
  "commissioner": 1,
  "companion": 1,
  "cooper": 1,
  "cord": 1,
  "dale": 1,
  "darn": 1,
  "deck": 1,
  "deed": 1,
  "deer": 1,
  "delight": 1,
  "den": 1,
  "deputy": 1,
  "detention": 1,
  "devoted": 1,
  "dime": 1,
  "ding": 1,
  "dip": 1,
  "disguise": 1,
  "distress": 1,
  "distract": 1,
  "disturbing": 1,
  "ditch": 1,
  "dolly": 1,
  "doomed": 1,
  "dough": 1,
  "draft": 1,
  "dub": 1,
  "dug": 1,
  "esther": 1,
  "eyed": 1,
  "fag": 1,
  "fatso": 1,
  "fatty": 1,
  "feast": 1,
  "fold": 1,
  "fond": 1,
  "footage": 1,
  "foreman": 1,
  "foster": 1,
  "fragrance": 1,
  "freaky": 1,
  "fuss": 1,
  "gal": 1,
  "gee": 1,
  "genuine": 1,
  "ghetto": 1,
  "gig": 1,
  "glue": 1,
  "goat": 1,
  "goose": 1,
  "grain": 1,
  "grasp": 1,
  "groom": 1,
  "growling": 1,
  "guilt": 1,
  "gum": 1,
  "hank": 1,
  "harper": 1,
  "hatch": 1,
  "haul": 1,
  "haunted": 1,
  "hawk": 1,
  "hay": 1,
  "heather": 1,
  "hector": 1,
  "hence": 1,
  "hereby": 1,
  "hint": 1,
  "homer": 1,
  "homicide": 1,
  "hooked": 1,
  "hooker": 1,
  "horny": 1,
  "howdy": 1,
  "hughes": 1,
  "hum": 1,
  "hunger": 1,
  "hush": 1,
  "hut": 1,
  "inn": 1,
  "inner": 1,
  "intact": 1,
  "intimate": 1,
  "irresponsible": 1,
  "issued": 1,
  "jade": 1,
  "janitor": 1,
  "jelly": 1,
  "jersey": 1,
  "jolly": 1,
  "junkie": 1,
  "keen": 1,
  "kidney": 1,
  "khan": 1,
  "knives": 1,
  "knot": 1,
  "lance": 1,
  "lane": 1,
  "lap": 1,
  "lawn": 1,
  "lean": 1,
  "leap": 1,
  "leather": 1,
  "ling": 1,
  "lit": 1,
  "liver": 1,
  "loads": 1,
  "lobster": 1,
  "locker": 1,
  "lodge": 1,
  "log": 1,
  "lounge": 1,
  "lung": 1,
  "mall": 1,
  "mansion": 1,
  "marc": 1,
  "marine": 1,
  "mason": 1,
  "mattress": 1,
  "mistress": 1,
  "mob": 1,
  "mole": 1,
  "momma": 1,
  "morgue": 1,
  "motive": 1,
  "mount": 1,
  "mourning": 1,
  "muffled": 1,
  "mug": 1,
  "nap": 1,
  "neat": 1,
  "negro": 1,
  "norman": 1,
  "notion": 1,
  "nun": 1,
  "nut": 1,
  "olive": 1,
  "opposed": 1,
  "orchestra": 1,
  "outfit": 1,
  "ox": 1,
  "pad": 1,
  "palm": 1,
  "panties": 1,
  "parole": 1,
  "pat": 1,
  "pasta": 1,
  "peek": 1,
  "petty": 1,
  "pier": 1,
  "piggy": 1,
  "pill": 1,
  "pimp": 1,
  "pinch": 1,
  "pine": 1,
  "ping": 1,
  "pins": 1,
  "pledge": 1,
  "poke": 1,
  "poker": 1,
  "pond": 1,
  "poop": 1,
  "popping": 1,
  "porch": 1,
  "porter": 1,
  "pounding": 1,
  "probation": 1,
  "prom": 1,
  "puff": 1,
  "puke": 1,
  "pursue": 1,
  "pursuit": 1,
  "quest": 1,
  "rack": 1,
  "racket": 1,
  "rap": 1,
  "rascal": 1,
  "rash": 1,
  "reed": 1,
  "refuge": 1,
  "relieved": 1,
  "represent": 1,
  "reservations": 1,
  "resort": 1,
  "respected": 1,
  "retard": 1,
  "retire": 1,
  "reunion": 1,
  "roaring": 1,
  "roast": 1,
  "robe": 1,
  "rod": 1,
  "rogue": 1,
  "rub": 1,
  "ruby": 1,
  "rug": 1,
  "rum": 1,
  "rumbling": 1,
  "rumor": 1,
  "rushed": 1,
  "rusty": 1,
  "salute": 1,
  "sausage": 1,
  "scam": 1,
  "scan": 1,
  "scarf": 1,
  "scattered": 1,
  "scotch": 1,
  "scoundrel": 1,
  "scout": 1,
  "screeching": 1,
  "screwing": 1,
  "scum": 1,
  "seated": 1,
  "seize": 1,
  "serving": 1,
  "sew": 1,
  "shaft": 1,
  "shallow": 1,
  "shankar": 1,
  "shed": 1,
  "sheet": 1,
  "shell": 1,
  "shepherd": 1,
  "shield": 1,
  "shin": 1,
  "shove": 1,
  "shovel": 1,
  "shrimp": 1,
  "shuttle": 1,
  "sip": 1,
  "sire": 1,
  "siren": 1,
  "sissy": 1,
  "skate": 1,
  "skinny": 1,
  "slam": 1,
  "slim": 1,
  "slit": 1,
  "smack": 1,
  "smash": 1,
  "snack": 1,
  "snap": 1,
  "sofia": 1,
  "solitary": 1,
  "solomon": 1,
  "sonny": 1,
  "sore": 1,
  "spa": 1,
  "sperm": 1,
  "spike": 1,
  "spill": 1,
  "spin": 1,
  "spine": 1,
  "spite": 1,
  "splendid": 1,
  "spoil": 1,
  "spotted": 1,
  "spots": 1,
  "spreading": 1,
  "springs": 1,
  "squeeze": 1,
  "stain": 1,
  "stake": 1,
  "stall": 1,
  "stew": 1,
  "stiff": 1,
  "sting": 1,
  "stitch": 1,
  "stoned": 1,
  "stove": 1,
  "straighten": 1,
  "straw": 1,
  "stray": 1,
  "stream": 1,
  "stressed": 1,
  "strings": 1,
  "stud": 1,
  "stuffed": 1,
  "stunt": 1,
  "sub": 1,
  "sucker": 1,
  "suite": 1,
  "suites": 1,
  "supreme": 1,
  "surgeon": 1,
  "surveillance": 1,
  "swell": 1,
  "sworn": 1,
  "tan": 1,
  "tang": 1,
  "tap": 1,
  "tearing": 1,
  "tease": 1,
  "teddy": 1,
  "temptation": 1,
  "tender": 1,
  "tense": 1,
  "terminal": 1,
  "testament": 1,
  "theatre": 1,
  "theft": 1,
  "thrill": 1,
  "throne": 1,
  "tick": 1,
  "tide": 1,
  "tidy": 1,
  "tiffany": 1,
  "til": 1,
  "tin": 1,
  "tire": 1,
  "tissue": 1,
  "toe": 1,
  "tops": 1,
  "torch": 1,
  "toss": 1,
  "trail": 1,
  "tremendous": 1,
  "trey": 1,
  "tub": 1,
  "tube": 1,
  "tuck": 1,
  "tucker": 1,
  "tummy": 1,
  "turner": 1,
  "turtle": 1,
  "twist": 1,
  "undercover": 1,
  "untie": 1,
  "urine": 1,
  "vain": 1,
  "vault": 1,
  "veil": 1,
  "vet": 1,
  "wade": 1,
  "wan": 1,
  "wander": 1,
  "ward": 1,
  "warren": 1,
  "wax": 1,
  "wee": 1,
  "weed": 1,
  "wells": 1,
  "whack": 1,
  "wheels": 1,
  "whip": 1,
  "whirring": 1,
  "whisper": 1,
  "whistling": 1,
  "wicked": 1,
  "wit": 1,
  "wont": 1,
  "workshop": 1,
  "worn": 1,
  "worthless": 1,
  "worthy": 1,
  "wreck": 1,
  "wrestling": 1,
  "yea": 1,
  "yell": 1,
  "yummy": 1,
  "zip": 1,
  "abide": 1,
  "academics": 1,
  "accomplice": 1,
  "accustomed": 1,
  "acquaintance": 1,
  "addiction": 1,
  "aerial": 1,
  "affirmative": 1,
  "aging": 1,
  "airborne": 1,
  "allegiance": 1,
  "allowance": 1,
  "alternate": 1,
  "amendment": 1,
  "ammunition": 1,
  "anguish": 1,
  "appealing": 1,
  "applaud": 1,
  "apprentice": 1,
  "arc": 1,
  "arch": 1,
  "aroused": 1,
  "artery": 1,
  "artillery": 1,
  "ashtray": 1,
  "asset": 1,
  "astray": 1,
  "auspicious": 1,
  "babbling": 1,
  "banquet": 1,
  "barb": 1,
  "barge": 1,
  "bash": 1,
  "basil": 1,
  "bathtub": 1,
  "baton": 1,
  "battalion": 1,
  "batter": 1,
  "beads": 1,
  "beatles": 1,
  "beau": 1,
  "beaver": 1,
  "beck": 1,
  "beetle": 1,
  "beggar": 1,
  "belle": 1,
  "bender": 1,
  "berry": 1,
  "bey": 1,
  "birdie": 1,
  "bladder": 1,
  "blaring": 1,
  "blasted": 1,
  "blaze": 1,
  "bleep": 1,
  "blend": 1,
  "blinded": 1,
  "bling": 1,
  "blizzard": 1,
  "blooded": 1,
  "bloodshed": 1,
  "blossom": 1,
  "blouse": 1,
  "blowjob": 1,
  "bluff": 1,
  "blunt": 1,
  "blur": 1,
  "blush": 1,
  "boar": 1,
  "boner": 1,
  "boob": 1,
  "boon": 1,
  "bounty": 1,
  "bouquet": 1,
  "bourgeois": 1,
  "bowls": 1,
  "brace": 1,
  "brag": 1,
  "breaker": 1,
  "brethren": 1,
  "brew": 1,
  "briefing": 1,
  "brink": 1,
  "brooks": 1,
  "broom": 1,
  "brothel": 1,
  "bruise": 1,
  "brunette": 1,
  "brute": 1,
  "buckle": 1,
  "budge": 1,
  "buff": 1,
  "buffet": 1,
  "bulb": 1,
  "bulletin": 1,
  "bullying": 1,
  "bummer": 1,
  "bumper": 1,
  "bunk": 1,
  "buns": 1,
  "burke": 1,
  "butler": 1,
  "buttocks": 1,
  "cain": 1,
  "cam": 1,
  "canned": 1,
  "cardiac": 1,
  "cardinal": 1,
  "caress": 1,
  "caretaker": 1,
  "carmine": 1,
  "carve": 1,
  "caste": 1,
  "cavalry": 1,
  "cavity": 1,
  "celestial": 1,
  "cereal": 1,
  "cerebral": 1,
  "chalk": 1,
  "chancellor": 1,
  "chant": 1,
  "chaplin": 1,
  "charcoal": 1,
  "charter": 1,
  "cheeky": 1,
  "cheerful": 1,
  "cheerleader": 1,
  "cherish": 1,
  "chic": 1,
  "chilling": 1,
  "chilly": 1,
  "chimney": 1,
  "chimp": 1,
  "chit": 1,
  "chopped": 1,
  "chubby": 1,
  "chump": 1,
  "chunk": 1,
  "cinderella": 1,
  "clam": 1,
  "clanging": 1,
  "clapping": 1,
  "clarity": 1,
  "clarify": 1,
  "clash": 1,
  "clause": 1,
  "claw": 1,
  "cleaners": 1,
  "cleanse": 1,
  "clearance": 1,
  "climax": 1,
  "cling": 1,
  "closure": 1,
  "clutch": 1,
  "cockpit": 1,
  "cocky": 1,
  "cod": 1,
  "collateral": 1,
  "collier": 1,
  "collision": 1,
  "cologne": 1,
  "comb": 1,
  "comeback": 1,
  "comfy": 1,
  "commence": 1,
  "commotion": 1,
  "communion": 1,
  "compartment": 1,
  "competing": 1,
  "compound": 1,
  "comprehend": 1,
  "conceal": 1,
  "concubine": 1,
  "concussion": 1,
  "condemn": 1,
  "condo": 1,
  "cone": 1,
  "considerate": 1,
  "consolation": 1,
  "console": 1,
  "constable": 1,
  "consult": 1,
  "contagious": 1,
  "contaminated": 1,
  "contemporary": 1,
  "contempt": 1,
  "contestant": 1,
  "convey": 1,
  "convict": 1,
  "coo": 1,
  "coop": 1,
  "copper": 1,
  "coral": 1,
  "cork": 1,
  "corky": 1,
  "corrupted": 1,
  "cot": 1,
  "counterfeit": 1,
  "coup": 1,
  "courier": 1,
  "courthouse": 1,
  "courtroom": 1,
  "courtyard": 1,
  "cox": 1,
  "coyote": 1,
  "cozy": 1,
  "cracker": 1,
  "crackling": 1,
  "cradle": 1,
  "craft": 1,
  "cramp": 1,
  "crank": 1,
  "crappy": 1,
  "crate": 1,
  "crater": 1,
  "creaking": 1,
  "creeps": 1,
  "crib": 1,
  "cripple": 1,
  "crippled": 1,
  "crisp": 1,
  "crook": 1,
  "crooked": 1,
  "crop": 1,
  "crotch": 1,
  "crude": 1,
  "crunch": 1,
  "crushing": 1,
  "crust": 1,
  "crutch": 1,
  "cub": 1,
  "cube": 1,
  "cuckoo": 1,
  "cuddle": 1,
  "cuff": 1,
  "culprit": 1,
  "cum": 1,
  "cunning": 1,
  "cupboard": 1,
  "curb": 1,
  "curfew": 1,
  "curly": 1,
  "cutter": 1,
  "daft": 1,
  "dagger": 1,
  "dairy": 1,
  "damp": 1,
  "dandy": 1,
  "danish": 1,
  "daring": 1,
  "daytime": 1,
  "debris": 1,
  "debut": 1,
  "decay": 1,
  "deceive": 1,
  "decisive": 1,
  "decline": 1,
  "decree": 1,
  "defect": 1,
  "definite": 1,
  "defy": 1,
  "delightful": 1,
  "demolition": 1,
  "denial": 1,
  "dent": 1,
  "departed": 1,
  "dept": 1,
  "depths": 1,
  "descent": 1,
  "despicable": 1,
  "despise": 1,
  "detour": 1,
  "devote": 1,
  "devour": 1,
  "dew": 1,
  "diaper": 1,
  "diarrhea": 1,
  "digs": 1,
  "dim": 1,
  "dine": 1,
  "dire": 1,
  "dirk": 1,
  "discharge": 1,
  "disciple": 1,
  "discretion": 1,
  "disguised": 1,
  "disgust": 1,
  "disgusted": 1,
  "dismiss": 1,
  "dispatch": 1,
  "disposal": 1,
  "dispose": 1,
  "disrespect": 1,
  "distinguish": 1,
  "distorted": 1,
  "distraction": 1,
  "disturbance": 1,
  "diversion": 1,
  "dodge": 1,
  "doe": 1,
  "dolphin": 1,
  "domain": 1,
  "dome": 1,
  "dominic": 1,
  "doom": 1,
  "doorman": 1,
  "doorstep": 1,
  "doorway": 1,
  "dorian": 1,
  "dork": 1,
  "dorm": 1,
  "dory": 1,
  "downhill": 1,
  "dowry": 1,
  "drake": 1,
  "drawers": 1,
  "dread": 1,
  "dreamer": 1,
  "drenched": 1,
  "dresser": 1,
  "drifting": 1,
  "drilling": 1,
  "drip": 1,
  "drought": 1,
  "duchess": 1,
  "duct": 1,
  "duel": 1,
  "dumpster": 1,
  "dung": 1,
  "dungeon": 1,
  "dusk": 1,
  "dwell": 1,
  "dye": 1,
  "dyke": 1,
  "eccentric": 1,
  "eddy": 1,
  "emerge": 1,
  "empress": 1,
  "endangered": 1,
  "enlightenment": 1,
  "excrement": 1,
  "exile": 1,
  "expel": 1,
  "expertise": 1,
  "exploit": 1,
  "exposure": 1,
  "exquisite": 1,
  "extinct": 1,
  "eyesight": 1,
  "fang": 1,
  "ferocious": 1,
  "fiery": 1,
  "filth": 1,
  "fin": 1,
  "finch": 1,
  "flank": 1,
  "flap": 1,
  "flare": 1,
  "flats": 1,
  "flatter": 1,
  "flick": 1,
  "fling": 1,
  "flint": 1,
  "flirt": 1,
  "flock": 1,
  "flop": 1,
  "flora": 1,
  "flour": 1,
  "fluffy": 1,
  "flushed": 1,
  "flute": 1,
  "foe": 1,
  "foremost": 1,
  "forfeit": 1,
  "forged": 1,
  "formation": 1,
  "founder": 1,
  "fracture": 1,
  "framed": 1,
  "fraternity": 1,
  "freeway": 1,
  "freshen": 1,
  "freshman": 1,
  "fright": 1,
  "fudge": 1,
  "fugitive": 1,
  "fuller": 1,
  "funk": 1,
  "funky": 1,
  "fuse": 1,
  "fuzzy": 1,
  "gadget": 1,
  "gag": 1,
  "gale": 1,
  "garrison": 1,
  "gasp": 1,
  "gauge": 1,
  "geek": 1,
  "geezer": 1,
  "gel": 1,
  "gem": 1,
  "genre": 1,
  "genuinely": 1,
  "getaway": 1,
  "giddy": 1,
  "glen": 1,
  "glitter": 1,
  "gloomy": 1,
  "glowing": 1,
  "goddam": 1,
  "goo": 1,
  "goody": 1,
  "goofy": 1,
  "goon": 1,
  "gore": 1,
  "gown": 1,
  "gracious": 1,
  "grail": 1,
  "gramps": 1,
  "graveyard": 1,
  "gravy": 1,
  "grease": 1,
  "grove": 1,
  "grub": 1,
  "grudge": 1,
  "grumpy": 1,
  "grunt": 1,
  "gulf": 1,
  "gutter": 1,
  "hag": 1,
  "hale": 1,
  "hallowed": 1,
  "hamlet": 1,
  "hardy": 1,
  "hare": 1,
  "hanks": 1,
  "harassment": 1,
  "hash": 1,
  "hasty": 1,
  "haunt": 1,
  "havana": 1,
  "havoc": 1,
  "headmaster": 1,
  "heave": 1,
  "heed": 1,
  "heel": 1,
  "hen": 1,
  "hick": 1,
  "hideous": 1,
  "hideout": 1,
  "hissing": 1,
  "hitch": 1,
  "hoax": 1,
  "hog": 1,
  "holler": 1,
  "homo": 1,
  "honk": 1,
  "hoover": 1,
  "hopeful": 1,
  "hopper": 1,
  "hose": 1,
  "hound": 1,
  "housewife": 1,
  "howl": 1,
  "hub": 1,
  "hugging": 1,
  "hull": 1,
  "hump": 1,
  "hunch": 1,
  "hunk": 1,
  "hurrah": 1,
  "hustle": 1,
  "hutch": 1,
  "hypocrite": 1,
  "idiotic": 1,
  "idle": 1,
  "ignorance": 1,
  "illiterate": 1,
  "imbecile": 1,
  "immense": 1,
  "immature": 1,
  "impose": 1,
  "incapable": 1,
  "incense": 1,
  "inclined": 1,
  "index": 1,
  "indulge": 1,
  "inferior": 1,
  "infirmary": 1,
  "influential": 1,
  "informant": 1,
  "informer": 1,
  "initiative": 1,
  "injustice": 1,
  "inmate": 1,
  "inquiry": 1,
  "insolent": 1,
  "insomnia": 1,
  "intent": 1,
  "intercept": 1,
  "intercourse": 1,
  "intern": 1,
  "interrogate": 1,
  "intervene": 1,
  "intimacy": 1,
  "intriguing": 1,
  "intuition": 1,
  "invade": 1,
  "irritated": 1,
  "itch": 1,
  "jammed": 1,
  "jasper": 1,
  "jerking": 1,
  "jinx": 1,
  "jog": 1,
  "jonah": 1,
  "joyful": 1,
  "jumbo": 1,
  "jumper": 1,
  "jurisdiction": 1,
  "justified": 1,
  "jab": 1,
  "keeper": 1,
  "kettle": 1,
  "kin": 1,
  "kinky": 1,
  "kirk": 1,
  "kite": 1,
  "kitten": 1,
  "knit": 1,
  "knob": 1,
  "lace": 1,
  "laden": 1,
  "lair": 1,
  "lakh": 1,
  "lam": 1,
  "laurel": 1,
  "lea": 1,
  "leash": 1,
  "lebanon": 1,
  "lefty": 1,
  "legion": 1,
  "lei": 1,
  "lever": 1,
  "liaison": 1,
  "licking": 1,
  "lid": 1,
  "limb": 1,
  "lime": 1,
  "limp": 1,
  "lingerie": 1,
  "lining": 1,
  "lisbon": 1,
  "literary": 1,
  "litter": 1,
  "liv": 1,
  "loaf": 1,
  "locking": 1,
  "loft": 1,
  "lone": 1,
  "lonesome": 1,
  "loo": 1,
  "lookout": 1,
  "loop": 1,
  "loot": 1,
  "lordship": 1,
  "lotion": 1,
  "lump": 1,
  "lure": 1,
  "lynch": 1,
  "maestro": 1,
  "magistrate": 1,
  "mammoth": 1,
  "manifest": 1,
  "manor": 1,
  "manuscript": 1,
  "maple": 1,
  "marching": 1,
  "mare": 1,
  "marquis": 1,
  "marrow": 1,
  "marsh": 1,
  "mart": 1,
  "mat": 1,
  "mating": 1,
  "mayhem": 1,
  "maze": 1,
  "mecca": 1,
  "medieval": 1,
  "melon": 1,
  "memo": 1,
  "memorize": 1,
  "menace": 1,
  "mend": 1,
  "merchandise": 1,
  "mercury": 1,
  "merger": 1,
  "merit": 1,
  "midget": 1,
  "midst": 1,
  "mil": 1,
  "mint": 1,
  "miraculous": 1,
  "mischief": 1,
  "mischievous": 1,
  "missus": 1,
  "mist": 1,
  "mock": 1,
  "modesty": 1,
  "moist": 1,
  "mold": 1,
  "monastery": 1,
  "monstrous": 1,
  "moo": 1,
  "moody": 1,
  "mop": 1,
  "moreover": 1,
  "moss": 1,
  "mourn": 1,
  "muttering": 1,
  "nag": 1,
  "nauseous": 1,
  "neglect": 1,
  "nerd": 1,
  "nil": 1,
  "nipple": 1,
  "nod": 1,
  "nonetheless": 1,
  "nosy": 1,
  "notch": 1,
  "nuisance": 1,
  "numb": 1,
  "nursery": 1,
  "oak": 1,
  "obedient": 1,
  "obscure": 1,
  "occasions": 1,
  "offender": 1,
  "okey": 1,
  "oppression": 1,
  "ounce": 1,
  "overdo": 1,
  "overhead": 1,
  "oyster": 1,
  "pact": 1,
  "paddle": 1,
  "palmer": 1,
  "pancake": 1,
  "panther": 1,
  "par": 1,
  "para": 1,
  "parachute": 1,
  "parcel": 1,
  "parish": 1,
  "parlor": 1,
  "parted": 1,
  "parting": 1,
  "pas": 1,
  "paste": 1,
  "patent": 1,
  "patron": 1,
  "patty": 1,
  "pause": 1,
  "paw": 1,
  "pawn": 1,
  "payback": 1,
  "payroll": 1,
  "peas": 1,
  "peasant": 1,
  "peck": 1,
  "peculiar": 1,
  "peel": 1,
  "peep": 1,
  "peer": 1,
  "peg": 1,
  "penetrate": 1,
  "penthouse": 1,
  "perish": 1,
  "perverted": 1,
  "pest": 1,
  "pharmaceutical": 1,
  "phenomenal": 1,
  "phoebe": 1,
  "phony": 1,
  "physician": 1,
  "pickle": 1,
  "pickup": 1,
  "picky": 1,
  "pierce": 1,
  "piglet": 1,
  "pike": 1,
  "piles": 1,
  "piper": 1,
  "pitcher": 1,
  "pitiful": 1,
  "planting": 1,
  "plaster": 1,
  "plato": 1,
  "platoon": 1,
  "plea": 1,
  "plead": 1,
  "pluck": 1,
  "plum": 1,
  "plumbing": 1,
  "poking": 1,
  "polar": 1,
  "poof": 1,
  "pools": 1,
  "porridge": 1,
  "posh": 1,
  "postpone": 1,
  "posture": 1,
  "potion": 1,
  "practiced": 1,
  "prank": 1,
  "preach": 1,
  "precinct": 1,
  "prejudice": 1,
  "preliminary": 1,
  "premature": 1,
  "premiere": 1,
  "premises": 1,
  "prep": 1,
  "preserved": 1,
  "prevail": 1,
  "probe": 1,
  "proceedings": 1,
  "procession": 1,
  "profound": 1,
  "prohibited": 1,
  "pronounced": 1,
  "prop": 1,
  "proposition": 1,
  "props": 1,
  "prospect": 1,
  "prosper": 1,
  "prosperity": 1,
  "prostate": 1,
  "pry": 1,
  "pulp": 1,
  "pup": 1,
  "pupil": 1,
  "purity": 1,
  "pussycat": 1,
  "quack": 1,
  "quarry": 1,
  "quarterback": 1,
  "quid": 1,
  "quits": 1,
  "racer": 1,
  "racial": 1,
  "raft": 1,
  "rag": 1,
  "rake": 1,
  "rapist": 1,
  "raspberry": 1,
  "rated": 1,
  "rattle": 1,
  "rave": 1,
  "raven": 1,
  "realm": 1,
  "recite": 1,
  "reckless": 1,
  "redeem": 1,
  "redhead": 1,
  "reef": 1,
  "reel": 1,
  "refined": 1,
  "reform": 1,
  "reign": 1,
  "relay": 1,
  "remedy": 1,
  "renowned": 1,
  "rep": 1,
  "resemble": 1,
  "restroom": 1,
  "revelation": 1,
  "revive": 1,
  "rhyme": 1,
  "rib": 1,
  "ribbon": 1,
  "riddle": 1,
  "ridge": 1,
  "rift": 1,
  "rig": 1,
  "rigged": 1,
  "rim": 1,
  "rinse": 1,
  "ripe": 1,
  "rite": 1,
  "roam": 1,
  "roar": 1,
  "rocker": 1,
  "roller": 1,
  "rooster": 1,
  "rouge": 1,
  "rover": 1,
  "royalty": 1,
  "rubbing": 1,
  "rubble": 1,
  "runaway": 1,
  "runway": 1,
  "rust": 1,
  "rustling": 1,
  "saddle": 1,
  "sage": 1,
  "sami": 1,
  "sands": 1,
  "sane": 1,
  "sawyer": 1,
  "scales": 1,
  "scanner": 1,
  "scarlet": 1,
  "scholar": 1,
  "scold": 1,
  "scoop": 1,
  "scoot": 1,
  "scot": 1,
  "scram": 1,
  "scrap": 1,
  "scrape": 1,
  "scratching": 1,
  "screech": 1,
  "screening": 1,
  "scroll": 1,
  "scrub": 1,
  "sculpture": 1,
  "seafood": 1,
  "secrecy": 1,
  "seduce": 1,
  "seizure": 1,
  "seldom": 1,
  "semen": 1,
  "sensational": 1,
  "sentiment": 1,
  "serge": 1,
  "sermon": 1,
  "serum": 1,
  "server": 1,
  "sessions": 1,
  "setup": 1,
  "severed": 1,
  "sewer": 1,
  "sewing": 1,
  "shack": 1,
  "shades": 1,
  "shady": 1,
  "shag": 1,
  "shaggy": 1,
  "shah": 1,
  "shaky": 1,
  "sham": 1,
  "shaman": 1,
  "sheer": 1,
  "sheikh": 1,
  "sheldrake": 1,
  "shipment": 1,
  "shite": 1,
  "shivering": 1,
  "shred": 1,
  "shrieking": 1,
  "shrine": 1,
  "shutter": 1,
  "shutting": 1,
  "sidewalk": 1,
  "siege": 1,
  "sincerity": 1,
  "sinful": 1,
  "sinister": 1,
  "sinner": 1,
  "skinner": 1,
  "skipper": 1,
  "skunk": 1,
  "slack": 1,
  "slain": 1,
  "slash": 1,
  "slate": 1,
  "slay": 1,
  "sleigh": 1,
  "slick": 1,
  "slimy": 1,
  "slogan": 1,
  "slope": 1,
  "sloppy": 1,
  "slot": 1,
  "slots": 1,
  "slug": 1,
  "sly": 1,
  "smashing": 1,
  "smelly": 1,
  "snail": 1,
  "snatch": 1,
  "sneaky": 1,
  "sniff": 1,
  "sniper": 1,
  "snitch": 1,
  "snot": 1,
  "soak": 1,
  "sod": 1,
  "sol": 1,
  "solitude": 1,
  "sovereign": 1,
  "sow": 1,
  "span": 1,
  "spank": 1,
  "spat": 1,
  "specimen": 1,
  "specs": 1,
  "spectacle": 1,
  "speeding": 1,
  "spencer": 1,
  "spoiling": 1,
  "spooky": 1,
  "squash": 1,
  "squat": 1,
  "squeaking": 1,
  "squeal": 1,
  "squealing": 1,
  "squirt": 1,
  "stack": 1,
  "staged": 1,
  "stakes": 1,
  "stale": 1,
  "stalker": 1,
  "stallion": 1,
  "stance": 1,
  "standby": 1,
  "starboard": 1,
  "stark": 1,
  "stash": 1,
  "steep": 1,
  "steer": 1,
  "steering": 1,
  "stein": 1,
  "stem": 1,
  "stench": 1,
  "stern": 1,
  "stingy": 1,
  "stinky": 1,
  "stirring": 1,
  "stocks": 1,
  "stool": 1,
  "strain": 1,
  "straining": 1,
  "stranded": 1,
  "strangle": 1,
  "strap": 1,
  "streak": 1,
  "stretcher": 1,
  "stripes": 1,
  "stripped": 1,
  "stripper": 1,
  "stroll": 1,
  "stuffy": 1,
  "stung": 1,
  "stunned": 1,
  "stunning": 1,
  "submitted": 1,
  "suited": 1,
  "superintendent": 1,
  "supportive": 1,
  "surfer": 1,
  "surge": 1,
  "swan": 1,
  "swat": 1,
  "sway": 1,
  "swearing": 1,
  "swelling": 1,
  "swift": 1,
  "swollen": 1,
  "swinging": 1,
  "swimmer": 1,
  "syrup": 1,
  "syphilis": 1,
  "tab": 1,
  "tabs": 1,
  "tackle": 1,
  "tacky": 1,
  "tactics": 1,
  "tad": 1,
  "tally": 1,
  "tame": 1,
  "tammy": 1,
  "tar": 1,
  "tart": 1,
  "tavern": 1,
  "tee": 1,
  "telegram": 1,
  "teller": 1,
  "tempered": 1,
  "temporarily": 1,
  "tempt": 1,
  "tenant": 1,
  "thigh": 1,
  "thong": 1,
  "thongs": 1,
  "thorn": 1,
  "thorough": 1,
  "thoughtful": 1,
  "thrash": 1,
  "threshold": 1,
  "thrust": 1,
  "thud": 1,
  "thug": 1,
  "thump": 1,
  "tic": 1,
  "tickle": 1,
  "tinker": 1,
  "tipped": 1,
  "tit": 1,
  "titty": 1,
  "toad": 1,
  "token": 1,
  "tonic": 1,
  "torment": 1,
  "touchdown": 1,
  "touchy": 1,
  "tow": 1,
  "tracked": 1,
  "tram": 1,
  "tramp": 1,
  "transition": 1,
  "transmitter": 1,
  "tread": 1,
  "treaty": 1,
  "trek": 1,
  "tremble": 1,
  "trench": 1,
  "triad": 1,
  "tribal": 1,
  "trim": 1,
  "tripping": 1,
  "troll": 1,
  "trout": 1,
  "trump": 1,
  "trunks": 1,
  "truthful": 1,
  "tuition": 1,
  "turd": 1,
  "turf": 1,
  "twat": 1,
  "twinkle": 1,
  "tyranny": 1,
  "tyre": 1,
  "underage": 1,
  "underpants": 1,
  "underway": 1,
  "undo": 1,
  "undress": 1,
  "uneasy": 1,
  "unfaithful": 1,
  "ungrateful": 1,
  "unload": 1,
  "unlock": 1,
  "unreal": 1,
  "unreasonable": 1,
  "upbeat": 1,
  "upgrade": 1,
  "upright": 1,
  "uptight": 1,
  "utmost": 1,
  "utter": 1,
  "utterly": 1,
  "vacate": 1,
  "vague": 1,
  "valance": 1,
  "valet": 1,
  "valiant": 1,
  "valve": 1,
  "vanilla": 1,
  "vanity": 1,
  "veal": 1,
  "vein": 1,
  "venom": 1,
  "vent": 1,
  "venue": 1,
  "verge": 1,
  "vest": 1,
  "vibe": 1,
  "vicinity": 1,
  "vile": 1,
  "villain": 1,
  "vintage": 1,
  "virtuous": 1,
  "viva": 1,
  "vocal": 1,
  "void": 1,
  "vortex": 1,
  "voyage": 1,
  "vulgar": 1,
  "wager": 1,
  "wally": 1,
  "warmth": 1,
  "warner": 1,
  "watchman": 1,
  "watering": 1,
  "weary": 1,
  "weasel": 1,
  "weave": 1,
  "wed": 1,
  "wedded": 1,
  "weighing": 1,
  "weirdo": 1,
  "whacked": 1,
  "wheat": 1,
  "wheeler": 1,
  "whilst": 1,
  "whim": 1,
  "whitey": 1,
  "whoop": 1,
  "wiener": 1,
  "willow": 1,
  "wimp": 1,
  "winding": 1,
  "wink": 1,
  "wits": 1,
  "woe": 1,
  "woof": 1,
  "wool": 1,
  "wraith": 1,
  "wrapping": 1,
  "wrath": 1,
  "wrecked": 1,
  "wrench": 1,
  "wrestle": 1,
  "wrestler": 1,
  "wretch": 1,
  "wretched": 1,
  "yank": 1,
  "yankee": 1,
  "yield": 1,
  "yin": 1,
  "zen": 1,
  "zipper": 1,
  "zoom": 1
};

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "handler", function() { return handler; });
const crawler = __webpack_require__(20).aCrawler();

const API_DAILY_LIMIT = 20000;
const MAX_WORDS = 10000000;
const MAX_NODE_FREQUENCY = 1000;
const TRAVERSE_ALL = true;
async function handler(event, context) {
  crawler.initCrawler("wordsapi", API_DAILY_LIMIT, MAX_WORDS, MAX_NODE_FREQUENCY, TRAVERSE_ALL);

  try {
    console.log("crawling in the background starting from random words...");
    const ws0 = await crawler.loadAll_words("", true);
    const cs = ws0.results;
    console.log("all words:" + cs.length); // sort randomly

    let rnd = new Date().getMilliseconds() + Math.random() * 100;

    String.prototype.hashCode = function () {
      var hash = 0;

      for (var i = 0; i < this.length; i++) {
        var character = this.charCodeAt(i) + rnd & 0xff;
        hash = (hash << 5) - hash + character;
        hash = hash & hash; // Convert to 32bit integer
      }

      return hash;
    };

    cs.sort((a, b) => {
      return a.hashCode() - b.hashCode();
    });
    const by_def = {};
    const by_w = {};
    let tresult = {
      by_def,
      by_w
    };
    tresult.noWords = 0;
    tresult.newWords = 0;
    let promises = [];

    for (let commonWord of cs) {
      let trpromise = crawler.traverseCluster(tresult, commonWord, false, true);
      promises.push(trpromise);

      if (promises.length >= 10) {
        await Promise.all(promises);
        promises = [];

        if (crawler.isApiLimitReached()) {
          console.log("API limit reached. STOP whole crawling");
        }
      }
    }

    await Promise.all(promises);
    promises = [];
    console.log("Completed  Travesred:" + tresult.noWords + " written:" + tresult.newWords);
    return {
      statusCode: 200,
      body: "{}",
      headers: {
        'Access-Control-Allow-Origin': '*'
      }
    };
  } catch (err) {
    console.log(err);
    return {
      statusCode: 500,
      body: err.toString()
    };
  }
}

/***/ })
/******/ ])));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwic3RyZWFtXCIiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi91cmwtc3RhdGUtbWFjaGluZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ6bGliXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwidXJsXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZnNcIiIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2Vycm9ycy5qcyIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2NvbW1vbi13b3Jkcy0zMDAwLWEtZS5qcyIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2NvbW1vbi13b3Jkcy0zMDAwLWYtcC5qcyIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2NvbW1vbi13b3Jkcy0zMDAwLXEtei5qcyIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2NvbW1vbi13b3Jkcy0xMDAwMC1hLWMuanMiLCJ3ZWJwYWNrOi8vLy4vaW5jbHVkZS9jb21tb24td29yZHMtMTAwMDAtZC1oLmpzIiwid2VicGFjazovLy8uL2luY2x1ZGUvY29tbW9uLXdvcmRzLTEwMDAwLWktby5qcyIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2NvbW1vbi13b3Jkcy0xMDAwMC1wLXIuanMiLCJ3ZWJwYWNrOi8vLy4vaW5jbHVkZS9jb21tb24td29yZHMtMTAwMDAtcy16LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImh0dHBzXCIiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiaHR0cFwiIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvcHVibGljLWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2dvb2dsZXRyYW5zYXBpL3V0aWxzLmpzIiwid2VicGFjazovLy8uL2luY2x1ZGUvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicHVueWNvZGVcIiIsIndlYnBhY2s6Ly8vLi9pbmNsdWRlL2NyYXdsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vaW5jbHVkZS9maW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9ub2RlLWZpbmQtZmlsZXMvZGlzdC9ub2RlLWZpbmQtZmlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9hc3luYy9saWIvYXN5bmMuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicGF0aFwiIiwid2VicGFjazovLy9leHRlcm5hbCBcImV2ZW50c1wiIiwid2VicGFjazovLy8uL2luY2x1ZGUvZ29vZ2xldHJhbnNhcGkvZ29vZ2xlX2RpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vaW5jbHVkZS9nb29nbGV0cmFuc2FwaS9kaWN0aW9uYXJ5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbG9kYXNoL2xvZGFzaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9ub2RlLWZldGNoL2xpYi9pbmRleC5tanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi9VUkwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93ZWJpZGwtY29udmVyc2lvbnMvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi9VUkwtaW1wbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3RyNDYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vaW5jbHVkZS93b3Jkc2FwaS93b3JkYXBpX2RpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vaW5jbHVkZS9teS13b3Jkcy5qcyIsIndlYnBhY2s6Ly8vLi9jcmF3bC1iYWNrZ3JvdW5kLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJOb0RlZmluaXRpb25zRm91bmQiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiYWRkaXRpb25hbEluZm8iLCJuYW1lIiwidGl0bGUiLCJtZXNzYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlc29sdXRpb24iLCJyZXF1ZXN0VHlwZSIsIlJhdGVMaW1pdEVycm9yIiwiVW5leHBlY3RlZEVycm9yIiwiQmFkSFRUUFJlc3BvbnNlIiwiVGhlTW9zdENvbW1vbjMwMDAiLCJhIiwiYWJhbmRvbiIsImFiaWxpdHkiLCJhYmxlIiwiYWJvcnRpb24iLCJhYm91dCIsImFib3ZlIiwiYWJyb2FkIiwiYWJzZW5jZSIsImFic29sdXRlIiwiYWJzb2x1dGVseSIsImFic29yYiIsImFidXNlIiwiYWNhZGVtaWMiLCJhY2NlcHQiLCJhY2Nlc3MiLCJhY2NpZGVudCIsImFjY29tcGFueSIsImFjY29tcGxpc2giLCJhY2NvcmRpbmciLCJhY2NvdW50IiwiYWNjdXJhdGUiLCJhY2N1c2UiLCJhY2hpZXZlIiwiYWNoaWV2ZW1lbnQiLCJhY2lkIiwiYWNrbm93bGVkZ2UiLCJhY3F1aXJlIiwiYWNyb3NzIiwiYWN0IiwiYWN0aW9uIiwiYWN0aXZlIiwiYWN0aXZpc3QiLCJhY3Rpdml0eSIsImFjdG9yIiwiYWN0cmVzcyIsImFjdHVhbCIsImFjdHVhbGx5IiwiYWQiLCJhZGFwdCIsImFkZCIsImFkZGl0aW9uIiwiYWRkaXRpb25hbCIsImFkZHJlc3MiLCJhZGVxdWF0ZSIsImFkanVzdCIsImFkanVzdG1lbnQiLCJhZG1pbmlzdHJhdGlvbiIsImFkbWluaXN0cmF0b3IiLCJhZG1pcmUiLCJhZG1pc3Npb24iLCJhZG1pdCIsImFkb2xlc2NlbnQiLCJhZG9wdCIsImFkdWx0IiwiYWR2YW5jZSIsImFkdmFuY2VkIiwiYWR2YW50YWdlIiwiYWR2ZW50dXJlIiwiYWR2ZXJ0aXNpbmciLCJhZHZpY2UiLCJhZHZpc2UiLCJhZHZpc2VyIiwiYWR2b2NhdGUiLCJhZmZhaXIiLCJhZmZlY3QiLCJhZmZvcmQiLCJhZnJhaWQiLCJBZnJpY2FuIiwiYWZ0ZXIiLCJhZnRlcm5vb24iLCJhZ2FpbiIsImFnYWluc3QiLCJhZ2UiLCJhZ2VuY3kiLCJhZ2VuZGEiLCJhZ2VudCIsImFnZ3Jlc3NpdmUiLCJhZ28iLCJhZ3JlZSIsImFncmVlbWVudCIsImFncmljdWx0dXJhbCIsImFoIiwiYWhlYWQiLCJhaWQiLCJhaWRlIiwiQUlEUyIsImFpbSIsImFpciIsImFpcmNyYWZ0IiwiYWlybGluZSIsImFpcnBvcnQiLCJhbGJ1bSIsImFsY29ob2wiLCJhbGl2ZSIsImFsbCIsImFsbGlhbmNlIiwiYWxsb3ciLCJhbGx5IiwiYWxtb3N0IiwiYWxvbmUiLCJhbG9uZyIsImFscmVhZHkiLCJhbHNvIiwiYWx0ZXIiLCJhbHRlcm5hdGl2ZSIsImFsdGhvdWdoIiwiYWx3YXlzIiwiQU0iLCJhbWF6aW5nIiwiQW1lcmljYW4iLCJhbW9uZyIsImFtb3VudCIsImFuYWx5c2lzIiwiYW5hbHlzdCIsImFuYWx5emUiLCJhbmNpZW50IiwiYW5kIiwiYW5nZXIiLCJhbmdsZSIsImFuZ3J5IiwiYW5pbWFsIiwiYW5uaXZlcnNhcnkiLCJhbm5vdW5jZSIsImFubnVhbCIsImFub3RoZXIiLCJhbnN3ZXIiLCJhbnRpY2lwYXRlIiwiYW54aWV0eSIsImFueSIsImFueWJvZHkiLCJhbnltb3JlIiwiYW55b25lIiwiYW55dGhpbmciLCJhbnl3YXkiLCJhbnl3aGVyZSIsImFwYXJ0IiwiYXBhcnRtZW50IiwiYXBwYXJlbnQiLCJhcHBhcmVudGx5IiwiYXBwZWFsIiwiYXBwZWFyIiwiYXBwZWFyYW5jZSIsImFwcGxlIiwiYXBwbGljYXRpb24iLCJhcHBseSIsImFwcG9pbnQiLCJhcHBvaW50bWVudCIsImFwcHJlY2lhdGUiLCJhcHByb2FjaCIsImFwcHJvcHJpYXRlIiwiYXBwcm92YWwiLCJhcHByb3ZlIiwiYXBwcm94aW1hdGVseSIsIkFyYWIiLCJhcmNoaXRlY3QiLCJhcmVhIiwiYXJndWUiLCJhcmd1bWVudCIsImFyaXNlIiwiYXJtIiwiYXJtZWQiLCJhcm15IiwiYXJvdW5kIiwiYXJyYW5nZSIsImFycmFuZ2VtZW50IiwiYXJyZXN0IiwiYXJyaXZhbCIsImFycml2ZSIsImFydCIsImFydGljbGUiLCJhcnRpc3QiLCJhcnRpc3RpYyIsImFzIiwiQXNpYW4iLCJhc2lkZSIsImFzayIsImFzbGVlcCIsImFzcGVjdCIsImFzc2F1bHQiLCJhc3NlcnQiLCJhc3Nlc3MiLCJhc3Nlc3NtZW50IiwiYXNzZXQiLCJhc3NpZ24iLCJhc3NpZ25tZW50IiwiYXNzaXN0IiwiYXNzaXN0YW5jZSIsImFzc2lzdGFudCIsImFzc29jaWF0ZSIsImFzc29jaWF0aW9uIiwiYXNzdW1lIiwiYXNzdW1wdGlvbiIsImFzc3VyZSIsImF0IiwiYXRobGV0ZSIsImF0aGxldGljIiwiYXRtb3NwaGVyZSIsImF0dGFjaCIsImF0dGFjayIsImF0dGVtcHQiLCJhdHRlbmQiLCJhdHRlbnRpb24iLCJhdHRpdHVkZSIsImF0dG9ybmV5IiwiYXR0cmFjdCIsImF0dHJhY3RpdmUiLCJhdHRyaWJ1dGUiLCJhdWRpZW5jZSIsImF1dGhvciIsImF1dGhvcml0eSIsImF1dG8iLCJhdmFpbGFibGUiLCJhdmVyYWdlIiwiYXZvaWQiLCJhd2FyZCIsImF3YXJlIiwiYXdhcmVuZXNzIiwiYXdheSIsImF3ZnVsIiwiYmFieSIsImJhY2siLCJiYWNrZ3JvdW5kIiwiYmFkIiwiYmFkbHkiLCJiYWciLCJiYWtlIiwiYmFsYW5jZSIsImJhbGwiLCJiYW4iLCJiYW5kIiwiYmFuayIsImJhciIsImJhcmVseSIsImJhcnJlbCIsImJhcnJpZXIiLCJiYXNlIiwiYmFzZWJhbGwiLCJiYXNpYyIsImJhc2ljYWxseSIsImJhc2lzIiwiYmFza2V0IiwiYmFza2V0YmFsbCIsImJhdGhyb29tIiwiYmF0dGVyeSIsImJhdHRsZSIsImJlIiwiYmVhY2giLCJiZWFuIiwiYmVhciIsImJlYXQiLCJiZWF1dGlmdWwiLCJiZWF1dHkiLCJiZWNhdXNlIiwiYmVjb21lIiwiYmVkIiwiYmVkcm9vbSIsImJlZXIiLCJiZWZvcmUiLCJiZWdpbiIsImJlZ2lubmluZyIsImJlaGF2aW9yIiwiYmVoaW5kIiwiYmVpbmciLCJiZWxpZWYiLCJiZWxpZXZlIiwiYmVsbCIsImJlbG9uZyIsImJlbG93IiwiYmVsdCIsImJlbmNoIiwiYmVuZCIsImJlbmVhdGgiLCJiZW5lZml0IiwiYmVzaWRlIiwiYmVzaWRlcyIsImJlc3QiLCJiZXQiLCJiZXR0ZXIiLCJiZXR3ZWVuIiwiYmV5b25kIiwiQmlibGUiLCJiaWciLCJiaWtlIiwiYmlsbCIsImJpbGxpb24iLCJiaW5kIiwiYmlvbG9naWNhbCIsImJpcmQiLCJiaXJ0aCIsImJpcnRoZGF5IiwiYml0IiwiYml0ZSIsImJsYWNrIiwiYmxhZGUiLCJibGFtZSIsImJsYW5rZXQiLCJibGluZCIsImJsb2NrIiwiYmxvb2QiLCJibG93IiwiYmx1ZSIsImJvYXJkIiwiYm9hdCIsImJvZHkiLCJib21iIiwiYm9tYmluZyIsImJvbmQiLCJib25lIiwiYm9vayIsImJvb20iLCJib290IiwiYm9yZGVyIiwiYm9ybiIsImJvcnJvdyIsImJvc3MiLCJib3RoIiwiYm90aGVyIiwiYm90dGxlIiwiYm90dG9tIiwiYm91bmRhcnkiLCJib3dsIiwiYm94IiwiYm95IiwiYm95ZnJpZW5kIiwiYnJhaW4iLCJicmFuY2giLCJicmFuZCIsImJyZWFkIiwiYnJlYWsiLCJicmVha2Zhc3QiLCJicmVhc3QiLCJicmVhdGgiLCJicmVhdGhlIiwiYnJpY2siLCJicmlkZ2UiLCJicmllZiIsImJyaWVmbHkiLCJicmlnaHQiLCJicmlsbGlhbnQiLCJicmluZyIsIkJyaXRpc2giLCJicm9hZCIsImJyb2tlbiIsImJyb3RoZXIiLCJicm93biIsImJydXNoIiwiYnVjayIsImJ1ZGdldCIsImJ1aWxkIiwiYnVpbGRpbmciLCJidWxsZXQiLCJidW5jaCIsImJ1cmRlbiIsImJ1cm4iLCJidXJ5IiwiYnVzIiwiYnVzaW5lc3MiLCJidXN5IiwiYnV0IiwiYnV0dGVyIiwiYnV0dG9uIiwiYnV5IiwiYnV5ZXIiLCJieSIsImNhYmluIiwiY2FiaW5ldCIsImNhYmxlIiwiY2FrZSIsImNhbGN1bGF0ZSIsImNhbGwiLCJjYW1lcmEiLCJjYW1wIiwiY2FtcGFpZ24iLCJjYW1wdXMiLCJjYW4iLCJDYW5hZGlhbiIsImNhbmNlciIsImNhbmRpZGF0ZSIsImNhcCIsImNhcGFiaWxpdHkiLCJjYXBhYmxlIiwiY2FwYWNpdHkiLCJjYXBpdGFsIiwiY2FwdGFpbiIsImNhcHR1cmUiLCJjYXIiLCJjYXJib24iLCJjYXJkIiwiY2FyZSIsImNhcmVlciIsImNhcmVmdWwiLCJjYXJlZnVsbHkiLCJjYXJyaWVyIiwiY2FycnkiLCJjYXNlIiwiY2FzaCIsImNhc3QiLCJjYXQiLCJjYXRjaCIsImNhdGVnb3J5IiwiQ2F0aG9saWMiLCJjYXVzZSIsImNlaWxpbmciLCJjZWxlYnJhdGUiLCJjZWxlYnJhdGlvbiIsImNlbGVicml0eSIsImNlbGwiLCJjZW50ZXIiLCJjZW50cmFsIiwiY2VudHVyeSIsIkNFTyIsImNlcmVtb255IiwiY2VydGFpbiIsImNlcnRhaW5seSIsImNoYWluIiwiY2hhaXIiLCJjaGFpcm1hbiIsImNoYWxsZW5nZSIsImNoYW1iZXIiLCJjaGFtcGlvbiIsImNoYW1waW9uc2hpcCIsImNoYW5jZSIsImNoYW5nZSIsImNoYW5naW5nIiwiY2hhbm5lbCIsImNoYXB0ZXIiLCJjaGFyYWN0ZXIiLCJjaGFyYWN0ZXJpc3RpYyIsImNoYXJhY3Rlcml6ZSIsImNoYXJnZSIsImNoYXJpdHkiLCJjaGFydCIsImNoYXNlIiwiY2hlYXAiLCJjaGVjayIsImNoZWVrIiwiY2hlZXNlIiwiY2hlZiIsImNoZW1pY2FsIiwiY2hlc3QiLCJjaGlja2VuIiwiY2hpZWYiLCJjaGlsZCIsImNoaWxkaG9vZCIsIkNoaW5lc2UiLCJjaGlwIiwiY2hvY29sYXRlIiwiY2hvaWNlIiwiY2hvbGVzdGVyb2wiLCJjaG9vc2UiLCJDaHJpc3RpYW4iLCJDaHJpc3RtYXMiLCJjaHVyY2giLCJjaWdhcmV0dGUiLCJjaXJjbGUiLCJjaXJjdW1zdGFuY2UiLCJjaXRlIiwiY2l0aXplbiIsImNpdHkiLCJjaXZpbCIsImNpdmlsaWFuIiwiY2xhaW0iLCJjbGFzcyIsImNsYXNzaWMiLCJjbGFzc3Jvb20iLCJjbGVhbiIsImNsZWFyIiwiY2xlYXJseSIsImNsaWVudCIsImNsaW1hdGUiLCJjbGltYiIsImNsaW5pYyIsImNsaW5pY2FsIiwiY2xvY2siLCJjbG9zZSIsImNsb3NlbHkiLCJjbG9zZXIiLCJjbG90aGVzIiwiY2xvdGhpbmciLCJjbG91ZCIsImNsdWIiLCJjbHVlIiwiY2x1c3RlciIsImNvYWNoIiwiY29hbCIsImNvYWxpdGlvbiIsImNvYXN0IiwiY29hdCIsImNvZGUiLCJjb2ZmZWUiLCJjb2duaXRpdmUiLCJjb2xkIiwiY29sbGFwc2UiLCJjb2xsZWFndWUiLCJjb2xsZWN0IiwiY29sbGVjdGlvbiIsImNvbGxlY3RpdmUiLCJjb2xsZWdlIiwiY29sb25pYWwiLCJjb2xvciIsImNvbHVtbiIsImNvbWJpbmF0aW9uIiwiY29tYmluZSIsImNvbWUiLCJjb21lZHkiLCJjb21mb3J0IiwiY29tZm9ydGFibGUiLCJjb21tYW5kIiwiY29tbWFuZGVyIiwiY29tbWVudCIsImNvbW1lcmNpYWwiLCJjb21taXNzaW9uIiwiY29tbWl0IiwiY29tbWl0bWVudCIsImNvbW1pdHRlZSIsImNvbW1vbiIsImNvbW11bmljYXRlIiwiY29tbXVuaWNhdGlvbiIsImNvbW11bml0eSIsImNvbXBhbnkiLCJjb21wYXJlIiwiY29tcGFyaXNvbiIsImNvbXBldGUiLCJjb21wZXRpdGlvbiIsImNvbXBldGl0aXZlIiwiY29tcGV0aXRvciIsImNvbXBsYWluIiwiY29tcGxhaW50IiwiY29tcGxldGUiLCJjb21wbGV0ZWx5IiwiY29tcGxleCIsImNvbXBsaWNhdGVkIiwiY29tcG9uZW50IiwiY29tcG9zZSIsImNvbXBvc2l0aW9uIiwiY29tcHJlaGVuc2l2ZSIsImNvbXB1dGVyIiwiY29uY2VudHJhdGUiLCJjb25jZW50cmF0aW9uIiwiY29uY2VwdCIsImNvbmNlcm4iLCJjb25jZXJuZWQiLCJjb25jZXJ0IiwiY29uY2x1ZGUiLCJjb25jbHVzaW9uIiwiY29uY3JldGUiLCJjb25kaXRpb24iLCJjb25kdWN0IiwiY29uZmVyZW5jZSIsImNvbmZpZGVuY2UiLCJjb25maWRlbnQiLCJjb25maXJtIiwiY29uZmxpY3QiLCJjb25mcm9udCIsImNvbmZ1c2lvbiIsIkNvbmdyZXNzIiwiY29uZ3Jlc3Npb25hbCIsImNvbm5lY3QiLCJjb25uZWN0aW9uIiwiY29uc2Npb3VzbmVzcyIsImNvbnNlbnN1cyIsImNvbnNlcXVlbmNlIiwiY29uc2VydmF0aXZlIiwiY29uc2lkZXIiLCJjb25zaWRlcmFibGUiLCJjb25zaWRlcmF0aW9uIiwiY29uc2lzdCIsImNvbnNpc3RlbnQiLCJjb25zdGFudCIsImNvbnN0YW50bHkiLCJjb25zdGl0dXRlIiwiY29uc3RpdHV0aW9uYWwiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3Rpb24iLCJjb25zdWx0YW50IiwiY29uc3VtZSIsImNvbnN1bWVyIiwiY29uc3VtcHRpb24iLCJjb250YWN0IiwiY29udGFpbiIsImNvbnRhaW5lciIsImNvbnRlbXBvcmFyeSIsImNvbnRlbnQiLCJjb250ZXN0IiwiY29udGV4dCIsImNvbnRpbnVlIiwiY29udGludWVkIiwiY29udHJhY3QiLCJjb250cmFzdCIsImNvbnRyaWJ1dGUiLCJjb250cmlidXRpb24iLCJjb250cm9sIiwiY29udHJvdmVyc2lhbCIsImNvbnRyb3ZlcnN5IiwiY29udmVudGlvbiIsImNvbnZlbnRpb25hbCIsImNvbnZlcnNhdGlvbiIsImNvbnZlcnQiLCJjb252aWN0aW9uIiwiY29udmluY2UiLCJjb29rIiwiY29va2llIiwiY29va2luZyIsImNvb2wiLCJjb29wZXJhdGlvbiIsImNvcCIsImNvcGUiLCJjb3B5IiwiY29yZSIsImNvcm4iLCJjb3JuZXIiLCJjb3Jwb3JhdGUiLCJjb3Jwb3JhdGlvbiIsImNvcnJlY3QiLCJjb3JyZXNwb25kZW50IiwiY29zdCIsImNvdHRvbiIsImNvdWNoIiwiY291bGQiLCJjb3VuY2lsIiwiY291bnNlbG9yIiwiY291bnQiLCJjb3VudGVyIiwiY291bnRyeSIsImNvdW50eSIsImNvdXBsZSIsImNvdXJhZ2UiLCJjb3Vyc2UiLCJjb3VydCIsImNvdXNpbiIsImNvdmVyIiwiY292ZXJhZ2UiLCJjb3ciLCJjcmFjayIsImNyYWZ0IiwiY3Jhc2giLCJjcmF6eSIsImNyZWFtIiwiY3JlYXRlIiwiY3JlYXRpb24iLCJjcmVhdGl2ZSIsImNyZWF0dXJlIiwiY3JlZGl0IiwiY3JldyIsImNyaW1lIiwiY3JpbWluYWwiLCJjcmlzaXMiLCJjcml0ZXJpYSIsImNyaXRpYyIsImNyaXRpY2FsIiwiY3JpdGljaXNtIiwiY3JpdGljaXplIiwiY3JvcCIsImNyb3NzIiwiY3Jvd2QiLCJjcnVjaWFsIiwiY3J5IiwiY3VsdHVyYWwiLCJjdWx0dXJlIiwiY3VwIiwiY3VyaW91cyIsImN1cnJlbnQiLCJjdXJyZW50bHkiLCJjdXJyaWN1bHVtIiwiY3VzdG9tIiwiY3VzdG9tZXIiLCJjdXQiLCJjeWNsZSIsImRhZCIsImRhaWx5IiwiZGFtYWdlIiwiZGFuY2UiLCJkYW5nZXIiLCJkYW5nZXJvdXMiLCJkYXJlIiwiZGFyayIsImRhcmtuZXNzIiwiZGF0YSIsImRhdGUiLCJkYXVnaHRlciIsImRheSIsImRlYWQiLCJkZWFsIiwiZGVhbGVyIiwiZGVhciIsImRlYXRoIiwiZGViYXRlIiwiZGVidCIsImRlY2FkZSIsImRlY2lkZSIsImRlY2lzaW9uIiwiZGVjayIsImRlY2xhcmUiLCJkZWNsaW5lIiwiZGVjcmVhc2UiLCJkZWVwIiwiZGVlcGx5IiwiZGVlciIsImRlZmVhdCIsImRlZmVuZCIsImRlZmVuZGFudCIsImRlZmVuc2UiLCJkZWZlbnNpdmUiLCJkZWZpY2l0IiwiZGVmaW5lIiwiZGVmaW5pdGVseSIsImRlZmluaXRpb24iLCJkZWdyZWUiLCJkZWxheSIsImRlbGl2ZXIiLCJkZWxpdmVyeSIsImRlbWFuZCIsImRlbW9jcmFjeSIsIkRlbW9jcmF0IiwiZGVtb2NyYXRpYyIsImRlbW9uc3RyYXRlIiwiZGVtb25zdHJhdGlvbiIsImRlbnkiLCJkZXBhcnRtZW50IiwiZGVwZW5kIiwiZGVwZW5kZW50IiwiZGVwZW5kaW5nIiwiZGVwaWN0IiwiZGVwcmVzc2lvbiIsImRlcHRoIiwiZGVwdXR5IiwiZGVyaXZlIiwiZGVzY3JpYmUiLCJkZXNjcmlwdGlvbiIsImRlc2VydCIsImRlc2VydmUiLCJkZXNpZ24iLCJkZXNpZ25lciIsImRlc2lyZSIsImRlc2siLCJkZXNwZXJhdGUiLCJkZXNwaXRlIiwiZGVzdHJveSIsImRlc3RydWN0aW9uIiwiZGV0YWlsIiwiZGV0YWlsZWQiLCJkZXRlY3QiLCJkZXRlcm1pbmUiLCJkZXZlbG9wIiwiZGV2ZWxvcGluZyIsImRldmVsb3BtZW50IiwiZGV2aWNlIiwiZGV2b3RlIiwiZGlhbG9ndWUiLCJkaWUiLCJkaWV0IiwiZGlmZmVyIiwiZGlmZmVyZW5jZSIsImRpZmZlcmVudCIsImRpZmZlcmVudGx5IiwiZGlmZmljdWx0IiwiZGlmZmljdWx0eSIsImRpZyIsImRpZ2l0YWwiLCJkaW1lbnNpb24iLCJkaW5pbmciLCJkaW5uZXIiLCJkaXJlY3QiLCJkaXJlY3Rpb24iLCJkaXJlY3RseSIsImRpcmVjdG9yIiwiZGlydCIsImRpcnR5IiwiZGlzYWJpbGl0eSIsImRpc2FncmVlIiwiZGlzYXBwZWFyIiwiZGlzYXN0ZXIiLCJkaXNjaXBsaW5lIiwiZGlzY291cnNlIiwiZGlzY292ZXIiLCJkaXNjb3ZlcnkiLCJkaXNjcmltaW5hdGlvbiIsImRpc2N1c3MiLCJkaXNjdXNzaW9uIiwiZGlzZWFzZSIsImRpc2giLCJkaXNtaXNzIiwiZGlzb3JkZXIiLCJkaXNwbGF5IiwiZGlzcHV0ZSIsImRpc3RhbmNlIiwiZGlzdGFudCIsImRpc3RpbmN0IiwiZGlzdGluY3Rpb24iLCJkaXN0aW5ndWlzaCIsImRpc3RyaWJ1dGUiLCJkaXN0cmlidXRpb24iLCJkaXN0cmljdCIsImRpdmVyc2UiLCJkaXZlcnNpdHkiLCJkaXZpZGUiLCJkaXZpc2lvbiIsImRpdm9yY2UiLCJETkEiLCJkbyIsImRvY3RvciIsImRvY3VtZW50IiwiZG9nIiwiZG9tZXN0aWMiLCJkb21pbmFudCIsImRvbWluYXRlIiwiZG9vciIsImRvdWJsZSIsImRvdWJ0IiwiZG93biIsImRvd250b3duIiwiZG96ZW4iLCJkcmFmdCIsImRyYWciLCJkcmFtYSIsImRyYW1hdGljIiwiZHJhbWF0aWNhbGx5IiwiZHJhdyIsImRyYXdpbmciLCJkcmVhbSIsImRyZXNzIiwiZHJpbmsiLCJkcml2ZSIsImRyaXZlciIsImRyb3AiLCJkcnVnIiwiZHJ5IiwiZHVlIiwiZHVyaW5nIiwiZHVzdCIsImR1dHkiLCJlYWNoIiwiZWFnZXIiLCJlYXIiLCJlYXJseSIsImVhcm4iLCJlYXJuaW5ncyIsImVhcnRoIiwiZWFzZSIsImVhc2lseSIsImVhc3QiLCJlYXN0ZXJuIiwiZWFzeSIsImVhdCIsImVjb25vbWljIiwiZWNvbm9taWNzIiwiZWNvbm9taXN0IiwiZWNvbm9teSIsImVkZ2UiLCJlZGl0aW9uIiwiZWRpdG9yIiwiZWR1Y2F0ZSIsImVkdWNhdGlvbiIsImVkdWNhdGlvbmFsIiwiZWR1Y2F0b3IiLCJlZmZlY3QiLCJlZmZlY3RpdmUiLCJlZmZlY3RpdmVseSIsImVmZmljaWVuY3kiLCJlZmZpY2llbnQiLCJlZmZvcnQiLCJlZ2ciLCJlaWdodCIsImVpdGhlciIsImVsZGVybHkiLCJlbGVjdCIsImVsZWN0aW9uIiwiZWxlY3RyaWMiLCJlbGVjdHJpY2l0eSIsImVsZWN0cm9uaWMiLCJlbGVtZW50IiwiZWxlbWVudGFyeSIsImVsaW1pbmF0ZSIsImVsaXRlIiwiZWxzZSIsImVsc2V3aGVyZSIsImVtYnJhY2UiLCJlbWVyZ2UiLCJlbWVyZ2VuY3kiLCJlbWlzc2lvbiIsImVtb3Rpb24iLCJlbW90aW9uYWwiLCJlbXBoYXNpcyIsImVtcGhhc2l6ZSIsImVtcGxveSIsImVtcGxveWVlIiwiZW1wbG95ZXIiLCJlbXBsb3ltZW50IiwiZW1wdHkiLCJlbmFibGUiLCJlbmNvdW50ZXIiLCJlbmNvdXJhZ2UiLCJlbmQiLCJlbmVteSIsImVuZXJneSIsImVuZm9yY2VtZW50IiwiZW5nYWdlIiwiZW5naW5lIiwiZW5naW5lZXIiLCJlbmdpbmVlcmluZyIsIkVuZ2xpc2giLCJlbmhhbmNlIiwiZW5qb3kiLCJlbm9ybW91cyIsImVub3VnaCIsImVuc3VyZSIsImVudGVyIiwiZW50ZXJwcmlzZSIsImVudGVydGFpbm1lbnQiLCJlbnRpcmUiLCJlbnRpcmVseSIsImVudHJhbmNlIiwiZW50cnkiLCJlbnZpcm9ubWVudCIsImVudmlyb25tZW50YWwiLCJlcGlzb2RlIiwiZXF1YWwiLCJlcXVhbGx5IiwiZXF1aXBtZW50IiwiZXJhIiwiZXJyb3IiLCJlc2NhcGUiLCJlc3BlY2lhbGx5IiwiZXNzYXkiLCJlc3NlbnRpYWwiLCJlc3NlbnRpYWxseSIsImVzdGFibGlzaCIsImVzdGFibGlzaG1lbnQiLCJlc3RhdGUiLCJlc3RpbWF0ZSIsImV0YyIsImV0aGljcyIsImV0aG5pYyIsIkV1cm9wZWFuIiwiZXZhbHVhdGUiLCJldmFsdWF0aW9uIiwiZXZlbiIsImV2ZW5pbmciLCJldmVudCIsImV2ZW50dWFsbHkiLCJldmVyIiwiZXZlcnkiLCJldmVyeWJvZHkiLCJldmVyeWRheSIsImV2ZXJ5b25lIiwiZXZlcnl0aGluZyIsImV2ZXJ5d2hlcmUiLCJldmlkZW5jZSIsImV2b2x1dGlvbiIsImV2b2x2ZSIsImV4YWN0IiwiZXhhY3RseSIsImV4YW1pbmF0aW9uIiwiZXhhbWluZSIsImV4YW1wbGUiLCJleGNlZWQiLCJleGNlbGxlbnQiLCJleGNlcHQiLCJleGNlcHRpb24iLCJleGNoYW5nZSIsImV4Y2l0aW5nIiwiZXhlY3V0aXZlIiwiZXhlcmNpc2UiLCJleGhpYml0IiwiZXhoaWJpdGlvbiIsImV4aXN0IiwiZXhpc3RlbmNlIiwiZXhpc3RpbmciLCJleHBhbmQiLCJleHBhbnNpb24iLCJleHBlY3QiLCJleHBlY3RhdGlvbiIsImV4cGVuc2UiLCJleHBlbnNpdmUiLCJleHBlcmllbmNlIiwiZXhwZXJpbWVudCIsImV4cGVydCIsImV4cGxhaW4iLCJleHBsYW5hdGlvbiIsImV4cGxvZGUiLCJleHBsb3JlIiwiZXhwbG9zaW9uIiwiZXhwb3NlIiwiZXhwb3N1cmUiLCJleHByZXNzIiwiZXhwcmVzc2lvbiIsImV4dGVuZCIsImV4dGVuc2lvbiIsImV4dGVuc2l2ZSIsImV4dGVudCIsImV4dGVybmFsIiwiZXh0cmEiLCJleHRyYW9yZGluYXJ5IiwiZXh0cmVtZSIsImV4dHJlbWVseSIsImV5ZSIsImZhYnJpYyIsImZhY2UiLCJmYWNpbGl0eSIsImZhY3QiLCJmYWN0b3IiLCJmYWN0b3J5IiwiZmFjdWx0eSIsImZhZGUiLCJmYWlsIiwiZmFpbHVyZSIsImZhaXIiLCJmYWlybHkiLCJmYWl0aCIsImZhbGwiLCJmYWxzZSIsImZhbWlsaWFyIiwiZmFtaWx5IiwiZmFtb3VzIiwiZmFuIiwiZmFudGFzeSIsImZhciIsImZhcm0iLCJmYXJtZXIiLCJmYXNoaW9uIiwiZmFzdCIsImZhdCIsImZhdGUiLCJmYXRoZXIiLCJmYXVsdCIsImZhdm9yIiwiZmF2b3JpdGUiLCJmZWFyIiwiZmVhdHVyZSIsImZlZGVyYWwiLCJmZWUiLCJmZWVkIiwiZmVlbCIsImZlZWxpbmciLCJmZWxsb3ciLCJmZW1hbGUiLCJmZW5jZSIsImZldyIsImZld2VyIiwiZmliZXIiLCJmaWN0aW9uIiwiZmllbGQiLCJmaWZ0ZWVuIiwiZmlmdGgiLCJmaWZ0eSIsImZpZ2h0IiwiZmlnaHRlciIsImZpZ2h0aW5nIiwiZmlndXJlIiwiZmlsZSIsImZpbGwiLCJmaWxtIiwiZmluYWwiLCJmaW5hbGx5IiwiZmluYW5jZSIsImZpbmFuY2lhbCIsImZpbmQiLCJmaW5kaW5nIiwiZmluZSIsImZpbmdlciIsImZpbmlzaCIsImZpcmUiLCJmaXJtIiwiZmlyc3QiLCJmaXNoIiwiZmlzaGluZyIsImZpdCIsImZpdG5lc3MiLCJmaXZlIiwiZml4IiwiZmxhZyIsImZsYW1lIiwiZmxhdCIsImZsYXZvciIsImZsZWUiLCJmbGVzaCIsImZsaWdodCIsImZsb2F0IiwiZmxvb3IiLCJmbG93IiwiZmxvd2VyIiwiZmx5IiwiZm9jdXMiLCJmb2xrIiwiZm9sbG93IiwiZm9sbG93aW5nIiwiZm9vZCIsImZvb3QiLCJmb290YmFsbCIsImZvciIsImZvcmNlIiwiZm9yZWlnbiIsImZvcmVzdCIsImZvcmV2ZXIiLCJmb3JnZXQiLCJmb3JtIiwiZm9ybWFsIiwiZm9ybWF0aW9uIiwiZm9ybWVyIiwiZm9ybXVsYSIsImZvcnRoIiwiZm9ydHVuZSIsImZvcndhcmQiLCJmb3VuZCIsImZvdW5kYXRpb24iLCJmb3VuZGVyIiwiZm91ciIsImZvdXJ0aCIsImZyYW1lIiwiZnJhbWV3b3JrIiwiZnJlZSIsImZyZWVkb20iLCJmcmVlemUiLCJGcmVuY2giLCJmcmVxdWVuY3kiLCJmcmVxdWVudCIsImZyZXF1ZW50bHkiLCJmcmVzaCIsImZyaWVuZCIsImZyaWVuZGx5IiwiZnJpZW5kc2hpcCIsImZyb20iLCJmcm9udCIsImZydWl0IiwiZnJ1c3RyYXRpb24iLCJmdWVsIiwiZnVsbCIsImZ1bGx5IiwiZnVuIiwiZnVuY3Rpb24iLCJmdW5kIiwiZnVuZGFtZW50YWwiLCJmdW5kaW5nIiwiZnVuZXJhbCIsImZ1bm55IiwiZnVybml0dXJlIiwiZnVydGhlcm1vcmUiLCJmdXR1cmUiLCJnYWluIiwiZ2FsYXh5IiwiZ2FsbGVyeSIsImdhbWUiLCJnYW5nIiwiZ2FwIiwiZ2FyYWdlIiwiZ2FyZGVuIiwiZ2FybGljIiwiZ2FzIiwiZ2F0ZSIsImdhdGhlciIsImdheSIsImdhemUiLCJnZWFyIiwiZ2VuZGVyIiwiZ2VuZSIsImdlbmVyYWwiLCJnZW5lcmFsbHkiLCJnZW5lcmF0ZSIsImdlbmVyYXRpb24iLCJnZW5ldGljIiwiZ2VudGxlbWFuIiwiZ2VudGx5IiwiR2VybWFuIiwiZ2VzdHVyZSIsImdldCIsImdob3N0IiwiZ2lhbnQiLCJnaWZ0IiwiZ2lmdGVkIiwiZ2lybCIsImdpcmxmcmllbmQiLCJnaXZlIiwiZ2l2ZW4iLCJnbGFkIiwiZ2xhbmNlIiwiZ2xhc3MiLCJnbG9iYWwiLCJnbG92ZSIsImdvIiwiZ29hbCIsIkdvZCIsImdvbGQiLCJnb2xkZW4iLCJnb2xmIiwiZ29vZCIsImdvdmVybm1lbnQiLCJnb3Zlcm5vciIsImdyYWIiLCJncmFkZSIsImdyYWR1YWxseSIsImdyYWR1YXRlIiwiZ3JhaW4iLCJncmFuZCIsImdyYW5kZmF0aGVyIiwiZ3JhbmRtb3RoZXIiLCJncmFudCIsImdyYXNzIiwiZ3JhdmUiLCJncmF5IiwiZ3JlYXQiLCJncmVhdGVzdCIsImdyZWVuIiwiZ3JvY2VyeSIsImdyb3VuZCIsImdyb3VwIiwiZ3JvdyIsImdyb3dpbmciLCJncm93dGgiLCJndWFyYW50ZWUiLCJndWFyZCIsImd1ZXNzIiwiZ3Vlc3QiLCJndWlkZSIsImd1aWRlbGluZSIsImd1aWx0eSIsImd1biIsImd1eSIsImhhYml0IiwiaGFiaXRhdCIsImhhaXIiLCJoYWxmIiwiaGFsbCIsImhhbmQiLCJoYW5kZnVsIiwiaGFuZGxlIiwiaGFuZyIsImhhcHBlbiIsImhhcHB5IiwiaGFyZCIsImhhcmRseSIsImhhdCIsImhhdGUiLCJoYXZlIiwiaGUiLCJoZWFkIiwiaGVhZGxpbmUiLCJoZWFkcXVhcnRlcnMiLCJoZWFsdGgiLCJoZWFsdGh5IiwiaGVhciIsImhlYXJpbmciLCJoZWFydCIsImhlYXQiLCJoZWF2ZW4iLCJoZWF2aWx5IiwiaGVhdnkiLCJoZWVsIiwiaGVpZ2h0IiwiaGVsaWNvcHRlciIsImhlbGwiLCJoZWxsbyIsImhlbHAiLCJoZWxwZnVsIiwiaGVyIiwiaGVyZSIsImhlcml0YWdlIiwiaGVybyIsImhlcnNlbGYiLCJoZXkiLCJoaSIsImhpZGUiLCJoaWdoIiwiaGlnaGxpZ2h0IiwiaGlnaGx5IiwiaGlnaHdheSIsImhpbGwiLCJoaW0iLCJoaW1zZWxmIiwiaGlwIiwiaGlyZSIsImhpcyIsImhpc3RvcmlhbiIsImhpc3RvcmljIiwiaGlzdG9yaWNhbCIsImhpc3RvcnkiLCJoaXQiLCJob2xkIiwiaG9sZSIsImhvbGlkYXkiLCJob2x5IiwiaG9tZSIsImhvbWVsZXNzIiwiaG9uZXN0IiwiaG9uZXkiLCJob25vciIsImhvcGUiLCJob3Jpem9uIiwiaG9ycm9yIiwiaG9yc2UiLCJob3NwaXRhbCIsImhvc3QiLCJob3QiLCJob3RlbCIsImhvdXIiLCJob3VzZSIsImhvdXNlaG9sZCIsImhvdXNpbmciLCJob3ciLCJob3dldmVyIiwiaHVnZSIsImh1bWFuIiwiaHVtb3IiLCJodW5kcmVkIiwiaHVuZ3J5IiwiaHVudGVyIiwiaHVudGluZyIsImh1cnQiLCJodXNiYW5kIiwiaHlwb3RoZXNpcyIsIkkiLCJpY2UiLCJpZGVhIiwiaWRlYWwiLCJpZGVudGlmaWNhdGlvbiIsImlkZW50aWZ5IiwiaWRlbnRpdHkiLCJpZSIsImlmIiwiaWdub3JlIiwiaWxsIiwiaWxsZWdhbCIsImlsbG5lc3MiLCJpbGx1c3RyYXRlIiwiaW1hZ2UiLCJpbWFnaW5hdGlvbiIsImltYWdpbmUiLCJpbW1lZGlhdGUiLCJpbW1lZGlhdGVseSIsImltbWlncmFudCIsImltbWlncmF0aW9uIiwiaW1wYWN0IiwiaW1wbGVtZW50IiwiaW1wbGljYXRpb24iLCJpbXBseSIsImltcG9ydGFuY2UiLCJpbXBvcnRhbnQiLCJpbXBvc2UiLCJpbXBvc3NpYmxlIiwiaW1wcmVzcyIsImltcHJlc3Npb24iLCJpbXByZXNzaXZlIiwiaW1wcm92ZSIsImltcHJvdmVtZW50IiwiaW4iLCJpbmNlbnRpdmUiLCJpbmNpZGVudCIsImluY2x1ZGUiLCJpbmNsdWRpbmciLCJpbmNvbWUiLCJpbmNvcnBvcmF0ZSIsImluY3JlYXNlIiwiaW5jcmVhc2VkIiwiaW5jcmVhc2luZyIsImluY3JlYXNpbmdseSIsImluY3JlZGlibGUiLCJpbmRlZWQiLCJpbmRlcGVuZGVuY2UiLCJpbmRlcGVuZGVudCIsImluZGV4IiwiSW5kaWFuIiwiaW5kaWNhdGUiLCJpbmRpY2F0aW9uIiwiaW5kaXZpZHVhbCIsImluZHVzdHJpYWwiLCJpbmR1c3RyeSIsImluZmFudCIsImluZmVjdGlvbiIsImluZmxhdGlvbiIsImluZmx1ZW5jZSIsImluZm9ybSIsImluZm9ybWF0aW9uIiwiaW5ncmVkaWVudCIsImluaXRpYWwiLCJpbml0aWFsbHkiLCJpbml0aWF0aXZlIiwiaW5qdXJ5IiwiaW5uZXIiLCJpbm5vY2VudCIsImlucXVpcnkiLCJpbnNpZGUiLCJpbnNpZ2h0IiwiaW5zaXN0IiwiaW5zcGlyZSIsImluc3RhbGwiLCJpbnN0YW5jZSIsImluc3RlYWQiLCJpbnN0aXR1dGlvbiIsImluc3RpdHV0aW9uYWwiLCJpbnN0cnVjdGlvbiIsImluc3RydWN0b3IiLCJpbnN0cnVtZW50IiwiaW5zdXJhbmNlIiwiaW50ZWxsZWN0dWFsIiwiaW50ZWxsaWdlbmNlIiwiaW50ZW5kIiwiaW50ZW5zZSIsImludGVuc2l0eSIsImludGVudGlvbiIsImludGVyYWN0aW9uIiwiaW50ZXJlc3QiLCJpbnRlcmVzdGVkIiwiaW50ZXJlc3RpbmciLCJpbnRlcm5hbCIsImludGVybmF0aW9uYWwiLCJJbnRlcm5ldCIsImludGVycHJldCIsImludGVycHJldGF0aW9uIiwiaW50ZXJ2ZW50aW9uIiwiaW50ZXJ2aWV3IiwiaW50byIsImludHJvZHVjZSIsImludHJvZHVjdGlvbiIsImludmFzaW9uIiwiaW52ZXN0IiwiaW52ZXN0aWdhdGUiLCJpbnZlc3RpZ2F0aW9uIiwiaW52ZXN0aWdhdG9yIiwiaW52ZXN0bWVudCIsImludmVzdG9yIiwiaW52aXRlIiwiaW52b2x2ZSIsImludm9sdmVkIiwiaW52b2x2ZW1lbnQiLCJJcmFxaSIsIklyaXNoIiwiaXJvbiIsIklzbGFtaWMiLCJpc2xhbmQiLCJJc3JhZWxpIiwiaXNzdWUiLCJpdCIsIkl0YWxpYW4iLCJpdGVtIiwiaXRzIiwiaXRzZWxmIiwiamFja2V0IiwiamFpbCIsIkphcGFuZXNlIiwiamV0IiwiSmV3IiwiSmV3aXNoIiwiam9iIiwiam9pbiIsImpvaW50Iiwiam9rZSIsImpvdXJuYWwiLCJqb3VybmFsaXN0Iiwiam91cm5leSIsImpveSIsImp1ZGdlIiwianVkZ21lbnQiLCJqdWljZSIsImp1bXAiLCJqdW5pb3IiLCJqdXJ5IiwianVzdCIsImp1c3RpY2UiLCJqdXN0aWZ5Iiwia2VlcCIsImtleSIsImtpY2siLCJraWQiLCJraWxsIiwia2lsbGVyIiwia2lsbGluZyIsImtpbmQiLCJraW5nIiwia2lzcyIsImtpdGNoZW4iLCJrbmVlIiwia25pZmUiLCJrbm9jayIsImtub3ciLCJrbm93bGVkZ2UiLCJsYWIiLCJsYWJlbCIsImxhYm9yIiwibGFib3JhdG9yeSIsImxhY2siLCJsYWR5IiwibGFrZSIsImxhbmQiLCJsYW5kc2NhcGUiLCJsYW5ndWFnZSIsImxhcCIsImxhcmdlIiwibGFyZ2VseSIsImxhc3QiLCJsYXRlIiwibGF0ZXIiLCJMYXRpbiIsImxhdHRlciIsImxhdWdoIiwibGF1bmNoIiwibGF3IiwibGF3biIsImxhd3N1aXQiLCJsYXd5ZXIiLCJsYXkiLCJsYXllciIsImxlYWQiLCJsZWFkZXIiLCJsZWFkZXJzaGlwIiwibGVhZGluZyIsImxlYWYiLCJsZWFndWUiLCJsZWFuIiwibGVhcm4iLCJsZWFybmluZyIsImxlYXN0IiwibGVhdGhlciIsImxlYXZlIiwibGVmdCIsImxlZyIsImxlZ2FjeSIsImxlZ2FsIiwibGVnZW5kIiwibGVnaXNsYXRpb24iLCJsZWdpdGltYXRlIiwibGVtb24iLCJsZW5ndGgiLCJsZXNzIiwibGVzc29uIiwibGV0IiwibGV0dGVyIiwibGV2ZWwiLCJsaWJlcmFsIiwibGlicmFyeSIsImxpY2Vuc2UiLCJsaWUiLCJsaWZlIiwibGlmZXN0eWxlIiwibGlmZXRpbWUiLCJsaWZ0IiwibGlnaHQiLCJsaWtlIiwibGlrZWx5IiwibGltaXQiLCJsaW1pdGF0aW9uIiwibGltaXRlZCIsImxpbmUiLCJsaW5rIiwibGlwIiwibGlzdCIsImxpc3RlbiIsImxpdGVyYWxseSIsImxpdGVyYXJ5IiwibGl0ZXJhdHVyZSIsImxpdHRsZSIsImxpdmUiLCJsaXZpbmciLCJsb2FkIiwibG9hbiIsImxvY2FsIiwibG9jYXRlIiwibG9jYXRpb24iLCJsb2NrIiwibG9uZyIsImxvb2siLCJsb29zZSIsImxvc2UiLCJsb3NzIiwibG9zdCIsImxvdCIsImxvdHMiLCJsb3VkIiwibG92ZSIsImxvdmVseSIsImxvdmVyIiwibG93IiwibG93ZXIiLCJsdWNrIiwibHVja3kiLCJsdW5jaCIsImx1bmciLCJtYWNoaW5lIiwibWFkIiwibWFnYXppbmUiLCJtYWlsIiwibWFpbiIsIm1haW5seSIsIm1haW50YWluIiwibWFpbnRlbmFuY2UiLCJtYWpvciIsIm1ham9yaXR5IiwibWFrZSIsIm1ha2VyIiwibWFrZXVwIiwibWFsZSIsIm1hbGwiLCJtYW4iLCJtYW5hZ2UiLCJtYW5hZ2VtZW50IiwibWFuYWdlciIsIm1hbm5lciIsIm1hbnVmYWN0dXJlciIsIm1hbnVmYWN0dXJpbmciLCJtYW55IiwibWFwIiwibWFyZ2luIiwibWFyayIsIm1hcmtldCIsIm1hcmtldGluZyIsIm1hcnJpYWdlIiwibWFycmllZCIsIm1hcnJ5IiwibWFzayIsIm1hc3MiLCJtYXNzaXZlIiwibWFzdGVyIiwibWF0Y2giLCJtYXRlcmlhbCIsIm1hdGgiLCJtYXR0ZXIiLCJtYXkiLCJtYXliZSIsIm1heW9yIiwibWUiLCJtZWFsIiwibWVhbiIsIm1lYW5pbmciLCJtZWFud2hpbGUiLCJtZWFzdXJlIiwibWVhc3VyZW1lbnQiLCJtZWF0IiwibWVjaGFuaXNtIiwibWVkaWEiLCJtZWRpY2FsIiwibWVkaWNhdGlvbiIsIm1lZGljaW5lIiwibWVkaXVtIiwibWVldCIsIm1lZXRpbmciLCJtZW1iZXIiLCJtZW1iZXJzaGlwIiwibWVtb3J5IiwibWVudGFsIiwibWVudGlvbiIsIm1lbnUiLCJtZXJlIiwibWVyZWx5IiwibWVzcyIsIm1ldGFsIiwibWV0ZXIiLCJtZXRob2QiLCJNZXhpY2FuIiwibWlkZGxlIiwibWlnaHQiLCJtaWxpdGFyeSIsIm1pbGsiLCJtaWxsaW9uIiwibWluZCIsIm1pbmUiLCJtaW5pc3RlciIsIm1pbm9yIiwibWlub3JpdHkiLCJtaW51dGUiLCJtaXJhY2xlIiwibWlycm9yIiwibWlzcyIsIm1pc3NpbGUiLCJtaXNzaW9uIiwibWlzdGFrZSIsIm1peCIsIm1peHR1cmUiLCJtb2RlIiwibW9kZWwiLCJtb2RlcmF0ZSIsIm1vZGVybiIsIm1vZGVzdCIsIm1vbSIsIm1vbWVudCIsIm1vbmV5IiwibW9uaXRvciIsIm1vbnRoIiwibW9vZCIsIm1vb24iLCJtb3JhbCIsIm1vcmUiLCJtb3Jlb3ZlciIsIm1vcm5pbmciLCJtb3J0Z2FnZSIsIm1vc3QiLCJtb3N0bHkiLCJtb3RoZXIiLCJtb3Rpb24iLCJtb3RpdmF0aW9uIiwibW90b3IiLCJtb3VudCIsIm1vdW50YWluIiwibW91c2UiLCJtb3V0aCIsIm1vdmUiLCJtb3ZlbWVudCIsIm1vdmllIiwiTXIiLCJNcnMiLCJNcyIsIm11Y2giLCJtdWx0aXBsZSIsIm11cmRlciIsIm11c2NsZSIsIm11c2V1bSIsIm11c2ljIiwibXVzaWNhbCIsIm11c2ljaWFuIiwiTXVzbGltIiwibXVzdCIsIm11dHVhbCIsIm15IiwibXlzZWxmIiwibXlzdGVyeSIsIm15dGgiLCJuYWtlZCIsIm5hcnJhdGl2ZSIsIm5hcnJvdyIsIm5hdGlvbiIsIm5hdGlvbmFsIiwibmF0aXZlIiwibmF0dXJhbCIsIm5hdHVyYWxseSIsIm5hdHVyZSIsIm5lYXIiLCJuZWFyYnkiLCJuZWFybHkiLCJuZWNlc3NhcmlseSIsIm5lY2Vzc2FyeSIsIm5lY2siLCJuZWVkIiwibmVnYXRpdmUiLCJuZWdvdGlhdGUiLCJuZWdvdGlhdGlvbiIsIm5laWdoYm9yIiwibmVpZ2hib3Job29kIiwibmVpdGhlciIsIm5lcnZlIiwibmVydm91cyIsIm5ldCIsIm5ldHdvcmsiLCJuZXZlciIsIm5ldmVydGhlbGVzcyIsIm5ldyIsIm5ld2x5IiwibmV3cyIsIm5ld3NwYXBlciIsIm5leHQiLCJuaWNlIiwibmlnaHQiLCJuaW5lIiwibm8iLCJub2JvZHkiLCJub2QiLCJub2lzZSIsIm5vbWluYXRpb24iLCJub25lIiwibm9uZXRoZWxlc3MiLCJub3IiLCJub3JtYWwiLCJub3JtYWxseSIsIm5vcnRoIiwibm9ydGhlcm4iLCJub3NlIiwibm90Iiwibm90ZSIsIm5vdGhpbmciLCJub3RpY2UiLCJub3Rpb24iLCJub3ZlbCIsIm5vdyIsIm5vd2hlcmUiLCJudWNsZWFyIiwibnVtYmVyIiwibnVtZXJvdXMiLCJudXJzZSIsIm51dCIsIm9iamVjdCIsIm9iamVjdGl2ZSIsIm9ibGlnYXRpb24iLCJvYnNlcnZhdGlvbiIsIm9ic2VydmUiLCJvYnNlcnZlciIsIm9idGFpbiIsIm9idmlvdXMiLCJvYnZpb3VzbHkiLCJvY2Nhc2lvbiIsIm9jY2FzaW9uYWxseSIsIm9jY3VwYXRpb24iLCJvY2N1cHkiLCJvY2N1ciIsIm9jZWFuIiwib2RkIiwib2RkcyIsIm9mIiwib2ZmIiwib2ZmZW5zZSIsIm9mZmVuc2l2ZSIsIm9mZmVyIiwib2ZmaWNlIiwib2ZmaWNlciIsIm9mZmljaWFsIiwib2Z0ZW4iLCJvaCIsIm9pbCIsIm9rIiwib2theSIsIm9sZCIsIk9seW1waWMiLCJvbiIsIm9uY2UiLCJvbmUiLCJvbmdvaW5nIiwib25pb24iLCJvbmxpbmUiLCJvbmx5Iiwib250byIsIm9wZW4iLCJvcGVuaW5nIiwib3BlcmF0ZSIsIm9wZXJhdGluZyIsIm9wZXJhdGlvbiIsIm9wZXJhdG9yIiwib3BpbmlvbiIsIm9wcG9uZW50Iiwib3Bwb3J0dW5pdHkiLCJvcHBvc2UiLCJvcHBvc2l0ZSIsIm9wcG9zaXRpb24iLCJvcHRpb24iLCJvciIsIm9yYW5nZSIsIm9yZGVyIiwib3JkaW5hcnkiLCJvcmdhbmljIiwib3JnYW5pemF0aW9uIiwib3JnYW5pemUiLCJvcmllbnRhdGlvbiIsIm9yaWdpbiIsIm9yaWdpbmFsIiwib3JpZ2luYWxseSIsIm90aGVyIiwib3RoZXJzIiwib3RoZXJ3aXNlIiwib3VnaHQiLCJvdXIiLCJvdXJzZWx2ZXMiLCJvdXQiLCJvdXRjb21lIiwib3V0c2lkZSIsIm92ZW4iLCJvdmVyIiwib3ZlcmFsbCIsIm92ZXJjb21lIiwib3Zlcmxvb2siLCJvd2UiLCJvd24iLCJvd25lciIsInBhY2UiLCJwYWNrIiwicGFja2FnZSIsInBhZ2UiLCJwYWluIiwicGFpbmZ1bCIsInBhaW50IiwicGFpbnRlciIsInBhaW50aW5nIiwicGFpciIsInBhbGUiLCJQYWxlc3RpbmlhbiIsInBhbG0iLCJwYW4iLCJwYW5lbCIsInBhbnQiLCJwYXBlciIsInBhcmVudCIsInBhcmsiLCJwYXJraW5nIiwicGFydCIsInBhcnRpY2lwYW50IiwicGFydGljaXBhdGUiLCJwYXJ0aWNpcGF0aW9uIiwicGFydGljdWxhciIsInBhcnRpY3VsYXJseSIsInBhcnRseSIsInBhcnRuZXIiLCJwYXJ0bmVyc2hpcCIsInBhcnR5IiwicGFzcyIsInBhc3NhZ2UiLCJwYXNzZW5nZXIiLCJwYXNzaW9uIiwicGFzdCIsInBhdGNoIiwicGF0aCIsInBhdGllbnQiLCJwYXR0ZXJuIiwicGF1c2UiLCJwYXkiLCJwYXltZW50IiwiUEMiLCJwZWFjZSIsInBlYWsiLCJwZWVyIiwicGVuYWx0eSIsInBlb3BsZSIsInBlcHBlciIsInBlciIsInBlcmNlaXZlIiwicGVyY2VudGFnZSIsInBlcmNlcHRpb24iLCJwZXJmZWN0IiwicGVyZmVjdGx5IiwicGVyZm9ybSIsInBlcmZvcm1hbmNlIiwicGVyaGFwcyIsInBlcmlvZCIsInBlcm1hbmVudCIsInBlcm1pc3Npb24iLCJwZXJtaXQiLCJwZXJzb24iLCJwZXJzb25hbCIsInBlcnNvbmFsaXR5IiwicGVyc29uYWxseSIsInBlcnNvbm5lbCIsInBlcnNwZWN0aXZlIiwicGVyc3VhZGUiLCJwZXQiLCJwaGFzZSIsInBoZW5vbWVub24iLCJwaGlsb3NvcGh5IiwicGhvbmUiLCJwaG90byIsInBob3RvZ3JhcGgiLCJwaG90b2dyYXBoZXIiLCJwaHJhc2UiLCJwaHlzaWNhbCIsInBoeXNpY2FsbHkiLCJwaHlzaWNpYW4iLCJwaWFubyIsInBpY2siLCJwaWN0dXJlIiwicGllIiwicGllY2UiLCJwaWxlIiwicGlsb3QiLCJwaW5lIiwicGluayIsInBpcGUiLCJwaXRjaCIsInBsYWNlIiwicGxhbiIsInBsYW5lIiwicGxhbmV0IiwicGxhbm5pbmciLCJwbGFudCIsInBsYXN0aWMiLCJwbGF0ZSIsInBsYXRmb3JtIiwicGxheSIsInBsYXllciIsInBsZWFzZSIsInBsZWFzdXJlIiwicGxlbnR5IiwicGxvdCIsInBsdXMiLCJQTSIsInBvY2tldCIsInBvZW0iLCJwb2V0IiwicG9ldHJ5IiwicG9pbnQiLCJwb2xlIiwicG9saWNlIiwicG9saWN5IiwicG9saXRpY2FsIiwicG9saXRpY2FsbHkiLCJwb2xpdGljaWFuIiwicG9saXRpY3MiLCJwb2xsIiwicG9sbHV0aW9uIiwicG9vbCIsInBvb3IiLCJwb3AiLCJwb3B1bGFyIiwicG9wdWxhdGlvbiIsInBvcmNoIiwicG9ydCIsInBvcnRpb24iLCJwb3J0cmFpdCIsInBvcnRyYXkiLCJwb3NlIiwicG9zaXRpb24iLCJwb3NpdGl2ZSIsInBvc3Nlc3MiLCJwb3NzaWJpbGl0eSIsInBvc3NpYmxlIiwicG9zc2libHkiLCJwb3N0IiwicG90IiwicG90YXRvIiwicG90ZW50aWFsIiwicG90ZW50aWFsbHkiLCJwb3VuZCIsInBvdXIiLCJwb3ZlcnR5IiwicG93ZGVyIiwicG93ZXIiLCJwb3dlcmZ1bCIsInByYWN0aWNhbCIsInByYWN0aWNlIiwicHJheSIsInByYXllciIsInByZWNpc2VseSIsInByZWRpY3QiLCJwcmVmZXIiLCJwcmVmZXJlbmNlIiwicHJlZ25hbmN5IiwicHJlZ25hbnQiLCJwcmVwYXJhdGlvbiIsInByZXBhcmUiLCJwcmVzY3JpcHRpb24iLCJwcmVzZW5jZSIsInByZXNlbnQiLCJwcmVzZW50YXRpb24iLCJwcmVzZXJ2ZSIsInByZXNpZGVudCIsInByZXNpZGVudGlhbCIsInByZXNzIiwicHJlc3N1cmUiLCJwcmV0ZW5kIiwicHJldHR5IiwicHJldmVudCIsInByZXZpb3VzIiwicHJldmlvdXNseSIsInByaWNlIiwicHJpZGUiLCJwcmllc3QiLCJwcmltYXJpbHkiLCJwcmltYXJ5IiwicHJpbWUiLCJwcmluY2lwYWwiLCJwcmluY2lwbGUiLCJwcmludCIsInByaW9yIiwicHJpb3JpdHkiLCJwcmlzb24iLCJwcmlzb25lciIsInByaXZhY3kiLCJwcml2YXRlIiwicHJvYmFibHkiLCJwcm9ibGVtIiwicHJvY2VkdXJlIiwicHJvY2VlZCIsInByb2Nlc3MiLCJwcm9kdWNlIiwicHJvZHVjZXIiLCJwcm9kdWN0IiwicHJvZHVjdGlvbiIsInByb2Zlc3Npb24iLCJwcm9mZXNzaW9uYWwiLCJwcm9mZXNzb3IiLCJwcm9maWxlIiwicHJvZml0IiwicHJvZ3JhbSIsInByb2dyZXNzIiwicHJvamVjdCIsInByb21pbmVudCIsInByb21pc2UiLCJwcm9tb3RlIiwicHJvbXB0IiwicHJvb2YiLCJwcm9wZXIiLCJwcm9wZXJseSIsInByb3BlcnR5IiwicHJvcG9ydGlvbiIsInByb3Bvc2FsIiwicHJvcG9zZSIsInByb3Bvc2VkIiwicHJvc2VjdXRvciIsInByb3NwZWN0IiwicHJvdGVjdCIsInByb3RlY3Rpb24iLCJwcm90ZWluIiwicHJvdGVzdCIsInByb3VkIiwicHJvdmUiLCJwcm92aWRlIiwicHJvdmlkZXIiLCJwcm92aW5jZSIsInByb3Zpc2lvbiIsInBzeWNob2xvZ2ljYWwiLCJwc3ljaG9sb2dpc3QiLCJwc3ljaG9sb2d5IiwicHVibGljIiwicHVibGljYXRpb24iLCJwdWJsaWNseSIsInB1Ymxpc2giLCJwdWJsaXNoZXIiLCJwdWxsIiwicHVuaXNobWVudCIsInB1cmNoYXNlIiwicHVyZSIsInB1cnBvc2UiLCJwdXJzdWUiLCJwdXNoIiwicHV0IiwicXVhbGlmeSIsInF1YWxpdHkiLCJxdWFydGVyIiwicXVhcnRlcmJhY2siLCJxdWVzdGlvbiIsInF1aWNrIiwicXVpY2tseSIsInF1aWV0IiwicXVpZXRseSIsInF1aXQiLCJxdWl0ZSIsInF1b3RlIiwicmFjZSIsInJhY2lhbCIsInJhZGljYWwiLCJyYWRpbyIsInJhaWwiLCJyYWluIiwicmFpc2UiLCJyYW5nZSIsInJhbmsiLCJyYXBpZCIsInJhcGlkbHkiLCJyYXJlIiwicmFyZWx5IiwicmF0ZSIsInJhdGhlciIsInJhdGluZyIsInJhdGlvIiwicmF3IiwicmVhY2giLCJyZWFjdCIsInJlYWN0aW9uIiwicmVhZCIsInJlYWRlciIsInJlYWRpbmciLCJyZWFkeSIsInJlYWwiLCJyZWFsaXR5IiwicmVhbGl6ZSIsInJlYWxseSIsInJlYXNvbiIsInJlYXNvbmFibGUiLCJyZWNhbGwiLCJyZWNlaXZlIiwicmVjZW50IiwicmVjZW50bHkiLCJyZWNpcGUiLCJyZWNvZ25pdGlvbiIsInJlY29nbml6ZSIsInJlY29tbWVuZCIsInJlY29tbWVuZGF0aW9uIiwicmVjb3JkIiwicmVjb3JkaW5nIiwicmVjb3ZlciIsInJlY292ZXJ5IiwicmVjcnVpdCIsInJlZCIsInJlZHVjZSIsInJlZHVjdGlvbiIsInJlZmVyIiwicmVmZXJlbmNlIiwicmVmbGVjdCIsInJlZmxlY3Rpb24iLCJyZWZvcm0iLCJyZWZ1Z2VlIiwicmVmdXNlIiwicmVnYXJkIiwicmVnYXJkaW5nIiwicmVnYXJkbGVzcyIsInJlZ2ltZSIsInJlZ2lvbiIsInJlZ2lvbmFsIiwicmVnaXN0ZXIiLCJyZWd1bGFyIiwicmVndWxhcmx5IiwicmVndWxhdGUiLCJyZWd1bGF0aW9uIiwicmVpbmZvcmNlIiwicmVqZWN0IiwicmVsYXRlIiwicmVsYXRpb24iLCJyZWxhdGlvbnNoaXAiLCJyZWxhdGl2ZSIsInJlbGF0aXZlbHkiLCJyZWxheCIsInJlbGVhc2UiLCJyZWxldmFudCIsInJlbGllZiIsInJlbGlnaW9uIiwicmVsaWdpb3VzIiwicmVseSIsInJlbWFpbiIsInJlbWFpbmluZyIsInJlbWFya2FibGUiLCJyZW1lbWJlciIsInJlbWluZCIsInJlbW90ZSIsInJlbW92ZSIsInJlcGVhdCIsInJlcGVhdGVkbHkiLCJyZXBsYWNlIiwicmVwbHkiLCJyZXBvcnQiLCJyZXBvcnRlciIsInJlcHJlc2VudCIsInJlcHJlc2VudGF0aW9uIiwicmVwcmVzZW50YXRpdmUiLCJSZXB1YmxpY2FuIiwicmVwdXRhdGlvbiIsInJlcXVlc3QiLCJyZXF1aXJlIiwicmVxdWlyZW1lbnQiLCJyZXNlYXJjaCIsInJlc2VhcmNoZXIiLCJyZXNlbWJsZSIsInJlc2VydmF0aW9uIiwicmVzaWRlbnQiLCJyZXNpc3QiLCJyZXNpc3RhbmNlIiwicmVzb2x2ZSIsInJlc29ydCIsInJlc291cmNlIiwicmVzcGVjdCIsInJlc3BvbmQiLCJyZXNwb25kZW50IiwicmVzcG9uc2UiLCJyZXNwb25zaWJpbGl0eSIsInJlc3BvbnNpYmxlIiwicmVzdCIsInJlc3RhdXJhbnQiLCJyZXN0b3JlIiwicmVzdHJpY3Rpb24iLCJyZXN1bHQiLCJyZXRhaW4iLCJyZXRpcmUiLCJyZXRpcmVtZW50IiwicmV0dXJuIiwicmV2ZWFsIiwicmV2ZW51ZSIsInJldmlldyIsInJldm9sdXRpb24iLCJyaHl0aG0iLCJyaWNlIiwicmljaCIsInJpZCIsInJpZGUiLCJyaWZsZSIsInJpZ2h0IiwicmluZyIsInJpc2UiLCJyaXNrIiwicml2ZXIiLCJyb2FkIiwicm9jayIsInJvbGUiLCJyb2xsIiwicm9tYW50aWMiLCJyb29mIiwicm9vbSIsInJvb3QiLCJyb3BlIiwicm9zZSIsInJvdWdoIiwicm91Z2hseSIsInJvdW5kIiwicm91dGUiLCJyb3V0aW5lIiwicm93IiwicnViIiwicnVsZSIsInJ1biIsInJ1bm5pbmciLCJydXJhbCIsInJ1c2giLCJSdXNzaWFuIiwic2FjcmVkIiwic2FkIiwic2FmZSIsInNhZmV0eSIsInNha2UiLCJzYWxhZCIsInNhbGFyeSIsInNhbGUiLCJzYWxlcyIsInNhbHQiLCJzYW1lIiwic2FtcGxlIiwic2FuY3Rpb24iLCJzYW5kIiwic2F0ZWxsaXRlIiwic2F0aXNmYWN0aW9uIiwic2F0aXNmeSIsInNhdWNlIiwic2F2ZSIsInNhdmluZyIsInNheSIsInNjYWxlIiwic2NhbmRhbCIsInNjYXJlZCIsInNjZW5hcmlvIiwic2NlbmUiLCJzY2hlZHVsZSIsInNjaGVtZSIsInNjaG9sYXIiLCJzY2hvbGFyc2hpcCIsInNjaG9vbCIsInNjaWVuY2UiLCJzY2llbnRpZmljIiwic2NpZW50aXN0Iiwic2NvcGUiLCJzY29yZSIsInNjcmVhbSIsInNjcmVlbiIsInNjcmlwdCIsInNlYSIsInNlYXJjaCIsInNlYXNvbiIsInNlYXQiLCJzZWNvbmQiLCJzZWNyZXQiLCJzZWNyZXRhcnkiLCJzZWN0aW9uIiwic2VjdG9yIiwic2VjdXJlIiwic2VjdXJpdHkiLCJzZWUiLCJzZWVkIiwic2VlayIsInNlZW0iLCJzZWdtZW50Iiwic2VpemUiLCJzZWxlY3QiLCJzZWxlY3Rpb24iLCJzZWxmIiwic2VsbCIsIlNlbmF0ZSIsInNlbmF0b3IiLCJzZW5kIiwic2VuaW9yIiwic2Vuc2UiLCJzZW5zaXRpdmUiLCJzZW50ZW5jZSIsInNlcGFyYXRlIiwic2VxdWVuY2UiLCJzZXJpZXMiLCJzZXJpb3VzIiwic2VyaW91c2x5Iiwic2VydmUiLCJzZXJ2aWNlIiwic2Vzc2lvbiIsInNldCIsInNldHRpbmciLCJzZXR0bGUiLCJzZXR0bGVtZW50Iiwic2V2ZW4iLCJzZXZlcmFsIiwic2V2ZXJlIiwic2V4Iiwic2V4dWFsIiwic2hhZGUiLCJzaGFkb3ciLCJzaGFrZSIsInNoYWxsIiwic2hhcGUiLCJzaGFyZSIsInNoYXJwIiwic2hlIiwic2hlZXQiLCJzaGVsZiIsInNoZWxsIiwic2hlbHRlciIsInNoaWZ0Iiwic2hpbmUiLCJzaGlwIiwic2hpcnQiLCJzaGl0Iiwic2hvY2siLCJzaG9lIiwic2hvb3QiLCJzaG9vdGluZyIsInNob3AiLCJzaG9wcGluZyIsInNob3JlIiwic2hvcnQiLCJzaG9ydGx5Iiwic2hvdCIsInNob3VsZCIsInNob3VsZGVyIiwic2hvdXQiLCJzaG93Iiwic2hvd2VyIiwic2hydWciLCJzaHV0Iiwic2ljayIsInNpZGUiLCJzaWdoIiwic2lnaHQiLCJzaWduIiwic2lnbmFsIiwic2lnbmlmaWNhbmNlIiwic2lnbmlmaWNhbnQiLCJzaWduaWZpY2FudGx5Iiwic2lsZW5jZSIsInNpbGVudCIsInNpbHZlciIsInNpbWlsYXIiLCJzaW1pbGFybHkiLCJzaW1wbGUiLCJzaW1wbHkiLCJzaW4iLCJzaW5jZSIsInNpbmciLCJzaW5nZXIiLCJzaW5nbGUiLCJzaW5rIiwic2lyIiwic2lzdGVyIiwic2l0Iiwic2l0ZSIsInNpdHVhdGlvbiIsInNpeCIsInNpemUiLCJza2kiLCJza2lsbCIsInNraW4iLCJza3kiLCJzbGF2ZSIsInNsZWVwIiwic2xpY2UiLCJzbGlkZSIsInNsaWdodCIsInNsaWdodGx5Iiwic2xpcCIsInNsb3ciLCJzbG93bHkiLCJzbWFsbCIsInNtYXJ0Iiwic21lbGwiLCJzbWlsZSIsInNtb2tlIiwic21vb3RoIiwic25hcCIsInNub3ciLCJzbyIsInNvY2NlciIsInNvY2lhbCIsInNvY2lldHkiLCJzb2Z0Iiwic29mdHdhcmUiLCJzb2lsIiwic29sYXIiLCJzb2xkaWVyIiwic29saWQiLCJzb2x1dGlvbiIsInNvbHZlIiwic29tZSIsInNvbWVib2R5Iiwic29tZWhvdyIsInNvbWVvbmUiLCJzb21ldGhpbmciLCJzb21ldGltZXMiLCJzb21ld2hhdCIsInNvbWV3aGVyZSIsInNvbiIsInNvbmciLCJzb29uIiwic29waGlzdGljYXRlZCIsInNvcnJ5Iiwic29ydCIsInNvdWwiLCJzb3VuZCIsInNvdXAiLCJzb3VyY2UiLCJzb3V0aCIsInNvdXRoZXJuIiwiU292aWV0Iiwic3BhY2UiLCJTcGFuaXNoIiwic3BlYWsiLCJzcGVha2VyIiwic3BlY2lhbCIsInNwZWNpYWxpc3QiLCJzcGVjaWVzIiwic3BlY2lmaWMiLCJzcGVjaWZpY2FsbHkiLCJzcGVlY2giLCJzcGVlZCIsInNwZW5kIiwic3BlbmRpbmciLCJzcGluIiwic3Bpcml0Iiwic3Bpcml0dWFsIiwic3BsaXQiLCJzcG9rZXNtYW4iLCJzcG9ydCIsInNwb3QiLCJzcHJlYWQiLCJzcHJpbmciLCJzcXVhcmUiLCJzcXVlZXplIiwic3RhYmlsaXR5Iiwic3RhYmxlIiwic3RhZmYiLCJzdGFnZSIsInN0YWlyIiwic3Rha2UiLCJzdGFuZCIsInN0YW5kYXJkIiwic3RhbmRpbmciLCJzdGFyIiwic3RhcmUiLCJzdGFydCIsInN0YXRlIiwic3RhdGVtZW50Iiwic3RhdGlvbiIsInN0YXRpc3RpY3MiLCJzdGF0dXMiLCJzdGF5Iiwic3RlYWR5Iiwic3RlYWwiLCJzdGVlbCIsInN0ZXAiLCJzdGljayIsInN0aWxsIiwic3RpciIsInN0b2NrIiwic3RvbWFjaCIsInN0b25lIiwic3RvcCIsInN0b3JhZ2UiLCJzdG9yZSIsInN0b3JtIiwic3RvcnkiLCJzdHJhaWdodCIsInN0cmFuZ2UiLCJzdHJhbmdlciIsInN0cmF0ZWdpYyIsInN0cmF0ZWd5Iiwic3RyZWFtIiwic3RyZWV0Iiwic3RyZW5ndGgiLCJzdHJlbmd0aGVuIiwic3RyZXNzIiwic3RyZXRjaCIsInN0cmlrZSIsInN0cmluZyIsInN0cmlwIiwic3Ryb2tlIiwic3Ryb25nIiwic3Ryb25nbHkiLCJzdHJ1Y3R1cmUiLCJzdHJ1Z2dsZSIsInN0dWRlbnQiLCJzdHVkaW8iLCJzdHVkeSIsInN0dWZmIiwic3R1cGlkIiwic3R5bGUiLCJzdWJqZWN0Iiwic3VibWl0Iiwic3Vic2VxdWVudCIsInN1YnN0YW5jZSIsInN1YnN0YW50aWFsIiwic3VjY2VlZCIsInN1Y2Nlc3MiLCJzdWNjZXNzZnVsIiwic3VjY2Vzc2Z1bGx5Iiwic3VjaCIsInN1ZGRlbiIsInN1ZGRlbmx5Iiwic3VlIiwic3VmZmVyIiwic3VmZmljaWVudCIsInN1Z2FyIiwic3VnZ2VzdCIsInN1Z2dlc3Rpb24iLCJzdWljaWRlIiwic3VpdCIsInN1bW1lciIsInN1bW1pdCIsInN1biIsInN1cGVyIiwic3VwcGx5Iiwic3VwcG9ydCIsInN1cHBvcnRlciIsInN1cHBvc2UiLCJzdXBwb3NlZCIsIlN1cHJlbWUiLCJzdXJlIiwic3VyZWx5Iiwic3VyZmFjZSIsInN1cmdlcnkiLCJzdXJwcmlzZSIsInN1cnByaXNlZCIsInN1cnByaXNpbmciLCJzdXJwcmlzaW5nbHkiLCJzdXJyb3VuZCIsInN1cnZleSIsInN1cnZpdmFsIiwic3Vydml2ZSIsInN1cnZpdm9yIiwic3VzcGVjdCIsInN1c3RhaW4iLCJzd2VhciIsInN3ZWVwIiwic3dlZXQiLCJzd2ltIiwic3dpbmciLCJzd2l0Y2giLCJzeW1ib2wiLCJzeW1wdG9tIiwic3lzdGVtIiwidGFibGUiLCJ0YWJsZXNwb29uIiwidGFjdGljIiwidGFpbCIsInRha2UiLCJ0YWxlIiwidGFsZW50IiwidGFsayIsInRhbGwiLCJ0YW5rIiwidGFwIiwidGFwZSIsInRhcmdldCIsInRhc2siLCJ0YXN0ZSIsInRheCIsInRheHBheWVyIiwidGVhIiwidGVhY2giLCJ0ZWFjaGVyIiwidGVhY2hpbmciLCJ0ZWFtIiwidGVhciIsInRlYXNwb29uIiwidGVjaG5pY2FsIiwidGVjaG5pcXVlIiwidGVjaG5vbG9neSIsInRlZW4iLCJ0ZWVuYWdlciIsInRlbGVwaG9uZSIsInRlbGVzY29wZSIsInRlbGV2aXNpb24iLCJ0ZWxsIiwidGVtcGVyYXR1cmUiLCJ0ZW1wb3JhcnkiLCJ0ZW4iLCJ0ZW5kIiwidGVuZGVuY3kiLCJ0ZW5uaXMiLCJ0ZW5zaW9uIiwidGVudCIsInRlcm0iLCJ0ZXJtcyIsInRlcnJpYmxlIiwidGVycml0b3J5IiwidGVycm9yIiwidGVycm9yaXNtIiwidGVycm9yaXN0IiwidGVzdCIsInRlc3RpZnkiLCJ0ZXN0aW1vbnkiLCJ0ZXN0aW5nIiwidGV4dCIsInRoYW4iLCJ0aGFuayIsInRoYW5rcyIsInRoYXQiLCJ0aGUiLCJ0aGVhdGVyIiwidGhlaXIiLCJ0aGVtIiwidGhlbWUiLCJ0aGVtc2VsdmVzIiwidGhlbiIsInRoZW9yeSIsInRoZXJhcHkiLCJ0aGVyZSIsInRoZXJlZm9yZSIsInRoZXNlIiwidGhleSIsInRoaWNrIiwidGhpbiIsInRoaW5nIiwidGhpbmsiLCJ0aGlua2luZyIsInRoaXJkIiwidGhpcnR5IiwidGhpcyIsInRob3NlIiwidGhvdWdoIiwidGhvdWdodCIsInRob3VzYW5kIiwidGhyZWF0IiwidGhyZWF0ZW4iLCJ0aHJlZSIsInRocm9hdCIsInRocm91Z2giLCJ0aHJvdWdob3V0IiwidGhyb3ciLCJ0aHVzIiwidGlja2V0IiwidGllIiwidGlnaHQiLCJ0aW1lIiwidGlueSIsInRpcCIsInRpcmUiLCJ0aXJlZCIsInRpc3N1ZSIsInRvIiwidG9iYWNjbyIsInRvZGF5IiwidG9lIiwidG9nZXRoZXIiLCJ0b21hdG8iLCJ0b21vcnJvdyIsInRvbmUiLCJ0b25ndWUiLCJ0b25pZ2h0IiwidG9vIiwidG9vbCIsInRvb3RoIiwidG9wIiwidG9waWMiLCJ0b3NzIiwidG90YWwiLCJ0b3RhbGx5IiwidG91Y2giLCJ0b3VnaCIsInRvdXIiLCJ0b3VyaXN0IiwidG91cm5hbWVudCIsInRvd2FyZCIsInRvd2FyZHMiLCJ0b3dlciIsInRvd24iLCJ0b3kiLCJ0cmFjZSIsInRyYWNrIiwidHJhZGUiLCJ0cmFkaXRpb24iLCJ0cmFkaXRpb25hbCIsInRyYWZmaWMiLCJ0cmFnZWR5IiwidHJhaWwiLCJ0cmFpbiIsInRyYWluaW5nIiwidHJhbnNmZXIiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1hdGlvbiIsInRyYW5zaXRpb24iLCJ0cmFuc2xhdGUiLCJ0cmFuc3BvcnRhdGlvbiIsInRyYXZlbCIsInRyZWF0IiwidHJlYXRtZW50IiwidHJlYXR5IiwidHJlZSIsInRyZW1lbmRvdXMiLCJ0cmVuZCIsInRyaWFsIiwidHJpYmUiLCJ0cmljayIsInRyaXAiLCJ0cm9vcCIsInRyb3VibGUiLCJ0cnVjayIsInRydWUiLCJ0cnVseSIsInRydXN0IiwidHJ1dGgiLCJ0cnkiLCJ0dWJlIiwidHVubmVsIiwidHVybiIsIlRWIiwidHdlbHZlIiwidHdlbnR5IiwidHdpY2UiLCJ0d2luIiwidHdvIiwidHlwZSIsInR5cGljYWwiLCJ0eXBpY2FsbHkiLCJ1Z2x5IiwidWx0aW1hdGUiLCJ1bHRpbWF0ZWx5IiwidW5hYmxlIiwidW5jbGUiLCJ1bmRlciIsInVuZGVyZ28iLCJ1bmRlcnN0YW5kIiwidW5kZXJzdGFuZGluZyIsInVuZm9ydHVuYXRlbHkiLCJ1bmlmb3JtIiwidW5pb24iLCJ1bmlxdWUiLCJ1bml0IiwiVW5pdGVkIiwidW5pdmVyc2FsIiwidW5pdmVyc2UiLCJ1bml2ZXJzaXR5IiwidW5rbm93biIsInVubGVzcyIsInVubGlrZSIsInVubGlrZWx5IiwidW50aWwiLCJ1bnVzdWFsIiwidXAiLCJ1cG9uIiwidXBwZXIiLCJ1cmJhbiIsInVyZ2UiLCJ1cyIsInVzZSIsInVzZWQiLCJ1c2VmdWwiLCJ1c2VyIiwidXN1YWwiLCJ1c3VhbGx5IiwidXRpbGl0eSIsInZhY2F0aW9uIiwidmFsbGV5IiwidmFsdWFibGUiLCJ2YWx1ZSIsInZhcmlhYmxlIiwidmFyaWF0aW9uIiwidmFyaWV0eSIsInZhcmlvdXMiLCJ2YXJ5IiwidmFzdCIsInZlZ2V0YWJsZSIsInZlaGljbGUiLCJ2ZW50dXJlIiwidmVyc2lvbiIsInZlcnN1cyIsInZlcnkiLCJ2ZXNzZWwiLCJ2ZXRlcmFuIiwidmlhIiwidmljdGltIiwidmljdG9yeSIsInZpZGVvIiwidmlldyIsInZpZXdlciIsInZpbGxhZ2UiLCJ2aW9sYXRlIiwidmlvbGF0aW9uIiwidmlvbGVuY2UiLCJ2aW9sZW50IiwidmlydHVhbGx5IiwidmlydHVlIiwidmlydXMiLCJ2aXNpYmxlIiwidmlzaW9uIiwidmlzaXQiLCJ2aXNpdG9yIiwidmlzdWFsIiwidml0YWwiLCJ2b2ljZSIsInZvbHVtZSIsInZvbHVudGVlciIsInZvdGUiLCJ2b3RlciIsInZzIiwidnVsbmVyYWJsZSIsIndhZ2UiLCJ3YWl0Iiwid2FrZSIsIndhbGsiLCJ3YWxsIiwid2FuZGVyIiwid2FudCIsIndhciIsIndhcm0iLCJ3YXJuIiwid2FybmluZyIsIndhc2giLCJ3YXN0ZSIsIndhdGNoIiwid2F0ZXIiLCJ3YXZlIiwid2F5Iiwid2UiLCJ3ZWFrIiwid2VhbHRoIiwid2VhbHRoeSIsIndlYXBvbiIsIndlYXIiLCJ3ZWF0aGVyIiwid2VkZGluZyIsIndlZWsiLCJ3ZWVrZW5kIiwid2Vla2x5Iiwid2VpZ2giLCJ3ZWlnaHQiLCJ3ZWxjb21lIiwid2VsZmFyZSIsIndlbGwiLCJ3ZXN0Iiwid2VzdGVybiIsIndldCIsIndoYXQiLCJ3aGF0ZXZlciIsIndoZWVsIiwid2hlbiIsIndoZW5ldmVyIiwid2hlcmUiLCJ3aGVyZWFzIiwid2hldGhlciIsIndoaWNoIiwid2hpbGUiLCJ3aGlzcGVyIiwid2hpdGUiLCJ3aG8iLCJ3aG9sZSIsIndob20iLCJ3aG9zZSIsIndoeSIsIndpZGUiLCJ3aWRlbHkiLCJ3aWRlc3ByZWFkIiwid2lmZSIsIndpbGQiLCJ3aWxsIiwid2lsbGluZyIsIndpbiIsIndpbmQiLCJ3aW5kb3ciLCJ3aW5lIiwid2luZyIsIndpbm5lciIsIndpbnRlciIsIndpcGUiLCJ3aXJlIiwid2lzZG9tIiwid2lzZSIsIndpc2giLCJ3aXRoIiwid2l0aGRyYXciLCJ3aXRoaW4iLCJ3aXRob3V0Iiwid2l0bmVzcyIsIndvbWFuIiwid29uZGVyIiwid29uZGVyZnVsIiwid29vZCIsIndvb2RlbiIsIndvcmQiLCJ3b3JrIiwid29ya2VyIiwid29ya2luZyIsIndvcmtzIiwid29ya3Nob3AiLCJ3b3JsZCIsIndvcnJpZWQiLCJ3b3JyeSIsIndvcnRoIiwid291bGQiLCJ3b3VuZCIsIndyYXAiLCJ3cml0ZSIsIndyaXRlciIsIndyaXRpbmciLCJ3cm9uZyIsInlhcmQiLCJ5ZWFoIiwieWVhciIsInllbGwiLCJ5ZWxsb3ciLCJ5ZXMiLCJ5ZXN0ZXJkYXkiLCJ5ZXQiLCJ5aWVsZCIsInlvdSIsInlvdW5nIiwieW91ciIsInlvdXJzIiwieW91cnNlbGYiLCJ5b3V0aCIsInpvbmUiLCJUaGVNb3N0Q29tbW9uMTAwMDAiLCJhYSIsImFhYSIsImFhcm9uIiwiYWIiLCJhYmFuZG9uZWQiLCJhYmMiLCJhYmVyZGVlbiIsImFiaWxpdGllcyIsImFib3JpZ2luYWwiLCJhYnJhaGFtIiwiYWJzIiwiYWJzZW50IiwiYWJzb3JwdGlvbiIsImFic3RyYWN0IiwiYWJzdHJhY3RzIiwiYWJ1IiwiYWMiLCJhY2FkZW1pY3MiLCJhY2FkZW15IiwiYWNjIiwiYWNjZW50IiwiYWNjZXB0YWJsZSIsImFjY2VwdGFuY2UiLCJhY2NlcHRlZCIsImFjY2VwdGluZyIsImFjY2VwdHMiLCJhY2Nlc3NlZCIsImFjY2Vzc2liaWxpdHkiLCJhY2Nlc3NpYmxlIiwiYWNjZXNzaW5nIiwiYWNjZXNzb3JpZXMiLCJhY2Nlc3NvcnkiLCJhY2NpZGVudHMiLCJhY2NvbW1vZGF0ZSIsImFjY29tbW9kYXRpb24iLCJhY2NvbW1vZGF0aW9ucyIsImFjY29tcGFuaWVkIiwiYWNjb21wYW55aW5nIiwiYWNjb21wbGlzaGVkIiwiYWNjb3JkYW5jZSIsImFjY29yZGluZ2x5IiwiYWNjb3VudGFiaWxpdHkiLCJhY2NvdW50aW5nIiwiYWNjb3VudHMiLCJhY2NyZWRpdGF0aW9uIiwiYWNjcmVkaXRlZCIsImFjY3VyYWN5IiwiYWNjdXJhdGVseSIsImFjY3VzZWQiLCJhY2RiZW50aXR5IiwiYWNlIiwiYWNlciIsImFjaGlldmVkIiwiYWNoaWV2ZW1lbnRzIiwiYWNoaWV2aW5nIiwiYWNpZHMiLCJhY2tub3dsZWRnZWQiLCJhY20iLCJhY25lIiwiYWNvdXN0aWMiLCJhY3F1aXJlZCIsImFjcXVpc2l0aW9uIiwiYWNxdWlzaXRpb25zIiwiYWNyZSIsImFjcmVzIiwiYWNyb2JhdCIsImFjcnlsaWMiLCJhY3RpbmciLCJhY3Rpb25zIiwiYWN0aXZhdGVkIiwiYWN0aXZhdGlvbiIsImFjdGl2ZWx5IiwiYWN0aXZpc3RzIiwiYWN0aXZpdGllcyIsImFjdG9ycyIsImFjdHMiLCJhY3V0ZSIsImFkYSIsImFkYW0iLCJhZGFtcyIsImFkYXB0YXRpb24iLCJhZGFwdGVkIiwiYWRhcHRlciIsImFkYXB0ZXJzIiwiYWRhcHRpdmUiLCJhZGFwdG9yIiwiYWRkZWQiLCJhZGRpY3Rpb24iLCJhZGRpbmciLCJhZGRpdGlvbmFsbHkiLCJhZGRpdGlvbnMiLCJhZGRyZXNzZWQiLCJhZGRyZXNzZXMiLCJhZGRyZXNzaW5nIiwiYWRkcyIsImFkZWxhaWRlIiwiYWRpZGFzIiwiYWRpcGV4IiwiYWRqYWNlbnQiLCJhZGp1c3RhYmxlIiwiYWRqdXN0ZWQiLCJhZGp1c3RtZW50cyIsImFkbWluIiwiYWRtaW5pc3RlcmVkIiwiYWRtaW5pc3RyYXRpdmUiLCJhZG1pbmlzdHJhdG9ycyIsImFkbWlzc2lvbnMiLCJhZG1pdHRlZCIsImFkb2JlIiwiYWRvcHRlZCIsImFkb3B0aW9uIiwiYWRyaWFuIiwiYWRzIiwiYWRzbCIsImFkdWx0cyIsImFkdmFuY2VtZW50IiwiYWR2YW5jZXMiLCJhZHZhbnRhZ2VzIiwiYWR2ZW50dXJlcyIsImFkdmVyc2UiLCJhZHZlcnQiLCJhZHZlcnRpc2UiLCJhZHZlcnRpc2VtZW50IiwiYWR2ZXJ0aXNlbWVudHMiLCJhZHZlcnRpc2VyIiwiYWR2ZXJ0aXNlcnMiLCJhZHZpc2VkIiwiYWR2aXNvciIsImFkdmlzb3JzIiwiYWR2aXNvcnkiLCJhZHZvY2FjeSIsImFkd2FyZSIsImFlIiwiYWVyaWFsIiwiYWVyb3NwYWNlIiwiYWYiLCJhZmZhaXJzIiwiYWZmZWN0ZWQiLCJhZmZlY3RpbmciLCJhZmZlY3RzIiwiYWZmaWxpYXRlIiwiYWZmaWxpYXRlZCIsImFmZmlsaWF0ZXMiLCJhZmZpbGlhdGlvbiIsImFmZm9yZGFibGUiLCJhZmdoYW5pc3RhbiIsImFmcmljYSIsImFmcmljYW4iLCJhZnRlcndhcmRzIiwiYWciLCJhZ2VkIiwiYWdlbmNpZXMiLCJhZ2VudHMiLCJhZ2VzIiwiYWdncmVnYXRlIiwiYWdpbmciLCJhZ3JlZWQiLCJhZ3JlZW1lbnRzIiwiYWdyZWVzIiwiYWdyaWN1bHR1cmUiLCJhaSIsImFpZHMiLCJhaW1lZCIsImFpbXMiLCJhaXJmYXJlIiwiYWlybGluZXMiLCJhaXJwbGFuZSIsImFpcnBvcnRzIiwiYWoiLCJhayIsImFrYSIsImFsIiwiYWxhIiwiYWxhYmFtYSIsImFsYW4iLCJhbGFybSIsImFsYXNrYSIsImFsYmFuaWEiLCJhbGJhbnkiLCJhbGJlcnQiLCJhbGJlcnRhIiwiYWxidW1zIiwiYWxidXF1ZXJxdWUiLCJhbGVydCIsImFsZXJ0cyIsImFsZXgiLCJhbGV4YW5kZXIiLCJhbGV4YW5kcmlhIiwiYWxmcmVkIiwiYWxnZWJyYSIsImFsZ2VyaWEiLCJhbGdvcml0aG0iLCJhbGdvcml0aG1zIiwiYWxpIiwiYWxpYXMiLCJhbGljZSIsImFsaWVuIiwiYWxpZ24iLCJhbGlnbm1lbnQiLCJhbGlrZSIsImFsbGFoIiwiYWxsYW4iLCJhbGxlZ2VkIiwiYWxsZW4iLCJhbGxlcmd5IiwiYWxsaWVkIiwiYWxsb2NhdGVkIiwiYWxsb2NhdGlvbiIsImFsbG93YW5jZSIsImFsbG93ZWQiLCJhbGxvd2luZyIsImFsbG93cyIsImFsbG95IiwiYWxvdCIsImFscGhhIiwiYWxwaGFiZXRpY2FsIiwiYWxwaW5lIiwiYWx0IiwiYWx0ZXJlZCIsImFsdGVybmF0ZSIsImFsdGVybmF0aXZlbHkiLCJhbHRlcm5hdGl2ZXMiLCJhbHRvIiwiYWx1bWluaXVtIiwiYWx1bWludW0iLCJhbHVtbmkiLCJhbSIsImFtYW5kYSIsImFtYXRldXIiLCJhbWF6b24iLCJhbWJhc3NhZG9yIiwiYW1iZXIiLCJhbWJpZW4iLCJhbWJpZW50IiwiYW1kIiwiYW1lbmQiLCJhbWVuZGVkIiwiYW1lbmRtZW50IiwiYW1lbmRtZW50cyIsImFtZW5pdGllcyIsImFtZXJpY2EiLCJhbWVyaWNhbiIsImFtZXJpY2FucyIsImFtZXJpY2FzIiwiYW1pbm8iLCJhbW9uZ3N0IiwiYW1vdW50cyIsImFtcCIsImFtcGxhbmQiLCJhbXBsaWZpZXIiLCJhbXN0ZXJkYW0iLCJhbXkiLCJhbiIsImFuYSIsImFuYWhlaW0iLCJhbmFsIiwiYW5hbG9nIiwiYW5hbHlzZXMiLCJhbmFseXN0cyIsImFuYWx5dGljYWwiLCJhbmFseXplZCIsImFuYXRvbXkiLCJhbmNob3IiLCJhbmRhbGUiLCJhbmRlcnNvbiIsImFuZG9ycmEiLCJhbmRyZWEiLCJhbmRyZWFzIiwiYW5kcmV3IiwiYW5kcmV3cyIsImFuZHkiLCJhbmdlbCIsImFuZ2VsYSIsImFuZ2VsZXMiLCJhbmdlbHMiLCJhbmdvbGEiLCJhbmltYWxzIiwiYW5pbWF0ZWQiLCJhbmltYXRpb24iLCJhbmltZSIsImFubiIsImFubmEiLCJhbm5lIiwiYW5uZXgiLCJhbm5pZSIsImFubm90YXRlZCIsImFubm90YXRpb24iLCJhbm5vdW5jZWQiLCJhbm5vdW5jZW1lbnQiLCJhbm5vdW5jZW1lbnRzIiwiYW5ub3VuY2VzIiwiYW5ub3lpbmciLCJhbm51YWxseSIsImFub255bW91cyIsImFuc3dlcmVkIiwiYW5zd2VyaW5nIiwiYW5zd2VycyIsImFudCIsImFudGFyY3RpY2EiLCJhbnRlbm5hIiwiYW50aG9ueSIsImFudGhyb3BvbG9neSIsImFudGkiLCJhbnRpYm9kaWVzIiwiYW50aWJvZHkiLCJhbnRpY2lwYXRlZCIsImFudGlndWEiLCJhbnRpcXVlIiwiYW50aXF1ZXMiLCJhbnRpdmlydXMiLCJhbnRvbmlvIiwiYW55dGltZSIsImFvbCIsImFwIiwiYXBhY2hlIiwiYXBhcnRtZW50cyIsImFwaSIsImFwbmljIiwiYXBvbGxvIiwiYXBwIiwiYXBwYXJhdHVzIiwiYXBwYXJlbCIsImFwcGVhbHMiLCJhcHBlYXJlZCIsImFwcGVhcmluZyIsImFwcGVhcnMiLCJhcHBlbmRpeCIsImFwcGxpYW5jZSIsImFwcGxpYW5jZXMiLCJhcHBsaWNhYmxlIiwiYXBwbGljYW50IiwiYXBwbGljYW50cyIsImFwcGxpY2F0aW9ucyIsImFwcGxpZWQiLCJhcHBsaWVzIiwiYXBwbHlpbmciLCJhcHBvaW50ZWQiLCJhcHBvaW50bWVudHMiLCJhcHByYWlzYWwiLCJhcHByZWNpYXRlZCIsImFwcHJlY2lhdGlvbiIsImFwcHJvYWNoZXMiLCJhcHByb3ByaWF0aW9ucyIsImFwcHJvdmVkIiwiYXBwcm94IiwiYXBwcm94aW1hdGUiLCJhcHBzIiwiYXByIiwiYXByaWwiLCJhcHQiLCJhcXVhIiwiYXF1YXJpdW0iLCJhcXVhdGljIiwiYXIiLCJhcmFiIiwiYXJhYmlhIiwiYXJhYmljIiwiYXJiaXRyYXJ5IiwiYXJiaXRyYXRpb24iLCJhcmJvciIsImFyYyIsImFyY2FkZSIsImFyY2giLCJhcmNoaXRlY3RzIiwiYXJjaGl0ZWN0dXJhbCIsImFyY2hpdGVjdHVyZSIsImFyY2hpdmUiLCJhcmNoaXZlZCIsImFyY2hpdmVzIiwiYXJjdGljIiwiYXJlIiwiYXJlYXMiLCJhcmVuYSIsImFyZyIsImFyZ2VudGluYSIsImFyZ3VlZCIsImFyZ3VtZW50cyIsImFyaXNpbmciLCJhcml6b25hIiwiYXJrYW5zYXMiLCJhcmxpbmd0b24iLCJhcm1lbmlhIiwiYXJtb3IiLCJhcm1zIiwiYXJtc3Ryb25nIiwiYXJub2xkIiwiYXJyYW5nZWQiLCJhcnJhbmdlbWVudHMiLCJhcnJheSIsImFycmVzdGVkIiwiYXJyaXZhbHMiLCJhcnJpdmVkIiwiYXJyaXZlcyIsImFycm93IiwiYXJ0aHJpdGlzIiwiYXJ0aHVyIiwiYXJ0aWNsZXMiLCJhcnRpZmljaWFsIiwiYXJ0aXN0cyIsImFydHMiLCJhcnR3b3JrIiwiYXJ1YmEiLCJhc2Jlc3RvcyIsImFzY2lpIiwiYXNoIiwiYXNobGV5IiwiYXNpYSIsImFzaWFuIiwiYXNpbiIsImFza2VkIiwiYXNraW5nIiwiYXNrcyIsImFzbiIsImFzcCIsImFzcGVjdHMiLCJhc3MiLCJhc3NlbWJsZWQiLCJhc3NlbWJseSIsImFzc2Vzc2VkIiwiYXNzZXNzaW5nIiwiYXNzZXNzbWVudHMiLCJhc3NldHMiLCJhc3NpZ25lZCIsImFzc2lnbm1lbnRzIiwiYXNzaXN0ZWQiLCJhc3Npc3RzIiwiYXNzb2NpYXRlZCIsImFzc29jaWF0ZXMiLCJhc3NvY2lhdGlvbnMiLCJhc3N1bWVkIiwiYXNzdW1lcyIsImFzc3VtaW5nIiwiYXNzdW1wdGlvbnMiLCJhc3N1cmFuY2UiLCJhc3N1cmVkIiwiYXN0aG1hIiwiYXN0cm9sb2d5IiwiYXN0cm9ub215IiwiYXN1cyIsImFzeWx1bSIsImF0YSIsImF0ZSIsImF0aGVucyIsImF0aGxldGVzIiwiYXRobGV0aWNzIiwiYXRpIiwiYXRsYW50YSIsImF0bGFudGljIiwiYXRsYXMiLCJhdG0iLCJhdG1vc3BoZXJpYyIsImF0b20iLCJhdG9taWMiLCJhdHRhY2hlZCIsImF0dGFjaG1lbnQiLCJhdHRhY2htZW50cyIsImF0dGFja2VkIiwiYXR0YWNrcyIsImF0dGVtcHRlZCIsImF0dGVtcHRpbmciLCJhdHRlbXB0cyIsImF0dGVuZGFuY2UiLCJhdHRlbmRlZCIsImF0dGVuZGluZyIsImF0dGl0dWRlcyIsImF0dG9ybmV5cyIsImF0dHJhY3Rpb24iLCJhdHRyYWN0aW9ucyIsImF0dHJpYnV0ZXMiLCJhdSIsImF1YnVybiIsImF1Y2tsYW5kIiwiYXVjdGlvbiIsImF1Y3Rpb25zIiwiYXVkIiwiYXVkaSIsImF1ZGlvIiwiYXVkaXQiLCJhdWRpdG9yIiwiYXVnIiwiYXVndXN0IiwiYXVyb3JhIiwiYXVzIiwiYXVzdGluIiwiYXVzdHJhbGlhIiwiYXVzdHJhbGlhbiIsImF1c3RyaWEiLCJhdXRoZW50aWMiLCJhdXRoZW50aWNhdGlvbiIsImF1dGhvcml0aWVzIiwiYXV0aG9yaXphdGlvbiIsImF1dGhvcml6ZWQiLCJhdXRob3JzIiwiYXV0b21hdGVkIiwiYXV0b21hdGljIiwiYXV0b21hdGljYWxseSIsImF1dG9tYXRpb24iLCJhdXRvbW9iaWxlIiwiYXV0b21vYmlsZXMiLCJhdXRvbW90aXZlIiwiYXV0b3MiLCJhdXR1bW4iLCJhdiIsImF2YWlsYWJpbGl0eSIsImF2YXRhciIsImF2ZSIsImF2ZW51ZSIsImF2ZyIsImF2aSIsImF2aWF0aW9uIiwiYXZvaWRpbmciLCJhdm9uIiwiYXciLCJhd2FyZGVkIiwiYXdhcmRzIiwiYXdlc29tZSIsImF4aXMiLCJheWUiLCJheiIsImF6ZXJiYWlqYW4iLCJiIiwiYmEiLCJiYWJlIiwiYmFiZXMiLCJiYWJpZXMiLCJiYWNoZWxvciIsImJhY2tlZCIsImJhY2tncm91bmRzIiwiYmFja2luZyIsImJhY2t1cCIsImJhY29uIiwiYmFjdGVyaWEiLCJiYWN0ZXJpYWwiLCJiYWRnZSIsImJhZ2hkYWQiLCJiYWdzIiwiYmFoYW1hcyIsImJhaHJhaW4iLCJiYWlsZXkiLCJiYWtlciIsImJha2luZyIsImJhbGFuY2VkIiwiYmFsZCIsImJhbGkiLCJiYWxsZXQiLCJiYWxsb29uIiwiYmFsbG90IiwiYmFsbHMiLCJiYWx0aW1vcmUiLCJiYW5hbmEiLCJiYW5kcyIsImJhbmR3aWR0aCIsImJhbmciLCJiYW5nYnVzIiwiYmFuZ2tvayIsImJhbmdsYWRlc2giLCJiYW5raW5nIiwiYmFua3J1cHRjeSIsImJhbmtzIiwiYmFubmVkIiwiYmFubmVyIiwiYmFubmVycyIsImJhcHRpc3QiLCJiYXJiYWRvcyIsImJhcmJhcmEiLCJiYXJiaWUiLCJiYXJjZWxvbmEiLCJiYXJlIiwiYmFyZ2FpbiIsImJhcmdhaW5zIiwiYmFybiIsImJhcm5lcyIsImJhcnJpZXJzIiwiYmFycnkiLCJiYXJzIiwiYmFzZWQiLCJiYXNlbGluZSIsImJhc2VtZW50IiwiYmFzZW5hbWUiLCJiYXNlcyIsImJhc2ljcyIsImJhc2luIiwiYmFza2V0cyIsImJhc3MiLCJiYXQiLCJiYXRjaCIsImJhdGgiLCJiYXRocm9vbXMiLCJiYXRocyIsImJhdG1hbiIsImJhdHRlcmllcyIsImJhdHRsZWZpZWxkIiwiYmF5IiwiYmIiLCJiYmMiLCJiYnMiLCJiYnciLCJiYyIsImJkIiwiYmRzbSIsImJlYWNoZXMiLCJiZWFkcyIsImJlYW0iLCJiZWFucyIsImJlYXJpbmciLCJiZWFycyIsImJlYXN0IiwiYmVhc3RhbGl0eSIsImJlYXN0aWFsaXR5IiwiYmVhdGxlcyIsImJlYXRzIiwiYmVhdXRpZnVsbHkiLCJiZWF2ZXIiLCJiZWNhbWUiLCJiZWNvbWVzIiwiYmVjb21pbmciLCJiZWRkaW5nIiwiYmVkZm9yZCIsImJlZHJvb21zIiwiYmVkcyIsImJlZSIsImJlZWYiLCJiZWVuIiwiYmVnYW4iLCJiZWdpbm5lciIsImJlZ2lubmVycyIsImJlZ2lucyIsImJlZ3VuIiwiYmVoYWxmIiwiYmVoYXZpb3JhbCIsImJlaGF2aW91ciIsImJlaWppbmciLCJiZWluZ3MiLCJiZWxhcnVzIiwiYmVsZmFzdCIsImJlbGdpdW0iLCJiZWxpZWZzIiwiYmVsaWV2ZWQiLCJiZWxpZXZlcyIsImJlbGl6ZSIsImJlbGtpbiIsImJlbGxlIiwiYmVsbHkiLCJiZWxvbmdzIiwiYmVsdHMiLCJiZW4iLCJiZW5jaG1hcmsiLCJiZW5lZmljaWFsIiwiYmVuZWZpdHMiLCJiZW5qYW1pbiIsImJlbm5ldHQiLCJiZW50IiwiYmVueiIsImJlcmtlbGV5IiwiYmVybGluIiwiYmVybXVkYSIsImJlcm5hcmQiLCJiZXJyeSIsImJlc3RpYWxpdHkiLCJiZXN0c2VsbGVycyIsImJldGEiLCJiZXRoIiwiYmV0dGluZyIsImJldHR5IiwiYmV2ZXJhZ2UiLCJiZXZlcmFnZXMiLCJiZXZlcmx5IiwiYmciLCJiaHV0YW4iLCJiaSIsImJpYXMiLCJiaWJsZSIsImJpYmxpY2FsIiwiYmlibGlvZ3JhcGhpYyIsImJpYmxpb2dyYXBoeSIsImJpY3ljbGUiLCJiaWQiLCJiaWRkZXIiLCJiaWRkaW5nIiwiYmlkcyIsImJpZ2dlciIsImJpZ2dlc3QiLCJiaWtlcyIsImJpa2luaSIsImJpbGxpbmciLCJiaWxscyIsImJpbGx5IiwiYmluIiwiYmluYXJ5IiwiYmluZGluZyIsImJpbmdvIiwiYmlvIiwiYmlvZGl2ZXJzaXR5IiwiYmlvZ3JhcGhpZXMiLCJiaW9ncmFwaHkiLCJiaW9sIiwiYmlvbG9neSIsImJpb3MiLCJiaW90ZWNobm9sb2d5IiwiYmlyZHMiLCJiaXJtaW5naGFtIiwiYmlzaG9wIiwiYml0Y2giLCJiaXRzIiwiYml6IiwiYml6YXJyZSIsImJpenJhdGUiLCJiayIsImJsIiwiYmxhY2tiZXJyeSIsImJsYWNramFjayIsImJsYWNrcyIsImJsYWRlcyIsImJsYWgiLCJibGFpciIsImJsYWtlIiwiYmxhbmsiLCJibGFzdCIsImJsZWVkaW5nIiwiYmxlbmQiLCJibGVzcyIsImJsZXNzZWQiLCJibGluayIsImJsb2NrZWQiLCJibG9ja2luZyIsImJsb2NrcyIsImJsb2ciLCJibG9nZ2VyIiwiYmxvZ2dlcnMiLCJibG9nZ2luZyIsImJsb2dzIiwiYmxvbmQiLCJibG9uZGUiLCJibG9vZHkiLCJibG9vbSIsImJsb29tYmVyZyIsImJsb3dpbmciLCJibG93am9iIiwiYmxvd2pvYnMiLCJibHVlcyIsImJsdWV0b290aCIsImJsdmQiLCJibSIsImJtdyIsImJvIiwiYm9hcmRzIiwiYm9hdGluZyIsImJvYXRzIiwiYm9iIiwiYm9iYnkiLCJib2MiLCJib2RpZXMiLCJib2xkIiwiYm9saXZpYSIsImJvbHQiLCJib24iLCJib25kYWdlIiwiYm9uZHMiLCJib25lcyIsImJvbnVzIiwiYm9vYiIsImJvb2JzIiwiYm9va2luZyIsImJvb2tpbmdzIiwiYm9va21hcmsiLCJib29rbWFya3MiLCJib29rcyIsImJvb2tzdG9yZSIsImJvb2wiLCJib29sZWFuIiwiYm9vc3QiLCJib290aCIsImJvb3RzIiwiYm9vdHkiLCJib3JkZXJzIiwiYm9yZWQiLCJib3JpbmciLCJib3JvdWdoIiwiYm9zbmlhIiwiYm9zdG9uIiwiYm90c3dhbmEiLCJib3R0bGVzIiwiYm91Z2h0IiwiYm91bGRlciIsImJvdWxldmFyZCIsImJvdW5kIiwiYm91bmRhcmllcyIsImJvdXF1ZXQiLCJib3V0aXF1ZSIsImJvdyIsImJvd2xpbmciLCJib3hlZCIsImJveGVzIiwiYm94aW5nIiwiYm95cyIsImJwIiwiYnIiLCJicmEiLCJicmFjZWxldCIsImJyYWNlbGV0cyIsImJyYWNrZXQiLCJicmFkIiwiYnJhZGZvcmQiLCJicmFkbGV5IiwiYnJha2UiLCJicmFrZXMiLCJicmFuY2hlcyIsImJyYW5kb24iLCJicmFuZHMiLCJicmFzIiwiYnJhc3MiLCJicmF2ZSIsImJyYXppbCIsImJyYXppbGlhbiIsImJyZWFjaCIsImJyZWFrZG93biIsImJyZWFraW5nIiwiYnJlYWtzIiwiYnJlYXN0cyIsImJyZWF0aGluZyIsImJyZWVkIiwiYnJlZWRpbmciLCJicmVlZHMiLCJicmlhbiIsImJyaWRhbCIsImJyaWRlIiwiYnJpZGdlcyIsImJyaWVmaW5nIiwiYnJpZWZzIiwiYnJpZ2h0b24iLCJicmluZ2luZyIsImJyaW5ncyIsImJyaXNiYW5lIiwiYnJpc3RvbCIsImJyaXRhaW4iLCJicml0YW5uaWNhIiwiYnJpdGlzaCIsImJyaXRuZXkiLCJicm9hZGJhbmQiLCJicm9hZGNhc3QiLCJicm9hZGNhc3RpbmciLCJicm9hZGVyIiwiYnJvYWR3YXkiLCJicm9jaHVyZSIsImJyb2NodXJlcyIsImJyb2tlIiwiYnJva2VyIiwiYnJva2VycyIsImJyb256ZSIsImJyb29rIiwiYnJvb2tseW4iLCJicm9va3MiLCJicm90aGVycyIsImJyb3VnaHQiLCJicm93c2UiLCJicm93c2VyIiwiYnJvd3NlcnMiLCJicm93c2luZyIsImJydWNlIiwiYnJ1bmVpIiwiYnJ1bmV0dGUiLCJicnVuc3dpY2siLCJicnVzc2VscyIsImJydXRhbCIsImJyeWFuIiwiYnJ5YW50IiwiYnMiLCJidCIsImJ1YmJsZSIsImJ1Y2tzIiwiYnVkYXBlc3QiLCJidWRkeSIsImJ1ZGdldHMiLCJidWYiLCJidWZmYWxvIiwiYnVmZmVyIiwiYnVmaW5nIiwiYnVnIiwiYnVncyIsImJ1aWxkZXIiLCJidWlsZGVycyIsImJ1aWxkaW5ncyIsImJ1aWxkcyIsImJ1aWx0IiwiYnVra2FrZSIsImJ1bGdhcmlhIiwiYnVsZ2FyaWFuIiwiYnVsayIsImJ1bGwiLCJidWxsZXRpbiIsImJ1bXBlciIsImJ1bmRsZSIsImJ1bm55IiwiYnVyZWF1IiwiYnVyaWVkIiwiYnVya2UiLCJidXJsaW5ndG9uIiwiYnVybmVyIiwiYnVybmluZyIsImJ1cm5zIiwiYnVyc3QiLCJidXJ0b24iLCJidXNlcyIsImJ1c2giLCJidXNpbmVzc2VzIiwiYnVzdHkiLCJidXRsZXIiLCJidXR0IiwiYnV0dGVyZmx5IiwiYnV0dG9ucyIsImJ1dHRzIiwiYnV5ZXJzIiwiYnV5aW5nIiwiYnV5cyIsImJ1enoiLCJidyIsImJ5ZSIsImJ5dGUiLCJieXRlcyIsImMiLCJjYSIsImNhYiIsImNhYmluZXRzIiwiY2FibGVzIiwiY2FjaGUiLCJjYWNoZWQiLCJjYWQiLCJjYWRpbGxhYyIsImNhZmUiLCJjYWdlIiwiY2FrZXMiLCJjYWwiLCJjYWxjaXVtIiwiY2FsY3VsYXRlZCIsImNhbGN1bGF0aW9uIiwiY2FsY3VsYXRpb25zIiwiY2FsY3VsYXRvciIsImNhbGN1bGF0b3JzIiwiY2FsZW5kYXIiLCJjYWxlbmRhcnMiLCJjYWxnYXJ5IiwiY2FsaWJyYXRpb24iLCJjYWxpZm9ybmlhIiwiY2FsbGVkIiwiY2FsbGluZyIsImNhbGxzIiwiY2FsbSIsImNhbHZpbiIsImNhbSIsImNhbWJvZGlhIiwiY2FtYnJpZGdlIiwiY2FtY29yZGVyIiwiY2FtY29yZGVycyIsImNhbWUiLCJjYW1lbCIsImNhbWVyYXMiLCJjYW1lcm9uIiwiY2FtZXJvb24iLCJjYW1wYWlnbnMiLCJjYW1wYmVsbCIsImNhbXBpbmciLCJjYW1wcyIsImNhbXMiLCJjYW5hZGEiLCJjYW5hZGlhbiIsImNhbmFsIiwiY2FuYmVycmEiLCJjYW5jZWwiLCJjYW5jZWxsYXRpb24iLCJjYW5jZWxsZWQiLCJjYW5kaWRhdGVzIiwiY2FuZGxlIiwiY2FuZGxlcyIsImNhbmR5IiwiY2Fubm9uIiwiY2Fub24iLCJjYW50IiwiY2FudmFzIiwiY2FueW9uIiwiY2FwYWJpbGl0aWVzIiwiY2FwZSIsImNhcGl0b2wiLCJjYXBzIiwiY2FwdHVyZWQiLCJjYXJiIiwiY2FyZGlhYyIsImNhcmRpZmYiLCJjYXJkaW92YXNjdWxhciIsImNhcmRzIiwiY2FyZWVycyIsImNhcmV5IiwiY2FyZ28iLCJjYXJpYmJlYW4iLCJjYXJpbmciLCJjYXJsIiwiY2FybG8iLCJjYXJsb3MiLCJjYXJtZW4iLCJjYXJuaXZhbCIsImNhcm9sIiwiY2Fyb2xpbmEiLCJjYXJvbGluZSIsImNhcnBldCIsImNhcnJpZWQiLCJjYXJyaWVycyIsImNhcnJpZXMiLCJjYXJyb2xsIiwiY2FycnlpbmciLCJjYXJzIiwiY2FydCIsImNhcnRlciIsImNhcnRvb24iLCJjYXJ0b29ucyIsImNhcnRyaWRnZSIsImNhcnRyaWRnZXMiLCJjYXMiLCJjYXNhIiwiY2FzZXMiLCJjYXNleSIsImNhc2hpZXJzIiwiY2FzaW5vIiwiY2FzaW5vcyIsImNhc2lvIiwiY2Fzc2V0dGUiLCJjYXN0aW5nIiwiY2FzdGxlIiwiY2FzdWFsIiwiY2F0YWxvZyIsImNhdGFsb2dzIiwiY2F0YWxvZ3VlIiwiY2F0YWx5c3QiLCJjYXRlZ29yaWVzIiwiY2F0ZXJpbmciLCJjYXRoZWRyYWwiLCJjYXRoZXJpbmUiLCJjYXRob2xpYyIsImNhdHMiLCJjYXR0bGUiLCJjYXVnaHQiLCJjYXVzZWQiLCJjYXVzZXMiLCJjYXVzaW5nIiwiY2F1dGlvbiIsImNhdmUiLCJjYXltYW4iLCJjYiIsImNicyIsImNjIiwiY2NkIiwiY2QiLCJjZG5hIiwiY2RzIiwiY2R0IiwiY2UiLCJjZWRhciIsImNlbGVicml0aWVzIiwiY2VsZWJzIiwiY2VsbHMiLCJjZWxsdWxhciIsImNlbHRpYyIsImNlbWVudCIsImNlbWV0ZXJ5IiwiY2Vuc3VzIiwiY2VudCIsImNlbnRlcmVkIiwiY2VudGVycyIsImNlbnRyZSIsImNlbnRyZXMiLCJjZW50cyIsImNlbnR1cmllcyIsImNlbyIsImNlcmFtaWMiLCJjZXJ0aWZpY2F0ZSIsImNlcnRpZmljYXRlcyIsImNlcnRpZmljYXRpb24iLCJjZXJ0aWZpZWQiLCJjZXQiLCJjZiIsImNmciIsImNnIiwiY2dpIiwiY2giLCJjaGFkIiwiY2hhaW5zIiwiY2hhaXJzIiwiY2hhbGxlbmdlZCIsImNoYWxsZW5nZXMiLCJjaGFsbGVuZ2luZyIsImNoYW1iZXJzIiwiY2hhbXBhZ25lIiwiY2hhbXBpb25zIiwiY2hhbXBpb25zaGlwcyIsImNoYW4iLCJjaGFuY2VsbG9yIiwiY2hhbmNlcyIsImNoYW5nZWQiLCJjaGFuZ2Vsb2ciLCJjaGFuZ2VzIiwiY2hhbm5lbHMiLCJjaGFvcyIsImNoYXBlbCIsImNoYXB0ZXJzIiwiY2hhciIsImNoYXJhY3RlcmlzdGljcyIsImNoYXJhY3Rlcml6YXRpb24iLCJjaGFyYWN0ZXJpemVkIiwiY2hhcmFjdGVycyIsImNoYXJnZWQiLCJjaGFyZ2VyIiwiY2hhcmdlcnMiLCJjaGFyZ2VzIiwiY2hhcmdpbmciLCJjaGFyaXRhYmxlIiwiY2hhcmxlcyIsImNoYXJsZXN0b24iLCJjaGFybGllIiwiY2hhcmxvdHRlIiwiY2hhcm0iLCJjaGFybWluZyIsImNoYXJtcyIsImNoYXJ0ZXIiLCJjaGFydHMiLCJjaGFzc2lzIiwiY2hhdCIsImNoZWFwZXIiLCJjaGVhcGVzdCIsImNoZWF0IiwiY2hlYXRzIiwiY2hlY2tlZCIsImNoZWNraW5nIiwiY2hlY2tsaXN0IiwiY2hlY2tvdXQiLCJjaGVja3MiLCJjaGVlcnMiLCJjaGVsc2VhIiwiY2hlbSIsImNoZW1pY2FscyIsImNoZW1pc3RyeSIsImNoZW4iLCJjaGVxdWUiLCJjaGVycnkiLCJjaGVzcyIsImNoZXN0ZXIiLCJjaGV2cm9sZXQiLCJjaGV2eSIsImNoaSIsImNoaWNhZ28iLCJjaGljayIsImNoaWNrcyIsImNoaWxkcmVuIiwiY2hpbGRyZW5zIiwiY2hpbGUiLCJjaGluYSIsImNoaW5lc2UiLCJjaGlwcyIsImNobyIsImNob2ljZXMiLCJjaG9pciIsImNob29zaW5nIiwiY2hvcnVzIiwiY2hvc2UiLCJjaG9zZW4iLCJjaHJpcyIsImNocmlzdCIsImNocmlzdGlhbiIsImNocmlzdGlhbml0eSIsImNocmlzdGlhbnMiLCJjaHJpc3RpbmEiLCJjaHJpc3RpbmUiLCJjaHJpc3RtYXMiLCJjaHJpc3RvcGhlciIsImNocm9tZSIsImNocm9uaWMiLCJjaHJvbmljbGUiLCJjaHJvbmljbGVzIiwiY2hyeXNsZXIiLCJjaHViYnkiLCJjaHVjayIsImNodXJjaGVzIiwiY2kiLCJjaWEiLCJjaWFsaXMiLCJjaWFvIiwiY2lnYXJldHRlcyIsImNpbmNpbm5hdGkiLCJjaW5keSIsImNpbmVtYSIsImNpbmd1bGFyIiwiY2lvIiwiY2lyIiwiY2lyY2xlcyIsImNpcmN1aXQiLCJjaXJjdWl0cyIsImNpcmN1bGFyIiwiY2lyY3VsYXRpb24iLCJjaXJjdW1zdGFuY2VzIiwiY2lyY3VzIiwiY2lzY28iLCJjaXRhdGlvbiIsImNpdGF0aW9ucyIsImNpdGVkIiwiY2l0aWVzIiwiY2l0aXplbnMiLCJjaXRpemVuc2hpcCIsImNpdHlzZWFyY2giLCJjaXZpYyIsImNpdmlsaXphdGlvbiIsImNqIiwiY2wiLCJjbGFpbWVkIiwiY2xhaW1zIiwiY2xhaXJlIiwiY2xhbiIsImNsYXJhIiwiY2xhcml0eSIsImNsYXJrIiwiY2xhcmtlIiwiY2xhc3NlcyIsImNsYXNzaWNhbCIsImNsYXNzaWNzIiwiY2xhc3NpZmljYXRpb24iLCJjbGFzc2lmaWVkIiwiY2xhc3NpZmllZHMiLCJjbGF1c2UiLCJjbGF5IiwiY2xlYW5lciIsImNsZWFuZXJzIiwiY2xlYW5pbmciLCJjbGVhbnVwIiwiY2xlYXJhbmNlIiwiY2xlYXJlZCIsImNsZWFyaW5nIiwiY2xlcmsiLCJjbGV2ZWxhbmQiLCJjbGljayIsImNsaWNraW5nIiwiY2xpY2tzIiwiY2xpZW50cyIsImNsaWZmIiwiY2xpbWJpbmciLCJjbGluaWNzIiwiY2xpbnRvbiIsImNsaXAiLCJjbGlwcyIsImNsb2NrcyIsImNsb25lIiwiY2xvc2VkIiwiY2xvc2VzIiwiY2xvc2VzdCIsImNsb3NpbmciLCJjbG9zdXJlIiwiY2xvdGgiLCJjbG91ZHMiLCJjbG91ZHkiLCJjbHVicyIsImNsdXN0ZXJzIiwiY20iLCJjbXMiLCJjbiIsImNuZXQiLCJjbm4iLCJjbyIsImNvYWNoZXMiLCJjb2FjaGluZyIsImNvYXN0YWwiLCJjb2F0ZWQiLCJjb2F0aW5nIiwiY29jayIsImNvY2tzIiwiY29ja3RhaWwiLCJjb2QiLCJjb2RlcyIsImNvZGluZyIsImNvaGVuIiwiY29pbiIsImNvaW5zIiwiY29sIiwiY29sZSIsImNvbGVtYW4iLCJjb2xpbiIsImNvbGxhYm9yYXRpb24iLCJjb2xsYWJvcmF0aXZlIiwiY29sbGFyIiwiY29sbGVhZ3VlcyIsImNvbGxlY3RhYmxlcyIsImNvbGxlY3RlZCIsImNvbGxlY3RpYmxlIiwiY29sbGVjdGlibGVzIiwiY29sbGVjdGluZyIsImNvbGxlY3Rpb25zIiwiY29sbGVjdG9yIiwiY29sbGVjdG9ycyIsImNvbGxlZ2VzIiwiY29sbGlucyIsImNvbG9nbmUiLCJjb2xvbWJpYSIsImNvbG9uIiwiY29sb255IiwiY29sb3JhZG8iLCJjb2xvcmVkIiwiY29sb3JzIiwiY29sb3VyIiwiY29sb3VycyIsImNvbHVtYmlhIiwiY29sdW1idXMiLCJjb2x1bW5pc3RzIiwiY29sdW1ucyIsImNvbSIsImNvbWJhdCIsImNvbWJpbmF0aW9ucyIsImNvbWJpbmVkIiwiY29tYmluZXMiLCJjb21iaW5pbmciLCJjb21ibyIsImNvbWVzIiwiY29taWMiLCJjb21pY3MiLCJjb21pbmciLCJjb21tIiwiY29tbWFuZHMiLCJjb21tZW50YXJ5IiwiY29tbWVudGVkIiwiY29tbWVudHMiLCJjb21tZXJjZSIsImNvbW1pc3Npb25lciIsImNvbW1pc3Npb25lcnMiLCJjb21taXNzaW9ucyIsImNvbW1pdG1lbnRzIiwiY29tbWl0dGVkIiwiY29tbWl0dGVlcyIsImNvbW1vZGl0aWVzIiwiY29tbW9kaXR5IiwiY29tbW9ubHkiLCJjb21tb25zIiwiY29tbW9ud2VhbHRoIiwiY29tbXVuaWNhdGlvbnMiLCJjb21tdW5pc3QiLCJjb21tdW5pdGllcyIsImNvbXAiLCJjb21wYWN0IiwiY29tcGFuaWVzIiwiY29tcGFuaW9uIiwiY29tcGFxIiwiY29tcGFyYWJsZSIsImNvbXBhcmF0aXZlIiwiY29tcGFyZWQiLCJjb21wYXJpbmciLCJjb21wYXJpc29ucyIsImNvbXBhdGliaWxpdHkiLCJjb21wYXRpYmxlIiwiY29tcGVuc2F0aW9uIiwiY29tcGV0ZW50IiwiY29tcGV0aW5nIiwiY29tcGV0aXRpb25zIiwiY29tcGV0aXRvcnMiLCJjb21waWxhdGlvbiIsImNvbXBpbGUiLCJjb21waWxlZCIsImNvbXBpbGVyIiwiY29tcGxhaW50cyIsImNvbXBsZW1lbnQiLCJjb21wbGV0ZWQiLCJjb21wbGV0aW5nIiwiY29tcGxldGlvbiIsImNvbXBsZXhpdHkiLCJjb21wbGlhbmNlIiwiY29tcGxpYW50IiwiY29tcGxpY2F0aW9ucyIsImNvbXBsaW1lbnRhcnkiLCJjb21wbHkiLCJjb21wb25lbnRzIiwiY29tcG9zZWQiLCJjb21wb3NlciIsImNvbXBvc2l0ZSIsImNvbXBvdW5kIiwiY29tcG91bmRzIiwiY29tcHJlc3NlZCIsImNvbXByZXNzaW9uIiwiY29tcHJvbWlzZSIsImNvbXB1dGF0aW9uIiwiY29tcHV0YXRpb25hbCIsImNvbXB1dGUiLCJjb21wdXRlZCIsImNvbXB1dGVycyIsImNvbXB1dGluZyIsImNvbiIsImNvbmNlbnRyYXRpb25zIiwiY29uY2VwdHMiLCJjb25jZXB0dWFsIiwiY29uY2VybmluZyIsImNvbmNlcm5zIiwiY29uY2VydHMiLCJjb25jbHVkZWQiLCJjb25jbHVzaW9ucyIsImNvbmNvcmQiLCJjb25kaXRpb25hbCIsImNvbmRpdGlvbmluZyIsImNvbmRpdGlvbnMiLCJjb25kbyIsImNvbmRvcyIsImNvbmR1Y3RlZCIsImNvbmR1Y3RpbmciLCJjb25mIiwiY29uZmVyZW5jZXMiLCJjb25mZXJlbmNpbmciLCJjb25maWRlbnRpYWwiLCJjb25maWRlbnRpYWxpdHkiLCJjb25maWciLCJjb25maWd1cmF0aW9uIiwiY29uZmlndXJhdGlvbnMiLCJjb25maWd1cmUiLCJjb25maWd1cmVkIiwiY29uZmlndXJpbmciLCJjb25maXJtYXRpb24iLCJjb25maXJtZWQiLCJjb25mbGljdHMiLCJjb25mdXNlZCIsImNvbmdvIiwiY29uZ3JhdHVsYXRpb25zIiwiY29uZ3Jlc3MiLCJjb25qdW5jdGlvbiIsImNvbm5lY3RlZCIsImNvbm5lY3RpY3V0IiwiY29ubmVjdGluZyIsImNvbm5lY3Rpb25zIiwiY29ubmVjdGl2aXR5IiwiY29ubmVjdG9yIiwiY29ubmVjdG9ycyIsImNvbnMiLCJjb25zY2lvdXMiLCJjb25zZWN1dGl2ZSIsImNvbnNlbnQiLCJjb25zZXF1ZW5jZXMiLCJjb25zZXF1ZW50bHkiLCJjb25zZXJ2YXRpb24iLCJjb25zaWRlcmF0aW9ucyIsImNvbnNpZGVyZWQiLCJjb25zaWRlcmluZyIsImNvbnNpZGVycyIsImNvbnNpc3RlbmN5IiwiY29uc2lzdGVudGx5IiwiY29uc2lzdGluZyIsImNvbnNpc3RzIiwiY29uc29sZSIsImNvbnNvbGVzIiwiY29uc29saWRhdGVkIiwiY29uc29saWRhdGlvbiIsImNvbnNvcnRpdW0iLCJjb25zcGlyYWN5IiwiY29uc3QiLCJjb25zdGl0dXRlcyIsImNvbnN0aXR1dGlvbiIsImNvbnN0cmFpbnQiLCJjb25zdHJhaW50cyIsImNvbnN0cnVjdGVkIiwiY29uc3VsdCIsImNvbnN1bHRhbmN5IiwiY29uc3VsdGFudHMiLCJjb25zdWx0YXRpb24iLCJjb25zdWx0aW5nIiwiY29uc3VtZXJzIiwiY29udGFjdGVkIiwiY29udGFjdGluZyIsImNvbnRhY3RzIiwiY29udGFpbmVkIiwiY29udGFpbmVycyIsImNvbnRhaW5pbmciLCJjb250YWlucyIsImNvbnRhbWluYXRpb24iLCJjb250ZW50cyIsImNvbnRlc3RzIiwiY29udGluZW50IiwiY29udGluZW50YWwiLCJjb250aW51YWxseSIsImNvbnRpbnVlcyIsImNvbnRpbnVpbmciLCJjb250aW51aXR5IiwiY29udGludW91cyIsImNvbnRpbnVvdXNseSIsImNvbnRyYWN0aW5nIiwiY29udHJhY3RvciIsImNvbnRyYWN0b3JzIiwiY29udHJhY3RzIiwiY29udHJhcnkiLCJjb250cmlidXRlZCIsImNvbnRyaWJ1dGluZyIsImNvbnRyaWJ1dGlvbnMiLCJjb250cmlidXRvciIsImNvbnRyaWJ1dG9ycyIsImNvbnRyb2xsZWQiLCJjb250cm9sbGVyIiwiY29udHJvbGxlcnMiLCJjb250cm9sbGluZyIsImNvbnRyb2xzIiwiY29udmVuaWVuY2UiLCJjb252ZW5pZW50IiwiY29udmVudGlvbnMiLCJjb252ZXJnZW5jZSIsImNvbnZlcnNhdGlvbnMiLCJjb252ZXJzaW9uIiwiY29udmVydGVkIiwiY29udmVydGVyIiwiY29udmVydGlibGUiLCJjb252aWN0ZWQiLCJjb252aW5jZWQiLCJjb29rYm9vayIsImNvb2tlZCIsImNvb2tpZXMiLCJjb29sZXIiLCJjb29saW5nIiwiY29vcGVyIiwiY29vcGVyYXRpdmUiLCJjb29yZGluYXRlIiwiY29vcmRpbmF0ZWQiLCJjb29yZGluYXRlcyIsImNvb3JkaW5hdGlvbiIsImNvb3JkaW5hdG9yIiwiY29waWVkIiwiY29waWVzIiwiY29wcGVyIiwiY29weWluZyIsImNvcHlyaWdodCIsImNvcHlyaWdodGVkIiwiY29weXJpZ2h0cyIsImNvcmFsIiwiY29yZCIsImNvcmRsZXNzIiwiY29yayIsImNvcm5lbGwiLCJjb3JuZXJzIiwiY29ybndhbGwiLCJjb3JwIiwiY29ycG9yYXRpb25zIiwiY29ycHMiLCJjb3JwdXMiLCJjb3JyZWN0ZWQiLCJjb3JyZWN0aW9uIiwiY29ycmVjdGlvbnMiLCJjb3JyZWN0bHkiLCJjb3JyZWxhdGlvbiIsImNvcnJlc3BvbmRlbmNlIiwiY29ycmVzcG9uZGluZyIsImNvcnJ1cHRpb24iLCJjb3MiLCJjb3NtZXRpYyIsImNvc21ldGljcyIsImNvc3RhIiwiY29zdHMiLCJjb3N0dW1lIiwiY29zdHVtZXMiLCJjb3R0YWdlIiwiY290dGFnZXMiLCJjb3VuY2lscyIsImNvdW5zZWwiLCJjb3Vuc2VsaW5nIiwiY291bnRlZCIsImNvdW50ZXJzIiwiY291bnRpZXMiLCJjb3VudGluZyIsImNvdW50cmllcyIsImNvdW50cyIsImNvdXBsZWQiLCJjb3VwbGVzIiwiY291cG9uIiwiY291cG9ucyIsImNvdXJpZXIiLCJjb3Vyc2VzIiwiY291cnRlc3kiLCJjb3VydHMiLCJjb3ZlIiwiY292ZXJlZCIsImNvdmVyaW5nIiwiY292ZXJzIiwiY293Ym95IiwiY294IiwiY3AiLCJjcHUiLCJjciIsImNyYWRsZSIsImNyYWZ0cyIsImNyYWlnIiwiY3JhcCIsImNyYXBzIiwiY3Jhd2ZvcmQiLCJjcmVhdGVkIiwiY3JlYXRlcyIsImNyZWF0aW5nIiwiY3JlYXRpb25zIiwiY3JlYXRpdml0eSIsImNyZWF0b3IiLCJjcmVhdHVyZXMiLCJjcmVkaXRzIiwiY3JlZWsiLCJjcmVzdCIsImNyaWNrZXQiLCJjcmltZXMiLCJjcml0ZXJpb24iLCJjcml0aWNzIiwiY3JtIiwiY3JvYXRpYSIsImNyb3BzIiwiY3Jvc3NpbmciLCJjcm9zc3dvcmQiLCJjcm93biIsImNydWRlIiwiY3J1aXNlIiwiY3J1aXNlcyIsImNydXoiLCJjcnlzdGFsIiwiY3MiLCJjc3MiLCJjc3QiLCJjdCIsImN0cmwiLCJjdSIsImN1YmEiLCJjdWJlIiwiY3ViaWMiLCJjdWlzaW5lIiwiY3VsdCIsImN1bHR1cmVzIiwiY3VtIiwiY3Vtc2hvdCIsImN1bXNob3RzIiwiY3VtdWxhdGl2ZSIsImN1bnQiLCJjdXBzIiwiY3VyZSIsImN1cnJlbmNpZXMiLCJjdXJyZW5jeSIsImN1cnNvciIsImN1cnRpcyIsImN1cnZlIiwiY3VydmVzIiwiY3VzdG9keSIsImN1c3RvbWVycyIsImN1c3RvbWlzZSIsImN1c3RvbWl6ZSIsImN1c3RvbWl6ZWQiLCJjdXN0b21zIiwiY3V0ZSIsImN1dHMiLCJjdXR0aW5nIiwiY3YiLCJjdnMiLCJjdyIsImN5YmVyIiwiY3ljbGVzIiwiY3ljbGluZyIsImN5bGluZGVyIiwiY3lwcnVzIiwiY3oiLCJjemVjaCIsImQiLCJkYSIsImRhZGR5IiwiZGFpcnkiLCJkYWlzeSIsImRha290YSIsImRhbGUiLCJkYWxsYXMiLCJkYW0iLCJkYW1hZ2VkIiwiZGFtYWdlcyIsImRhbWUiLCJkYW1uIiwiZGFuIiwiZGFuYSIsImRhbmNpbmciLCJkYW5pZWwiLCJkYW5pc2giLCJkYW5ueSIsImRhbnMiLCJkYXJ3aW4iLCJkYXMiLCJkYXNoIiwiZGF0IiwiZGF0YWJhc2UiLCJkYXRhYmFzZXMiLCJkYXRlZCIsImRhdGVzIiwiZGF0aW5nIiwiZGF1Z2h0ZXJzIiwiZGF2ZSIsImRhdmlkIiwiZGF2aWRzb24iLCJkYXZpcyIsImRhd24iLCJkYXlzIiwiZGF5dG9uIiwiZGIiLCJkYyIsImRkIiwiZGRyIiwiZGUiLCJkZWFkbGluZSIsImRlYWRseSIsImRlYWYiLCJkZWFsZXJzIiwiZGVhbGluZyIsImRlYWxzIiwiZGVhbHQiLCJkZWFsdGltZSIsImRlYW4iLCJkZWF0aHMiLCJkZWJpYW4iLCJkZWJvcmFoIiwiZGVidWciLCJkZWJ1dCIsImRlYyIsImRlY2FkZXMiLCJkZWNlbWJlciIsImRlY2VudCIsImRlY2lkZWQiLCJkZWNpbWFsIiwiZGVjaXNpb25zIiwiZGVjbGFyYXRpb24iLCJkZWNsYXJlZCIsImRlY2xpbmVkIiwiZGVjb3IiLCJkZWNvcmF0aW5nIiwiZGVjb3JhdGl2ZSIsImRlY3JlYXNlZCIsImRlZGljYXRlZCIsImRlZSIsImRlZW1lZCIsImRlZXBlciIsImRlZiIsImRlZmF1bHQiLCJkZWZlY3RzIiwiZGVmZW5jZSIsImRlZmVycmVkIiwiZGVmaW5lZCIsImRlZmluZXMiLCJkZWZpbmluZyIsImRlZmluaXRpb25zIiwiZGVncmVlcyIsImRlbCIsImRlbGF3YXJlIiwiZGVsYXllZCIsImRlbGF5cyIsImRlbGVnYXRpb24iLCJkZWxldGUiLCJkZWxldGVkIiwiZGVsaGkiLCJkZWxpY2lvdXMiLCJkZWxpZ2h0IiwiZGVsaXZlcmVkIiwiZGVsaXZlcmluZyIsImRlbGl2ZXJzIiwiZGVsbCIsImRlbHRhIiwiZGVsdXhlIiwiZGVtIiwiZGVtYW5kaW5nIiwiZGVtYW5kcyIsImRlbW8iLCJkZW1vY3JhdCIsImRlbW9jcmF0cyIsImRlbW9ncmFwaGljIiwiZGVtb25zdHJhdGVkIiwiZGVtb25zdHJhdGVzIiwiZGVuIiwiZGVuaWFsIiwiZGVuaWVkIiwiZGVubWFyayIsImRlbm5pcyIsImRlbnNlIiwiZGVuc2l0eSIsImRlbnRhbCIsImRlbnRpc3RzIiwiZGVudmVyIiwiZGVwYXJ0bWVudGFsIiwiZGVwYXJ0bWVudHMiLCJkZXBhcnR1cmUiLCJkZXBlbmRlbmNlIiwiZGVwZW5kcyIsImRlcGxveW1lbnQiLCJkZXBvc2l0IiwiZGVwb3NpdHMiLCJkZXBvdCIsImRlcHQiLCJkZXIiLCJkZXJieSIsImRlcmVrIiwiZGVyaXZlZCIsImRlcyIsImRlc2NlbmRpbmciLCJkZXNjcmliZWQiLCJkZXNjcmliZXMiLCJkZXNjcmliaW5nIiwiZGVzY3JpcHRpb25zIiwiZGVzaWduYXRlZCIsImRlc2lnbmF0aW9uIiwiZGVzaWduZWQiLCJkZXNpZ25lcnMiLCJkZXNpZ25pbmciLCJkZXNpZ25zIiwiZGVzaXJhYmxlIiwiZGVzaXJlZCIsImRlc2t0b3AiLCJkZXNrdG9wcyIsImRlc3RpbmF0aW9uIiwiZGVzdGluYXRpb25zIiwiZGVzdGlueSIsImRlc3Ryb3llZCIsImRldGFpbHMiLCJkZXRlY3RlZCIsImRldGVjdGlvbiIsImRldGVjdGl2ZSIsImRldGVjdG9yIiwiZGV0ZXJtaW5hdGlvbiIsImRldGVybWluZWQiLCJkZXRlcm1pbmVzIiwiZGV0ZXJtaW5pbmciLCJkZXRyb2l0IiwiZGV1dHNjaCIsImRldXRzY2hlIiwiZGV1dHNjaGxhbmQiLCJkZXYiLCJkZXZlbCIsImRldmVsb3BlZCIsImRldmVsb3BlciIsImRldmVsb3BlcnMiLCJkZXZlbG9wbWVudGFsIiwiZGV2ZWxvcG1lbnRzIiwiZGV2ZWxvcHMiLCJkZXZpYW50IiwiZGV2aWF0aW9uIiwiZGV2aWNlcyIsImRldmlsIiwiZGV2b24iLCJkZXZvdGVkIiwiZGYiLCJkZyIsImRoIiwiZGkiLCJkaWFiZXRlcyIsImRpYWdub3NpcyIsImRpYWdub3N0aWMiLCJkaWFncmFtIiwiZGlhbCIsImRpYWxvZyIsImRpYW1ldGVyIiwiZGlhbW9uZCIsImRpYW1vbmRzIiwiZGlhbmEiLCJkaWFuZSIsImRpYXJ5IiwiZGljZSIsImRpY2siLCJkaWNrZSIsImRpY2tzIiwiZGljdGlvbmFyaWVzIiwiZGljdGlvbmFyeSIsImRpZCIsImRpZWQiLCJkaWVnbyIsImRpZXMiLCJkaWVzZWwiLCJkaWV0YXJ5IiwiZGlmZiIsImRpZmZlcmVuY2VzIiwiZGlmZmVyZW50aWFsIiwiZGlmZmljdWx0aWVzIiwiZGlmZnMiLCJkaWdlc3QiLCJkaWdpdCIsImRpbGRvIiwiZGlsZG9zIiwiZGltIiwiZGltZW5zaW9uYWwiLCJkaW1lbnNpb25zIiwiZGlwIiwiZGlwbG9tYSIsImRpciIsImRpcmVjdGVkIiwiZGlyZWN0aW9ucyIsImRpcmVjdGl2ZSIsImRpcmVjdG9yaWVzIiwiZGlyZWN0b3JzIiwiZGlyZWN0b3J5IiwiZGlzIiwiZGlzYWJpbGl0aWVzIiwiZGlzYWJsZSIsImRpc2FibGVkIiwiZGlzYXBwb2ludGVkIiwiZGlzYyIsImRpc2NoYXJnZSIsImRpc2NpcGxpbmFyeSIsImRpc2NpcGxpbmVzIiwiZGlzY2xhaW1lciIsImRpc2NsYWltZXJzIiwiZGlzY2xvc2UiLCJkaXNjbG9zdXJlIiwiZGlzY28iLCJkaXNjb3VudCIsImRpc2NvdW50ZWQiLCJkaXNjb3VudHMiLCJkaXNjb3ZlcmVkIiwiZGlzY3JldGUiLCJkaXNjcmV0aW9uIiwiZGlzY3MiLCJkaXNjdXNzZWQiLCJkaXNjdXNzZXMiLCJkaXNjdXNzaW5nIiwiZGlzY3Vzc2lvbnMiLCJkaXNlYXNlcyIsImRpc2hlcyIsImRpc2siLCJkaXNrcyIsImRpc25leSIsImRpc29yZGVycyIsImRpc3BhdGNoIiwiZGlzcGF0Y2hlZCIsImRpc3BsYXllZCIsImRpc3BsYXlpbmciLCJkaXNwbGF5cyIsImRpc3Bvc2FsIiwiZGlzcG9zaXRpb24iLCJkaXNwdXRlcyIsImRpc3QiLCJkaXN0YW5jZXMiLCJkaXN0aW5ndWlzaGVkIiwiZGlzdHJpYnV0ZWQiLCJkaXN0cmlidXRpb25zIiwiZGlzdHJpYnV0b3IiLCJkaXN0cmlidXRvcnMiLCJkaXN0cmljdHMiLCJkaXN0dXJiZWQiLCJkaXYiLCJkaXZlIiwiZGl2aWRlZCIsImRpdmlkZW5kIiwiZGl2aW5lIiwiZGl2aW5nIiwiZGl2aXNpb25zIiwiZGl2eCIsImRpeSIsImRqIiwiZGsiLCJkbCIsImRtIiwiZG5hIiwiZG5zIiwiZG9jIiwiZG9jayIsImRvY3MiLCJkb2N0b3JzIiwiZG9jdHJpbmUiLCJkb2N1bWVudGFyeSIsImRvY3VtZW50YXRpb24iLCJkb2N1bWVudGVkIiwiZG9jdW1lbnRzIiwiZG9kIiwiZG9kZ2UiLCJkb2UiLCJkb2VzIiwiZG9ncyIsImRvaW5nIiwiZG9sbCIsImRvbGxhciIsImRvbGxhcnMiLCJkb2xscyIsImRvbSIsImRvbWFpbiIsImRvbWFpbnMiLCJkb21lIiwiZG9taW5pY2FuIiwiZG9uIiwiZG9uYWxkIiwiZG9uYXRlIiwiZG9uYXRlZCIsImRvbmF0aW9uIiwiZG9uYXRpb25zIiwiZG9uZSIsImRvbm5hIiwiZG9ub3IiLCJkb25vcnMiLCJkb250IiwiZG9vbSIsImRvb3JzIiwiZG9zIiwiZG9zYWdlIiwiZG9zZSIsImRvdCIsImRvdWciLCJkb3VnbGFzIiwiZG92ZXIiLCJkb3ciLCJkb3dubG9hZCIsImRvd25sb2FkYWJsZSIsImRvd25sb2FkZWQiLCJkb3dubG9hZGluZyIsImRvd25sb2FkcyIsImRvemVucyIsImRwIiwiZHBpIiwiZHIiLCJkcmFnb24iLCJkcmFpbiIsImRyYWluYWdlIiwiZHJhd2luZ3MiLCJkcmF3biIsImRyYXdzIiwiZHJlYW1zIiwiZHJlc3NlZCIsImRyZXNzZXMiLCJkcmVzc2luZyIsImRyZXciLCJkcmllZCIsImRyaWxsIiwiZHJpbGxpbmciLCJkcmlua2luZyIsImRyaW5rcyIsImRyaXZlbiIsImRyaXZlcnMiLCJkcml2ZXMiLCJkcml2aW5nIiwiZHJvcHBlZCIsImRyb3BzIiwiZHJvdmUiLCJkcnVncyIsImRydW0iLCJkcnVtcyIsImRydW5rIiwiZHJ5ZXIiLCJkcyIsImRzYyIsImRzbCIsImR0IiwiZHRzIiwiZHUiLCJkdWFsIiwiZHViYWkiLCJkdWJsaW4iLCJkdWNrIiwiZHVkZSIsImR1aSIsImR1a2UiLCJkdW1iIiwiZHVtcCIsImR1bmNhbiIsImR1byIsImR1cGxpY2F0ZSIsImR1cmFibGUiLCJkdXJhdGlvbiIsImR1cmhhbSIsImR1dGNoIiwiZHV0aWVzIiwiZHYiLCJkdmQiLCJkdmRzIiwiZHgiLCJkeWluZyIsImR5bGFuIiwiZHluYW1pYyIsImR5bmFtaWNzIiwiZSIsImVhIiwiZWFnbGUiLCJlYWdsZXMiLCJlYXJsIiwiZWFybGllciIsImVhcmxpZXN0IiwiZWFybmVkIiwiZWFybmluZyIsImVhcnJpbmdzIiwiZWFycyIsImVhcnRocXVha2UiLCJlYXNpZXIiLCJlYXN0ZXIiLCJlYXRpbmciLCJlYXUiLCJlYmF5IiwiZWJvbnkiLCJlYm9vayIsImVib29rcyIsImVjIiwiZWNobyIsImVjbGlwc2UiLCJlY28iLCJlY29sb2dpY2FsIiwiZWNvbG9neSIsImVjb21tZXJjZSIsImVjb25vbWllcyIsImVjdWFkb3IiLCJlZCIsImVkZGllIiwiZWRlbiIsImVkZ2FyIiwiZWRnZXMiLCJlZGluYnVyZ2giLCJlZGl0IiwiZWRpdGVkIiwiZWRpdGluZyIsImVkaXRpb25zIiwiZWRpdG9yaWFsIiwiZWRpdG9yaWFscyIsImVkaXRvcnMiLCJlZG1vbnRvbiIsImVkcyIsImVkdCIsImVkdWNhdGVkIiwiZWR1Y2F0b3JzIiwiZWR3YXJkIiwiZWR3YXJkcyIsImVlIiwiZWYiLCJlZmZlY3RpdmVuZXNzIiwiZWZmZWN0cyIsImVmZmljaWVudGx5IiwiZWZmb3J0cyIsImVnIiwiZWdncyIsImVneXB0IiwiZWd5cHRpYW4iLCJlaCIsImVqYWN1bGF0aW9uIiwiZWwiLCJlbGRlciIsImVsZWN0ZWQiLCJlbGVjdGlvbnMiLCJlbGVjdG9yYWwiLCJlbGVjdHJpY2FsIiwiZWxlY3RybyIsImVsZWN0cm9uIiwiZWxlY3Ryb25pY3MiLCJlbGVnYW50IiwiZWxlbWVudHMiLCJlbGVwaGFudCIsImVsZXZhdGlvbiIsImVsZXZlbiIsImVsaWdpYmlsaXR5IiwiZWxpZ2libGUiLCJlbGltaW5hdGlvbiIsImVsaXphYmV0aCIsImVsbGVuIiwiZWxsaW90dCIsImVsbGlzIiwiZWx2aXMiLCJlbSIsImVtYWNzIiwiZW1haWwiLCJlbWFpbHMiLCJlbWJhc3N5IiwiZW1iZWRkZWQiLCJlbWVyYWxkIiwiZW1lcmdpbmciLCJlbWlseSIsImVtaW5lbSIsImVtaXJhdGVzIiwiZW1pc3Npb25zIiwiZW1tYSIsImVtb3Rpb25zIiwiZW1wZXJvciIsImVtcGlyZSIsImVtcGlyaWNhbCIsImVtcGxveWVkIiwiZW1wbG95ZWVzIiwiZW1wbG95ZXJzIiwiZW4iLCJlbmFibGVkIiwiZW5hYmxlcyIsImVuYWJsaW5nIiwiZW5iIiwiZW5jbG9zZWQiLCJlbmNsb3N1cmUiLCJlbmNvZGluZyIsImVuY291bnRlcmVkIiwiZW5jb3VyYWdlZCIsImVuY291cmFnZXMiLCJlbmNvdXJhZ2luZyIsImVuY3J5cHRpb24iLCJlbmN5Y2xvcGVkaWEiLCJlbmRhbmdlcmVkIiwiZW5kZWQiLCJlbmRpZiIsImVuZGluZyIsImVuZGxlc3MiLCJlbmRvcnNlZCIsImVuZG9yc2VtZW50IiwiZW5kcyIsImVuZW1pZXMiLCJlbmciLCJlbmdhZ2VkIiwiZW5nYWdlbWVudCIsImVuZ2FnaW5nIiwiZW5naW5lZXJzIiwiZW5naW5lcyIsImVuZ2xhbmQiLCJlbmdsaXNoIiwiZW5oYW5jZWQiLCJlbmhhbmNlbWVudCIsImVuaGFuY2VtZW50cyIsImVuaGFuY2luZyIsImVuam95ZWQiLCJlbmpveWluZyIsImVubGFyZ2UiLCJlbmxhcmdlbWVudCIsImVucXVpcmllcyIsImVucXVpcnkiLCJlbnJvbGxlZCIsImVucm9sbG1lbnQiLCJlbnNlbWJsZSIsImVuc3VyZXMiLCJlbnN1cmluZyIsImVudCIsImVudGVyZWQiLCJlbnRlcmluZyIsImVudGVycHJpc2VzIiwiZW50ZXJzIiwiZW50ZXJ0YWluaW5nIiwiZW50aXRpZXMiLCJlbnRpdGxlZCIsImVudGl0eSIsImVudHJlcHJlbmV1ciIsImVudHJlcHJlbmV1cnMiLCJlbnRyaWVzIiwiZW52ZWxvcGUiLCJlbnZpcm9ubWVudHMiLCJlbnp5bWUiLCJlb3MiLCJlcCIsImVwYSIsImVwaWMiLCJlcGluaW9ucyIsImVwaXNvZGVzIiwiZXBzb24iLCJlcSIsImVxdWFsaXR5IiwiZXF1YXRpb24iLCJlcXVhdGlvbnMiLCJlcXVpbGlicml1bSIsImVxdWlwcGVkIiwiZXF1aXR5IiwiZXF1aXZhbGVudCIsImVyIiwiZXJpYyIsImVyaWNzc29uIiwiZXJpayIsImVyb3RpYyIsImVyb3RpY2EiLCJlcnAiLCJlcnJvcnMiLCJlcyIsImVzY29ydCIsImVzY29ydHMiLCJlc3BuIiwiZXNzYXlzIiwiZXNzZW5jZSIsImVzc2VudGlhbHMiLCJlc3NleCIsImVzdCIsImVzdGFibGlzaGVkIiwiZXN0YWJsaXNoaW5nIiwiZXN0YXRlcyIsImVzdGltYXRlZCIsImVzdGltYXRlcyIsImVzdGltYXRpb24iLCJlc3RvbmlhIiwiZXQiLCJldGVybmFsIiwiZXRoZXJuZXQiLCJldGhpY2FsIiwiZXRoaW9waWEiLCJldSIsImV1Z2VuZSIsImV1ciIsImV1cm8iLCJldXJvcGUiLCJldXJvcGVhbiIsImV1cm9zIiwiZXYiLCJldmEiLCJldmFsIiwiZXZhbHVhdGVkIiwiZXZhbHVhdGluZyIsImV2YWx1YXRpb25zIiwiZXZhbmVzY2VuY2UiLCJldmFucyIsImV2ZSIsImV2ZW50cyIsImV2aWRlbnQiLCJldmlsIiwiZXgiLCJleGFtIiwiZXhhbWluYXRpb25zIiwiZXhhbWluZWQiLCJleGFtaW5lcyIsImV4YW1pbmluZyIsImV4YW1wbGVzIiwiZXhhbXMiLCJleGNlbCIsImV4Y2VsbGVuY2UiLCJleGNlcHRpb25hbCIsImV4Y2VwdGlvbnMiLCJleGNlcnB0IiwiZXhjZXNzIiwiZXhjZXNzaXZlIiwiZXhjaGFuZ2VzIiwiZXhjaXRlZCIsImV4Y2l0ZW1lbnQiLCJleGNsdWRlIiwiZXhjbHVkZWQiLCJleGNsdWRpbmciLCJleGNsdXNpb24iLCJleGNsdXNpdmUiLCJleGNsdXNpdmVseSIsImV4Y3VzZSIsImV4ZWMiLCJleGVjdXRlIiwiZXhlY3V0ZWQiLCJleGVjdXRpb24iLCJleGVjdXRpdmVzIiwiZXhlbXB0IiwiZXhlbXB0aW9uIiwiZXhlcmNpc2VzIiwiZXhoYXVzdCIsImV4aGliaXRpb25zIiwiZXhoaWJpdHMiLCJleGlzdGVkIiwiZXhpc3RzIiwiZXhpdCIsImV4b3RpYyIsImV4cCIsImV4cGFuZGVkIiwiZXhwYW5kaW5nIiwiZXhwYW5zeXMiLCJleHBlY3RhdGlvbnMiLCJleHBlY3RlZCIsImV4cGVjdHMiLCJleHBlZGlhIiwiZXhwZW5kaXR1cmUiLCJleHBlbmRpdHVyZXMiLCJleHBlbnNlcyIsImV4cGVyaWVuY2VkIiwiZXhwZXJpZW5jZXMiLCJleHBlcmllbmNpbmciLCJleHBlcmltZW50YWwiLCJleHBlcmltZW50cyIsImV4cGVydGlzZSIsImV4cGVydHMiLCJleHBpcmF0aW9uIiwiZXhwaXJlZCIsImV4cGlyZXMiLCJleHBsYWluZWQiLCJleHBsYWluaW5nIiwiZXhwbGFpbnMiLCJleHBsaWNpdCIsImV4cGxpY2l0bHkiLCJleHBsb3JhdGlvbiIsImV4cGxvcmVyIiwiZXhwbG9yaW5nIiwiZXhwbyIsImV4cG9ydCIsImV4cG9zZWQiLCJleHByZXNzZWQiLCJleHByZXNzaW9ucyIsImV4dCIsImV4dGVuZGVkIiwiZXh0ZW5kaW5nIiwiZXh0ZW5kcyIsImV4dGVuc2lvbnMiLCJleHRlcmlvciIsImV4dHJhY3QiLCJleHRyYWN0aW9uIiwiZXh0cmFzIiwiZXllZCIsImV5ZXMiLCJleiIsImYiLCJmYSIsImZhYnJpY3MiLCJmYWJ1bG91cyIsImZhY2VkIiwiZmFjZXMiLCJmYWNpYWwiLCJmYWNpbGl0YXRlIiwiZmFjaWxpdGllcyIsImZhY2luZyIsImZhY3RvcnMiLCJmYWN0cyIsImZhaWxlZCIsImZhaWxpbmciLCJmYWlscyIsImZhaWx1cmVzIiwiZmFpcmZpZWxkIiwiZmFpcnkiLCJmYWtlIiwiZmFsbGVuIiwiZmFsbGluZyIsImZhbGxzIiwiZmFtZSIsImZhbWlsaWVzIiwiZmFuY3kiLCJmYW5zIiwiZmFudGFzdGljIiwiZmFxIiwiZmFxcyIsImZhcmUiLCJmYXJlcyIsImZhcm1lcnMiLCJmYXJtaW5nIiwiZmFybXMiLCJmYXNjaW5hdGluZyIsImZhc3RlciIsImZhc3Rlc3QiLCJmYXRhbCIsImZhdGhlcnMiLCJmYXR0eSIsImZhdm9yaXRlcyIsImZhdm9ycyIsImZhdm91ciIsImZhdm91cml0ZSIsImZhdm91cml0ZXMiLCJmYXgiLCJmYmkiLCJmYyIsImZjYyIsImZkIiwiZmRhIiwiZmUiLCJmZWFycyIsImZlYXQiLCJmZWF0dXJlZCIsImZlYXR1cmVzIiwiZmVhdHVyaW5nIiwiZmViIiwiZmVicnVhcnkiLCJmZWQiLCJmZWRlcmF0aW9uIiwiZmVlZGJhY2siLCJmZWVkaW5nIiwiZmVlZHMiLCJmZWVsaW5ncyIsImZlZWxzIiwiZmVlcyIsImZlZXQiLCJmZWxsIiwiZmVsbG93c2hpcCIsImZlbHQiLCJmZW1hbGVzIiwiZmVvZiIsImZlcnJhcmkiLCJmZXJyeSIsImZlc3RpdmFsIiwiZmVzdGl2YWxzIiwiZmV0aXNoIiwiZmV2ZXIiLCJmZiIsImZnIiwiZmkiLCJmaWJyZSIsImZpZWxkcyIsImZpZyIsImZpZ2h0ZXJzIiwiZmlndXJlZCIsImZpZ3VyZXMiLCJmaWppIiwiZmlsZWQiLCJmaWxlbmFtZSIsImZpbGVzIiwiZmlsaW5nIiwiZmlsbGVkIiwiZmlsbGluZyIsImZpbG1lIiwiZmlsbXMiLCJmaWx0ZXIiLCJmaWx0ZXJpbmciLCJmaWx0ZXJzIiwiZmluIiwiZmluYWxzIiwiZmluYW5jZXMiLCJmaW5hbmNpbmciLCJmaW5kYXJ0aWNsZXMiLCJmaW5kZXIiLCJmaW5kaW5ncyIsImZpbmRsYXciLCJmaW5kcyIsImZpbmVzdCIsImZpbmdlcmluZyIsImZpbmdlcnMiLCJmaW5pc2hlZCIsImZpbmlzaGluZyIsImZpbml0ZSIsImZpbmxhbmQiLCJmaW5uaXNoIiwiZmlvcmljZXQiLCJmaXJlZCIsImZpcmVmb3giLCJmaXJlcGxhY2UiLCJmaXJlcyIsImZpcmV3YWxsIiwiZmlyZXdpcmUiLCJmaXJtcyIsImZpcm13YXJlIiwiZmlzY2FsIiwiZmlzaGVyIiwiZmlzaGVyaWVzIiwiZmlzdCIsImZpc3RpbmciLCJmaXRzIiwiZml0dGVkIiwiZml0dGluZyIsImZpeGVkIiwiZml4ZXMiLCJmaXh0dXJlcyIsImZsIiwiZmxhZ3MiLCJmbGFzaCIsImZsYXNoZXJzIiwiZmxhc2hpbmciLCJmbGVlY2UiLCJmbGVldCIsImZsZXgiLCJmbGV4aWJpbGl0eSIsImZsZXhpYmxlIiwiZmxpY2tyIiwiZmxpZ2h0cyIsImZsaXAiLCJmbG9hdGluZyIsImZsb29kIiwiZmxvb3JpbmciLCJmbG9vcnMiLCJmbG9wcHkiLCJmbG9yYWwiLCJmbG9yZW5jZSIsImZsb3JpZGEiLCJmbG9yaXN0IiwiZmxvcmlzdHMiLCJmbG91ciIsImZsb3dlcnMiLCJmbG93cyIsImZsb3lkIiwiZmx1IiwiZmx1aWQiLCJmbHVzaCIsImZsdXgiLCJmbHllciIsImZseWluZyIsImZtIiwiZm8iLCJmb2FtIiwiZm9jYWwiLCJmb2N1c2VkIiwiZm9jdXNlcyIsImZvY3VzaW5nIiwiZm9nIiwiZm9sZCIsImZvbGRlciIsImZvbGRlcnMiLCJmb2xkaW5nIiwiZm9sa3MiLCJmb2xsb3dlZCIsImZvbGxvd3MiLCJmb250IiwiZm9udHMiLCJmb28iLCJmb29kcyIsImZvb2wiLCJmb290YWdlIiwiZm9vdHdlYXIiLCJmb3JiZXMiLCJmb3JiaWRkZW4iLCJmb3JjZWQiLCJmb3JjZXMiLCJmb3JkIiwiZm9yZWNhc3QiLCJmb3JlY2FzdHMiLCJmb3Jlc3RyeSIsImZvcmVzdHMiLCJmb3JnZSIsImZvcmdvdCIsImZvcmdvdHRlbiIsImZvcmsiLCJmb3JtYXQiLCJmb3JtYXRzIiwiZm9ybWF0dGluZyIsImZvcm1lZCIsImZvcm1lcmx5IiwiZm9ybWluZyIsImZvcm1zIiwiZm9ydCIsImZvcnR5IiwiZm9ydW0iLCJmb3J1bXMiLCJmb3J3YXJkaW5nIiwiZm9zc2lsIiwiZm9zdGVyIiwiZm90byIsImZvdG9zIiwiZm91Z2h0IiwiZm91bCIsImZvdW5kYXRpb25zIiwiZm91bmRlZCIsImZvdW50YWluIiwiZm94IiwiZnAiLCJmciIsImZyYWN0aW9uIiwiZnJhZ3JhbmNlIiwiZnJhZ3JhbmNlcyIsImZyYW1lZCIsImZyYW1lcyIsImZyYW1pbmciLCJmcmFuY2UiLCJmcmFuY2hpc2UiLCJmcmFuY2lzIiwiZnJhbmNpc2NvIiwiZnJhbmsiLCJmcmFua2Z1cnQiLCJmcmFua2xpbiIsImZyYXNlciIsImZyYXVkIiwiZnJlZCIsImZyZWRlcmljayIsImZyZWVic2QiLCJmcmVlbGFuY2UiLCJmcmVlbHkiLCJmcmVld2FyZSIsImZyZWlnaHQiLCJmcmVuY2giLCJmcmVxdWVuY2llcyIsImZyaSIsImZyaWRheSIsImZyaWRnZSIsImZyaWVuZHMiLCJmcm9nIiwiZnJvbnRpZXIiLCJmcm9udHBhZ2UiLCJmcm9zdCIsImZyb3plbiIsImZydWl0cyIsImZzIiwiZnQiLCJmdHAiLCJmdSIsImZ1Y2siLCJmdWNrZWQiLCJmdWNraW5nIiwiZnVqaSIsImZ1aml0c3UiLCJmdW5jdGlvbmFsIiwiZnVuY3Rpb25hbGl0eSIsImZ1bmN0aW9uaW5nIiwiZnVuY3Rpb25zIiwiZnVuZGFtZW50YWxzIiwiZnVuZGVkIiwiZnVuZHJhaXNpbmciLCJmdW5kcyIsImZ1bmsiLCJmdW5reSIsImZ1ciIsImZ1cm5pc2hlZCIsImZ1cm5pc2hpbmdzIiwiZnVydGhlciIsImZ1c2lvbiIsImZ1dHVyZXMiLCJmdXp6eSIsImZ3IiwiZndkIiwiZngiLCJmeSIsImciLCJnYSIsImdhYnJpZWwiLCJnYWRnZXRzIiwiZ2FnZSIsImdhaW5lZCIsImdhaW5zIiwiZ2FsZSIsImdhbGxlcmllcyIsImdhbWJsaW5nIiwiZ2FtZWN1YmUiLCJnYW1lcyIsImdhbWVzcG90IiwiZ2FtaW5nIiwiZ2FtbWEiLCJnYW5nYmFuZyIsImdhcHMiLCJnYXJiYWdlIiwiZ2FyY2lhIiwiZ2FyZGVuaW5nIiwiZ2FyZGVucyIsImdhcm1pbiIsImdhcnkiLCJnYXNvbGluZSIsImdhdGVzIiwiZ2F0ZXdheSIsImdhdGhlcmVkIiwiZ2F0aGVyaW5nIiwiZ2F1Z2UiLCJnYXZlIiwiZ2F5cyIsImdhemV0dGUiLCJnYiIsImdiYSIsImdicCIsImdjIiwiZ2NjIiwiZ2QiLCJnZHAiLCJnZSIsImdlZWsiLCJnZWwiLCJnZW0iLCJnZW4iLCJnZW5lYWxvZ3kiLCJnZW5lcmF0ZWQiLCJnZW5lcmF0ZXMiLCJnZW5lcmF0aW5nIiwiZ2VuZXJhdGlvbnMiLCJnZW5lcmF0b3IiLCJnZW5lcmF0b3JzIiwiZ2VuZXJpYyIsImdlbmVyb3VzIiwiZ2VuZXMiLCJnZW5lc2lzIiwiZ2VuZXRpY3MiLCJnZW5ldmEiLCJnZW5pdXMiLCJnZW5vbWUiLCJnZW5yZSIsImdlbnJlcyIsImdlbnRsZSIsImdlbnVpbmUiLCJnZW8iLCJnZW9ncmFwaGljIiwiZ2VvZ3JhcGhpY2FsIiwiZ2VvZ3JhcGh5IiwiZ2VvbG9naWNhbCIsImdlb2xvZ3kiLCJnZW9tZXRyeSIsImdlb3JnZSIsImdlb3JnaWEiLCJnZXJhbGQiLCJnZXJtYW4iLCJnZXJtYW55IiwiZ2V0cyIsImdldHRpbmciLCJnZyIsImdoYW5hIiwiZ2h6IiwiZ2kiLCJnaWFudHMiLCJnaWJyYWx0YXIiLCJnaWJzb24iLCJnaWYiLCJnaWZ0cyIsImdpZyIsImdpbGJlcnQiLCJnaXJscyIsImdpcyIsImdpdmVzIiwiZ2l2aW5nIiwiZ2wiLCJnbGFzZ293IiwiZ2xhc3NlcyIsImdsZW4iLCJnbGVubiIsImdsb2JlIiwiZ2xvcnkiLCJnbG9zc2FyeSIsImdsb3ZlcyIsImdsb3ciLCJnbHVjb3NlIiwiZ20iLCJnbWJoIiwiZ21jIiwiZ210IiwiZ25vbWUiLCJnbnUiLCJnb2FscyIsImdvYXQiLCJnb2QiLCJnb2RzIiwiZ29lcyIsImdvaW5nIiwiZ29uZSIsImdvbm5hIiwiZ29vZHMiLCJnb29nbGUiLCJnb3Jkb24iLCJnb3JlIiwiZ29yZ2VvdXMiLCJnb3NwZWwiLCJnb3NzaXAiLCJnb3QiLCJnb3RoaWMiLCJnb3RvIiwiZ290dGEiLCJnb3R0ZW4iLCJnb3VybWV0IiwiZ292ZXJuYW5jZSIsImdvdmVybmluZyIsImdvdmVybm1lbnRhbCIsImdvdmVybm1lbnRzIiwiZ3AiLCJncGwiLCJncHMiLCJnciIsImdyYWNlIiwiZ3JhZCIsImdyYWRlcyIsImdyYWR1YXRlZCIsImdyYWR1YXRlcyIsImdyYWR1YXRpb24iLCJncmFoYW0iLCJncmFtbWFyIiwiZ3JhbXMiLCJncmFuZGUiLCJncmFubnkiLCJncmFudGVkIiwiZ3JhbnRzIiwiZ3JhcGgiLCJncmFwaGljIiwiZ3JhcGhpY2FsIiwiZ3JhcGhpY3MiLCJncmFwaHMiLCJncmFzIiwiZ3JhdGVmdWwiLCJncmF0aXMiLCJncmF0dWl0IiwiZ3Jhdml0eSIsImdyZWF0ZXIiLCJncmVhdGx5IiwiZ3JlZWNlIiwiZ3JlZWsiLCJncmVlbmUiLCJncmVlbmhvdXNlIiwiZ3JlZW5zYm9ybyIsImdyZWV0aW5nIiwiZ3JlZXRpbmdzIiwiZ3JlZyIsImdyZWdvcnkiLCJncmVuYWRhIiwiZ3JldyIsImdyZXkiLCJncmlkIiwiZ3JpZmZpbiIsImdyaWxsIiwiZ3JpcCIsImdyb292ZSIsImdyb3NzIiwiZ3JvdW5kcyIsImdyb3VuZHdhdGVyIiwiZ3JvdXBzIiwiZ3JvdmUiLCJncm93biIsImdyb3dzIiwiZ3MiLCJnc20iLCJnc3QiLCJndCIsImd0ayIsImd1YW0iLCJndWFyYW50ZWVkIiwiZ3VhcmFudGVlcyIsImd1YXJkaWFuIiwiZ3VhcmRzIiwiZ3VhdGVtYWxhIiwiZ3Vlc3Rib29rIiwiZ3Vlc3RzIiwiZ3VpIiwiZ3VpZGFuY2UiLCJndWlkZWQiLCJndWlkZWxpbmVzIiwiZ3VpZGVzIiwiZ3VpbGQiLCJndWluZWEiLCJndWl0YXIiLCJndWl0YXJzIiwiZ3VsZiIsImd1bnMiLCJndXJ1IiwiZ3V5YW5hIiwiZ3V5cyIsImd5bSIsImd6aXAiLCJoIiwiaGEiLCJoYWJpdHMiLCJoYWNrIiwiaGFja2VyIiwiaGFkIiwiaGFpcnkiLCJoYWl0aSIsImhhbGlmYXgiLCJoYWxsb3dlZW4iLCJoYWxvIiwiaGFtIiwiaGFtYnVyZyIsImhhbWlsdG9uIiwiaGFtbWVyIiwiaGFtcHNoaXJlIiwiaGFtcHRvbiIsImhhbmRiYWdzIiwiaGFuZGJvb2siLCJoYW5kZWQiLCJoYW5kaGVsZCIsImhhbmRoZWxkcyIsImhhbmRqb2IiLCJoYW5kam9icyIsImhhbmRsZWQiLCJoYW5kbGVzIiwiaGFuZGxpbmciLCJoYW5kbWFkZSIsImhhbmRzIiwiaGFuZHkiLCJoYW5naW5nIiwiaGFucyIsImhhbnNlbiIsImhhcHBlbmVkIiwiaGFwcGVuaW5nIiwiaGFwcGVucyIsImhhcHBpbmVzcyIsImhhcmFzc21lbnQiLCJoYXJib3IiLCJoYXJib3VyIiwiaGFyZGNvcmUiLCJoYXJkY292ZXIiLCJoYXJkZXIiLCJoYXJkd2FyZSIsImhhcmR3b29kIiwiaGFybGV5IiwiaGFybSIsImhhcm1mdWwiLCJoYXJtb255IiwiaGFyb2xkIiwiaGFycGVyIiwiaGFycmlzIiwiaGFycmlzb24iLCJoYXJyeSIsImhhcnQiLCJoYXJ0Zm9yZCIsImhhcnZhcmQiLCJoYXJ2ZXN0IiwiaGFydmV5IiwiaGFzIiwiaGFzaCIsImhhdHMiLCJoYXZlbiIsImhhdmluZyIsImhhd2FpaSIsImhhd2FpaWFuIiwiaGF3ayIsImhheSIsImhheWVzIiwiaGF6YXJkIiwiaGF6YXJkb3VzIiwiaGF6YXJkcyIsImhiIiwiaGMiLCJoZCIsImhkdHYiLCJoZWFkZWQiLCJoZWFkZXIiLCJoZWFkZXJzIiwiaGVhZGluZyIsImhlYWRsaW5lcyIsImhlYWRwaG9uZXMiLCJoZWFkcyIsImhlYWRzZXQiLCJoZWFsaW5nIiwiaGVhbHRoY2FyZSIsImhlYXJkIiwiaGVhcmluZ3MiLCJoZWFydHMiLCJoZWF0ZWQiLCJoZWF0ZXIiLCJoZWF0aCIsImhlYXRoZXIiLCJoZWF0aW5nIiwiaGVicmV3IiwiaGVpZ2h0cyIsImhlbGQiLCJoZWxlbiIsImhlbGVuYSIsImhlbG1ldCIsImhlbHBlZCIsImhlbHBpbmciLCJoZWxwcyIsImhlbmNlIiwiaGVuZGVyc29uIiwiaGVucnkiLCJoZW50YWkiLCJoZXBhdGl0aXMiLCJoZXJhbGQiLCJoZXJiIiwiaGVyYmFsIiwiaGVyYnMiLCJoZXJlYnkiLCJoZXJlaW4iLCJoZXJvZXMiLCJoZXdsZXR0IiwiaGgiLCJoaWRkZW4iLCJoaWVyYXJjaHkiLCJoaWdoZXIiLCJoaWdoZXN0IiwiaGlnaGxhbmQiLCJoaWdobGlnaHRlZCIsImhpZ2hsaWdodHMiLCJoaWdocyIsImhpZ2h3YXlzIiwiaGlraW5nIiwiaGlsbHMiLCJoaWx0b24iLCJoaW5kdSIsImhpbnQiLCJoaW50cyIsImhpcmVkIiwiaGlyaW5nIiwiaGlzcGFuaWMiLCJoaXN0IiwiaGl0YWNoaSIsImhpdHMiLCJoaXR0aW5nIiwiaGl2IiwiaGsiLCJobCIsImhvIiwiaG9iYmllcyIsImhvYmJ5IiwiaG9ja2V5IiwiaG9sZGVtIiwiaG9sZGVyIiwiaG9sZGVycyIsImhvbGRpbmciLCJob2xkaW5ncyIsImhvbGRzIiwiaG9sZXMiLCJob2xpZGF5cyIsImhvbGxhbmQiLCJob2xsb3ciLCJob2xseSIsImhvbGx5d29vZCIsImhvbG1lcyIsImhvbG9jYXVzdCIsImhvbWVsYW5kIiwiaG9tZXBhZ2UiLCJob21lcyIsImhvbWV0b3duIiwiaG9tZXdvcmsiLCJob24iLCJob25kYSIsImhvbmR1cmFzIiwiaG9uZyIsImhvbm9sdWx1IiwiaG9ub3JzIiwiaG9vZCIsImhvb2siLCJob3AiLCJob3BlZCIsImhvcGVmdWxseSIsImhvcGVzIiwiaG9waW5nIiwiaG9wa2lucyIsImhvcml6b250YWwiLCJob3Jtb25lIiwiaG9ybiIsImhvcm55IiwiaG9ycmlibGUiLCJob3JzZXMiLCJob3NlIiwiaG9zcGl0YWxpdHkiLCJob3NwaXRhbHMiLCJob3N0ZWQiLCJob3N0ZWwiLCJob3N0ZWxzIiwiaG9zdGluZyIsImhvc3RzIiwiaG90ZWxzIiwiaG90bWFpbCIsImhvdHRlc3QiLCJob3VybHkiLCJob3VycyIsImhvdXNlaG9sZHMiLCJob3VzZXMiLCJob3VzZXdhcmVzIiwiaG91c2V3aXZlcyIsImhvdXN0b24iLCJob3dhcmQiLCJob3d0byIsImhwIiwiaHEiLCJociIsImhyZWYiLCJocnMiLCJocyIsImh0IiwiaHRtbCIsImh0dHAiLCJodSIsImh1YiIsImh1ZHNvbiIsImh1Z2giLCJodWdoZXMiLCJodWdvIiwiaHVsbCIsImh1bWFuaXRhcmlhbiIsImh1bWFuaXRpZXMiLCJodW1hbml0eSIsImh1bWFucyIsImh1bWlkaXR5IiwiaHVuZHJlZHMiLCJodW5nIiwiaHVuZ2FyaWFuIiwiaHVuZ2FyeSIsImh1bmdlciIsImh1bnQiLCJodW50aW5ndG9uIiwiaHVycmljYW5lIiwiaHd5IiwiaHlicmlkIiwiaHlkcmF1bGljIiwiaHlkcm9jb2RvbmUiLCJoeWRyb2dlbiIsImh5Z2llbmUiLCJoeXBvdGhldGljYWwiLCJoeXVuZGFpIiwiaHoiLCJpIiwiaWEiLCJpYW4iLCJpYm0iLCJpYyIsImljZWxhbmQiLCJpY29uIiwiaWNvbnMiLCJpY3EiLCJpY3QiLCJpZCIsImlkYWhvIiwiaWRlIiwiaWRlYXMiLCJpZGVudGljYWwiLCJpZGVudGlmaWVkIiwiaWRlbnRpZmllciIsImlkZW50aWZpZXMiLCJpZGVudGlmeWluZyIsImlkbGUiLCJpZG9sIiwiaWRzIiwiaWVlZSIsImlnbm9yZWQiLCJpaSIsImlpaSIsImlsIiwiaWxsaW5vaXMiLCJpbGx1c3RyYXRlZCIsImlsbHVzdHJhdGlvbiIsImlsbHVzdHJhdGlvbnMiLCJpbSIsImltYWdlcyIsImltYWdpbmciLCJpbWciLCJpbW1pZ3JhbnRzIiwiaW1tdW5lIiwiaW1tdW5vbG9neSIsImltcGFjdHMiLCJpbXBhaXJlZCIsImltcGVyaWFsIiwiaW1wbGVtZW50YXRpb24iLCJpbXBsZW1lbnRlZCIsImltcGxlbWVudGluZyIsImltcGxpY2F0aW9ucyIsImltcGxpZWQiLCJpbXBsaWVzIiwiaW1wb3J0IiwiaW1wb3J0YW50bHkiLCJpbXBvcnRlZCIsImltcG9ydHMiLCJpbXBvc2VkIiwiaW1wcmVzc2VkIiwiaW1wcm92ZWQiLCJpbXByb3ZlbWVudHMiLCJpbXByb3ZpbmciLCJpbmFwcHJvcHJpYXRlIiwiaW5ib3giLCJpbmMiLCJpbmNlbnRpdmVzIiwiaW5jZXN0IiwiaW5jaCIsImluY2hlcyIsImluY2lkZW5jZSIsImluY2lkZW50cyIsImluY2wiLCJpbmNsdWRlZCIsImluY2x1ZGVzIiwiaW5jbHVzaW9uIiwiaW5jbHVzaXZlIiwiaW5jb21pbmciLCJpbmNvbXBsZXRlIiwiaW5jb3Jwb3JhdGVkIiwiaW5jb3JyZWN0IiwiaW5jcmVhc2VzIiwiaW5jdXJyZWQiLCJpbmQiLCJpbmRlcGVuZGVudGx5IiwiaW5kZXhlZCIsImluZGV4ZXMiLCJpbmRpYSIsImluZGlhbiIsImluZGlhbmEiLCJpbmRpYW5hcG9saXMiLCJpbmRpYW5zIiwiaW5kaWNhdGVkIiwiaW5kaWNhdGVzIiwiaW5kaWNhdGluZyIsImluZGljYXRvciIsImluZGljYXRvcnMiLCJpbmRpY2VzIiwiaW5kaWUiLCJpbmRpZ2Vub3VzIiwiaW5kaXJlY3QiLCJpbmRpdmlkdWFsbHkiLCJpbmRpdmlkdWFscyIsImluZG9uZXNpYSIsImluZG9uZXNpYW4iLCJpbmRvb3IiLCJpbmR1Y2VkIiwiaW5kdWN0aW9uIiwiaW5kdXN0cmllcyIsImluZXhwZW5zaXZlIiwiaW5mIiwiaW5mYW50cyIsImluZmVjdGVkIiwiaW5mZWN0aW9ucyIsImluZmVjdGlvdXMiLCJpbmZpbml0ZSIsImluZmx1ZW5jZWQiLCJpbmZsdWVuY2VzIiwiaW5mbyIsImluZm9ybWFsIiwiaW5mb3JtYXRpb25hbCIsImluZm9ybWF0aXZlIiwiaW5mb3JtZWQiLCJpbmZyYXJlZCIsImluZnJhc3RydWN0dXJlIiwiaW5mcmluZ2VtZW50IiwiaW5nIiwiaW5ncmVkaWVudHMiLCJpbmhlcml0ZWQiLCJpbml0aWF0ZWQiLCJpbml0aWF0aXZlcyIsImluamVjdGlvbiIsImluanVyZWQiLCJpbmp1cmllcyIsImluayIsImlua2pldCIsImlubGluZSIsImlubiIsImlubm92YXRpb24iLCJpbm5vdmF0aW9ucyIsImlubm92YXRpdmUiLCJpbm5zIiwiaW5wdXQiLCJpbnB1dHMiLCJpbnF1aXJlIiwiaW5xdWlyaWVzIiwiaW5zIiwiaW5zZWN0cyIsImluc2VydCIsImluc2VydGVkIiwiaW5zZXJ0aW9uIiwiaW5zaWRlciIsImluc2lnaHRzIiwiaW5zcGVjdGlvbiIsImluc3BlY3Rpb25zIiwiaW5zcGVjdG9yIiwiaW5zcGlyYXRpb24iLCJpbnNwaXJlZCIsImluc3RhbGxhdGlvbiIsImluc3RhbGxhdGlvbnMiLCJpbnN0YWxsZWQiLCJpbnN0YWxsaW5nIiwiaW5zdGFuY2VzIiwiaW5zdGFudCIsImluc3RhbnRseSIsImluc3RpdHV0ZSIsImluc3RpdHV0ZXMiLCJpbnN0aXR1dGlvbnMiLCJpbnN0cnVjdGlvbmFsIiwiaW5zdHJ1Y3Rpb25zIiwiaW5zdHJ1Y3RvcnMiLCJpbnN0cnVtZW50YWwiLCJpbnN0cnVtZW50YXRpb24iLCJpbnN0cnVtZW50cyIsImluc3VsYXRpb24iLCJpbnN1bGluIiwiaW5zdXJlZCIsImludCIsImludGFrZSIsImludGVnZXIiLCJpbnRlZ3JhbCIsImludGVncmF0ZSIsImludGVncmF0ZWQiLCJpbnRlZ3JhdGluZyIsImludGVncmF0aW9uIiwiaW50ZWdyaXR5IiwiaW50ZWwiLCJpbnRlbGxpZ2VudCIsImludGVuZGVkIiwiaW50ZW5zaXZlIiwiaW50ZW50IiwiaW50ZXIiLCJpbnRlcmFjdCIsImludGVyYWN0aW9ucyIsImludGVyYWN0aXZlIiwiaW50ZXJlc3RzIiwiaW50ZXJmYWNlIiwiaW50ZXJmYWNlcyIsImludGVyZmVyZW5jZSIsImludGVyaW0iLCJpbnRlcmlvciIsImludGVybWVkaWF0ZSIsImludGVybmF0aW9uYWxseSIsImludGVybmV0IiwiaW50ZXJuc2hpcCIsImludGVycHJldGVkIiwiaW50ZXJyYWNpYWwiLCJpbnRlcnNlY3Rpb24iLCJpbnRlcnN0YXRlIiwiaW50ZXJ2YWwiLCJpbnRlcnZhbHMiLCJpbnRlcnZlbnRpb25zIiwiaW50ZXJ2aWV3cyIsImludGltYXRlIiwiaW50bCIsImludHJhbmV0IiwiaW50cm8iLCJpbnRyb2R1Y2VkIiwiaW50cm9kdWNlcyIsImludHJvZHVjaW5nIiwiaW50cm9kdWN0b3J5IiwiaW52YWxpZCIsImludmVudGlvbiIsImludmVudG9yeSIsImludmVzdGlnYXRlZCIsImludmVzdGlnYXRpb25zIiwiaW52ZXN0aWdhdG9ycyIsImludmVzdGluZyIsImludmVzdG1lbnRzIiwiaW52ZXN0b3JzIiwiaW52aXNpYmxlIiwiaW52aXNpb24iLCJpbnZpdGF0aW9uIiwiaW52aXRhdGlvbnMiLCJpbnZpdGVkIiwiaW52b2ljZSIsImludm9sdmVzIiwiaW52b2x2aW5nIiwiaW8iLCJpb24iLCJpb3dhIiwiaXAiLCJpcGFxIiwiaXBvZCIsImlwcyIsImlyIiwiaXJhIiwiaXJhbiIsImlyYXEiLCJpcmFxaSIsImlyYyIsImlyZWxhbmQiLCJpcmlzaCIsImlycmlnYXRpb24iLCJpcnMiLCJpcyIsImlzYSIsImlzYWFjIiwiaXNibiIsImlzbGFtIiwiaXNsYW1pYyIsImlzbGFuZHMiLCJpc2xlIiwiaXNvIiwiaXNvbGF0ZWQiLCJpc29sYXRpb24iLCJpc3AiLCJpc3JhZWwiLCJpc3JhZWxpIiwiaXNzbiIsImlzc3VlZCIsImlzc3VlcyIsImlzdCIsImlzdGFuYnVsIiwiaXRhbGlhIiwiaXRhbGlhbiIsIml0YWxpYW5vIiwiaXRhbGljIiwiaXRhbHkiLCJpdGVtcyIsIml0dW5lcyIsIml2IiwiaXZvcnkiLCJpeCIsImoiLCJqYSIsImphY2siLCJqYWNrZXRzIiwiamFja2llIiwiamFja3NvbiIsImphY2tzb252aWxsZSIsImphY29iIiwiamFkZSIsImphZ3VhciIsImpha2UiLCJqYW0iLCJqYW1haWNhIiwiamFtZXMiLCJqYW1pZSIsImphbiIsImphbmUiLCJqYW5ldCIsImphbnVhcnkiLCJqYXBhbiIsImphcGFuZXNlIiwiamFyIiwiamFzb24iLCJqYXZhIiwiamF2YXNjcmlwdCIsImpheSIsImphenoiLCJqYyIsImpkIiwiamUiLCJqZWFuIiwiamVhbnMiLCJqZWVwIiwiamVmZiIsImplZmZlcnNvbiIsImplZmZyZXkiLCJqZWxzb2Z0IiwiamVubmlmZXIiLCJqZW5ueSIsImplcmVteSIsImplcnJ5IiwiamVyc2V5IiwiamVydXNhbGVtIiwiamVzc2UiLCJqZXNzaWNhIiwiamVzdXMiLCJqZXRzIiwiamV3ZWwiLCJqZXdlbGxlcnkiLCJqZXdlbHJ5IiwiamV3aXNoIiwiamV3cyIsImppbGwiLCJqaW0iLCJqaW1teSIsImpqIiwiam0iLCJqbyIsImpvYW4iLCJqb2JzIiwiam9lIiwiam9lbCIsImpvaG4iLCJqb2hubnkiLCJqb2hucyIsImpvaG5zb24iLCJqb2huc3RvbiIsImpvaW5lZCIsImpvaW5pbmciLCJqb2lucyIsImpva2VzIiwiam9uIiwiam9uYXRoYW4iLCJqb25lcyIsImpvcmRhbiIsImpvc2UiLCJqb3NlcGgiLCJqb3NoIiwiam9zaHVhIiwiam91cm5hbGlzbSIsImpvdXJuYWxpc3RzIiwiam91cm5hbHMiLCJqb3ljZSIsImpwIiwianBlZyIsImpwZyIsImpyIiwianMiLCJqdWFuIiwianVkZ2VzIiwianVkaWNpYWwiLCJqdWR5IiwianVsIiwianVsaWEiLCJqdWxpYW4iLCJqdWxpZSIsImp1bHkiLCJqdW1waW5nIiwianVuIiwianVuY3Rpb24iLCJqdW5lIiwianVuZ2xlIiwianVuayIsImp1cmlzZGljdGlvbiIsImp1c3RpbiIsImp1dmVuaWxlIiwianZjIiwiayIsImthIiwia2FpIiwia2Fuc2FzIiwia2FyYW9rZSIsImthcmVuIiwia2FybCIsImthcm1hIiwia2F0ZSIsImthdGh5Iiwia2F0aWUiLCJrYXRyaW5hIiwia2F5Iiwia2F6YWtoc3RhbiIsImtiIiwia2RlIiwia2VlbiIsImtlZXBpbmciLCJrZWVwcyIsImtlaXRoIiwia2Vsa29vIiwia2VsbHkiLCJrZW4iLCJrZW5uZWR5Iiwia2VubmV0aCIsImtlbm55Iiwia2VubyIsImtlbnQiLCJrZW50dWNreSIsImtlbnlhIiwia2VwdCIsImtlcm5lbCIsImtlcnJ5Iiwia2V2aW4iLCJrZXlib2FyZCIsImtleWJvYXJkcyIsImtleXMiLCJrZXl3b3JkIiwia2V5d29yZHMiLCJrZyIsImtpZG5leSIsImtpZHMiLCJraWppamkiLCJraWxsZWQiLCJraWxscyIsImtpbG9tZXRlcnMiLCJraW0iLCJraW5hc2UiLCJraW5kYSIsImtpbmRzIiwia2luZ2RvbSIsImtpbmdzIiwia2luZ3N0b24iLCJraXJrIiwia2lzc2luZyIsImtpdCIsImtpdHMiLCJraXR0eSIsImtsZWluIiwia20iLCJrbmV3Iiwia25pZ2h0Iiwia25pZ2h0cyIsImtuaXQiLCJrbml0dGluZyIsImtuaXZlcyIsImtub3dpbmciLCJrbm93bGVkZ2VzdG9ybSIsImtub3duIiwia25vd3MiLCJrbyIsImtvZGFrIiwia29uZyIsImtvcmVhIiwia29yZWFuIiwia3J1Z2VyIiwia3MiLCJrdXJ0Iiwia3V3YWl0Iiwia3ciLCJreSIsImt5bGUiLCJsIiwibGEiLCJsYWJlbGVkIiwibGFiZWxzIiwibGFib3JhdG9yaWVzIiwibGFib3VyIiwibGFicyIsImxhY2UiLCJsYWRkZXIiLCJsYWRlbiIsImxhZGllcyIsImxhZmF5ZXR0ZSIsImxhaWQiLCJsYWtlcyIsImxhbWIiLCJsYW1iZGEiLCJsYW1wIiwibGFtcHMiLCJsYW4iLCJsYW5jYXN0ZXIiLCJsYW5jZSIsImxhbmRpbmciLCJsYW5kcyIsImxhbmRzY2FwZXMiLCJsYW5lIiwibGFuZXMiLCJsYW5nIiwibGFuZ3VhZ2VzIiwibGFua2EiLCJsYW9zIiwibGFwdG9wIiwibGFwdG9wcyIsImxhcmdlciIsImxhcmdlc3QiLCJsYXJyeSIsImxhcyIsImxhc2VyIiwibGFzdGluZyIsImxhdCIsImxhdGVseSIsImxhdGVzdCIsImxhdGV4IiwibGF0aW4iLCJsYXRpbmEiLCJsYXRpbmFzIiwibGF0aW5vIiwibGF0aXR1ZGUiLCJsYXR2aWEiLCJsYXVkZXJkYWxlIiwibGF1Z2hpbmciLCJsYXVuY2hlZCIsImxhdW5jaGVzIiwibGF1bmRyeSIsImxhdXJhIiwibGF1cmVuIiwibGF3cmVuY2UiLCJsYXdzIiwibGF3eWVycyIsImxheWVycyIsImxheW91dCIsImxhenkiLCJsYiIsImxicyIsImxjIiwibGNkIiwibGQiLCJsZSIsImxlYWRlcnMiLCJsZWFkcyIsImxlYXJuZWQiLCJsZWFybmVycyIsImxlYXNlIiwibGVhc2luZyIsImxlYXZlcyIsImxlYXZpbmciLCJsZWJhbm9uIiwibGVjdHVyZSIsImxlY3R1cmVzIiwibGVkIiwibGVlIiwibGVlZHMiLCJsZWdhbGx5IiwibGVnZW5kYXJ5IiwibGVnZW5kcyIsImxlZ2lzbGF0aXZlIiwibGVnaXNsYXR1cmUiLCJsZWdzIiwibGVpc3VyZSIsImxlbiIsImxlbmRlciIsImxlbmRlcnMiLCJsZW5kaW5nIiwibGVucyIsImxlbnNlcyIsImxlbyIsImxlb24iLCJsZW9uYXJkIiwibGVvbmUiLCJsZXMiLCJsZXNiaWFuIiwibGVzYmlhbnMiLCJsZXNsaWUiLCJsZXNzZXIiLCJsZXNzb25zIiwibGV0cyIsImxldHRlcnMiLCJsZXR0aW5nIiwibGV1IiwibGV2ZWxzIiwibGV2aXRyYSIsImxldnkiLCJsZXdpcyIsImxleGluZ3RvbiIsImxleG1hcmsiLCJsZXh1cyIsImxmIiwibGciLCJsaSIsImxpYWJpbGl0aWVzIiwibGlhYmlsaXR5IiwibGlhYmxlIiwibGliIiwibGliZXJpYSIsImxpYmVydHkiLCJsaWJyYXJpYW4iLCJsaWJyYXJpZXMiLCJsaWJzIiwibGljZW5jZSIsImxpY2Vuc2VkIiwibGljZW5zZXMiLCJsaWNlbnNpbmciLCJsaWNraW5nIiwibGlkIiwibGllY2h0ZW5zdGVpbiIsImxpZXMiLCJsaWdodGJveCIsImxpZ2h0ZXIiLCJsaWdodGluZyIsImxpZ2h0bmluZyIsImxpZ2h0cyIsImxpZ2h0d2VpZ2h0IiwibGlrZWQiLCJsaWtlbGlob29kIiwibGlrZXMiLCJsaWtld2lzZSIsImxpbCIsImxpbWUiLCJsaW1pdGF0aW9ucyIsImxpbWl0aW5nIiwibGltaXRzIiwibGltb3VzaW5lcyIsImxpbmNvbG4iLCJsaW5kYSIsImxpbmRzYXkiLCJsaW5lYXIiLCJsaW5lZCIsImxpbmVzIiwibGluZ2VyaWUiLCJsaW5rZWQiLCJsaW5raW5nIiwibGlua3MiLCJsaW51eCIsImxpb24iLCJsaW9ucyIsImxpcHMiLCJsaXF1aWQiLCJsaXNhIiwibGlzdGVkIiwibGlzdGVuaW5nIiwibGlzdGluZyIsImxpc3RpbmdzIiwibGlzdHByaWNlIiwibGlzdHMiLCJsaXQiLCJsaXRlIiwibGl0ZXJhY3kiLCJsaXRodWFuaWEiLCJsaXRpZ2F0aW9uIiwibGl2ZWNhbSIsImxpdmVkIiwibGl2ZXIiLCJsaXZlcnBvb2wiLCJsaXZlcyIsImxpdmVzZXgiLCJsaXZlc3RvY2siLCJsaXoiLCJsbCIsImxsYyIsImxsb3lkIiwibGxwIiwibG0iLCJsbiIsImxvIiwibG9hZGVkIiwibG9hZGluZyIsImxvYWRzIiwibG9hbnMiLCJsb2JieSIsImxvYyIsImxvY2FsZSIsImxvY2FsbHkiLCJsb2NhdGVkIiwibG9jYXRpb25zIiwibG9jYXRvciIsImxvY2tlZCIsImxvY2tpbmciLCJsb2NrcyIsImxvZGdlIiwibG9kZ2luZyIsImxvZyIsImxvZ2FuIiwibG9nZ2VkIiwibG9nZ2luZyIsImxvZ2ljIiwibG9naWNhbCIsImxvZ2luIiwibG9naXN0aWNzIiwibG9naXRlY2giLCJsb2dvIiwibG9nb3MiLCJsb2dzIiwibG9sIiwibG9saXRhIiwibG9uZG9uIiwibG9uZSIsImxvbmVseSIsImxvbmdlciIsImxvbmdlc3QiLCJsb25naXR1ZGUiLCJsb29rZWQiLCJsb29raW5nIiwibG9va3MiLCJsb29rc21hcnQiLCJsb29rdXAiLCJsb29wIiwibG9vcHMiLCJsb3BleiIsImxvcmQiLCJsb3MiLCJsb3NpbmciLCJsb3NzZXMiLCJsb3R0ZXJ5IiwibG90dXMiLCJsb3UiLCJsb3VpcyIsImxvdWlzZSIsImxvdWlzaWFuYSIsImxvdWlzdmlsbGUiLCJsb3VuZ2UiLCJsb3ZlZCIsImxvdmVycyIsImxvdmVzIiwibG92aW5nIiwibG93ZXN0IiwibG93cyIsImxwIiwibHMiLCJsdCIsImx0ZCIsImx1IiwibHVjYXMiLCJsdWNpYSIsImx1Y3kiLCJsdWdnYWdlIiwibHVpcyIsImx1a2UiLCJsdXRoZXIiLCJsdXhlbWJvdXJnIiwibHV4dXJ5IiwibHljb3MiLCJseWluZyIsImx5bm4iLCJseXJpYyIsImx5cmljcyIsIm0iLCJtYSIsIm1hYyIsIm1hY2Vkb25pYSIsIm1hY2hpbmVyeSIsIm1hY2hpbmVzIiwibWFjaW50b3NoIiwibWFjcm8iLCJtYWNyb21lZGlhIiwibWFkYWdhc2NhciIsIm1hZGUiLCJtYWRpc29uIiwibWFkbmVzcyIsIm1hZG9ubmEiLCJtYWRyaWQiLCJtYWUiLCJtYWciLCJtYWdhemluZXMiLCJtYWdpYyIsIm1hZ2ljYWwiLCJtYWduZXQiLCJtYWduZXRpYyIsIm1hZ25pZmljZW50IiwibWFnbml0dWRlIiwibWFpIiwibWFpZGVuIiwibWFpbGVkIiwibWFpbGluZyIsIm1haWxtYW4iLCJtYWlscyIsIm1haWx0byIsIm1haW5lIiwibWFpbmxhbmQiLCJtYWluc3RyZWFtIiwibWFpbnRhaW5lZCIsIm1haW50YWluaW5nIiwibWFpbnRhaW5zIiwibWFrZXJzIiwibWFrZXMiLCJtYWtpbmciLCJtYWxhd2kiLCJtYWxheXNpYSIsIm1hbGRpdmVzIiwibWFsZXMiLCJtYWxpIiwibWFscHJhY3RpY2UiLCJtYWx0YSIsIm1hbWJvIiwibWFuYWdlZCIsIm1hbmFnZXJzIiwibWFuYWdpbmciLCJtYW5jaGVzdGVyIiwibWFuZGF0ZSIsIm1hbmRhdG9yeSIsIm1hbmdhIiwibWFuaGF0dGFuIiwibWFuaXRvYmEiLCJtYW5vciIsIm1hbnVhbCIsIm1hbnVhbGx5IiwibWFudWFscyIsIm1hbnVmYWN0dXJlIiwibWFudWZhY3R1cmVkIiwibWFudWZhY3R1cmVycyIsIm1hcGxlIiwibWFwcGluZyIsIm1hcHMiLCJtYXIiLCJtYXJhdGhvbiIsIm1hcmJsZSIsIm1hcmMiLCJtYXJjaCIsIm1hcmNvIiwibWFyY3VzIiwibWFyZGkiLCJtYXJnYXJldCIsIm1hcmlhIiwibWFyaWFoIiwibWFyaWUiLCJtYXJpanVhbmEiLCJtYXJpbHluIiwibWFyaW5hIiwibWFyaW5lIiwibWFyaW8iLCJtYXJpb24iLCJtYXJpdGltZSIsIm1hcmtlZCIsIm1hcmtlciIsIm1hcmtlcnMiLCJtYXJrZXRwbGFjZSIsIm1hcmtldHMiLCJtYXJraW5nIiwibWFya3MiLCJtYXJyaW90dCIsIm1hcnMiLCJtYXJzaCIsIm1hcnNoYWxsIiwibWFydCIsIm1hcnRoYSIsIm1hcnRpYWwiLCJtYXJ0aW4iLCJtYXJ2ZWwiLCJtYXJ5IiwibWFyeWxhbmQiLCJtYXMiLCJtYXNvbiIsIm1hc3NhY2h1c2V0dHMiLCJtYXNzYWdlIiwibWFzdGVyY2FyZCIsIm1hc3RlcnMiLCJtYXN0dXJiYXRpbmciLCJtYXN0dXJiYXRpb24iLCJtYXQiLCJtYXRjaGVkIiwibWF0Y2hlcyIsIm1hdGNoaW5nIiwibWF0ZSIsIm1hdGVyaWFscyIsIm1hdGVybml0eSIsIm1hdGhlbWF0aWNhbCIsIm1hdGhlbWF0aWNzIiwibWF0aW5nIiwibWF0cml4IiwibWF0cyIsIm1hdHQiLCJtYXR0ZXJzIiwibWF0dGhldyIsIm1hdHRyZXNzIiwibWF0dXJlIiwibWF1aSIsIm1hdXJpdGl1cyIsIm1heCIsIm1heGltaXplIiwibWF4aW11bSIsIm1hemRhIiwibWIiLCJtYmEiLCJtYyIsIm1jZG9uYWxkIiwibWQiLCJtZWFscyIsIm1lYW5pbmdmdWwiLCJtZWFucyIsIm1lYW50IiwibWVhc3VyZWQiLCJtZWFzdXJlbWVudHMiLCJtZWFzdXJlcyIsIm1lYXN1cmluZyIsIm1lY2hhbmljYWwiLCJtZWNoYW5pY3MiLCJtZWNoYW5pc21zIiwibWVkIiwibWVkYWwiLCJtZWRpYW4iLCJtZWRpYXdpa2kiLCJtZWRpY2FpZCIsIm1lZGljYXJlIiwibWVkaWNhdGlvbnMiLCJtZWRpY2luZXMiLCJtZWRpZXZhbCIsIm1lZGl0YXRpb24iLCJtZWRpdGVycmFuZWFuIiwibWVkbGluZSIsIm1lZXRpbmdzIiwibWVldHMiLCJtZWV0dXAiLCJtZWdhIiwibWVsIiwibWVsYm91cm5lIiwibWVsaXNzYSIsIm1lbSIsIm1lbWJlcnMiLCJtZW1icmFuZSIsIm1lbW8iLCJtZW1vcmFiaWxpYSIsIm1lbW9yaWFsIiwibWVtb3JpZXMiLCJtZW1waGlzIiwibWVuIiwibWVucyIsIm1lbnQiLCJtZW50aW9uZWQiLCJtZW50b3IiLCJtZW51cyIsIm1lcmNlZGVzIiwibWVyY2hhbmRpc2UiLCJtZXJjaGFudCIsIm1lcmNoYW50cyIsIm1lcmN1cnkiLCJtZXJjeSIsIm1lcmdlIiwibWVyZ2VyIiwibWVyaXQiLCJtZXJyeSIsIm1lc2EiLCJtZXNoIiwibWVzc2FnZXMiLCJtZXNzYWdpbmciLCJtZXNzZW5nZXIiLCJtZXQiLCJtZXRhIiwibWV0YWJvbGlzbSIsIm1ldGFkYXRhIiwibWV0YWxsaWMiLCJtZXRhbGxpY2EiLCJtZXRhbHMiLCJtZXRlcnMiLCJtZXRob2RvbG9neSIsIm1ldGhvZHMiLCJtZXRyZXMiLCJtZXRyaWMiLCJtZXRybyIsIm1ldHJvcG9saXRhbiIsIm1leGljYW4iLCJtZXhpY28iLCJtZXllciIsIm1mIiwibWciLCJtaCIsIm1oeiIsIm1pIiwibWlhIiwibWlhbWkiLCJtaWMiLCJtaWNlIiwibWljaGFlbCIsIm1pY2hlbCIsIm1pY2hlbGxlIiwibWljaGlnYW4iLCJtaWNybyIsIm1pY3JvcGhvbmUiLCJtaWNyb3NvZnQiLCJtaWNyb3dhdmUiLCJtaWQiLCJtaWRpIiwibWlkbGFuZHMiLCJtaWRuaWdodCIsIm1pZHdlc3QiLCJtaWdodHkiLCJtaWdyYXRpb24iLCJtaWtlIiwibWlsIiwibWlsYW4iLCJtaWxkIiwibWlsZSIsIm1pbGVhZ2UiLCJtaWxlcyIsIm1pbGYiLCJtaWxmaHVudGVyIiwibWlsZnMiLCJtaWxsIiwibWlsbGVubml1bSIsIm1pbGxlciIsIm1pbGxpb25zIiwibWlsbHMiLCJtaWx0b24iLCJtaWx3YXVrZWUiLCJtaW1lIiwibWluIiwibWluZHMiLCJtaW5lcmFsIiwibWluZXJhbHMiLCJtaW5lcyIsIm1pbmkiLCJtaW5pYXR1cmUiLCJtaW5pbWFsIiwibWluaW1pemUiLCJtaW5pbXVtIiwibWluaW5nIiwibWluaXN0ZXJzIiwibWluaXN0cmllcyIsIm1pbmlzdHJ5IiwibWlubmVhcG9saXMiLCJtaW5uZXNvdGEiLCJtaW5vbHRhIiwibWlucyIsIm1pbnQiLCJtaW51cyIsIm1pbnV0ZXMiLCJtaXJyb3JzIiwibWlzYyIsIm1pc2NlbGxhbmVvdXMiLCJtaXNzZWQiLCJtaXNzaW5nIiwibWlzc2lvbnMiLCJtaXNzaXNzaXBwaSIsIm1pc3NvdXJpIiwibWlzdGFrZXMiLCJtaXN0cmVzcyIsIm1pdCIsIm1pdGNoZWxsIiwibWl0c3ViaXNoaSIsIm1peGVkIiwibWl4ZXIiLCJtaXhpbmciLCJtaiIsIm1sIiwibWxiIiwibWxzIiwibW0iLCJtbiIsIm1vIiwibW9iaWxlIiwibW9iaWxlcyIsIm1vYmlsaXR5IiwibW9kIiwibW9kZWxpbmciLCJtb2RlbGxpbmciLCJtb2RlbHMiLCJtb2RlbSIsIm1vZGVtcyIsIm1vZGVyYXRvciIsIm1vZGVyYXRvcnMiLCJtb2RlcyIsIm1vZGlmaWNhdGlvbiIsIm1vZGlmaWNhdGlvbnMiLCJtb2RpZmllZCIsIm1vZGlmeSIsIm1vZHMiLCJtb2R1bGFyIiwibW9kdWxlcyIsIm1vaXN0dXJlIiwibW9sZCIsIm1vbGRvdmEiLCJtb2xlY3VsYXIiLCJtb2xlY3VsZXMiLCJtb21lbnRzIiwibW9tZW50dW0iLCJtb21zIiwibW9uIiwibW9uYWNvIiwibW9uZGF5IiwibW9uZXRhcnkiLCJtb25nb2xpYSIsIm1vbmljYSIsIm1vbml0b3JlZCIsIm1vbml0b3JpbmciLCJtb25pdG9ycyIsIm1vbmtleSIsIm1vbm8iLCJtb25yb2UiLCJtb25zdGVyIiwibW9uc3RlcnMiLCJtb250YW5hIiwibW9udGUiLCJtb250Z29tZXJ5IiwibW9udGhseSIsIm1vbnRocyIsIm1vbnRyZWFsIiwibW9vcmUiLCJtb3JnYW4iLCJtb3JvY2NvIiwibW9ycmlzIiwibW9ycmlzb24iLCJtb3J0YWxpdHkiLCJtb3J0Z2FnZXMiLCJtb3Njb3ciLCJtb3NlcyIsIm1vc3MiLCJtb3RlbCIsIm1vdGVscyIsIm1vdGhlcmJvYXJkIiwibW90aGVycyIsIm1vdGl2YXRlZCIsIm1vdG9yY3ljbGUiLCJtb3RvcmN5Y2xlcyIsIm1vdG9yb2xhIiwibW90b3JzIiwibW91bnRhaW5zIiwibW91bnRlZCIsIm1vdW50aW5nIiwibW91bnRzIiwibW92ZWQiLCJtb3ZlbWVudHMiLCJtb3ZlcnMiLCJtb3ZlcyIsIm1vdmllcyIsIm1vdmluZyIsIm1vemFtYmlxdWUiLCJtb3ppbGxhIiwibXAiLCJtcGVnIiwibXBlZ3MiLCJtcGciLCJtcGgiLCJtciIsIm1ybmEiLCJtcnMiLCJtcyIsIm1zZyIsIm1zZ2lkIiwibXNnc3RyIiwibXNpZSIsIm1zbiIsIm10IiwibXR2IiwibXUiLCJtdWQiLCJtdWciLCJtdWx0aSIsIm11bHRpbWVkaWEiLCJtdW1iYWkiLCJtdW5pY2giLCJtdW5pY2lwYWwiLCJtdW5pY2lwYWxpdHkiLCJtdXJwaHkiLCJtdXJyYXkiLCJtdXNjbGVzIiwibXVzZXVtcyIsIm11c2ljaWFucyIsIm11c2xpbSIsIm11c2xpbXMiLCJtdXN0YW5nIiwibXV6ZSIsIm12IiwibXciLCJteCIsIm15YW5tYXIiLCJteWVycyIsIm15cnRsZSIsIm15c2ltb24iLCJteXNwYWNlIiwibXlzcWwiLCJteXN0ZXJpb3VzIiwibiIsIm5hIiwibmFpbCIsIm5haWxzIiwibmFtIiwibmFtZWQiLCJuYW1lbHkiLCJuYW1lcyIsIm5hbWVzcGFjZSIsIm5hbWliaWEiLCJuYW5jeSIsIm5hbm8iLCJuYXBsZXMiLCJuYXNhIiwibmFzY2FyIiwibmFzZGFxIiwibmFzaHZpbGxlIiwibmFzdHkiLCJuYXQiLCJuYXRoYW4iLCJuYXRpb25hbGx5IiwibmF0aW9ucyIsIm5hdGlvbndpZGUiLCJuYXRvIiwibmF0dXJhbHMiLCJuYXVnaHR5IiwibmF2IiwibmF2YWwiLCJuYXZpZ2F0ZSIsIm5hdmlnYXRpb24iLCJuYXZpZ2F0b3IiLCJuYXZ5IiwibmIiLCJuYmEiLCJuYmMiLCJuYyIsIm5jYWEiLCJuZCIsIm5lIiwibmVhcmVzdCIsIm5lYnJhc2thIiwibmVjIiwibmVjZXNzaXR5IiwibmVja2xhY2UiLCJuZWVkZWQiLCJuZWVkbGUiLCJuZWVkcyIsIm5lZ290aWF0aW9ucyIsIm5laWdoYm9ycyIsIm5laWwiLCJuZWxzb24iLCJuZW8iLCJuZW9uIiwibmVwYWwiLCJuZXN0IiwibmVzdGVkIiwibmV0aGVybGFuZHMiLCJuZXRzY2FwZSIsIm5ldHdvcmtpbmciLCJuZXR3b3JrcyIsIm5ldXJhbCIsIm5ldXRyYWwiLCJuZXZhZGEiLCJuZXdhcmsiLCJuZXdiaWUiLCJuZXdjYXN0bGUiLCJuZXdlciIsIm5ld2VzdCIsIm5ld2ZvdW5kbGFuZCIsIm5ld21hbiIsIm5ld3BvcnQiLCJuZXdzbGV0dGVyIiwibmV3c2xldHRlcnMiLCJuZXdzcGFwZXJzIiwibmV3dG9uIiwibmV4dGVsIiwibmZsIiwibmciLCJuaCIsIm5obCIsIm5ocyIsIm5pIiwibmlhZ2FyYSIsIm5pY2FyYWd1YSIsIm5pY2hvbGFzIiwibmljayIsIm5pY2tlbCIsIm5pY2tuYW1lIiwibmljb2xlIiwibmlnZXIiLCJuaWdlcmlhIiwibmlnaHRsaWZlIiwibmlnaHRtYXJlIiwibmlnaHRzIiwibmlrZSIsIm5pa29uIiwibmlsIiwibmludGVuZG8iLCJuaXBwbGUiLCJuaXBwbGVzIiwibmlydmFuYSIsIm5pc3NhbiIsIm5pdHJvZ2VuIiwibmoiLCJubCIsIm5tIiwibm4iLCJub2JsZSIsIm5vZGUiLCJub2RlcyIsIm5va2lhIiwibm9taW5hdGVkIiwibm9taW5hdGlvbnMiLCJub24iLCJub25wcm9maXQiLCJub29uIiwibm9yZm9sayIsIm5vcm0iLCJub3JtYW4iLCJub3J0aGVhc3QiLCJub3J0aHdlc3QiLCJub3J0b24iLCJub3J3YXkiLCJub3J3ZWdpYW4iLCJub3RlYm9vayIsIm5vdGVib29rcyIsIm5vdGVkIiwibm90ZXMiLCJub3RpY2VkIiwibm90aWNlcyIsIm5vdGlmaWNhdGlvbiIsIm5vdGlmaWNhdGlvbnMiLCJub3RpZmllZCIsIm5vdGlmeSIsIm5vdHJlIiwibm90dGluZ2hhbSIsIm5vdiIsIm5vdmEiLCJub3ZlbHMiLCJub3ZlbHR5Iiwibm92ZW1iZXIiLCJucCIsIm5yIiwibnMiLCJuc3ciLCJudCIsIm50c2MiLCJudSIsIm51ZGUiLCJudWRpc3QiLCJudWRpdHkiLCJudWtlIiwibnVsbCIsIm51bWJlcnMiLCJudW1lcmljIiwibnVtZXJpY2FsIiwibnVyc2VyeSIsIm51cnNlcyIsIm51cnNpbmciLCJudXRyaXRpb24iLCJudXRyaXRpb25hbCIsIm51dHMiLCJudXR0ZW4iLCJudiIsIm52aWRpYSIsIm53IiwibnkiLCJueWMiLCJueWxvbiIsIm56IiwibyIsIm9hayIsIm9ha2xhbmQiLCJvYWtzIiwib2FzaXMiLCJvYiIsIm9iZXNpdHkiLCJvYml0dWFyaWVzIiwib2JqIiwib2JqZWN0aXZlcyIsIm9iamVjdHMiLCJvYmxpZ2F0aW9ucyIsIm9ic2VydmF0aW9ucyIsIm9ic2VydmVkIiwib2J0YWluZWQiLCJvYnRhaW5pbmciLCJvYyIsIm9jY2FzaW9uYWwiLCJvY2Nhc2lvbnMiLCJvY2N1cGF0aW9uYWwiLCJvY2N1cGF0aW9ucyIsIm9jY3VwaWVkIiwib2NjdXJyZWQiLCJvY2N1cnJlbmNlIiwib2NjdXJyaW5nIiwib2NjdXJzIiwib2NsYyIsIm9jdCIsIm9jdG9iZXIiLCJvZSIsIm9lY2QiLCJvZW0iLCJvZmZlcmVkIiwib2ZmZXJpbmciLCJvZmZlcmluZ3MiLCJvZmZlcnMiLCJvZmZpY2VycyIsIm9mZmljZXMiLCJvZmZpY2lhbGx5Iiwib2ZmaWNpYWxzIiwib2ZmbGluZSIsIm9mZnNldCIsIm9mZnNob3JlIiwib2ciLCJvaGlvIiwib2lscyIsIm9rbGFob21hIiwib2wiLCJvbGRlciIsIm9sZGVzdCIsIm9saXZlIiwib2xpdmVyIiwib2x5bXBpYyIsIm9seW1waWNzIiwib2x5bXB1cyIsIm9tIiwib21haGEiLCJvbWFuIiwib21lZ2EiLCJvbWlzc2lvbnMiLCJvbmVzIiwib25zIiwib250YXJpbyIsIm9vIiwib29vIiwib29wcyIsIm9wIiwib3BlbmVkIiwib3BlbmluZ3MiLCJvcGVucyIsIm9wZXJhIiwib3BlcmF0ZWQiLCJvcGVyYXRlcyIsIm9wZXJhdGlvbmFsIiwib3BlcmF0aW9ucyIsIm9wZXJhdG9ycyIsIm9waW5pb25zIiwib3Bwb25lbnRzIiwib3Bwb3J0dW5pdGllcyIsIm9wcG9zZWQiLCJvcHQiLCJvcHRpY2FsIiwib3B0aWNzIiwib3B0aW1hbCIsIm9wdGltaXphdGlvbiIsIm9wdGltaXplIiwib3B0aW11bSIsIm9wdGlvbmFsIiwib3B0aW9ucyIsIm9yYWNsZSIsIm9yYWwiLCJvcmJpdCIsIm9yY2hlc3RyYSIsIm9yZGVyZWQiLCJvcmRlcmluZyIsIm9yZGVycyIsIm9yZGluYW5jZSIsIm9yZWdvbiIsIm9yZyIsIm9yZ2FuIiwib3JnYW5pc2F0aW9uIiwib3JnYW5pc2F0aW9ucyIsIm9yZ2FuaXNlZCIsIm9yZ2FuaXNtcyIsIm9yZ2FuaXphdGlvbmFsIiwib3JnYW5pemF0aW9ucyIsIm9yZ2FuaXplZCIsIm9yZ2FuaXplciIsIm9yZ2FuaXppbmciLCJvcmdhc20iLCJvcmd5Iiwib3JpZW50YWwiLCJvcmllbnRlZCIsIm9yaWdpbnMiLCJvcmxhbmRvIiwib3JsZWFucyIsIm9zIiwib3NjYXIiLCJvdCIsIm90dGF3YSIsIm91Iiwib3VycyIsIm91dGNvbWVzIiwib3V0ZG9vciIsIm91dGRvb3JzIiwib3V0ZXIiLCJvdXRsZXQiLCJvdXRsZXRzIiwib3V0bGluZSIsIm91dGxpbmVkIiwib3V0bG9vayIsIm91dHB1dCIsIm91dHB1dHMiLCJvdXRyZWFjaCIsIm91dHNvdXJjaW5nIiwib3V0c3RhbmRpbmciLCJvdmFsIiwib3ZlcmhlYWQiLCJvdmVybmlnaHQiLCJvdmVyc2VhcyIsIm92ZXJ2aWV3Iiwib3dlbiIsIm93bmVkIiwib3duZXJzIiwib3duZXJzaGlwIiwib3ducyIsIm94Zm9yZCIsIm94aWRlIiwib3h5Z2VuIiwib3oiLCJvem9uZSIsInAiLCJwYSIsInBhYyIsInBhY2lmaWMiLCJwYWNrYWdlcyIsInBhY2thZ2luZyIsInBhY2thcmQiLCJwYWNrZWQiLCJwYWNrZXQiLCJwYWNrZXRzIiwicGFja2luZyIsInBhY2tzIiwicGFkIiwicGFkcyIsInBhZ2VzIiwicGFpZCIsInBhaW50YmFsbCIsInBhaW50ZWQiLCJwYWludGluZ3MiLCJwYWlycyIsInBha2lzdGFuIiwicGFsIiwicGFsYWNlIiwicGFsZXN0aW5lIiwicGFsZXN0aW5pYW4iLCJwYWxtZXIiLCJwYW0iLCJwYW1lbGEiLCJwYW5hbWEiLCJwYW5hc29uaWMiLCJwYW5lbHMiLCJwYW5pYyIsInBhbnRpZXMiLCJwYW50cyIsInBhbnR5aG9zZSIsInBhcGVyYmFjayIsInBhcGVyYmFja3MiLCJwYXBlcnMiLCJwYXB1YSIsInBhciIsInBhcmEiLCJwYXJhZGUiLCJwYXJhZGlzZSIsInBhcmFncmFwaCIsInBhcmFncmFwaHMiLCJwYXJhZ3VheSIsInBhcmFsbGVsIiwicGFyYW1ldGVyIiwicGFyYW1ldGVycyIsInBhcmNlbCIsInBhcmVudGFsIiwicGFyZW50aW5nIiwicGFyZW50cyIsInBhcmlzIiwicGFyaXNoIiwicGFya2VyIiwicGFya3MiLCJwYXJsaWFtZW50IiwicGFybGlhbWVudGFyeSIsInBhcnRpYWwiLCJwYXJ0aWFsbHkiLCJwYXJ0aWNpcGFudHMiLCJwYXJ0aWNpcGF0ZWQiLCJwYXJ0aWNpcGF0aW5nIiwicGFydGljbGUiLCJwYXJ0aWNsZXMiLCJwYXJ0aWVzIiwicGFydGl0aW9uIiwicGFydG5lcnMiLCJwYXJ0bmVyc2hpcHMiLCJwYXJ0cyIsInBhcyIsInBhc28iLCJwYXNzZWQiLCJwYXNzZW5nZXJzIiwicGFzc2VzIiwicGFzc2luZyIsInBhc3NpdmUiLCJwYXNzcG9ydCIsInBhc3N3b3JkIiwicGFzc3dvcmRzIiwicGFzdGEiLCJwYXN0ZSIsInBhc3RvciIsInBhdCIsInBhdGNoZXMiLCJwYXRlbnQiLCJwYXRlbnRzIiwicGF0aG9sb2d5IiwicGF0aHMiLCJwYXRpZW50cyIsInBhdGlvIiwicGF0cmljaWEiLCJwYXRyaWNrIiwicGF0cm9sIiwicGF0dGVybnMiLCJwYXVsIiwicGF2aWxpb24iLCJwYXhpbCIsInBheWFibGUiLCJwYXlkYXkiLCJwYXlpbmciLCJwYXltZW50cyIsInBheXBhbCIsInBheXJvbGwiLCJwYXlzIiwicGIiLCJwYyIsInBjaSIsInBjcyIsInBjdCIsInBkIiwicGRhIiwicGRhcyIsInBkZiIsInBkdCIsInBlIiwicGVhY2VmdWwiLCJwZWFybCIsInBlYXMiLCJwZWRpYXRyaWMiLCJwZWUiLCJwZWVpbmciLCJwZWVycyIsInBlbiIsInBlbmFsdGllcyIsInBlbmNpbCIsInBlbmRhbnQiLCJwZW5kaW5nIiwicGVuZXRyYXRpb24iLCJwZW5ndWluIiwicGVuaW5zdWxhIiwicGVuaXMiLCJwZW5uIiwicGVubnN5bHZhbmlhIiwicGVubnkiLCJwZW5zIiwicGVuc2lvbiIsInBlbnNpb25zIiwicGVudGl1bSIsInBlb3BsZXMiLCJwZXJjZWl2ZWQiLCJwZXJjZW50IiwicGVyZm9ybWFuY2VzIiwicGVyZm9ybWVkIiwicGVyZm9ybWVyIiwicGVyZm9ybWluZyIsInBlcmZvcm1zIiwicGVyZnVtZSIsInBlcmlvZGljIiwicGVyaW9kaWNhbGx5IiwicGVyaW9kcyIsInBlcmlwaGVyYWwiLCJwZXJpcGhlcmFscyIsInBlcmwiLCJwZXJtYWxpbmsiLCJwZXJtaXNzaW9ucyIsInBlcm1pdHMiLCJwZXJtaXR0ZWQiLCJwZXJyeSIsInBlcnNpYW4iLCJwZXJzaXN0ZW50IiwicGVyc29uYWxpemVkIiwicGVyc29uYWxzIiwicGVyc29ucyIsInBlcnNwZWN0aXZlcyIsInBlcnRoIiwicGVydSIsInBlc3QiLCJwZXRlIiwicGV0ZXIiLCJwZXRlcnNidXJnIiwicGV0ZXJzb24iLCJwZXRpdGUiLCJwZXRpdGlvbiIsInBldHJvbGV1bSIsInBldHMiLCJwZiIsInBnIiwicGdwIiwicGgiLCJwaGFudG9tIiwicGhhcm1hY2V1dGljYWwiLCJwaGFybWFjZXV0aWNhbHMiLCJwaGFybWFjaWVzIiwicGhhcm1hY29sb2d5IiwicGhhcm1hY3kiLCJwaGFzZXMiLCJwaGQiLCJwaGVudGVybWluZSIsInBoaSIsInBoaWwiLCJwaGlsYWRlbHBoaWEiLCJwaGlsaXAiLCJwaGlsaXBwaW5lcyIsInBoaWxpcHMiLCJwaGlsbGlwcyIsInBob2VuaXgiLCJwaG9uZXMiLCJwaG90b2dyYXBoZXJzIiwicGhvdG9ncmFwaGljIiwicGhvdG9ncmFwaHMiLCJwaG90b2dyYXBoeSIsInBob3RvcyIsInBob3Rvc2hvcCIsInBocCIsInBocGJiIiwicGhyYXNlcyIsInBoeXMiLCJwaHlzaWNpYW5zIiwicGh5c2ljcyIsInBoeXNpb2xvZ3kiLCJwaSIsInBpYyIsInBpY2h1bnRlciIsInBpY2tlZCIsInBpY2tpbmciLCJwaWNrcyIsInBpY2t1cCIsInBpY25pYyIsInBpY3MiLCJwaWN0dXJlcyIsInBpZWNlcyIsInBpZXJjZSIsInBpZXJyZSIsInBpZyIsInBpa2UiLCJwaWxsIiwicGlsbG93IiwicGlsbHMiLCJwaW4iLCJwaW5nIiwicGlucyIsInBpb25lZXIiLCJwaXBlbGluZSIsInBpcGVzIiwicGlyYXRlcyIsInBpc3MiLCJwaXNzaW5nIiwicGl0IiwicGl0dHNidXJnaCIsInBpeCIsInBpeGVsIiwicGl4ZWxzIiwicGl6emEiLCJwaiIsInBrIiwicGwiLCJwbGFjZWQiLCJwbGFjZW1lbnQiLCJwbGFjZXMiLCJwbGFjaW5nIiwicGxhaW4iLCJwbGFpbnMiLCJwbGFpbnRpZmYiLCJwbGFuZXMiLCJwbGFuZXRzIiwicGxhbm5lZCIsInBsYW5uZXIiLCJwbGFubmVycyIsInBsYW5zIiwicGxhbnRzIiwicGxhc21hIiwicGxhc3RpY3MiLCJwbGF0ZXMiLCJwbGF0Zm9ybXMiLCJwbGF0aW51bSIsInBsYXliYWNrIiwicGxheWJveSIsInBsYXllZCIsInBsYXllcnMiLCJwbGF5aW5nIiwicGxheWxpc3QiLCJwbGF5cyIsInBsYXlzdGF0aW9uIiwicGxhemEiLCJwbGMiLCJwbGVhc2FudCIsInBsZWFzZWQiLCJwbGVkZ2UiLCJwbG90cyIsInBsdWciLCJwbHVnaW4iLCJwbHVnaW5zIiwicGx1bWJpbmciLCJwbHltb3V0aCIsInBtIiwicG1jIiwicG1pZCIsInBuIiwicG8iLCJwb2NrZXRzIiwicG9kIiwicG9kY2FzdCIsInBvZGNhc3RzIiwicG9lbXMiLCJwb2ludGVkIiwicG9pbnRlciIsInBvaW50aW5nIiwicG9pbnRzIiwicG9pc29uIiwicG9rZW1vbiIsInBva2VyIiwicG9sYW5kIiwicG9sYXIiLCJwb2xpY2llcyIsInBvbGlzaCIsInBvbGlzaGVkIiwicG9saXRpY2lhbnMiLCJwb2xscyIsInBvbG8iLCJwb2x5IiwicG9seWVzdGVyIiwicG9seW1lciIsInBvbHlwaG9uaWMiLCJwb25kIiwicG9udGlhYyIsInBvb2xzIiwicG9wZSIsInBvcHVsYXJpdHkiLCJwb3B1bGF0aW9ucyIsInBvciIsInBvcmNlbGFpbiIsInBvcmsiLCJwb3JuIiwicG9ybm8iLCJwb3JzY2hlIiwicG9ydGFibGUiLCJwb3J0YWwiLCJwb3J0ZXIiLCJwb3J0Zm9saW8iLCJwb3J0aW9ucyIsInBvcnRsYW5kIiwicG9ydHJhaXRzIiwicG9ydHMiLCJwb3J0c21vdXRoIiwicG9ydHVnYWwiLCJwb3J0dWd1ZXNlIiwicG9zIiwicG9zaW5nIiwicG9zaXRpb25pbmciLCJwb3NpdGlvbnMiLCJwb3NzZXNzaW9uIiwicG9zc2liaWxpdGllcyIsInBvc3RhZ2UiLCJwb3N0YWwiLCJwb3N0Y2FyZCIsInBvc3RjYXJkcyIsInBvc3RlZCIsInBvc3RlciIsInBvc3RlcnMiLCJwb3N0aW5nIiwicG9zdGluZ3MiLCJwb3N0cG9zdGVkIiwicG9zdHMiLCJwb3RhdG9lcyIsInBvdHRlciIsInBvdHRlcnkiLCJwb3VsdHJ5IiwicG91bmRzIiwicG93ZWxsIiwicG93ZXJlZCIsInBvd2VycG9pbnQiLCJwb3dlcnMiLCJwb3dlcnNlbGxlciIsInBwIiwicHBjIiwicHBtIiwicHIiLCJwcmFjdGljZXMiLCJwcmFjdGl0aW9uZXIiLCJwcmFjdGl0aW9uZXJzIiwicHJhZ3VlIiwicHJhaXJpZSIsInByYWlzZSIsInByYXllcnMiLCJwcmUiLCJwcmVjZWRpbmciLCJwcmVjaW91cyIsInByZWNpcGl0YXRpb24iLCJwcmVjaXNlIiwicHJlY2lzaW9uIiwicHJlZGljdGVkIiwicHJlZGljdGlvbiIsInByZWRpY3Rpb25zIiwicHJlZmVyZW5jZXMiLCJwcmVmZXJyZWQiLCJwcmVmZXJzIiwicHJlZml4IiwicHJlbGltaW5hcnkiLCJwcmVtaWVyIiwicHJlbWllcmUiLCJwcmVtaXNlcyIsInByZW1pdW0iLCJwcmVwIiwicHJlcGFpZCIsInByZXBhcmVkIiwicHJlcGFyaW5nIiwicHJlcmVxdWlzaXRlIiwicHJlc2NyaWJlZCIsInByZXNlbnRhdGlvbnMiLCJwcmVzZW50ZWQiLCJwcmVzZW50aW5nIiwicHJlc2VudGx5IiwicHJlc2VudHMiLCJwcmVzZXJ2YXRpb24iLCJwcmVzc2VkIiwicHJlc3NpbmciLCJwcmVzdG9uIiwicHJldiIsInByZXZlbnRpbmciLCJwcmV2ZW50aW9uIiwicHJldmlldyIsInByZXZpZXdzIiwicHJpY2VkIiwicHJpY2VzIiwicHJpY2luZyIsInByaW5jZSIsInByaW5jZXNzIiwicHJpbmNldG9uIiwicHJpbmNpcGxlcyIsInByaW50YWJsZSIsInByaW50ZWQiLCJwcmludGVyIiwicHJpbnRlcnMiLCJwcmludGluZyIsInByaW50cyIsInByaW9yaXRpZXMiLCJwcmlzb25lcnMiLCJwcml2aWxlZ2UiLCJwcml2aWxlZ2VzIiwicHJpeCIsInByaXplIiwicHJpemVzIiwicHJvIiwicHJvYmFiaWxpdHkiLCJwcm9iZSIsInByb2JsZW1zIiwicHJvYyIsInByb2NlZHVyZXMiLCJwcm9jZWVkaW5nIiwicHJvY2VlZGluZ3MiLCJwcm9jZWVkcyIsInByb2Nlc3NlZCIsInByb2Nlc3NlcyIsInByb2Nlc3NpbmciLCJwcm9jZXNzb3IiLCJwcm9jZXNzb3JzIiwicHJvY3VyZW1lbnQiLCJwcm9kdWNlZCIsInByb2R1Y2VycyIsInByb2R1Y2VzIiwicHJvZHVjaW5nIiwicHJvZHVjdGlvbnMiLCJwcm9kdWN0aXZlIiwicHJvZHVjdGl2aXR5IiwicHJvZHVjdHMiLCJwcm9mZXNzaW9uYWxzIiwicHJvZmlsZXMiLCJwcm9maXRzIiwicHJvZ3JhbW1lIiwicHJvZ3JhbW1lciIsInByb2dyYW1tZXJzIiwicHJvZ3JhbW1lcyIsInByb2dyYW1taW5nIiwicHJvZ3JhbXMiLCJwcm9ncmVzc2l2ZSIsInByb2hpYml0ZWQiLCJwcm9qZWN0ZWQiLCJwcm9qZWN0aW9uIiwicHJvamVjdG9yIiwicHJvamVjdG9ycyIsInByb2plY3RzIiwicHJvbWlzZWQiLCJwcm9taXNlcyIsInByb21pc2luZyIsInByb21vIiwicHJvbW90ZWQiLCJwcm9tb3RlcyIsInByb21vdGluZyIsInByb21vdGlvbiIsInByb21vdGlvbmFsIiwicHJvbW90aW9ucyIsInByb21wdGx5IiwicHJvcGVjaWEiLCJwcm9wZXJ0aWVzIiwicHJvcGhldCIsInByb3Bvc2FscyIsInByb3Bvc2l0aW9uIiwicHJvcHJpZXRhcnkiLCJwcm9zIiwicHJvc3BlY3RpdmUiLCJwcm9zcGVjdHMiLCJwcm9zdGF0ZSIsInByb3N0b3JlcyIsInByb3QiLCJwcm90ZWN0ZWQiLCJwcm90ZWN0aW5nIiwicHJvdGVjdGl2ZSIsInByb3RlaW5zIiwicHJvdG9jb2wiLCJwcm90b2NvbHMiLCJwcm90b3R5cGUiLCJwcm91ZGx5IiwicHJvdmVkIiwicHJvdmVuIiwicHJvdmlkZWQiLCJwcm92aWRlbmNlIiwicHJvdmlkZXJzIiwicHJvdmlkZXMiLCJwcm92aWRpbmciLCJwcm92aW5jZXMiLCJwcm92aW5jaWFsIiwicHJvdmlzaW9ucyIsInByb3h5IiwicHJvemFjIiwicHMiLCJwc2kiLCJwc3AiLCJwc3QiLCJwc3ljaGlhdHJ5IiwicHQiLCJwdHMiLCJwdHkiLCJwdWIiLCJwdWJsaWNhdGlvbnMiLCJwdWJsaWNpdHkiLCJwdWJsaXNoZWQiLCJwdWJsaXNoZXJzIiwicHVibGlzaGluZyIsInB1Ym1lZCIsInB1YnMiLCJwdWVydG8iLCJwdWxsZWQiLCJwdWxsaW5nIiwicHVsc2UiLCJwdW1wIiwicHVtcHMiLCJwdW5jaCIsInB1bmsiLCJwdXBpbHMiLCJwdXBweSIsInB1cmNoYXNlZCIsInB1cmNoYXNlcyIsInB1cmNoYXNpbmciLCJwdXJwbGUiLCJwdXJwb3NlcyIsInB1cnNlIiwicHVyc3VhbnQiLCJwdXJzdWl0IiwicHVzaGVkIiwicHVzaGluZyIsInB1c3N5IiwicHV0cyIsInB1dHRpbmciLCJwdXp6bGUiLCJwdXp6bGVzIiwicHZjIiwicHl0aG9uIiwicSIsInFhdGFyIiwicWMiLCJxbGQiLCJxdCIsInF0eSIsInF1YWQiLCJxdWFsaWZpY2F0aW9uIiwicXVhbGlmaWNhdGlvbnMiLCJxdWFsaWZpZWQiLCJxdWFsaWZ5aW5nIiwicXVhbGl0aWVzIiwicXVhbnRpdGF0aXZlIiwicXVhbnRpdGllcyIsInF1YW50aXR5IiwicXVhbnR1bSIsInF1YXJ0ZXJseSIsInF1YXJ0ZXJzIiwicXVlIiwicXVlYmVjIiwicXVlZW4iLCJxdWVlbnMiLCJxdWVlbnNsYW5kIiwicXVlcmllcyIsInF1ZXJ5IiwicXVlc3QiLCJxdWVzdGlvbm5haXJlIiwicXVlc3Rpb25zIiwicXVldWUiLCJxdWkiLCJxdWlsdCIsInF1aXoiLCJxdWl6emVzIiwicXVvdGF0aW9ucyIsInF1b3RlZCIsInF1b3RlcyIsInIiLCJyYSIsInJhYmJpdCIsInJhY2VzIiwicmFjaGVsIiwicmFjaW5nIiwicmFjayIsInJhY2tzIiwicmFkYXIiLCJyYWRpYXRpb24iLCJyYWRpb3MiLCJyYWRpdXMiLCJyYWdlIiwicmFpZCIsInJhaWxyb2FkIiwicmFpbHdheSIsInJhaW5ib3ciLCJyYWlzZWQiLCJyYWlzZXMiLCJyYWlzaW5nIiwicmFsZWlnaCIsInJhbGx5IiwicmFscGgiLCJyYW0iLCJyYW4iLCJyYW5jaCIsInJhbmQiLCJyYW5kb20iLCJyYW5keSIsInJhbmdlciIsInJhbmdlcnMiLCJyYW5nZXMiLCJyYW5naW5nIiwicmFua2VkIiwicmFua2luZyIsInJhbmtpbmdzIiwicmFua3MiLCJyYXAiLCJyYXBlIiwicmFwaWRzIiwicmF0IiwicmF0ZWQiLCJyYXRlcyIsInJhdGluZ3MiLCJyYXRpb25hbCIsInJhdGlvcyIsInJhdHMiLCJyYXkiLCJyYXltb25kIiwicmF5cyIsInJiIiwicmMiLCJyY2EiLCJyZCIsInJlIiwicmVhY2hlZCIsInJlYWNoZXMiLCJyZWFjaGluZyIsInJlYWN0aW9ucyIsInJlYWRlcnMiLCJyZWFkaWx5IiwicmVhZGluZ3MiLCJyZWFkcyIsInJlYWxpc3RpYyIsInJlYWxpemVkIiwicmVhbG0iLCJyZWFsdG9yIiwicmVhbHRvcnMiLCJyZWFsdHkiLCJyZWFyIiwicmVhc29uYWJseSIsInJlYXNvbmluZyIsInJlYXNvbnMiLCJyZWJhdGUiLCJyZWJhdGVzIiwicmViZWNjYSIsInJlYmVsIiwicmVib3VuZCIsInJlYyIsInJlY2VpcHQiLCJyZWNlaXZlZCIsInJlY2VpdmVyIiwicmVjZWl2ZXJzIiwicmVjZWl2ZXMiLCJyZWNlaXZpbmciLCJyZWNlcHRpb24iLCJyZWNlcHRvciIsInJlY2VwdG9ycyIsInJlY2lwZXMiLCJyZWNpcGllbnQiLCJyZWNpcGllbnRzIiwicmVjb2duaXNlZCIsInJlY29nbml6ZWQiLCJyZWNvbW1lbmRhdGlvbnMiLCJyZWNvbW1lbmRlZCIsInJlY29tbWVuZHMiLCJyZWNvbnN0cnVjdGlvbiIsInJlY29yZGVkIiwicmVjb3JkZXIiLCJyZWNvcmRlcnMiLCJyZWNvcmRpbmdzIiwicmVjb3JkcyIsInJlY292ZXJlZCIsInJlY3JlYXRpb24iLCJyZWNyZWF0aW9uYWwiLCJyZWNydWl0aW5nIiwicmVjcnVpdG1lbnQiLCJyZWN5Y2xpbmciLCJyZWRlZW0iLCJyZWRoZWFkIiwicmVkdWNlZCIsInJlZHVjZXMiLCJyZWR1Y2luZyIsInJlZHVjdGlvbnMiLCJyZWVkIiwicmVlZiIsInJlZWwiLCJyZWYiLCJyZWZlcmVuY2VkIiwicmVmZXJlbmNlcyIsInJlZmVycmFsIiwicmVmZXJyYWxzIiwicmVmZXJyZWQiLCJyZWZlcnJpbmciLCJyZWZlcnMiLCJyZWZpbmFuY2UiLCJyZWZpbmUiLCJyZWZpbmVkIiwicmVmbGVjdGVkIiwicmVmbGVjdGlvbnMiLCJyZWZsZWN0cyIsInJlZm9ybXMiLCJyZWZyZXNoIiwicmVmcmlnZXJhdG9yIiwicmVmdWdlZXMiLCJyZWZ1bmQiLCJyZWZ1cmJpc2hlZCIsInJlZnVzZWQiLCJyZWciLCJyZWdhcmRlZCIsInJlZ2FyZHMiLCJyZWdnYWUiLCJyZWdpb25zIiwicmVnaXN0ZXJlZCIsInJlZ2lzdHJhciIsInJlZ2lzdHJhdGlvbiIsInJlZ2lzdHJ5IiwicmVncmVzc2lvbiIsInJlZ3VsYXRlZCIsInJlZ3VsYXRpb25zIiwicmVndWxhdG9yeSIsInJlaGFiIiwicmVoYWJpbGl0YXRpb24iLCJyZWlkIiwicmVqZWN0ZWQiLCJyZWxhdGVkIiwicmVsYXRlcyIsInJlbGF0aW5nIiwicmVsYXRpb25zIiwicmVsYXRpb25zaGlwcyIsInJlbGF0aXZlcyIsInJlbGF4YXRpb24iLCJyZWxheSIsInJlbGVhc2VkIiwicmVsZWFzZXMiLCJyZWxldmFuY2UiLCJyZWxpYWJpbGl0eSIsInJlbGlhYmxlIiwicmVsaWFuY2UiLCJyZWxpZ2lvbnMiLCJyZWxvYWQiLCJyZWxvY2F0aW9uIiwicmVseWluZyIsInJlbWFpbmRlciIsInJlbWFpbmVkIiwicmVtYWlucyIsInJlbWFyayIsInJlbWFya3MiLCJyZW1lZGllcyIsInJlbWVkeSIsInJlbWVtYmVyZWQiLCJyZW1pbmRlciIsInJlbWl4IiwicmVtb3ZhYmxlIiwicmVtb3ZhbCIsInJlbW92ZWQiLCJyZW1vdmluZyIsInJlbmFpc3NhbmNlIiwicmVuZGVyIiwicmVuZGVyZWQiLCJyZW5kZXJpbmciLCJyZW5ldyIsInJlbmV3YWJsZSIsInJlbmV3YWwiLCJyZW5vIiwicmVudCIsInJlbnRhbCIsInJlbnRhbHMiLCJyZXAiLCJyZXBhaXIiLCJyZXBhaXJzIiwicmVwZWF0ZWQiLCJyZXBsYWNlZCIsInJlcGxhY2VtZW50IiwicmVwbGFjaW5nIiwicmVwbGljYSIsInJlcGxpY2F0aW9uIiwicmVwbGllZCIsInJlcGxpZXMiLCJyZXBvcnRlZCIsInJlcG9ydGVycyIsInJlcG9ydGluZyIsInJlcG9ydHMiLCJyZXBvc2l0b3J5IiwicmVwcmVzZW50YXRpb25zIiwicmVwcmVzZW50YXRpdmVzIiwicmVwcmVzZW50ZWQiLCJyZXByZXNlbnRpbmciLCJyZXByZXNlbnRzIiwicmVwcmludCIsInJlcHJpbnRzIiwicmVwcm9kdWNlIiwicmVwcm9kdWNlZCIsInJlcHJvZHVjdGlvbiIsInJlcHJvZHVjdGl2ZSIsInJlcHVibGljIiwicmVwdWJsaWNhbiIsInJlcHVibGljYW5zIiwicmVxdWVzdGVkIiwicmVxdWVzdGluZyIsInJlcXVlc3RzIiwicmVxdWlyZWQiLCJyZXF1aXJlbWVudHMiLCJyZXF1aXJlcyIsInJlcXVpcmluZyIsInJlcyIsInJlc2N1ZSIsInJlc2VhcmNoZXJzIiwicmVzZWxsZXIiLCJyZXNlcnZhdGlvbnMiLCJyZXNlcnZlIiwicmVzZXJ2ZWQiLCJyZXNlcnZlcyIsInJlc2Vydm9pciIsInJlc2V0IiwicmVzaWRlbmNlIiwicmVzaWRlbnRpYWwiLCJyZXNpZGVudHMiLCJyZXNpc3RhbnQiLCJyZXNvbHV0aW9ucyIsInJlc29sdmVkIiwicmVzb3J0cyIsInJlc291cmNlcyIsInJlc3BlY3RlZCIsInJlc3BlY3RpdmUiLCJyZXNwZWN0aXZlbHkiLCJyZXNwaXJhdG9yeSIsInJlc3BvbmRlZCIsInJlc3BvbmRlbnRzIiwicmVzcG9uZGluZyIsInJlc3BvbnNlcyIsInJlc3BvbnNpYmlsaXRpZXMiLCJyZXN0YXVyYW50cyIsInJlc3RvcmF0aW9uIiwicmVzdG9yZWQiLCJyZXN0cmljdCIsInJlc3RyaWN0ZWQiLCJyZXN0cmljdGlvbnMiLCJyZXN0cnVjdHVyaW5nIiwicmVzdWx0ZWQiLCJyZXN1bHRpbmciLCJyZXN1bHRzIiwicmVzdW1lIiwicmVzdW1lcyIsInJldGFpbCIsInJldGFpbGVyIiwicmV0YWlsZXJzIiwicmV0YWluZWQiLCJyZXRlbnRpb24iLCJyZXRpcmVkIiwicmV0cmVhdCIsInJldHJpZXZhbCIsInJldHJpZXZlIiwicmV0cmlldmVkIiwicmV0cm8iLCJyZXR1cm5lZCIsInJldHVybmluZyIsInJldHVybnMiLCJyZXVuaW9uIiwicmV1dGVycyIsInJldiIsInJldmVhbGVkIiwicmV2ZWFscyIsInJldmVsYXRpb24iLCJyZXZlbmdlIiwicmV2ZW51ZXMiLCJyZXZlcnNlIiwicmV2aWV3ZWQiLCJyZXZpZXdlciIsInJldmlld2luZyIsInJldmlld3MiLCJyZXZpc2VkIiwicmV2aXNpb24iLCJyZXZpc2lvbnMiLCJyZXZvbHV0aW9uYXJ5IiwicmV3YXJkIiwicmV3YXJkcyIsInJleW5vbGRzIiwicmYiLCJyZmMiLCJyZyIsInJoIiwicmhvZGUiLCJyaSIsInJpYmJvbiIsInJpY2EiLCJyaWNoYXJkIiwicmljaGFyZHMiLCJyaWNoYXJkc29uIiwicmljaG1vbmQiLCJyaWNrIiwicmlja3kiLCJyaWNvIiwicmlkZXIiLCJyaWRlcnMiLCJyaWRlcyIsInJpZGdlIiwicmlkaW5nIiwicmlnaHRzIiwicmltIiwicmluZ3MiLCJyaW5ndG9uZSIsInJpbmd0b25lcyIsInJpbyIsInJpcCIsInJpcGUiLCJyaXNpbmciLCJyaXNrcyIsInJpdmVycyIsInJpdmVyc2lkZSIsInJqIiwicmwiLCJybSIsInJuIiwicm5hIiwicm8iLCJyb2FkcyIsInJvYiIsInJvYmJpZSIsInJvYmVydCIsInJvYmVydHMiLCJyb2JlcnRzb24iLCJyb2JpbiIsInJvYmluc29uIiwicm9ib3QiLCJyb2JvdHMiLCJyb2J1c3QiLCJyb2NoZXN0ZXIiLCJyb2NrZXQiLCJyb2NrcyIsInJvY2t5Iiwicm9kIiwicm9nZXIiLCJyb2dlcnMiLCJyb2xhbmQiLCJyb2xlcyIsInJvbGxlZCIsInJvbGxlciIsInJvbGxpbmciLCJyb2xscyIsInJvbSIsInJvbWFuIiwicm9tYW5jZSIsInJvbWFuaWEiLCJyb21lIiwicm9uIiwicm9uYWxkIiwicm9vbW1hdGUiLCJyb29tbWF0ZXMiLCJyb29tcyIsInJvb3RzIiwicm9zYSIsInJvc2VzIiwicm9zcyIsInJvc3RlciIsInJvdGFyeSIsInJvdGF0aW9uIiwicm91Z2UiLCJyb3VsZXR0ZSIsInJvdW5kcyIsInJvdXRlciIsInJvdXRlcnMiLCJyb3V0ZXMiLCJyb3V0aW5lcyIsInJvdXRpbmciLCJyb3ZlciIsInJvd3MiLCJyb3kiLCJyb3lhbCIsInJveWFsdHkiLCJycCIsInJwZyIsInJwbSIsInJyIiwicnJwIiwicnMiLCJyc3MiLCJydCIsInJ1IiwicnViYmVyIiwicnVieSIsInJ1ZyIsInJ1Z2J5IiwicnVncyIsInJ1bGVkIiwicnVsZXMiLCJydWxpbmciLCJydW5uZXIiLCJydW5zIiwicnVudGltZSIsInJ1c3NlbGwiLCJydXNzaWEiLCJydXNzaWFuIiwicnV0aCIsInJ2IiwicnciLCJyd2FuZGEiLCJyeCIsInJ5YW4iLCJzIiwic2EiLCJzYWNyYW1lbnRvIiwic2FjcmlmaWNlIiwic2FkZGFtIiwic2FmYXJpIiwic2FmZWx5Iiwic2FmZXIiLCJzYWdlIiwic2FnZW0iLCJzYWlkIiwic2FpbCIsInNhaWxpbmciLCJzYWludCIsInNhaW50cyIsInNhbGFyaWVzIiwic2FsZW0iLCJzYWxseSIsInNhbG1vbiIsInNhbG9uIiwic2FsdmFkb3IiLCJzYWx2YXRpb24iLCJzYW0iLCJzYW1iYSIsInNhbW9hIiwic2FtcGxlcyIsInNhbXBsaW5nIiwic2Ftc3VuZyIsInNhbXVlbCIsInNhbiIsInNhbmRyYSIsInNhbmR3aWNoIiwic2FuZHkiLCJzYW5zIiwic2FudGEiLCJzYW55byIsInNhbyIsInNhcCIsInNhcHBoaXJlIiwic2FyYSIsInNhcmFoIiwic2FzIiwic2Fza2F0Y2hld2FuIiwic2F0Iiwic2F0aW4iLCJzYXRpc2ZhY3RvcnkiLCJzYXRpc2ZpZWQiLCJzYXR1cmRheSIsInNhdHVybiIsInNhdWRpIiwic2F2YWdlIiwic2F2YW5uYWgiLCJzYXZlZCIsInNhdmVyIiwic2F2ZXMiLCJzYXZpbmdzIiwic2F3Iiwic2F5aW5nIiwic2F5cyIsInNiIiwic2JqY3QiLCJzYyIsInNjYWxlcyIsInNjYW4iLCJzY2FubmVkIiwic2Nhbm5lciIsInNjYW5uZXJzIiwic2Nhbm5pbmciLCJzY2FyeSIsInNjZW5hcmlvcyIsInNjZW5lcyIsInNjZW5pYyIsInNjaGVkdWxlZCIsInNjaGVkdWxlcyIsInNjaGVkdWxpbmciLCJzY2hlbWEiLCJzY2hlbWVzIiwic2Nob2xhcnMiLCJzY2hvbGFyc2hpcHMiLCJzY2hvb2xzIiwic2NpIiwic2NpZW5jZXMiLCJzY2llbnRpc3RzIiwic2Nvb3AiLCJzY29yZWQiLCJzY29yZXMiLCJzY29yaW5nIiwic2NvdGlhIiwic2NvdGxhbmQiLCJzY290dCIsInNjb3R0aXNoIiwic2NvdXQiLCJzY3JhdGNoIiwic2NyZWVuaW5nIiwic2NyZWVucyIsInNjcmVlbnNhdmVyIiwic2NyZWVuc2F2ZXJzIiwic2NyZWVuc2hvdCIsInNjcmVlbnNob3RzIiwic2NyZXciLCJzY3JpcHRpbmciLCJzY3JpcHRzIiwic2Nyb2xsIiwic2NzaSIsInNjdWJhIiwic2N1bHB0dXJlIiwic2QiLCJzZSIsInNlYWZvb2QiLCJzZWFsIiwic2VhbGVkIiwic2VhbiIsInNlYXJjaGVkIiwic2VhcmNoZXMiLCJzZWFyY2hpbmciLCJzZWFzIiwic2Vhc29uYWwiLCJzZWFzb25zIiwic2VhdGluZyIsInNlYXRzIiwic2VhdHRsZSIsInNlYyIsInNlY29uZGFyeSIsInNlY29uZHMiLCJzZWNyZXRhcmlhdCIsInNlY3JldHMiLCJzZWN0aW9ucyIsInNlY3RvcnMiLCJzZWN1cmVkIiwic2VjdXJlbHkiLCJzZWN1cml0aWVzIiwic2VlZHMiLCJzZWVpbmciLCJzZWVrZXIiLCJzZWVrZXJzIiwic2Vla2luZyIsInNlZWtzIiwic2VlbWVkIiwic2VlbXMiLCJzZWVuIiwic2VlcyIsInNlZ2EiLCJzZWdtZW50cyIsInNlbGVjdGVkIiwic2VsZWN0aW5nIiwic2VsZWN0aW9ucyIsInNlbGVjdGl2ZSIsInNlbGxlciIsInNlbGxlcnMiLCJzZWxsaW5nIiwic2VsbHMiLCJzZW1lc3RlciIsInNlbWkiLCJzZW1pY29uZHVjdG9yIiwic2VtaW5hciIsInNlbWluYXJzIiwic2VuIiwic2VuYXRlIiwic2VuYXRvcnMiLCJzZW5kZXIiLCJzZW5kaW5nIiwic2VuZHMiLCJzZW5lZ2FsIiwic2VuaW9ycyIsInNlbnNpdGl2aXR5Iiwic2Vuc29yIiwic2Vuc29ycyIsInNlbnQiLCJzZW50ZW5jZXMiLCJzZW8iLCJzZXAiLCJzZXBhcmF0ZWQiLCJzZXBhcmF0ZWx5Iiwic2VwYXJhdGlvbiIsInNlcHQiLCJzZXB0ZW1iZXIiLCJzZXEiLCJzZXF1ZW5jZXMiLCJzZXIiLCJzZXJiaWEiLCJzZXJpYWwiLCJzZXJ1bSIsInNlcnZlZCIsInNlcnZlciIsInNlcnZlcnMiLCJzZXJ2ZXMiLCJzZXJ2aWNlcyIsInNlcnZpbmciLCJzZXNzaW9ucyIsInNldHMiLCJzZXR0aW5ncyIsInNldHRsZWQiLCJzZXR1cCIsInNldmVudGgiLCJzZXdpbmciLCJzZXhjYW0iLCJzZXhvIiwic2V4dWFsaXR5Iiwic2V4dWFsbHkiLCJzZXh5Iiwic2YiLCJzZyIsInNoIiwic2hhZGVzIiwic2hhZG93cyIsInNoYWZ0Iiwic2hha2VzcGVhcmUiLCJzaGFraXJhIiwic2hhbWUiLCJzaGFuZ2hhaSIsInNoYW5ub24iLCJzaGFwZWQiLCJzaGFwZXMiLCJzaGFyZWQiLCJzaGFyZWhvbGRlcnMiLCJzaGFyZXMiLCJzaGFyZXdhcmUiLCJzaGFyaW5nIiwic2hhcmsiLCJzaGFyb24iLCJzaGF2ZWQiLCJzaGF3Iiwic2hlZCIsInNoZWVwIiwic2hlZXIiLCJzaGVldHMiLCJzaGVmZmllbGQiLCJzaGVtYWxlIiwic2hlbWFsZXMiLCJzaGVwaGVyZCIsInNoZXJpZmYiLCJzaGVybWFuIiwic2hpZWxkIiwic2hpcG1lbnQiLCJzaGlwbWVudHMiLCJzaGlwcGVkIiwic2hpcHBpbmciLCJzaGlwcyIsInNoaXJ0cyIsInNob2VzIiwic2hvcHBlciIsInNob3BwZXJzIiwic2hvcHMiLCJzaG9wemlsbGEiLCJzaG9ydGN1dHMiLCJzaG9ydGVyIiwic2hvcnRzIiwic2hvdHMiLCJzaG93Y2FzZSIsInNob3dlZCIsInNob3dlcnMiLCJzaG93aW5nIiwic2hvd24iLCJzaG93cyIsInNob3d0aW1lcyIsInNodXR0bGUiLCJzaSIsInNpYyIsInNpZGVzIiwic2llIiwic2llbWVucyIsInNpZXJyYSIsInNpZyIsInNpZ21hIiwic2lnbmFscyIsInNpZ25hdHVyZSIsInNpZ25hdHVyZXMiLCJzaWduZWQiLCJzaWduaW5nIiwic2lnbnMiLCJzaWdudXAiLCJzaWxpY29uIiwic2lsayIsInNpbGx5Iiwic2ltIiwic2ltb24iLCJzaW1wbGlmaWVkIiwic2ltcHNvbiIsInNpbXBzb25zIiwic2ltcyIsInNpbXVsYXRpb24iLCJzaW11bGF0aW9ucyIsInNpbXVsdGFuZW91c2x5Iiwic2luZ2Fwb3JlIiwic2luZ2giLCJzaW5naW5nIiwic2luZ2xlcyIsInNpcCIsInNpc3RlcnMiLCJzaXRlbWFwIiwic2l0ZXMiLCJzaXR0aW5nIiwic2l0dWF0ZWQiLCJzaXR1YXRpb25zIiwic2l4dGgiLCJzaXplZCIsInNpemVzIiwic2siLCJza2F0aW5nIiwic2tpaW5nIiwic2tpbGxlZCIsInNraWxscyIsInNraW5zIiwic2tpcCIsInNraXJ0Iiwic2tpcnRzIiwic2t1Iiwic2t5cGUiLCJzbCIsInNsZWVwaW5nIiwic2xlZXBzIiwic2xlZXZlIiwic2xpZGVzIiwic2xpZGVzaG93Iiwic2xpbSIsInNsb3BlIiwic2xvdCIsInNsb3RzIiwic2xvdmFrIiwic2xvdmFraWEiLCJzbG92ZW5pYSIsInNsdXQiLCJzbHV0cyIsInNtIiwic21hbGxlciIsInNtYWxsZXN0Iiwic21pbGllcyIsInNtaXRoIiwic21pdGhzb25pYW4iLCJzbW9raW5nIiwic21zIiwic210cCIsInNuIiwic25ha2UiLCJzbmFwc2hvdCIsInNub3dib2FyZCIsInNvYSIsInNvYXAiLCJzb2MiLCJzb2NpZXRpZXMiLCJzb2Npb2xvZ3kiLCJzb2NrZXQiLCJzb2NrcyIsInNvZGl1bSIsInNvZmEiLCJzb2Z0YmFsbCIsInNvbCIsInNvbGFyaXMiLCJzb2xkIiwic29sZGllcnMiLCJzb2xlIiwic29sZWx5Iiwic29sbyIsInNvbG9tb24iLCJzb2x1dGlvbnMiLCJzb2x2ZWQiLCJzb2x2aW5nIiwic29tYSIsInNvbWFsaWEiLCJzb21lcnNldCIsInNvbmdzIiwic29uaWMiLCJzb25zIiwic29ueSIsInNvb25lc3QiLCJzb3J0ZWQiLCJzb3J0cyIsInNvdWdodCIsInNvdWxzIiwic291bmRzIiwic291bmR0cmFjayIsInNvdXJjZXMiLCJzb3V0aGFtcHRvbiIsInNvdXRoZWFzdCIsInNvdXRod2VzdCIsInNvdmlldCIsInNveCIsInNwIiwic3BhIiwic3BhY2VzIiwic3BhaW4iLCJzcGFtIiwic3BhbiIsInNwYW5pc2giLCJzcGFuayIsInNwYW5raW5nIiwic3BhcmMiLCJzcGFyZSIsInNwYXMiLCJzcGF0aWFsIiwic3BlYWtlcnMiLCJzcGVha2luZyIsInNwZWFrcyIsInNwZWFycyIsInNwZWMiLCJzcGVjaWFsaXN0cyIsInNwZWNpYWxpemVkIiwic3BlY2lhbGl6aW5nIiwic3BlY2lhbGx5Iiwic3BlY2lhbHMiLCJzcGVjaWFsdGllcyIsInNwZWNpYWx0eSIsInNwZWNpZmljYXRpb24iLCJzcGVjaWZpY2F0aW9ucyIsInNwZWNpZmljcyIsInNwZWNpZmllZCIsInNwZWNpZmllcyIsInNwZWNpZnkiLCJzcGVjcyIsInNwZWN0YWN1bGFyIiwic3BlY3RydW0iLCJzcGVlY2hlcyIsInNwZWVkcyIsInNwZWxsIiwic3BlbGxpbmciLCJzcGVuY2VyIiwic3BlbnQiLCJzcGVybSIsInNwaGVyZSIsInNwaWNlIiwic3BpZGVyIiwic3BpZXMiLCJzcGluZSIsInNwaXJpdHMiLCJzcGlyaXR1YWxpdHkiLCJzcG9rZSIsInNwb2tlbiIsInNwb25zb3IiLCJzcG9uc29yZWQiLCJzcG9uc29ycyIsInNwb25zb3JzaGlwIiwic3BvcnRpbmciLCJzcG9ydHMiLCJzcG90bGlnaHQiLCJzcG90cyIsInNwb3VzZSIsInNwcmF5Iiwic3ByZWFkaW5nIiwic3ByaW5nZXIiLCJzcHJpbmdmaWVsZCIsInNwcmluZ3MiLCJzcHJpbnQiLCJzcHkiLCJzcHl3YXJlIiwic3EiLCJzcWwiLCJzcXVhZCIsInNxdWlydCIsInNxdWlydGluZyIsInNyIiwic3JjIiwic3JpIiwic3MiLCJzc2wiLCJzdCIsInN0YWNrIiwic3RhZGl1bSIsInN0YWZmaW5nIiwic3RhZ2VzIiwic3RhaW5sZXNzIiwic3Rha2Vob2xkZXJzIiwic3RhbXAiLCJzdGFtcHMiLCJzdGFuIiwic3RhbmRhcmRzIiwic3RhbmRpbmdzIiwic3RhbmRzIiwic3RhbmZvcmQiLCJzdGFubGV5Iiwic3RhcnJpbmciLCJzdGFycyIsInN0YXJzbWVyY2hhbnQiLCJzdGFydGVkIiwic3RhcnRlciIsInN0YXJ0aW5nIiwic3RhcnRzIiwic3RhcnR1cCIsInN0YXQiLCJzdGF0ZWQiLCJzdGF0ZW1lbnRzIiwic3RhdGVzIiwic3RhdGV3aWRlIiwic3RhdGljIiwic3RhdGluZyIsInN0YXRpb25lcnkiLCJzdGF0aW9ucyIsInN0YXRpc3RpY2FsIiwic3RhdHMiLCJzdGF0dXRlIiwic3RhdHV0ZXMiLCJzdGF0dXRvcnkiLCJzdGF5ZWQiLCJzdGF5aW5nIiwic3RheXMiLCJzdGQiLCJzdGUiLCJzdGVhbSIsInN0ZWVyaW5nIiwic3RlbSIsInN0ZXBoYW5pZSIsInN0ZXBoZW4iLCJzdGVwcyIsInN0ZXJlbyIsInN0ZXJsaW5nIiwic3RldmUiLCJzdGV2ZW4iLCJzdGV2ZW5zIiwic3Rld2FydCIsInN0aWNrZXIiLCJzdGlja2VycyIsInN0aWNrcyIsInN0aWNreSIsInN0b2NraG9sbSIsInN0b2NraW5ncyIsInN0b2NrcyIsInN0b2xlbiIsInN0b25lcyIsInN0b29kIiwic3RvcHBlZCIsInN0b3BwaW5nIiwic3RvcHMiLCJzdG9yZWQiLCJzdG9yZXMiLCJzdG9yaWVzIiwic3RyIiwic3RyYWluIiwic3RyYW5kIiwic3RyYXAiLCJzdHJhdGVnaWVzIiwic3RyZWFtaW5nIiwic3RyZWFtcyIsInN0cmVldHMiLCJzdHJlbmd0aGVuaW5nIiwic3RyZW5ndGhzIiwic3RyaWN0Iiwic3RyaWN0bHkiLCJzdHJpa2VzIiwic3RyaWtpbmciLCJzdHJpbmdzIiwic3RyaXBlcyIsInN0cmlwcyIsInN0cm9uZ2VyIiwic3RydWNrIiwic3RydWN0Iiwic3RydWN0dXJhbCIsInN0cnVjdHVyZWQiLCJzdHJ1Y3R1cmVzIiwic3R1YXJ0Iiwic3R1Y2siLCJzdHVkIiwic3R1ZGVudHMiLCJzdHVkaWVkIiwic3R1ZGllcyIsInN0dWRpb3MiLCJzdHVkeWluZyIsInN0dWZmZWQiLCJzdHVubmluZyIsInN0eWxlcyIsInN0eWxpc2giLCJzdHlsdXMiLCJzdSIsInN1YiIsInN1YmFydSIsInN1YmNvbW1pdHRlZSIsInN1YmRpdmlzaW9uIiwic3ViamVjdGl2ZSIsInN1YmplY3RzIiwic3VibGltZSIsInN1YmxpbWVkaXJlY3RvcnkiLCJzdWJtaXNzaW9uIiwic3VibWlzc2lvbnMiLCJzdWJtaXR0ZWQiLCJzdWJtaXR0aW5nIiwic3Vic2NyaWJlIiwic3Vic2NyaWJlciIsInN1YnNjcmliZXJzIiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9ucyIsInN1YnNlY3Rpb24iLCJzdWJzZXF1ZW50bHkiLCJzdWJzaWRpYXJpZXMiLCJzdWJzaWRpYXJ5Iiwic3Vic3RhbmNlcyIsInN1YnN0YW50aWFsbHkiLCJzdWJzdGl0dXRlIiwic3VidGxlIiwic3VidXJiYW4iLCJzdWNrIiwic3Vja2luZyIsInN1Y2tzIiwic3VkYW4iLCJzdWZmZXJlZCIsInN1ZmZlcmluZyIsInN1ZmZpY2llbnRseSIsInN1Z2dlc3RlZCIsInN1Z2dlc3RpbmciLCJzdWdnZXN0aW9ucyIsInN1Z2dlc3RzIiwic3VpdGFibGUiLCJzdWl0ZSIsInN1aXRlZCIsInN1aXRlcyIsInN1aXRzIiwic3VsbGl2YW4iLCJzdW0iLCJzdW1tYXJpZXMiLCJzdW1tYXJ5Iiwic3VuZGF5Iiwic3VuZ2xhc3NlcyIsInN1bm55Iiwic3VucmlzZSIsInN1bnNldCIsInN1bnNoaW5lIiwic3VwZXJiIiwic3VwZXJpbnRlbmRlbnQiLCJzdXBlcmlvciIsInN1cGVydmlzaW9uIiwic3VwZXJ2aXNvciIsInN1cGVydmlzb3JzIiwic3VwcGxlbWVudCIsInN1cHBsZW1lbnRhbCIsInN1cHBsZW1lbnRzIiwic3VwcGxpZWQiLCJzdXBwbGllciIsInN1cHBsaWVycyIsInN1cHBsaWVzIiwic3VwcG9ydGVkIiwic3VwcG9ydGVycyIsInN1cHBvcnRpbmciLCJzdXBwb3J0cyIsInN1cHJlbWUiLCJzdXIiLCJzdXJmIiwic3VyZmFjZXMiLCJzdXJmaW5nIiwic3VyZ2UiLCJzdXJnZW9uIiwic3VyZ2VvbnMiLCJzdXJnaWNhbCIsInN1cm5hbWUiLCJzdXJwbHVzIiwic3VycmV5Iiwic3Vycm91bmRlZCIsInN1cnJvdW5kaW5nIiwic3VydmVpbGxhbmNlIiwic3VydmV5cyIsInN1cnZpdm9ycyIsInN1c2FuIiwic3VzZSIsInN1c3BlY3RlZCIsInN1c3BlbmRlZCIsInN1c3BlbnNpb24iLCJzdXNzZXgiLCJzdXN0YWluYWJpbGl0eSIsInN1c3RhaW5hYmxlIiwic3VzdGFpbmVkIiwic3V6dWtpIiwic3YiLCJzdyIsInN3YXAiLCJzd2F6aWxhbmQiLCJzd2VkZW4iLCJzd2VkaXNoIiwic3dpZnQiLCJzd2ltbWluZyIsInN3aW5nZXJzIiwic3dpc3MiLCJzd2l0Y2hlZCIsInN3aXRjaGVzIiwic3dpdGNoaW5nIiwic3dpdHplcmxhbmQiLCJzd29yZCIsInN5ZG5leSIsInN5bWFudGVjIiwic3ltYm9scyIsInN5bXBhdGh5Iiwic3ltcGhvbnkiLCJzeW1wb3NpdW0iLCJzeW1wdG9tcyIsInN5bmMiLCJzeW5kaWNhdGUiLCJzeW5kaWNhdGlvbiIsInN5bmRyb21lIiwic3lub3BzaXMiLCJzeW50YXgiLCJzeW50aGVzaXMiLCJzeW50aGV0aWMiLCJzeXJhY3VzZSIsInN5cmlhIiwic3lzIiwic3lzdGVtYXRpYyIsInN5c3RlbXMiLCJ0IiwidGEiLCJ0YWIiLCJ0YWJsZXMiLCJ0YWJsZXQiLCJ0YWJsZXRzIiwidGFicyIsInRhY2tsZSIsInRhY3RpY3MiLCJ0YWciLCJ0YWdnZWQiLCJ0YWdzIiwidGFob2UiLCJ0YWl3YW4iLCJ0YWtlbiIsInRha2VzIiwidGFraW5nIiwidGFsZW50ZWQiLCJ0YWxlcyIsInRhbGtlZCIsInRhbGtpbmciLCJ0YWxrcyIsInRhbWlsIiwidGFtcGEiLCJ0YW4iLCJ0YW5rcyIsInRhbnphbmlhIiwidGFwZXMiLCJ0YXIiLCJ0YXJnZXRlZCIsInRhcmdldHMiLCJ0YXJpZmYiLCJ0YXNrcyIsInRhdHRvbyIsInRhdWdodCIsInRheGF0aW9uIiwidGF4ZXMiLCJ0YXhpIiwidGF5bG9yIiwidGIiLCJ0YmEiLCJ0YyIsInRjcCIsInRkIiwidGUiLCJ0ZWFjaGVycyIsInRlYWNoZXMiLCJ0ZWFtcyIsInRlYXJzIiwidGVjaCIsInRlY2huaWNpYW4iLCJ0ZWNobmlxdWVzIiwidGVjaG5vIiwidGVjaG5vbG9naWNhbCIsInRlY2hub2xvZ2llcyIsInRlY2hyZXB1YmxpYyIsInRlZCIsInRlZGR5IiwidGVlIiwidGVlbmFnZSIsInRlZW5zIiwidGVldGgiLCJ0ZWwiLCJ0ZWxlY2hhcmdlciIsInRlbGVjb20iLCJ0ZWxlY29tbXVuaWNhdGlvbnMiLCJ0ZWxlcGhvbnkiLCJ0ZWxldmlzaW9ucyIsInRlbGxpbmciLCJ0ZWxscyIsInRlbXAiLCJ0ZW1wZXJhdHVyZXMiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlcyIsInRlbXBsZSIsInRlbXBvcmFsIiwidGVtcG9yYXJpbHkiLCJ0ZW5hbnQiLCJ0ZW5kZXIiLCJ0ZW5uZXNzZWUiLCJ0ZXJtaW5hbCIsInRlcm1pbmFscyIsInRlcm1pbmF0aW9uIiwidGVybWlub2xvZ3kiLCJ0ZXJyYWNlIiwidGVycmFpbiIsInRlcnJpdG9yaWVzIiwidGVycm9yaXN0cyIsInRlcnJ5IiwidGVzdGFtZW50IiwidGVzdGVkIiwidGVzdGltb25pYWxzIiwidGVzdHMiLCJ0ZXgiLCJ0ZXhhcyIsInRleHRib29rIiwidGV4dGJvb2tzIiwidGV4dGlsZSIsInRleHRpbGVzIiwidGV4dHMiLCJ0ZXh0dXJlIiwidGYiLCJ0ZnQiLCJ0Z3AiLCJ0aCIsInRoYWkiLCJ0aGFpbGFuZCIsInRoYW5rc2dpdmluZyIsInRoYXRzIiwidGhlYXRlcnMiLCJ0aGVhdHJlIiwidGhlZSIsInRoZWZ0IiwidGhlaHVuIiwidGhlbWVzIiwidGhlb2xvZ3kiLCJ0aGVvcmVtIiwidGhlb3JldGljYWwiLCJ0aGVvcmllcyIsInRoZXJhcGV1dGljIiwidGhlcmFwaXN0IiwidGhlcmVhZnRlciIsInRoZXJlYnkiLCJ0aGVyZW9mIiwidGhlcm1hbCIsInRoZXNhdXJ1cyIsInRoZXNpcyIsInRoZXRhIiwidGhpY2tuZXNzIiwidGhpbmdzIiwidGhpbmtwYWQiLCJ0aGlua3MiLCJ0aG9tYXMiLCJ0aG9tcHNvbiIsInRob21zb24iLCJ0aG9uZyIsInRob25ncyIsInRob3JvdWdoIiwidGhvcm91Z2hseSIsInRob3UiLCJ0aG91Z2h0cyIsInRob3VzYW5kcyIsInRocmVhZCIsInRocmVhZGVkIiwidGhyZWFkcyIsInRocmVhdGVuZWQiLCJ0aHJlYXRlbmluZyIsInRocmVhdHMiLCJ0aHJlZXNvbWUiLCJ0aHJlc2hvbGQiLCJ0aHJpbGxlciIsInRocm93aW5nIiwidGhyb3duIiwidGhyb3dzIiwidGhydSIsInRodSIsInRodW1iIiwidGh1bWJuYWlsIiwidGh1bWJuYWlscyIsInRodW1icyIsInRodW1iemlsbGEiLCJ0aHVuZGVyIiwidGh1cnNkYXkiLCJ0aHkiLCJ0aSIsInRpY2tldHMiLCJ0aWRlIiwidGllZCIsInRpZXIiLCJ0aWVzIiwidGlmZmFueSIsInRpZ2VyIiwidGlnZXJzIiwidGlsIiwidGlsZSIsInRpbGVzIiwidGlsbCIsInRpbSIsInRpbWJlciIsInRpbWVsaW5lIiwidGltZWx5IiwidGltZXIiLCJ0aW1lcyIsInRpbWluZyIsInRpbW90aHkiLCJ0aW4iLCJ0aW9uIiwidGlvbnMiLCJ0aXBzIiwidGlyZXMiLCJ0aXQiLCJ0aXRhbml1bSIsInRpdGFucyIsInRpdGxlZCIsInRpdGxlcyIsInRpdHMiLCJ0aXR0ZW4iLCJ0bSIsInRtcCIsInRuIiwidG9iYWdvIiwidG9kZCIsInRvZGRsZXIiLCJ0b2lsZXQiLCJ0b2tlbiIsInRva3lvIiwidG9sZCIsInRvbGVyYW5jZSIsInRvbGwiLCJ0b20iLCJ0b21hdG9lcyIsInRvbW15IiwidG9uIiwidG9uZXIiLCJ0b25lcyIsInRvbnMiLCJ0b255IiwidG9vayIsInRvb2xiYXIiLCJ0b29sYm94IiwidG9vbGtpdCIsInRvb2xzIiwidG9waWNzIiwidG9wbGVzcyIsInRvcHMiLCJ0b3JvbnRvIiwidG9ydHVyZSIsInRvc2hpYmEiLCJ0b3RhbHMiLCJ0b3VjaGVkIiwidG91cmluZyIsInRvdXJpc20iLCJ0b3VybmFtZW50cyIsInRvdXJzIiwidG93ZXJzIiwidG93bnMiLCJ0b3duc2hpcCIsInRveGljIiwidG95b3RhIiwidG95cyIsInRwIiwidHIiLCJ0cmFja2JhY2siLCJ0cmFja2JhY2tzIiwidHJhY2tlZCIsInRyYWNrZXIiLCJ0cmFja2luZyIsInRyYWNrcyIsInRyYWN0IiwidHJhY3RvciIsInRyYWN5IiwidHJhZGVtYXJrIiwidHJhZGVtYXJrcyIsInRyYWRlciIsInRyYWRlcyIsInRyYWRpbmciLCJ0cmFkaXRpb25zIiwidHJhaWxlciIsInRyYWlsZXJzIiwidHJhaWxzIiwidHJhaW5lZCIsInRyYWluZXIiLCJ0cmFpbmVycyIsInRyYWlucyIsInRyYW1hZG9sIiwidHJhbmNlIiwidHJhbm55IiwidHJhbnMiLCJ0cmFuc2FjdGlvbiIsInRyYW5zYWN0aW9ucyIsInRyYW5zY3JpcHQiLCJ0cmFuc2NyaXB0aW9uIiwidHJhbnNjcmlwdHMiLCJ0cmFuc2V4dWFsIiwidHJhbnNleHVhbGVzIiwidHJhbnNmZXJyZWQiLCJ0cmFuc2ZlcnMiLCJ0cmFuc2l0IiwidHJhbnNsYXRlZCIsInRyYW5zbGF0aW9uIiwidHJhbnNsYXRpb25zIiwidHJhbnNsYXRvciIsInRyYW5zbWlzc2lvbiIsInRyYW5zbWl0IiwidHJhbnNtaXR0ZWQiLCJ0cmFuc3BhcmVuY3kiLCJ0cmFuc3BhcmVudCIsInRyYW5zcG9ydCIsInRyYW5zc2V4dWFsIiwidHJhcCIsInRyYXNoIiwidHJhdW1hIiwidHJhdmVsZXIiLCJ0cmF2ZWxlcnMiLCJ0cmF2ZWxpbmciLCJ0cmF2ZWxsZXIiLCJ0cmF2ZWxsaW5nIiwidHJhdmVscyIsInRyYXZlc3RpIiwidHJhdmlzIiwidHJheSIsInRyZWFzdXJlIiwidHJlYXN1cmVyIiwidHJlYXN1cmVzIiwidHJlYXN1cnkiLCJ0cmVhdGVkIiwidHJlYXRpbmciLCJ0cmVhdG1lbnRzIiwidHJlZXMiLCJ0cmVrIiwidHJlbWJsIiwidHJlbmRzIiwidHJlbyIsInRyaSIsInRyaWFscyIsInRyaWFuZ2xlIiwidHJpYmFsIiwidHJpYmVzIiwidHJpYnVuYWwiLCJ0cmlidW5lIiwidHJpYnV0ZSIsInRyaWNrcyIsInRyaWVkIiwidHJpZXMiLCJ0cmlnZ2VyIiwidHJpbSIsInRyaW5pZGFkIiwidHJpbml0eSIsInRyaW8iLCJ0cmlwYWR2aXNvciIsInRyaXBsZSIsInRyaXBzIiwidHJpdW1waCIsInRyaXZpYSIsInRyb29wcyIsInRyb3BpY2FsIiwidHJvdWJsZXNob290aW5nIiwidHJvdXQiLCJ0cm95IiwidHJ1Y2tzIiwidHJ1bmsiLCJ0cnVzdGVkIiwidHJ1c3RlZSIsInRydXN0ZWVzIiwidHJ1c3RzIiwidHJ5aW5nIiwidHMiLCJ0c3VuYW1pIiwidHQiLCJ0dSIsInR1YiIsInR1YmVzIiwidHVjc29uIiwidHVlIiwidHVlc2RheSIsInR1aXRpb24iLCJ0dWxzYSIsInR1bW9yIiwidHVuZSIsInR1bmVyIiwidHVuZXMiLCJ0dW5pbmciLCJ0dW5pc2lhIiwidHVyYm8iLCJ0dXJrZXkiLCJ0dXJraXNoIiwidHVybmVkIiwidHVybmVyIiwidHVybmluZyIsInR1cm5zIiwidHVydGxlIiwidHV0b3JpYWwiLCJ0dXRvcmlhbHMiLCJ0diIsInR2cyIsInR3aWtpIiwidHdpbmtzIiwidHdpbnMiLCJ0d2lzdCIsInR3aXN0ZWQiLCJ0eCIsInR5IiwidHlsZXIiLCJ0eXBlcyIsInR5cGluZyIsInUiLCJ1YyIsInVnYW5kYSIsInVoIiwidWkiLCJ1ayIsInVrcmFpbmUiLCJ1bCIsInVsdHJhIiwidWx0cmFtIiwidW0iLCJ1biIsInVuYSIsInVuYXV0aG9yaXplZCIsInVuYXZhaWxhYmxlIiwidW5jZXJ0YWludHkiLCJ1bmQiLCJ1bmRlZmluZWQiLCJ1bmRlcmdyYWR1YXRlIiwidW5kZXJncm91bmQiLCJ1bmRlcmx5aW5nIiwidW5kZXJzdG9vZCIsInVuZGVydGFrZSIsInVuZGVydGFrZW4iLCJ1bmRlcndlYXIiLCJ1bmRvIiwidW5lIiwidW5lbXBsb3ltZW50IiwidW5leHBlY3RlZCIsInVuaSIsInVuaWZpZWQiLCJ1bmlvbnMiLCJ1bmlwcm90a2IiLCJ1bml0ZWQiLCJ1bml0cyIsInVuaXR5IiwidW5pdiIsInVuaXZlcnNpdGllcyIsInVuaXgiLCJ1bmxpbWl0ZWQiLCJ1bmxvY2siLCJ1bm5lY2Vzc2FyeSIsInVuc2lnbmVkIiwidW5zdWJzY3JpYmUiLCJ1bnRpdGxlZCIsInVudG8iLCJ1bndyYXAiLCJ1cGMiLCJ1cGNvbWluZyIsInVwZGF0ZSIsInVwZGF0ZWQiLCJ1cGRhdGVzIiwidXBkYXRpbmciLCJ1cGdyYWRlIiwidXBncmFkZXMiLCJ1cGdyYWRpbmciLCJ1cGxvYWQiLCJ1cGxvYWRlZCIsInVwcyIsInVwc2V0IiwidXBza2lydCIsInVwc2tpcnRzIiwidXIiLCJ1cmdlbnQiLCJ1cmkiLCJ1cmwiLCJ1cmxzIiwidXJ1Z3VheSIsInVydyIsInVzYSIsInVzYWdlIiwidXNiIiwidXNjIiwidXNkIiwidXNkYSIsInVzZXJuYW1lIiwidXNlcnMiLCJ1c2VzIiwidXNncyIsInVzaW5nIiwidXNwcyIsInVzciIsInV0IiwidXRhaCIsInV0YyIsInV0aWxpdGllcyIsInV0aWxpemF0aW9uIiwidXRpbGl6ZSIsInV0aWxzIiwidXYiLCJ1dyIsInV6YmVraXN0YW4iLCJ2IiwidmEiLCJ2YWNhbmNpZXMiLCJ2YWNhdGlvbnMiLCJ2YWNjaW5lIiwidmFjdXVtIiwidmFnaW5hIiwidmFsIiwidmFsZW50aW5lIiwidmFsaWQiLCJ2YWxpZGF0aW9uIiwidmFsaWRpdHkiLCJ2YWxpdW0iLCJ2YWx1YXRpb24iLCJ2YWx1ZWQiLCJ2YWx1ZXMiLCJ2YWx2ZSIsInZhbHZlcyIsInZhbXBpcmUiLCJ2YW4iLCJ2YW5jb3V2ZXIiLCJ2YW5pbGxhIiwidmFyIiwidmFyaWFibGVzIiwidmFyaWFuY2UiLCJ2YXJpYXRpb25zIiwidmFyaWVkIiwidmFyaWVzIiwidmFyaWV0aWVzIiwidmFyeWluZyIsInZhdCIsInZhdGljYW4iLCJ2YXVsdCIsInZiIiwidmJ1bGxldGluIiwidmMiLCJ2Y3IiLCJ2ZSIsInZlY3RvciIsInZlZ2FzIiwidmVnZXRhYmxlcyIsInZlZ2V0YXJpYW4iLCJ2ZWdldGF0aW9uIiwidmVoaWNsZXMiLCJ2ZWxvY2l0eSIsInZlbHZldCIsInZlbmRvciIsInZlbmRvcnMiLCJ2ZW5lenVlbGEiLCJ2ZW5pY2UiLCJ2ZW50dXJlcyIsInZlbnVlIiwidmVudWVzIiwidmVyIiwidmVyYmFsIiwidmVyZGUiLCJ2ZXJpZmljYXRpb24iLCJ2ZXJpZmllZCIsInZlcmlmeSIsInZlcml6b24iLCJ2ZXJtb250IiwidmVybm9uIiwidmVyc2UiLCJ2ZXJzaW9ucyIsInZlcnRleCIsInZlcnRpY2FsIiwidmVyemVpY2huaXMiLCJ2ZXNzZWxzIiwidmV0ZXJhbnMiLCJ2ZXRlcmluYXJ5IiwidmciLCJ2aHMiLCJ2aSIsInZpYWdyYSIsInZpYnJhdG9yIiwidmlicmF0b3JzIiwidmljIiwidmljZSIsInZpY3RpbXMiLCJ2aWN0b3IiLCJ2aWN0b3JpYSIsInZpY3RvcmlhbiIsInZpZCIsInZpZGVvcyIsInZpZHMiLCJ2aWVubmEiLCJ2aWV0bmFtIiwidmlldG5hbWVzZSIsInZpZXdlZCIsInZpZXdlcnMiLCJ2aWV3aW5nIiwidmlld3BpY3R1cmUiLCJ2aWV3cyIsInZpaSIsInZpaWkiLCJ2aWtpbmciLCJ2aWxsYSIsInZpbGxhZ2VzIiwidmlsbGFzIiwidmluY2VudCIsInZpbnRhZ2UiLCJ2aW55bCIsInZpb2xhdGlvbnMiLCJ2aW9saW4iLCJ2aXAiLCJ2aXJhbCIsInZpcmdpbiIsInZpcmdpbmlhIiwidmlydHVhbCIsInZpcnVzZXMiLCJ2aXNhIiwidmlzaWJpbGl0eSIsInZpc2l0ZWQiLCJ2aXNpdGluZyIsInZpc2l0b3JzIiwidmlzaXRzIiwidmlzdGEiLCJ2aXRhbWluIiwidml0YW1pbnMiLCJ2b2NhYnVsYXJ5Iiwidm9jYWwiLCJ2b2NhbHMiLCJ2b2NhdGlvbmFsIiwidm9pY2VzIiwidm9pZCIsInZvaXAiLCJ2b2wiLCJ2b2xrc3dhZ2VuIiwidm9sbGV5YmFsbCIsInZvbHQiLCJ2b2x0YWdlIiwidm9sdW1lcyIsInZvbHVudGFyeSIsInZvbHVudGVlcnMiLCJ2b2x2byIsInZvbiIsInZvdGVkIiwidm90ZXJzIiwidm90ZXMiLCJ2b3RpbmciLCJ2b3lldXIiLCJ2b3lldXJ3ZWIiLCJ2b3l1ZXIiLCJ2cCIsInZwbiIsInZzbmV0IiwidnQiLCJ2dWxuZXJhYmlsaXR5IiwidyIsIndhIiwid2FnZXMiLCJ3YWduZXIiLCJ3YWdvbiIsIndhaXRpbmciLCJ3YWl2ZXIiLCJ3YWwiLCJ3YWxlcyIsIndhbGtlZCIsIndhbGtlciIsIndhbGtpbmciLCJ3YWxrcyIsIndhbGxhY2UiLCJ3YWxsZXQiLCJ3YWxscGFwZXIiLCJ3YWxscGFwZXJzIiwid2FsbHMiLCJ3YWxudXQiLCJ3YWx0Iiwid2FsdGVyIiwid2FuIiwid2FuZyIsIndhbm5hIiwid2FudGVkIiwid2FudGluZyIsIndhbnRzIiwid2FyY3JhZnQiLCJ3YXJkIiwid2FyZSIsIndhcmVob3VzZSIsIndhcm1pbmciLCJ3YXJuZWQiLCJ3YXJuZXIiLCJ3YXJuaW5ncyIsIndhcnJhbnQiLCJ3YXJyYW50aWVzIiwid2FycmFudHkiLCJ3YXJyZW4iLCJ3YXJyaW9yIiwid2FycmlvcnMiLCJ3YXJzIiwid2FzIiwid2FzaGVyIiwid2FzaGluZyIsIndhc2hpbmd0b24iLCJ3YXRjaGVkIiwid2F0Y2hlcyIsIndhdGNoaW5nIiwid2F0ZXJwcm9vZiIsIndhdGVycyIsIndhdGVyc2hlZCIsIndhdHNvbiIsIndhdHQiLCJ3YXR0cyIsIndhdiIsIndhdmVzIiwid2F4Iiwid2F5bmUiLCJ3YXlzIiwid2IiLCJ3YyIsIndlYXBvbnMiLCJ3ZWFyaW5nIiwid2ViIiwid2ViY2FtIiwid2ViY2FtcyIsIndlYmNhc3QiLCJ3ZWJsb2ciLCJ3ZWJsb2dzIiwid2VibWFzdGVyIiwid2VibWFzdGVycyIsIndlYnBhZ2UiLCJ3ZWJzaG90cyIsIndlYnNpdGUiLCJ3ZWJzaXRlcyIsIndlYnN0ZXIiLCJ3ZWQiLCJ3ZWRkaW5ncyIsIndlZG5lc2RheSIsIndlZWQiLCJ3ZWVrZW5kcyIsIndlZWtzIiwid2VpZ2h0ZWQiLCJ3ZWlnaHRzIiwid2VpcmQiLCJ3ZWxkaW5nIiwid2VsbGluZ3RvbiIsIndlbGxuZXNzIiwid2VsbHMiLCJ3ZWxzaCIsIndlbmR5Iiwid2VudCIsIndlcmUiLCJ3ZXNsZXkiLCJ3ZXN0bWluc3RlciIsIndoYWxlIiwid2hhdHMiLCJ3aGVhdCIsIndoZWVscyIsIndoZXJldmVyIiwid2hpbHN0Iiwid2hvbGVzYWxlIiwid2hvcmUiLCJ3aSIsIndpY2hpdGEiLCJ3aWNrZWQiLCJ3aWRlciIsIndpZGVzY3JlZW4iLCJ3aWR0aCIsIndpZmkiLCJ3aWtpIiwid2lraXBlZGlhIiwid2lsZGVybmVzcyIsIndpbGRsaWZlIiwid2lsZXkiLCJ3aWxsaWFtIiwid2lsbGlhbXMiLCJ3aWxsb3ciLCJ3aWxzb24iLCJ3aW5kb3dzIiwid2luZHMiLCJ3aW5kc29yIiwid2luZXMiLCJ3aW5ncyIsIndpbm5lcnMiLCJ3aW5uaW5nIiwid2lucyIsIndpbnN0b24iLCJ3aXJlZCIsIndpcmVsZXNzIiwid2lyZXMiLCJ3aXJpbmciLCJ3aXNjb25zaW4iLCJ3aXNoZXMiLCJ3aXNoaW5nIiwid2lzaGxpc3QiLCJ3aXQiLCJ3aXRjaCIsIndpdGhkcmF3YWwiLCJ3aXRuZXNzZXMiLCJ3aXZlcyIsIndpemFyZCIsIndtIiwid21hIiwid24iLCJ3b2xmIiwid29tZW4iLCJ3b21lbnMiLCJ3b24iLCJ3b25kZXJpbmciLCJ3b29kcyIsIndvb2wiLCJ3b3JjZXN0ZXIiLCJ3b3JkcHJlc3MiLCJ3b3JkcyIsIndvcmtlZCIsIndvcmtlcnMiLCJ3b3JrZmxvdyIsIndvcmtmb3JjZSIsIndvcmtvdXQiLCJ3b3JrcGxhY2UiLCJ3b3Jrc2hvcHMiLCJ3b3Jrc3RhdGlvbiIsIndvcmxkY2F0Iiwid29ybGRzIiwid29ybGRzZXgiLCJ3b3JsZHdpZGUiLCJ3b3JtIiwid29ybiIsIndvcnNlIiwid29yc2hpcCIsIndvcnN0Iiwid29ydGh5Iiwid293Iiwid3AiLCJ3ciIsIndyYXBwZWQiLCJ3cmFwcGluZyIsIndyZXN0bGluZyIsIndyaWdodCIsIndyaXN0Iiwid3JpdGVycyIsIndyaXRlcyIsIndyaXRpbmdzIiwid3JpdHRlbiIsIndyb3RlIiwid3MiLCJ3dCIsInd0byIsInd1Iiwid3YiLCJ3dyIsInd3dyIsInd4Iiwid3kiLCJ3eW9taW5nIiwieCIsInhhbmF4IiwieGJveCIsInhlcm94IiwieGh0bWwiLCJ4aSIsInhsIiwieG1sIiwieG54eCIsInhwIiwieHgiLCJ4eHgiLCJ5IiwieWEiLCJ5YWNodCIsInlhaG9vIiwieWFsZSIsInlhbWFoYSIsInlhbmciLCJ5YXJkcyIsInlhcm4iLCJ5ZSIsInllYSIsInllYXJseSIsInllYXJzIiwieWVhc3QiLCJ5ZW1lbiIsInllbiIsInlpZWxkcyIsInluIiwieW8iLCJ5b2dhIiwieW9yayIsInlvcmtzaGlyZSIsInlvdW5nZXIiLCJ5ciIsInlycyIsInl1IiwieXVnb3NsYXZpYSIsInl1a29uIiwieiIsInphIiwiemFtYmlhIiwiemRuZXQiLCJ6ZWFsYW5kIiwiemVuIiwiemVybyIsInppbWJhYndlIiwiemluYyIsInppcCIsInpvbG9mdCIsInpvbmVzIiwiem9uaW5nIiwiem9vIiwiem9vbSIsInpvb3BoaWxpYSIsInpvcGUiLCJ6c2hvcHMiLCJ6dSIsInp1bSIsInp1cyIsIlYxIiwiVjIiLCJTVVBQT1JURURfVkVSU0lPTlMiLCJTZXQiLCJTVVBQT1JURURfTEFOR1VBR0VTIiwibG9nRXZlbnQiLCJpc0xhbmd1YWdlU3VwcG9ydGVkIiwiaXNWZXJzaW9uU3VwcG9ydGVkIiwiZmV0Y2giLCJodHRwcyIsImh0dHBzQWdlbnQiLCJBZ2VudCIsImtlZXBBbGl2ZSIsImZldGNoSnNvbiIsIkhlYWRlcnMiLCJwYXJzZSIsIkFQSV9MSU1JVF9FWENFUFRJT04iLCJhcGlMaW1pdEV4Y2VwdGlvbiIsImFDcmF3bGVyIiwiVFVSTklOR19USU1FX0dNVCIsIk1BWF9QQVJBTExFTCIsIkFQSSIsIkNBQ0hFX0RJUiIsIkFQSV9EQUlMWV9MSU1JVCIsIk1BWF9XT1JEUyIsIk1BWF9OT0RFX0ZSRVFVRU5DWSIsIlRSQVZFUlNFX0FMTCIsImN1cnRpbWUiLCJ0dXJudGltZSIsIlRXRUxWRSIsImNhY2hlSW5pdGlhbGl6ZXJDb21tb24iLCJjYWNoZUlzSW5pdGlhbGl6ZWQiLCJwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cyIsImFkbWl0dGVkUGFyYWxsZWxSZXF1ZXN0cyIsInRvdGFsV29yZHNMYXN0RGF5IiwiY2FjaGVJbml0SXNFcnJvciIsInBlbmRpbmdPYmplY3RzIiwidGltZW91dEFzUHJvbWlzZSIsIm1pbGxpcyIsIlByb21pc2UiLCJzZXRUaW1lb3V0IiwicGFyYWxsZWxCb3R0bGVuZWNrIiwicmVtb3RlSW5pdEJvdHRsZW5lY2siLCJmaW5kRmlsZXMiLCJ0b1VUQ1N0cmluZyIsImlzQXBpTGltaXRSZWFjaGVkIiwicGVuZGluZ0JlZm9yZVJlcXVlc3QiLCJpbml0Q3Jhd2xlciIsIl9BUEkiLCJfQVBJX0RBSUxZX0xJTUlUIiwiX01BWF9XT1JEUyIsIl9NQVhfTk9ERV9GUkVRVUVOQ1kiLCJfVFJBVkVSU0VfQUxMIiwiZ29vZ2xlRGljdGlvbmFyeSIsIndvcmRzQXBpRGljdGlvbmFyeSIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJyZWN1cnNpdmUiLCJEYXRlIiwiVVRDIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJzaW5nbGVXb3JkVG9EaXNwbGF5IiwicHJvbnVuY2lhdGlvbiIsImRlZmluaXRpb25BcnJheSIsInBhcnRPZlNwZWVjaCIsInNrZXlzIiwidGhlcmVzdCIsImFkZGlmIiwiT2JqZWN0Iiwic2tleXMyIiwicmVnZXgiLCJ0b0xvd2VyQ2FzZSIsIm5ld09iaiIsImlzU3RyaW5nIiwibG9hZFNpbmdsZVdvcmQiLCJhc29iamVjdCIsImNhY2hlZG9ubHkiLCJmaWxld29yZCIsIndmcGF0aCIsImlqc29uIiwicmVhZEZpbGVTeW5jIiwidG9TdHJpbmciLCJ1bmxpbmtTeW5jIiwiZnJvbUNhY2hlIiwib2pzb24iLCJkanNvbiIsIndyaXRlRmlsZSIsImVyciIsIkRlZmluaXRpb25Ob2RlIiwic3lub255bXMiLCJleGFtcGxlc1RtcCIsInNpbWlsYXJUbyIsImFkZEV4YW1wbGVzIiwiY29tcHJlc3MiLCJDbHVzdGVyRGVmaW5pdGlvbk5vZGUiLCJieV9kZWYiLCJhcHBlbmRUbyIsImFudG9ueW1zIiwidHlwZU9mIiwiaGFzVHlwZXMiLCJwYXJ0T2YiLCJoYXNQYXJ0cyIsImluc3RhbmNlT2YiLCJoYXNJbnN0YW5jZXMiLCJlbnRhaWxzIiwibWVtYmVyT2YiLCJoYXNNZW1iZXJzIiwic3Vic3RhbmNlT2YiLCJoYXNTdWJzdGFuY2VzIiwiaW5DYXRlZ29yeSIsImhhc0NhdGVnb3JpZXMiLCJ1c2FnZU9mIiwiaGFzVXNhZ2VzIiwiaW5SZWdpb24iLCJyZWdpb25PZiIsInBlcnRhaW5zVG8iLCJkZWZrZXkiLCJpdGVtT3JBcnJheSIsIkFycmF5IiwiaXNBcnJheSIsImNoZWNrQVBJbGltaXRBbmRGaW5pc2giLCJyZW1haW5pbmdBcGlMaW1pdCIsImxvYWREaWN0aW9uYXJ5QW5kQ2hpbGRyZW4iLCJ0cmVzdWx0IiwidHJhdmVyc2lvbiIsInBhcmVudE5vZGUiLCJsb2FkQ2hpbGRyZW4iLCJuZXdXb3JkcyIsIndvcmRzYnJlYWR0aGZpcnN0IiwidHJhdmVyc2VDbHVzdGVyIiwidGhlbWFpbmFic3RyYWN0aW9uIiwic3RvcHdoZW5hbGxsb2FkZWQiLCJub1dvcmRzIiwicHJldmlvdXNsZXZlbGNoaWxkd29yZHMiLCJjb25jYXQiLCJieV93Iiwibm9kZXByb21pc2UiLCJsb2FkQ2x1c3RlciIsImJ5X2tleSIsImNtcCIsImZpcnN0RWwiLCJzZWNvbmRFbCIsImxvY2FsZUNvbXBhcmUiLCJub0NsdXN0ZXJFbnRyaWVzIiwiY2pzb24iLCJsb2FkQ29tbW9uV29yZCIsImRlZmluaXRpb25Ob2RlIiwic3luIiwibm9EZWZpbml0aW9ucyIsImxvYWRDb21tb25Xb3JkcyIsImNvbW1vbldvcmQiLCJjd3Byb21pc2UiLCJwcmV2bm9kZSIsImZpbHRlcmVkIiwibG9hZENvbW1vbldvcmRzTGV0dGVyIiwib2ZMZXR0ZXIiLCJsb2FkQ29tbW9uV29yZHMzMDAwX2FfZSIsImxvYWRDb21tb25Xb3JkczMwMDBfZl9wIiwibG9hZENvbW1vbldvcmRzMzAwMF9xX3oiLCJsb2FkQ29tbW9uV29yZHMxMDAwMF9hX2MiLCJsb2FkQ29tbW9uV29yZHMxMDAwMF9kX2giLCJsb2FkQ29tbW9uV29yZHMxMDAwMF9pX28iLCJsb2FkQ29tbW9uV29yZHMxMDAwMF9wX3IiLCJsb2FkQ29tbW9uV29yZHMxMDAwMF9zX3oiLCJsb2FkQ29tbW9uV29yZHMzMDAwIiwibG9hZENvbW1vbldvcmRzMTAwMDAiLCJsb2FkV29yZHNPbmx5Iiwid29yZHMwIiwibG9hZENvbW1vbjMwMDBfd29yZHMiLCJjdzEiLCJjdzIiLCJjdzMiLCJsb2FkQ29tbW9uMTAwMDBfd29yZHMiLCJjdzQiLCJjdzUiLCJsb2FkQWxsX3dvcmRzIiwid29yZDAiLCJhbGx3b3JkczAiLCJvbkZpbGUiLCJzdHJQYXRoIiwic3Vic3RyaW5nIiwibG9hZE15V29yZHMiLCJNeVdvcmRzIiwid29yZHNCeUZyZXF1ZW5jeSIsImZmcm9tIiwiZnRvIiwiaW5kcGF0aCIsIm5vdGYiLCJnZW5lcmF0ZUluZGV4ZXMiLCJub3dvcmRzIiwiY250ZiIsImJ5ZiIsImNoa0ZpbGUiLCJma2V5cyIsIk51bWJlciIsImJ5ZnMiLCJxdWFudGlsaXplIiwibHN0IiwiYnVja2V0cyIsImZwbCIsInRvRml4ZWQiLCJ3cml0ZUZpbGVTeW5jIiwiRmluZEZpbGVzIiwiY250Iiwicm9vdEZvbGRlciIsImZpbGVNb2RpZmllZERhdGUiLCJfcmVzb2x2ZSIsIl9yZWplY3QiLCJzdGFydFNlYXJjaCIsInRyYW5zZm9ybVRvV29yZHNBcGlMaWtlIiwiYW50aXByb24iLCJpZHgiLCJwaWQiLCJjaGFyQ29kZUF0IiwibWVhbmluZ3MiLCJtZWFuaW5nZGVmIiwicGhvbmV0aWMiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHMiLCJoYW5kbGVFcnJvciIsInRvTG9jYWxlTG93ZXJDYXNlIiwiZmluZERlZmluaXRpb25zIiwiXyIsInRyYW5zZm9ybVYydG9WMSIsIm90aGVyUHJvcHMiLCJhY2N1bXVsYXRvciIsInN1YmVudHJpZXMiLCJtYXBwZWRTdWJlbnRyaWVzIiwic2Vuc2VfZmFtaWxpZXMiLCJldHltb2xvZ3kiLCJzdWJlbnRyeSIsInNlbnNlX2ZhbWlseSIsImRlZmF1bHRzIiwiaGVhZHdvcmQiLCJsZW1tYSIsInBob25ldGljcyIsIm94Zm9yZF9hdWRpbyIsInBhcnRzX29mX3NwZWVjaCIsInNlbnNlcyIsImV4YW1wbGVfZ3JvdXBzIiwidGhlc2F1cnVzX2VudHJpZXMiLCJueW0iLCJleGFtcGxlX2dyb3VwIiwicXVlcnlJbnRlcm5ldCIsIlVSTCIsInNlYXJjaFBhcmFtcyIsImVuY29kZVVSSUNvbXBvbmVudCIsInNpbmdsZV9yZXN1bHRzIiwiZmV0Y2hGcm9tU291cmNlIiwiZGljdGlvbmFyeURhdGEiLCJpc0VtcHR5IiwiZW52IiwiUkFQSURBUElfS0VZIiwiY3Jhd2xlciIsImhhbmRsZXIiLCJ3czAiLCJybmQiLCJnZXRNaWxsaXNlY29uZHMiLCJNYXRoIiwiaGFzaENvZGUiLCJ0cnByb21pc2UiLCJzdGF0dXNDb2RlIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDJCQUEyQiwwQkFBMEIsRUFBRTtRQUN2RCxpQ0FBaUMsZUFBZTtRQUNoRDtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxzREFBc0QsK0RBQStEOztRQUVySDtRQUNBOzs7UUFHQTtRQUNBOzs7Ozs7O0FDbEZBLG1DOzs7Ozs7O0FDQWE7QUFDYixpQkFBaUIsbUJBQU8sQ0FBQyxFQUFVO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyxFQUFNOztBQUUzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsd0JBQXdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsaUJBQWlCO0FBQzNDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxRQUFRLG1DQUFtQztBQUMzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCLGVBQWU7QUFDeEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDLG1CQUFtQixtQkFBbUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakIsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFD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QUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZCQUE2QjtBQUNqRTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsc0JBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsbUNBQW1DO0FBQ3REOztBQUVBO0FBQ0EsbUJBQW1CLGlEQUFpRDtBQUNwRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNB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O0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyw2QkFBNkI7QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFNBQVM7QUFDeEIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsT0FBTztBQUN0QixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FB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QUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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LEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsRUFBRTtBQUNqQixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLDBCQUEwQixTQUFTO0FBQ25DO0FBQ0E7QUFDQSwwQkFBMEIsU0FBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsU0FBUztBQUMxQixjQUFjO0FBQ2Q7QUFDQSxpQkFBaUIsU0FBUztBQUMxQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsVUFBVTtBQUN6QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFVBQVU7QUFDekIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTLEdBQUcsU0FBUyxHQUFHLFNBQVM7QUFDbEQsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsVUFBVTtBQUN6QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUztBQUNsRCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLHFCQUFxQjtBQUNwQyxpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0EscUJBQXFCLFFBQVEsT0FBTyxTQUFTLEVBQUU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTLEdBQUcsU0FBUyxHQUFHLFNBQVM7QUFDcEQsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixPQUFPLFNBQVMsRUFBRSxHQUFHLE9BQU8saUJBQWlCLEVBQUU7QUFDdEUsY0FBYyxPQUFPLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw0QkFBNEI7QUFDakQscUJBQXFCLDZCQUE2QjtBQUNsRCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFDQUFxQyxtQkFBbUIsRUFBRTtBQUMxRDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsMkJBQTJCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNEJBQTRCO0FBQ2pELHFCQUFxQiw2QkFBNkI7QUFDbEQscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSx5Q0FBeUMsbUJBQW1CLEVBQUU7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDRCQUE0QjtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxhQUFhO0FBQzVCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsRUFBRTtBQUNuQjtBQUNBO0FBQ0EscUJBQXFCLFFBQVEsT0FBTyxTQUFTLEVBQUU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBLHFCQUFxQixPQUFPLFNBQVM7QUFDckMsNkJBQTZCLGdCQUFnQixTQUFTLEdBQUc7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxhQUFhO0FBQzVCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSw4QkFBOEIsZ0JBQWdCLFNBQVMsR0FBRztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxhQUFhO0FBQzVCLGVBQWUsS0FBSztBQUNwQixpQkFBaUIsRUFBRTtBQUNuQjtBQUNBO0FBQ0EscUJBQXFCLFFBQVEsT0FBTyxvQkFBb0IsRUFBRTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlCQUFpQjtBQUNuQztBQUNBLFFBQVE7QUFDUixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiwrQkFBK0I7QUFDcEQscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSx1Q0FBdUMsY0FBYyxFQUFFO0FBQ3ZELGNBQWMsMkJBQTJCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMkJBQTJCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixTQUFTLEdBQUcsU0FBUztBQUNyQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUyxHQUFHLFNBQVM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRLGlCQUFpQixHQUFHLGlCQUFpQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsVUFBVTtBQUN6QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxxQkFBcUI7QUFDcEMsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxxQkFBcUI7QUFDcEMsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixFQUFFO0FBQ25CO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUSxPQUFPLCtCQUErQixFQUFFO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxhQUFhO0FBQzVCLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0EscUJBQXFCLFFBQVEsT0FBTyxTQUFTLEVBQUU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxFQUFFO0FBQ2pCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPLFdBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBLFFBQVEsSUFBSTtBQUNaLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxhQUFhO0FBQzVCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUSxPQUFPLFNBQVMsRUFBRTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUSxRQUFRLEVBQUU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUSxRQUFRLEVBQUU7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLGFBQWE7QUFDNUIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSxxQkFBcUIsUUFBUSxPQUFPLFNBQVMsRUFBRTtBQUMvQztBQUNBLGlEQUFpRCxjQUFjLEVBQUU7QUFDakU7QUFDQTtBQUNBO0FBQ0EsaURBQWlELHNCQUFzQixFQUFFO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxhQUFhO0FBQzVCLGVBQWUsU0FBUztBQUN4QixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTyxXQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0NBQWtDLEtBQUs7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsT0FBTztBQUN2QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsT0FBTztBQUN2QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsY0FBYztBQUM3QixlQUFlLGdCQUFnQjtBQUMvQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxjQUFjO0FBQzdCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU8sWUFBWTtBQUNsQyxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDLHFCQUFxQixVQUFVO0FBQy9CO0FBQ0E7QUFDQSxzRUFBc0UsMkJBQTJCLEVBQUU7QUFDbkcsaUJBQWlCLDhCQUE4QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxPQUFPO0FBQ2pELGlCQUFpQixvQkFBb0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCwyQkFBMkIsRUFBRTtBQUNsRix3Q0FBd0MsYUFBYSxlQUFlLEVBQUU7QUFDdEUsaUJBQWlCLDhCQUE4QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSx3REFBd0QscUNBQXFDO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHFCQUFxQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFlBQVk7QUFDdkQsMENBQTBDLFFBQVE7QUFDbEQsaUJBQWlCLHFCQUFxQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCOztBQUUvQixtQ0FBbUM7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0JBQXdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUCxtQkFBbUI7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG1CQUFtQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QztBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0EsNkJBQTZCLEVBQUU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsK0JBQStCLGlDQUFpQztBQUNoRSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGdCQUFnQixPQUFPO0FBQ3ZCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZ0JBQWdCLE9BQU87QUFDdkIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGdCQUFnQixPQUFPO0FBQ3ZCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU8sWUFBWTtBQUNsQyxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsY0FBYztBQUM3QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQztBQUNqQyxhQUFhLFFBQVEsUUFBUSxVQUFVLGFBQWE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsY0FBYztBQUM3QixnQkFBZ0IsT0FBTztBQUN2QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLEtBQUs7QUFDcEIsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUscUJBQXFCO0FBQ3BDLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCLHNCQUFzQixrQkFBa0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBLGFBQWEsaUJBQWlCO0FBQzlCO0FBQ0E7QUFDQSxhQUFhLHFCQUFxQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUJBQWlCO0FBQzNCLFVBQVU7QUFDVjtBQUNBO0FBQ0EscUNBQXFDLG1CQUFtQixjQUFjLEVBQUUsRUFBRTtBQUMxRSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0EsNENBQTRDLFNBQVM7QUFDckQ7QUFDQTtBQUNBLGVBQWUsU0FBUyxHQUFHLFNBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixlQUFlLEVBQUU7QUFDakIsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlCQUF5QjtBQUN4QyxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUJBQXlCO0FBQ3hDLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsRUFBRTtBQUNqQixpQkFBaUIsRUFBRTtBQUNuQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsVUFBVSw4Q0FBOEM7QUFDeEQsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxtQ0FBbUM7QUFDdEUsZUFBZSw4Q0FBOEM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsZUFBZSw0QkFBNEI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsVUFBVSx5QkFBeUI7QUFDbkMsVUFBVTtBQUNWO0FBQ0E7QUFDQSxvQ0FBb0MsaUJBQWlCO0FBQ3JELGVBQWUseUJBQXlCO0FBQ3hDO0FBQ0E7QUFDQSxnREFBZ0QsU0FBUyxjQUFjLFNBQVM7QUFDaEYsZUFBZSx5QkFBeUIsR0FBRyx5QkFBeUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUIsZUFBZSxFQUFFO0FBQ2pCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLFVBQVUseUJBQXlCO0FBQ25DLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5QkFBeUIsR0FBRyx5QkFBeUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QixlQUFlLEtBQUs7QUFDcEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsVUFBVSxPQUFPLHFCQUFxQixFQUFFO0FBQ3hDLFVBQVUsT0FBTyxxQkFBcUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLEtBQUs7QUFDcEIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU8sWUFBWTtBQUNsQyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixtQkFBbUIsR0FBRyxpQkFBaUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCLHFEQUFxRDtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUJBQXlCO0FBQ3hDO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlCQUF5QjtBQUN4QztBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5QkFBeUI7QUFDeEM7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTLEdBQUcsU0FBUztBQUMzRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUIsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0EsVUFBVSxPQUFPLFNBQVMsRUFBRTtBQUM1QixVQUFVLE9BQU8sU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixNQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixJQUFJO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsTUFBTTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEVBQUU7QUFDakIsaUJBQWlCLE1BQU07QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCLGlCQUFpQixFQUFFO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQixlQUFlLFNBQVM7QUFDeEIsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBLHVCQUF1QixTQUFTLEdBQUcsU0FBUztBQUM1QztBQUNBLHFDQUFxQyxZQUFZLEVBQUU7QUFDbkQsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUyxHQUFHLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUztBQUNwRTtBQUNBLHNDQUFzQyxZQUFZLEVBQUU7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckIsaUJBQWlCLEVBQUU7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsRUFBRTtBQUNuQjtBQUNBO0FBQ0EsdUJBQXVCLFNBQVMsR0FBRyxTQUFTO0FBQzVDO0FBQ0EscUNBQXFDLFlBQVksRUFBRTtBQUNuRCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLE9BQU87QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckIsZUFBZSxTQUFTO0FBQ3hCLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUyxHQUFHLFNBQVMsR0FBRyxTQUFTLEdBQUcsU0FBUztBQUNwRTtBQUNBLHFDQUFxQyxZQUFZLEVBQUU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLLE1BQU0saUJBQWlCOztBQUU1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7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QUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksRUFBRTtBQUNkLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixtQ0FBTTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLHFCQUFxQjtBQUNyQixFQUFFO0FBQ0Y7QUFDQSw0Q0FBNEM7QUFDNUMsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSw4QkFBOEIsV0FBVyxtQkFBbUI7QUFDNUQsRUFBRSwwQkFBMEIsbUNBQU07QUFDbEM7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVcsS0FBSztBQUNoQjtBQUNBLHlCQUF5QixLQUFLO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLE1BQU07QUFDbEI7QUFDQSx5QkFBeUIsTUFBTTtBQUMvQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksS0FBSztBQUNqQixhQUFhLE1BQU07QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFLO0FBQ2pCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksS0FBSztBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBLE9BQU8sbUJBQW1CO0FBQzFCLFdBQVcsbUJBQW1CO0FBQzlCLE9BQU8sbUJBQW1CO0FBQzFCLFVBQVUsbUJBQW1CO0FBQzdCLE9BQU8sbUJBQW1CO0FBQzFCLFVBQVUsbUJBQW1CO0FBQzdCLFFBQVEsbUJBQW1CO0FBQzNCLFVBQVUsbUJBQW1CO0FBQzdCLFdBQVc7QUFDWCxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNB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QTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUNoTUE7QUFDQTtBQUVBLE1BQU0ycFIsS0FBSyxHQUFHcnpQ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QXlSbkIsWUFBVSxDQXpSUztBQTBSbkIsV0FBUyxDQTFSVTtBQTJSbkIsY0FBWSxDQTNSTztBQTRSbkIsYUFBVyxDQTVSUTtBQTZSbkIsU0FBTyxDQTdSWTtBQThSbkIsU0FBTyxDQTlSWTtBQStSbkIsVUFBUSxDQS9SVztBQWdTbkIsV0FBUyxDQWhTVTtBQWlTbkIsWUFBVSxDQWpTUztBQWtTbkIsWUFBVSxDQWxTUztBQW1TbkIsU0FBTyxDQW5TWTtBQW9TbkIsU0FBTyxDQXBTWTtBQXFTbkIsV0FBUyxDQXJTVTtBQXNTbkIsYUFBVyxDQXRTUTtBQXVTbkIsZUFBYSxDQXZTTTtBQXdTbkIsWUFBVSxDQXhTUztBQXlTbkIsUUFBTSxDQXpTYTtBQTBTbkIsU0FBTyxDQTFTWTtBQTJTbkIsVUFBUSxDQTNTVztBQTRTbkIsYUFBVyxDQTVTUTtBQTZTbkIsWUFBVSxDQTdTUztBQThTbkIsU0FBTyxDQTlTWTtBQStTbkIsV0FBUyxDQS9TVTtBQWdUbkIsVUFBUSxDQWhUVztBQWlUbkIsV0FBUyxDQWpUVTtBQWtUbkIsVUFBUSxDQWxUVztBQW1UbkIsV0FBUyxDQW5UVTtBQW9UbkIsVUFBUSxDQXBUVztBQXFUbkIsVUFBUSxDQXJUVztBQXNUbkIsV0FBUyxDQXRUVTtBQXVUbkIsVUFBUSxDQXZUVztBQXdUbkIsVUFBUSxDQXhUVztBQXlUbkIsVUFBUSxDQXpUVztBQTBUbkIsWUFBVSxDQTFUUztBQTJUbkIsVUFBUSxDQTNUVztBQTRUbkIsV0FBUyxDQTVUVTtBQTZUbkIsVUFBUSxDQTdUVztBQThUbkIsVUFBUSxDQTlUVztBQStUbkIsYUFBVyxDQS9UUTtBQWdVbkIsV0FBUyxDQWhVVTtBQWlVbkIsWUFBVSxDQWpVUztBQWtVbkIsY0FBWSxDQWxVTztBQW1VbkIsZUFBYSxDQW5VTTtBQW9VbkIsVUFBUSxDQXBVVztBQXFVbkIsVUFBUSxDQXJVVztBQXNVbkIsVUFBUSxDQXRVVztBQXVVbkIsWUFBVSxDQXZVUztBQXdVbkIsYUFBVyxDQXhVUTtBQXlVbkIsV0FBUyxDQXpVVTtBQTBVbkIsVUFBUSxDQTFVVztB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QUNuTixpQkFBUixFQUFKLEVBQWlDO0FBQy9CanJMLGlCQUFPLENBQUNtekUsR0FBUixDQUFZLHdDQUFaO0FBRUQ7QUFDRjtBQUNGOztBQUVELFVBQU13M0csT0FBTyxDQUFDOTVULEdBQVIsQ0FBWTB5UCxRQUFaLENBQU47QUFDQUEsWUFBUSxHQUFHLEVBQVg7QUFHQXZqSCxXQUFPLENBQUNtekUsR0FBUixDQUFZLDBCQUF3Qjg4RyxPQUFPLENBQUNTLE9BQWhDLEdBQXdDLFdBQXhDLEdBQW9EVCxPQUFPLENBQUNJLFFBQXhFO0FBRUEsV0FBTztBQUNMdUksZ0JBQVUsRUFBRSxHQURQO0FBRUw5NlQsVUFBSSxFQUFFLElBRkQ7QUFHTDZnTCxhQUFPLEVBQUU7QUFDUCx1Q0FBK0I7QUFEeEI7QUFISixLQUFQO0FBUUQsR0E1REQsQ0E0REUsT0FBT2t2SSxHQUFQLEVBQVk7QUFDWjd0TCxXQUFPLENBQUNtekUsR0FBUixDQUFZMDZHLEdBQVo7QUFDQSxXQUFPO0FBQUUrSyxnQkFBVSxFQUFFLEdBQWQ7QUFBbUI5NlQsVUFBSSxFQUFFK3ZULEdBQUcsQ0FBQ04sUUFBSjtBQUF6QixLQUFQO0FBQ0Q7QUFDRixDIiwiZmlsZSI6ImNyYXdsLWJhY2tncm91bmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMzkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3RyZWFtXCIpOyIsIlwidXNlIHN0cmljdFwiO1xyXG5jb25zdCBwdW55Y29kZSA9IHJlcXVpcmUoXCJwdW55Y29kZVwiKTtcclxuY29uc3QgdHI0NiA9IHJlcXVpcmUoXCJ0cjQ2XCIpO1xyXG5cclxuY29uc3Qgc3BlY2lhbFNjaGVtZXMgPSB7XHJcbiAgZnRwOiAyMSxcclxuICBmaWxlOiBudWxsLFxyXG4gIGdvcGhlcjogNzAsXHJcbiAgaHR0cDogODAsXHJcbiAgaHR0cHM6IDQ0MyxcclxuICB3czogODAsXHJcbiAgd3NzOiA0NDNcclxufTtcclxuXHJcbmNvbnN0IGZhaWx1cmUgPSBTeW1ib2woXCJmYWlsdXJlXCIpO1xyXG5cclxuZnVuY3Rpb24gY291bnRTeW1ib2xzKHN0cikge1xyXG4gIHJldHVybiBwdW55Y29kZS51Y3MyLmRlY29kZShzdHIpLmxlbmd0aDtcclxufVxyXG5cclxuZnVuY3Rpb24gYXQoaW5wdXQsIGlkeCkge1xyXG4gIGNvbnN0IGMgPSBpbnB1dFtpZHhdO1xyXG4gIHJldHVybiBpc05hTihjKSA/IHVuZGVmaW5lZCA6IFN0cmluZy5mcm9tQ29kZVBvaW50KGMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0FTQ0lJRGlnaXQoYykge1xyXG4gIHJldHVybiBjID49IDB4MzAgJiYgYyA8PSAweDM5O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0FTQ0lJQWxwaGEoYykge1xyXG4gIHJldHVybiAoYyA+PSAweDQxICYmIGMgPD0gMHg1QSkgfHwgKGMgPj0gMHg2MSAmJiBjIDw9IDB4N0EpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0FTQ0lJQWxwaGFudW1lcmljKGMpIHtcclxuICByZXR1cm4gaXNBU0NJSUFscGhhKGMpIHx8IGlzQVNDSUlEaWdpdChjKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNBU0NJSUhleChjKSB7XHJcbiAgcmV0dXJuIGlzQVNDSUlEaWdpdChjKSB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg0NikgfHwgKGMgPj0gMHg2MSAmJiBjIDw9IDB4NjYpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1NpbmdsZURvdChidWZmZXIpIHtcclxuICByZXR1cm4gYnVmZmVyID09PSBcIi5cIiB8fCBidWZmZXIudG9Mb3dlckNhc2UoKSA9PT0gXCIlMmVcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNEb3VibGVEb3QoYnVmZmVyKSB7XHJcbiAgYnVmZmVyID0gYnVmZmVyLnRvTG93ZXJDYXNlKCk7XHJcbiAgcmV0dXJuIGJ1ZmZlciA9PT0gXCIuLlwiIHx8IGJ1ZmZlciA9PT0gXCIlMmUuXCIgfHwgYnVmZmVyID09PSBcIi4lMmVcIiB8fCBidWZmZXIgPT09IFwiJTJlJTJlXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzV2luZG93c0RyaXZlTGV0dGVyQ29kZVBvaW50cyhjcDEsIGNwMikge1xyXG4gIHJldHVybiBpc0FTQ0lJQWxwaGEoY3AxKSAmJiAoY3AyID09PSA1OCB8fCBjcDIgPT09IDEyNCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzV2luZG93c0RyaXZlTGV0dGVyU3RyaW5nKHN0cmluZykge1xyXG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09PSAyICYmIGlzQVNDSUlBbHBoYShzdHJpbmcuY29kZVBvaW50QXQoMCkpICYmIChzdHJpbmdbMV0gPT09IFwiOlwiIHx8IHN0cmluZ1sxXSA9PT0gXCJ8XCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc05vcm1hbGl6ZWRXaW5kb3dzRHJpdmVMZXR0ZXJTdHJpbmcoc3RyaW5nKSB7XHJcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT09IDIgJiYgaXNBU0NJSUFscGhhKHN0cmluZy5jb2RlUG9pbnRBdCgwKSkgJiYgc3RyaW5nWzFdID09PSBcIjpcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gY29udGFpbnNGb3JiaWRkZW5Ib3N0Q29kZVBvaW50KHN0cmluZykge1xyXG4gIHJldHVybiBzdHJpbmcuc2VhcmNoKC9cXHUwMDAwfFxcdTAwMDl8XFx1MDAwQXxcXHUwMDBEfFxcdTAwMjB8I3wlfFxcL3w6fFxcP3xAfFxcW3xcXFxcfFxcXS8pICE9PSAtMTtcclxufVxyXG5cclxuZnVuY3Rpb24gY29udGFpbnNGb3JiaWRkZW5Ib3N0Q29kZVBvaW50RXhjbHVkaW5nUGVyY2VudChzdHJpbmcpIHtcclxuICByZXR1cm4gc3RyaW5nLnNlYXJjaCgvXFx1MDAwMHxcXHUwMDA5fFxcdTAwMEF8XFx1MDAwRHxcXHUwMDIwfCN8XFwvfDp8XFw/fEB8XFxbfFxcXFx8XFxdLykgIT09IC0xO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1NwZWNpYWxTY2hlbWUoc2NoZW1lKSB7XHJcbiAgcmV0dXJuIHNwZWNpYWxTY2hlbWVzW3NjaGVtZV0gIT09IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNTcGVjaWFsKHVybCkge1xyXG4gIHJldHVybiBpc1NwZWNpYWxTY2hlbWUodXJsLnNjaGVtZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmF1bHRQb3J0KHNjaGVtZSkge1xyXG4gIHJldHVybiBzcGVjaWFsU2NoZW1lc1tzY2hlbWVdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwZXJjZW50RW5jb2RlKGMpIHtcclxuICBsZXQgaGV4ID0gYy50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcclxuICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgaGV4ID0gXCIwXCIgKyBoZXg7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gXCIlXCIgKyBoZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHV0ZjhQZXJjZW50RW5jb2RlKGMpIHtcclxuICBjb25zdCBidWYgPSBuZXcgQnVmZmVyKGMpO1xyXG5cclxuICBsZXQgc3RyID0gXCJcIjtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBidWYubGVuZ3RoOyArK2kpIHtcclxuICAgIHN0ciArPSBwZXJjZW50RW5jb2RlKGJ1ZltpXSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1dGY4UGVyY2VudERlY29kZShzdHIpIHtcclxuICBjb25zdCBpbnB1dCA9IG5ldyBCdWZmZXIoc3RyKTtcclxuICBjb25zdCBvdXRwdXQgPSBbXTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAoaW5wdXRbaV0gIT09IDM3KSB7XHJcbiAgICAgIG91dHB1dC5wdXNoKGlucHV0W2ldKTtcclxuICAgIH0gZWxzZSBpZiAoaW5wdXRbaV0gPT09IDM3ICYmIGlzQVNDSUlIZXgoaW5wdXRbaSArIDFdKSAmJiBpc0FTQ0lJSGV4KGlucHV0W2kgKyAyXSkpIHtcclxuICAgICAgb3V0cHV0LnB1c2gocGFyc2VJbnQoaW5wdXQuc2xpY2UoaSArIDEsIGkgKyAzKS50b1N0cmluZygpLCAxNikpO1xyXG4gICAgICBpICs9IDI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvdXRwdXQucHVzaChpbnB1dFtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBuZXcgQnVmZmVyKG91dHB1dCkudG9TdHJpbmcoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNDMENvbnRyb2xQZXJjZW50RW5jb2RlKGMpIHtcclxuICByZXR1cm4gYyA8PSAweDFGIHx8IGMgPiAweDdFO1xyXG59XHJcblxyXG5jb25zdCBleHRyYVBhdGhQZXJjZW50RW5jb2RlU2V0ID0gbmV3IFNldChbMzIsIDM0LCAzNSwgNjAsIDYyLCA2MywgOTYsIDEyMywgMTI1XSk7XHJcbmZ1bmN0aW9uIGlzUGF0aFBlcmNlbnRFbmNvZGUoYykge1xyXG4gIHJldHVybiBpc0MwQ29udHJvbFBlcmNlbnRFbmNvZGUoYykgfHwgZXh0cmFQYXRoUGVyY2VudEVuY29kZVNldC5oYXMoYyk7XHJcbn1cclxuXHJcbmNvbnN0IGV4dHJhVXNlcmluZm9QZXJjZW50RW5jb2RlU2V0ID1cclxuICBuZXcgU2V0KFs0NywgNTgsIDU5LCA2MSwgNjQsIDkxLCA5MiwgOTMsIDk0LCAxMjRdKTtcclxuZnVuY3Rpb24gaXNVc2VyaW5mb1BlcmNlbnRFbmNvZGUoYykge1xyXG4gIHJldHVybiBpc1BhdGhQZXJjZW50RW5jb2RlKGMpIHx8IGV4dHJhVXNlcmluZm9QZXJjZW50RW5jb2RlU2V0LmhhcyhjKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGVyY2VudEVuY29kZUNoYXIoYywgZW5jb2RlU2V0UHJlZGljYXRlKSB7XHJcbiAgY29uc3QgY1N0ciA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGMpO1xyXG5cclxuICBpZiAoZW5jb2RlU2V0UHJlZGljYXRlKGMpKSB7XHJcbiAgICByZXR1cm4gdXRmOFBlcmNlbnRFbmNvZGUoY1N0cik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY1N0cjtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VJUHY0TnVtYmVyKGlucHV0KSB7XHJcbiAgbGV0IFIgPSAxMDtcclxuXHJcbiAgaWYgKGlucHV0Lmxlbmd0aCA+PSAyICYmIGlucHV0LmNoYXJBdCgwKSA9PT0gXCIwXCIgJiYgaW5wdXQuY2hhckF0KDEpLnRvTG93ZXJDYXNlKCkgPT09IFwieFwiKSB7XHJcbiAgICBpbnB1dCA9IGlucHV0LnN1YnN0cmluZygyKTtcclxuICAgIFIgPSAxNjtcclxuICB9IGVsc2UgaWYgKGlucHV0Lmxlbmd0aCA+PSAyICYmIGlucHV0LmNoYXJBdCgwKSA9PT0gXCIwXCIpIHtcclxuICAgIGlucHV0ID0gaW5wdXQuc3Vic3RyaW5nKDEpO1xyXG4gICAgUiA9IDg7XHJcbiAgfVxyXG5cclxuICBpZiAoaW5wdXQgPT09IFwiXCIpIHtcclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVnZXggPSBSID09PSAxMCA/IC9bXjAtOV0vIDogKFIgPT09IDE2ID8gL1teMC05QS1GYS1mXS8gOiAvW14wLTddLyk7XHJcbiAgaWYgKHJlZ2V4LnRlc3QoaW5wdXQpKSB7XHJcbiAgICByZXR1cm4gZmFpbHVyZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBwYXJzZUludChpbnB1dCwgUik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlSVB2NChpbnB1dCkge1xyXG4gIGNvbnN0IHBhcnRzID0gaW5wdXQuc3BsaXQoXCIuXCIpO1xyXG4gIGlmIChwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA9PT0gXCJcIikge1xyXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgcGFydHMucG9wKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAocGFydHMubGVuZ3RoID4gNCkge1xyXG4gICAgcmV0dXJuIGlucHV0O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbnVtYmVycyA9IFtdO1xyXG4gIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xyXG4gICAgaWYgKHBhcnQgPT09IFwiXCIpIHtcclxuICAgICAgcmV0dXJuIGlucHV0O1xyXG4gICAgfVxyXG4gICAgY29uc3QgbiA9IHBhcnNlSVB2NE51bWJlcihwYXJ0KTtcclxuICAgIGlmIChuID09PSBmYWlsdXJlKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuXHJcbiAgICBudW1iZXJzLnB1c2gobik7XHJcbiAgfVxyXG5cclxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlcnMubGVuZ3RoIC0gMTsgKytpKSB7XHJcbiAgICBpZiAobnVtYmVyc1tpXSA+IDI1NSkge1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKG51bWJlcnNbbnVtYmVycy5sZW5ndGggLSAxXSA+PSBNYXRoLnBvdygyNTYsIDUgLSBudW1iZXJzLmxlbmd0aCkpIHtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH1cclxuXHJcbiAgbGV0IGlwdjQgPSBudW1iZXJzLnBvcCgpO1xyXG4gIGxldCBjb3VudGVyID0gMDtcclxuXHJcbiAgZm9yIChjb25zdCBuIG9mIG51bWJlcnMpIHtcclxuICAgIGlwdjQgKz0gbiAqIE1hdGgucG93KDI1NiwgMyAtIGNvdW50ZXIpO1xyXG4gICAgKytjb3VudGVyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGlwdjQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlcmlhbGl6ZUlQdjQoYWRkcmVzcykge1xyXG4gIGxldCBvdXRwdXQgPSBcIlwiO1xyXG4gIGxldCBuID0gYWRkcmVzcztcclxuXHJcbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNDsgKytpKSB7XHJcbiAgICBvdXRwdXQgPSBTdHJpbmcobiAlIDI1NikgKyBvdXRwdXQ7XHJcbiAgICBpZiAoaSAhPT0gNCkge1xyXG4gICAgICBvdXRwdXQgPSBcIi5cIiArIG91dHB1dDtcclxuICAgIH1cclxuICAgIG4gPSBNYXRoLmZsb29yKG4gLyAyNTYpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VJUHY2KGlucHV0KSB7XHJcbiAgY29uc3QgYWRkcmVzcyA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwXTtcclxuICBsZXQgcGllY2VJbmRleCA9IDA7XHJcbiAgbGV0IGNvbXByZXNzID0gbnVsbDtcclxuICBsZXQgcG9pbnRlciA9IDA7XHJcblxyXG4gIGlucHV0ID0gcHVueWNvZGUudWNzMi5kZWNvZGUoaW5wdXQpO1xyXG5cclxuICBpZiAoaW5wdXRbcG9pbnRlcl0gPT09IDU4KSB7XHJcbiAgICBpZiAoaW5wdXRbcG9pbnRlciArIDFdICE9PSA1OCkge1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH1cclxuXHJcbiAgICBwb2ludGVyICs9IDI7XHJcbiAgICArK3BpZWNlSW5kZXg7XHJcbiAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7XHJcbiAgfVxyXG5cclxuICB3aGlsZSAocG9pbnRlciA8IGlucHV0Lmxlbmd0aCkge1xyXG4gICAgaWYgKHBpZWNlSW5kZXggPT09IDgpIHtcclxuICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlucHV0W3BvaW50ZXJdID09PSA1OCkge1xyXG4gICAgICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgfVxyXG4gICAgICArK3BvaW50ZXI7XHJcbiAgICAgICsrcGllY2VJbmRleDtcclxuICAgICAgY29tcHJlc3MgPSBwaWVjZUluZGV4O1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmFsdWUgPSAwO1xyXG4gICAgbGV0IGxlbmd0aCA9IDA7XHJcblxyXG4gICAgd2hpbGUgKGxlbmd0aCA8IDQgJiYgaXNBU0NJSUhleChpbnB1dFtwb2ludGVyXSkpIHtcclxuICAgICAgdmFsdWUgPSB2YWx1ZSAqIDB4MTAgKyBwYXJzZUludChhdChpbnB1dCwgcG9pbnRlciksIDE2KTtcclxuICAgICAgKytwb2ludGVyO1xyXG4gICAgICArK2xlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5wdXRbcG9pbnRlcl0gPT09IDQ2KSB7XHJcbiAgICAgIGlmIChsZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcG9pbnRlciAtPSBsZW5ndGg7XHJcblxyXG4gICAgICBpZiAocGllY2VJbmRleCA+IDYpIHtcclxuICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IG51bWJlcnNTZWVuID0gMDtcclxuXHJcbiAgICAgIHdoaWxlIChpbnB1dFtwb2ludGVyXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbGV0IGlwdjRQaWVjZSA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHtcclxuICAgICAgICAgIGlmIChpbnB1dFtwb2ludGVyXSA9PT0gNDYgJiYgbnVtYmVyc1NlZW4gPCA0KSB7XHJcbiAgICAgICAgICAgICsrcG9pbnRlcjtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFpc0FTQ0lJRGlnaXQoaW5wdXRbcG9pbnRlcl0pKSB7XHJcbiAgICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHdoaWxlIChpc0FTQ0lJRGlnaXQoaW5wdXRbcG9pbnRlcl0pKSB7XHJcbiAgICAgICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUludChhdChpbnB1dCwgcG9pbnRlcikpO1xyXG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpcHY0UGllY2UgPSBudW1iZXI7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlwdjRQaWVjZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlwdjRQaWVjZSA9IGlwdjRQaWVjZSAqIDEwICsgbnVtYmVyO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA+IDI1NSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgICsrcG9pbnRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMHgxMDAgKyBpcHY0UGllY2U7XHJcblxyXG4gICAgICAgICsrbnVtYmVyc1NlZW47XHJcblxyXG4gICAgICAgIGlmIChudW1iZXJzU2VlbiA9PT0gMiB8fCBudW1iZXJzU2VlbiA9PT0gNCkge1xyXG4gICAgICAgICAgKytwaWVjZUluZGV4O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG51bWJlcnNTZWVuICE9PSA0KSB7XHJcbiAgICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfSBlbHNlIGlmIChpbnB1dFtwb2ludGVyXSA9PT0gNTgpIHtcclxuICAgICAgKytwb2ludGVyO1xyXG4gICAgICBpZiAoaW5wdXRbcG9pbnRlcl0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGlucHV0W3BvaW50ZXJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IHZhbHVlO1xyXG4gICAgKytwaWVjZUluZGV4O1xyXG4gIH1cclxuXHJcbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XHJcbiAgICBsZXQgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XHJcbiAgICBwaWVjZUluZGV4ID0gNztcclxuICAgIHdoaWxlIChwaWVjZUluZGV4ICE9PSAwICYmIHN3YXBzID4gMCkge1xyXG4gICAgICBjb25zdCB0ZW1wID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XHJcbiAgICAgIGFkZHJlc3NbY29tcHJlc3MgKyBzd2FwcyAtIDFdID0gYWRkcmVzc1twaWVjZUluZGV4XTtcclxuICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IHRlbXA7XHJcbiAgICAgIC0tcGllY2VJbmRleDtcclxuICAgICAgLS1zd2FwcztcclxuICAgIH1cclxuICB9IGVsc2UgaWYgKGNvbXByZXNzID09PSBudWxsICYmIHBpZWNlSW5kZXggIT09IDgpIHtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGFkZHJlc3M7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlcmlhbGl6ZUlQdjYoYWRkcmVzcykge1xyXG4gIGxldCBvdXRwdXQgPSBcIlwiO1xyXG4gIGNvbnN0IHNlcVJlc3VsdCA9IGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlKGFkZHJlc3MpO1xyXG4gIGNvbnN0IGNvbXByZXNzID0gc2VxUmVzdWx0LmlkeDtcclxuICBsZXQgaWdub3JlMCA9IGZhbHNlO1xyXG5cclxuICBmb3IgKGxldCBwaWVjZUluZGV4ID0gMDsgcGllY2VJbmRleCA8PSA3OyArK3BpZWNlSW5kZXgpIHtcclxuICAgIGlmIChpZ25vcmUwICYmIGFkZHJlc3NbcGllY2VJbmRleF0gPT09IDApIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9IGVsc2UgaWYgKGlnbm9yZTApIHtcclxuICAgICAgaWdub3JlMCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb21wcmVzcyA9PT0gcGllY2VJbmRleCkge1xyXG4gICAgICBjb25zdCBzZXBhcmF0b3IgPSBwaWVjZUluZGV4ID09PSAwID8gXCI6OlwiIDogXCI6XCI7XHJcbiAgICAgIG91dHB1dCArPSBzZXBhcmF0b3I7XHJcbiAgICAgIGlnbm9yZTAgPSB0cnVlO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBvdXRwdXQgKz0gYWRkcmVzc1twaWVjZUluZGV4XS50b1N0cmluZygxNik7XHJcblxyXG4gICAgaWYgKHBpZWNlSW5kZXggIT09IDcpIHtcclxuICAgICAgb3V0cHV0ICs9IFwiOlwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VIb3N0KGlucHV0LCBpc1NwZWNpYWxBcmcpIHtcclxuICBpZiAoaW5wdXRbMF0gPT09IFwiW1wiKSB7XHJcbiAgICBpZiAoaW5wdXRbaW5wdXQubGVuZ3RoIC0gMV0gIT09IFwiXVwiKSB7XHJcbiAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXJzZUlQdjYoaW5wdXQuc3Vic3RyaW5nKDEsIGlucHV0Lmxlbmd0aCAtIDEpKTtcclxuICB9XHJcblxyXG4gIGlmICghaXNTcGVjaWFsQXJnKSB7XHJcbiAgICByZXR1cm4gcGFyc2VPcGFxdWVIb3N0KGlucHV0KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGRvbWFpbiA9IHV0ZjhQZXJjZW50RGVjb2RlKGlucHV0KTtcclxuICBjb25zdCBhc2NpaURvbWFpbiA9IHRyNDYudG9BU0NJSShkb21haW4sIGZhbHNlLCB0cjQ2LlBST0NFU1NJTkdfT1BUSU9OUy5OT05UUkFOU0lUSU9OQUwsIGZhbHNlKTtcclxuICBpZiAoYXNjaWlEb21haW4gPT09IG51bGwpIHtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNvbnRhaW5zRm9yYmlkZGVuSG9zdENvZGVQb2ludChhc2NpaURvbWFpbikpIHtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgaXB2NEhvc3QgPSBwYXJzZUlQdjQoYXNjaWlEb21haW4pO1xyXG4gIGlmICh0eXBlb2YgaXB2NEhvc3QgPT09IFwibnVtYmVyXCIgfHwgaXB2NEhvc3QgPT09IGZhaWx1cmUpIHtcclxuICAgIHJldHVybiBpcHY0SG9zdDtcclxuICB9XHJcblxyXG4gIHJldHVybiBhc2NpaURvbWFpbjtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VPcGFxdWVIb3N0KGlucHV0KSB7XHJcbiAgaWYgKGNvbnRhaW5zRm9yYmlkZGVuSG9zdENvZGVQb2ludEV4Y2x1ZGluZ1BlcmNlbnQoaW5wdXQpKSB7XHJcbiAgICByZXR1cm4gZmFpbHVyZTtcclxuICB9XHJcblxyXG4gIGxldCBvdXRwdXQgPSBcIlwiO1xyXG4gIGNvbnN0IGRlY29kZWQgPSBwdW55Y29kZS51Y3MyLmRlY29kZShpbnB1dCk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWNvZGVkLmxlbmd0aDsgKytpKSB7XHJcbiAgICBvdXRwdXQgKz0gcGVyY2VudEVuY29kZUNoYXIoZGVjb2RlZFtpXSwgaXNDMENvbnRyb2xQZXJjZW50RW5jb2RlKTtcclxuICB9XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZExvbmdlc3RaZXJvU2VxdWVuY2UoYXJyKSB7XHJcbiAgbGV0IG1heElkeCA9IG51bGw7XHJcbiAgbGV0IG1heExlbiA9IDE7IC8vIG9ubHkgZmluZCBlbGVtZW50cyA+IDFcclxuICBsZXQgY3VyclN0YXJ0ID0gbnVsbDtcclxuICBsZXQgY3VyckxlbiA9IDA7XHJcblxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAoYXJyW2ldICE9PSAwKSB7XHJcbiAgICAgIGlmIChjdXJyTGVuID4gbWF4TGVuKSB7XHJcbiAgICAgICAgbWF4SWR4ID0gY3VyclN0YXJ0O1xyXG4gICAgICAgIG1heExlbiA9IGN1cnJMZW47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGN1cnJTdGFydCA9IG51bGw7XHJcbiAgICAgIGN1cnJMZW4gPSAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGN1cnJTdGFydCA9PT0gbnVsbCkge1xyXG4gICAgICAgIGN1cnJTdGFydCA9IGk7XHJcbiAgICAgIH1cclxuICAgICAgKytjdXJyTGVuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gaWYgdHJhaWxpbmcgemVyb3NcclxuICBpZiAoY3VyckxlbiA+IG1heExlbikge1xyXG4gICAgbWF4SWR4ID0gY3VyclN0YXJ0O1xyXG4gICAgbWF4TGVuID0gY3VyckxlbjtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBpZHg6IG1heElkeCxcclxuICAgIGxlbjogbWF4TGVuXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gc2VyaWFsaXplSG9zdChob3N0KSB7XHJcbiAgaWYgKHR5cGVvZiBob3N0ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICByZXR1cm4gc2VyaWFsaXplSVB2NChob3N0KTtcclxuICB9XHJcblxyXG4gIC8vIElQdjYgc2VyaWFsaXplclxyXG4gIGlmIChob3N0IGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgIHJldHVybiBcIltcIiArIHNlcmlhbGl6ZUlQdjYoaG9zdCkgKyBcIl1cIjtcclxuICB9XHJcblxyXG4gIHJldHVybiBob3N0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB0cmltQ29udHJvbENoYXJzKHVybCkge1xyXG4gIHJldHVybiB1cmwucmVwbGFjZSgvXltcXHUwMDAwLVxcdTAwMUZcXHUwMDIwXSt8W1xcdTAwMDAtXFx1MDAxRlxcdTAwMjBdKyQvZywgXCJcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyaW1UYWJBbmROZXdsaW5lKHVybCkge1xyXG4gIHJldHVybiB1cmwucmVwbGFjZSgvXFx1MDAwOXxcXHUwMDBBfFxcdTAwMEQvZywgXCJcIik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNob3J0ZW5QYXRoKHVybCkge1xyXG4gIGNvbnN0IHBhdGggPSB1cmwucGF0aDtcclxuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKHVybC5zY2hlbWUgPT09IFwiZmlsZVwiICYmIHBhdGgubGVuZ3RoID09PSAxICYmIGlzTm9ybWFsaXplZFdpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdKSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgcGF0aC5wb3AoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHtcclxuICByZXR1cm4gdXJsLnVzZXJuYW1lICE9PSBcIlwiIHx8IHVybC5wYXNzd29yZCAhPT0gXCJcIjtcclxufVxyXG5cclxuZnVuY3Rpb24gY2Fubm90SGF2ZUFVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpIHtcclxuICByZXR1cm4gdXJsLmhvc3QgPT09IG51bGwgfHwgdXJsLmhvc3QgPT09IFwiXCIgfHwgdXJsLmNhbm5vdEJlQUJhc2VVUkwgfHwgdXJsLnNjaGVtZSA9PT0gXCJmaWxlXCI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzTm9ybWFsaXplZFdpbmRvd3NEcml2ZUxldHRlcihzdHJpbmcpIHtcclxuICByZXR1cm4gL15bQS1aYS16XTokLy50ZXN0KHN0cmluZyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFVSTFN0YXRlTWFjaGluZShpbnB1dCwgYmFzZSwgZW5jb2RpbmdPdmVycmlkZSwgdXJsLCBzdGF0ZU92ZXJyaWRlKSB7XHJcbiAgdGhpcy5wb2ludGVyID0gMDtcclxuICB0aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgdGhpcy5iYXNlID0gYmFzZSB8fCBudWxsO1xyXG4gIHRoaXMuZW5jb2RpbmdPdmVycmlkZSA9IGVuY29kaW5nT3ZlcnJpZGUgfHwgXCJ1dGYtOFwiO1xyXG4gIHRoaXMuc3RhdGVPdmVycmlkZSA9IHN0YXRlT3ZlcnJpZGU7XHJcbiAgdGhpcy51cmwgPSB1cmw7XHJcbiAgdGhpcy5mYWlsdXJlID0gZmFsc2U7XHJcbiAgdGhpcy5wYXJzZUVycm9yID0gZmFsc2U7XHJcblxyXG4gIGlmICghdGhpcy51cmwpIHtcclxuICAgIHRoaXMudXJsID0ge1xyXG4gICAgICBzY2hlbWU6IFwiXCIsXHJcbiAgICAgIHVzZXJuYW1lOiBcIlwiLFxyXG4gICAgICBwYXNzd29yZDogXCJcIixcclxuICAgICAgaG9zdDogbnVsbCxcclxuICAgICAgcG9ydDogbnVsbCxcclxuICAgICAgcGF0aDogW10sXHJcbiAgICAgIHF1ZXJ5OiBudWxsLFxyXG4gICAgICBmcmFnbWVudDogbnVsbCxcclxuXHJcbiAgICAgIGNhbm5vdEJlQUJhc2VVUkw6IGZhbHNlXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlcyA9IHRyaW1Db250cm9sQ2hhcnModGhpcy5pbnB1dCk7XHJcbiAgICBpZiAocmVzICE9PSB0aGlzLmlucHV0KSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLmlucHV0ID0gcmVzO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcmVzID0gdHJpbVRhYkFuZE5ld2xpbmUodGhpcy5pbnB1dCk7XHJcbiAgaWYgKHJlcyAhPT0gdGhpcy5pbnB1dCkge1xyXG4gICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICB9XHJcbiAgdGhpcy5pbnB1dCA9IHJlcztcclxuXHJcbiAgdGhpcy5zdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgXCJzY2hlbWUgc3RhcnRcIjtcclxuXHJcbiAgdGhpcy5idWZmZXIgPSBcIlwiO1xyXG4gIHRoaXMuYXRGbGFnID0gZmFsc2U7XHJcbiAgdGhpcy5hcnJGbGFnID0gZmFsc2U7XHJcbiAgdGhpcy5wYXNzd29yZFRva2VuU2VlbkZsYWcgPSBmYWxzZTtcclxuXHJcbiAgdGhpcy5pbnB1dCA9IHB1bnljb2RlLnVjczIuZGVjb2RlKHRoaXMuaW5wdXQpO1xyXG5cclxuICBmb3IgKDsgdGhpcy5wb2ludGVyIDw9IHRoaXMuaW5wdXQubGVuZ3RoOyArK3RoaXMucG9pbnRlcikge1xyXG4gICAgY29uc3QgYyA9IHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyXTtcclxuICAgIGNvbnN0IGNTdHIgPSBpc05hTihjKSA/IHVuZGVmaW5lZCA6IFN0cmluZy5mcm9tQ29kZVBvaW50KGMpO1xyXG5cclxuICAgIC8vIGV4ZWMgc3RhdGUgbWFjaGluZVxyXG4gICAgY29uc3QgcmV0ID0gdGhpc1tcInBhcnNlIFwiICsgdGhpcy5zdGF0ZV0oYywgY1N0cik7XHJcbiAgICBpZiAoIXJldCkge1xyXG4gICAgICBicmVhazsgLy8gdGVybWluYXRlIGFsZ29yaXRobVxyXG4gICAgfSBlbHNlIGlmIChyZXQgPT09IGZhaWx1cmUpIHtcclxuICAgICAgdGhpcy5mYWlsdXJlID0gdHJ1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2Ugc2NoZW1lIHN0YXJ0XCJdID0gZnVuY3Rpb24gcGFyc2VTY2hlbWVTdGFydChjLCBjU3RyKSB7XHJcbiAgaWYgKGlzQVNDSUlBbHBoYShjKSkge1xyXG4gICAgdGhpcy5idWZmZXIgKz0gY1N0ci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwic2NoZW1lXCI7XHJcbiAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZU92ZXJyaWRlKSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJubyBzY2hlbWVcIjtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBzY2hlbWVcIl0gPSBmdW5jdGlvbiBwYXJzZVNjaGVtZShjLCBjU3RyKSB7XHJcbiAgaWYgKGlzQVNDSUlBbHBoYW51bWVyaWMoYykgfHwgYyA9PT0gNDMgfHwgYyA9PT0gNDUgfHwgYyA9PT0gNDYpIHtcclxuICAgIHRoaXMuYnVmZmVyICs9IGNTdHIudG9Mb3dlckNhc2UoKTtcclxuICB9IGVsc2UgaWYgKGMgPT09IDU4KSB7XHJcbiAgICBpZiAodGhpcy5zdGF0ZU92ZXJyaWRlKSB7XHJcbiAgICAgIGlmIChpc1NwZWNpYWwodGhpcy51cmwpICYmICFpc1NwZWNpYWxTY2hlbWUodGhpcy5idWZmZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWlzU3BlY2lhbCh0aGlzLnVybCkgJiYgaXNTcGVjaWFsU2NoZW1lKHRoaXMuYnVmZmVyKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKChpbmNsdWRlc0NyZWRlbnRpYWxzKHRoaXMudXJsKSB8fCB0aGlzLnVybC5wb3J0ICE9PSBudWxsKSAmJiB0aGlzLmJ1ZmZlciA9PT0gXCJmaWxlXCIpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLnVybC5zY2hlbWUgPT09IFwiZmlsZVwiICYmICh0aGlzLnVybC5ob3N0ID09PSBcIlwiIHx8IHRoaXMudXJsLmhvc3QgPT09IG51bGwpKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLnVybC5zY2hlbWUgPSB0aGlzLmJ1ZmZlcjtcclxuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcclxuICAgIGlmICh0aGlzLnN0YXRlT3ZlcnJpZGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMudXJsLnNjaGVtZSA9PT0gXCJmaWxlXCIpIHtcclxuICAgICAgaWYgKHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMV0gIT09IDQ3IHx8IHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMl0gIT09IDQ3KSB7XHJcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnN0YXRlID0gXCJmaWxlXCI7XHJcbiAgICB9IGVsc2UgaWYgKGlzU3BlY2lhbCh0aGlzLnVybCkgJiYgdGhpcy5iYXNlICE9PSBudWxsICYmIHRoaXMuYmFzZS5zY2hlbWUgPT09IHRoaXMudXJsLnNjaGVtZSkge1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJzcGVjaWFsIHJlbGF0aXZlIG9yIGF1dGhvcml0eVwiO1xyXG4gICAgfSBlbHNlIGlmIChpc1NwZWNpYWwodGhpcy51cmwpKSB7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcInNwZWNpYWwgYXV0aG9yaXR5IHNsYXNoZXNcIjtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAxXSA9PT0gNDcpIHtcclxuICAgICAgdGhpcy5zdGF0ZSA9IFwicGF0aCBvciBhdXRob3JpdHlcIjtcclxuICAgICAgKyt0aGlzLnBvaW50ZXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTtcclxuICAgICAgdGhpcy51cmwucGF0aC5wdXNoKFwiXCIpO1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJjYW5ub3QtYmUtYS1iYXNlLVVSTCBwYXRoXCI7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZU92ZXJyaWRlKSB7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJubyBzY2hlbWVcIjtcclxuICAgIHRoaXMucG9pbnRlciA9IC0xO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBubyBzY2hlbWVcIl0gPSBmdW5jdGlvbiBwYXJzZU5vU2NoZW1lKGMpIHtcclxuICBpZiAodGhpcy5iYXNlID09PSBudWxsIHx8ICh0aGlzLmJhc2UuY2Fubm90QmVBQmFzZVVSTCAmJiBjICE9PSAzNSkpIHtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH0gZWxzZSBpZiAodGhpcy5iYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgYyA9PT0gMzUpIHtcclxuICAgIHRoaXMudXJsLnNjaGVtZSA9IHRoaXMuYmFzZS5zY2hlbWU7XHJcbiAgICB0aGlzLnVybC5wYXRoID0gdGhpcy5iYXNlLnBhdGguc2xpY2UoKTtcclxuICAgIHRoaXMudXJsLnF1ZXJ5ID0gdGhpcy5iYXNlLnF1ZXJ5O1xyXG4gICAgdGhpcy51cmwuZnJhZ21lbnQgPSBcIlwiO1xyXG4gICAgdGhpcy51cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJmcmFnbWVudFwiO1xyXG4gIH0gZWxzZSBpZiAodGhpcy5iYXNlLnNjaGVtZSA9PT0gXCJmaWxlXCIpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcImZpbGVcIjtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJyZWxhdGl2ZVwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBzcGVjaWFsIHJlbGF0aXZlIG9yIGF1dGhvcml0eVwiXSA9IGZ1bmN0aW9uIHBhcnNlU3BlY2lhbFJlbGF0aXZlT3JBdXRob3JpdHkoYykge1xyXG4gIGlmIChjID09PSA0NyAmJiB0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDFdID09PSA0Nykge1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwic3BlY2lhbCBhdXRob3JpdHkgaWdub3JlIHNsYXNoZXNcIjtcclxuICAgICsrdGhpcy5wb2ludGVyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicmVsYXRpdmVcIjtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgcGF0aCBvciBhdXRob3JpdHlcIl0gPSBmdW5jdGlvbiBwYXJzZVBhdGhPckF1dGhvcml0eShjKSB7XHJcbiAgaWYgKGMgPT09IDQ3KSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJhdXRob3JpdHlcIjtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicGF0aFwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSByZWxhdGl2ZVwiXSA9IGZ1bmN0aW9uIHBhcnNlUmVsYXRpdmUoYykge1xyXG4gIHRoaXMudXJsLnNjaGVtZSA9IHRoaXMuYmFzZS5zY2hlbWU7XHJcbiAgaWYgKGlzTmFOKGMpKSB7XHJcbiAgICB0aGlzLnVybC51c2VybmFtZSA9IHRoaXMuYmFzZS51c2VybmFtZTtcclxuICAgIHRoaXMudXJsLnBhc3N3b3JkID0gdGhpcy5iYXNlLnBhc3N3b3JkO1xyXG4gICAgdGhpcy51cmwuaG9zdCA9IHRoaXMuYmFzZS5ob3N0O1xyXG4gICAgdGhpcy51cmwucG9ydCA9IHRoaXMuYmFzZS5wb3J0O1xyXG4gICAgdGhpcy51cmwucGF0aCA9IHRoaXMuYmFzZS5wYXRoLnNsaWNlKCk7XHJcbiAgICB0aGlzLnVybC5xdWVyeSA9IHRoaXMuYmFzZS5xdWVyeTtcclxuICB9IGVsc2UgaWYgKGMgPT09IDQ3KSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJyZWxhdGl2ZSBzbGFzaFwiO1xyXG4gIH0gZWxzZSBpZiAoYyA9PT0gNjMpIHtcclxuICAgIHRoaXMudXJsLnVzZXJuYW1lID0gdGhpcy5iYXNlLnVzZXJuYW1lO1xyXG4gICAgdGhpcy51cmwucGFzc3dvcmQgPSB0aGlzLmJhc2UucGFzc3dvcmQ7XHJcbiAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICB0aGlzLnVybC5wb3J0ID0gdGhpcy5iYXNlLnBvcnQ7XHJcbiAgICB0aGlzLnVybC5wYXRoID0gdGhpcy5iYXNlLnBhdGguc2xpY2UoKTtcclxuICAgIHRoaXMudXJsLnF1ZXJ5ID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcInF1ZXJ5XCI7XHJcbiAgfSBlbHNlIGlmIChjID09PSAzNSkge1xyXG4gICAgdGhpcy51cmwudXNlcm5hbWUgPSB0aGlzLmJhc2UudXNlcm5hbWU7XHJcbiAgICB0aGlzLnVybC5wYXNzd29yZCA9IHRoaXMuYmFzZS5wYXNzd29yZDtcclxuICAgIHRoaXMudXJsLmhvc3QgPSB0aGlzLmJhc2UuaG9zdDtcclxuICAgIHRoaXMudXJsLnBvcnQgPSB0aGlzLmJhc2UucG9ydDtcclxuICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgpO1xyXG4gICAgdGhpcy51cmwucXVlcnkgPSB0aGlzLmJhc2UucXVlcnk7XHJcbiAgICB0aGlzLnVybC5mcmFnbWVudCA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJmcmFnbWVudFwiO1xyXG4gIH0gZWxzZSBpZiAoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiBjID09PSA5Mikge1xyXG4gICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIHRoaXMuc3RhdGUgPSBcInJlbGF0aXZlIHNsYXNoXCI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMudXJsLnVzZXJuYW1lID0gdGhpcy5iYXNlLnVzZXJuYW1lO1xyXG4gICAgdGhpcy51cmwucGFzc3dvcmQgPSB0aGlzLmJhc2UucGFzc3dvcmQ7XHJcbiAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICB0aGlzLnVybC5wb3J0ID0gdGhpcy5iYXNlLnBvcnQ7XHJcbiAgICB0aGlzLnVybC5wYXRoID0gdGhpcy5iYXNlLnBhdGguc2xpY2UoMCwgdGhpcy5iYXNlLnBhdGgubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IFwicGF0aFwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSByZWxhdGl2ZSBzbGFzaFwiXSA9IGZ1bmN0aW9uIHBhcnNlUmVsYXRpdmVTbGFzaChjKSB7XHJcbiAgaWYgKGlzU3BlY2lhbCh0aGlzLnVybCkgJiYgKGMgPT09IDQ3IHx8IGMgPT09IDkyKSkge1xyXG4gICAgaWYgKGMgPT09IDkyKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnN0YXRlID0gXCJzcGVjaWFsIGF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO1xyXG4gIH0gZWxzZSBpZiAoYyA9PT0gNDcpIHtcclxuICAgIHRoaXMuc3RhdGUgPSBcImF1dGhvcml0eVwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnVybC51c2VybmFtZSA9IHRoaXMuYmFzZS51c2VybmFtZTtcclxuICAgIHRoaXMudXJsLnBhc3N3b3JkID0gdGhpcy5iYXNlLnBhc3N3b3JkO1xyXG4gICAgdGhpcy51cmwuaG9zdCA9IHRoaXMuYmFzZS5ob3N0O1xyXG4gICAgdGhpcy51cmwucG9ydCA9IHRoaXMuYmFzZS5wb3J0O1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicGF0aFwiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBzcGVjaWFsIGF1dGhvcml0eSBzbGFzaGVzXCJdID0gZnVuY3Rpb24gcGFyc2VTcGVjaWFsQXV0aG9yaXR5U2xhc2hlcyhjKSB7XHJcbiAgaWYgKGMgPT09IDQ3ICYmIHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMV0gPT09IDQ3KSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJzcGVjaWFsIGF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO1xyXG4gICAgKyt0aGlzLnBvaW50ZXI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJzcGVjaWFsIGF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiO1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBzcGVjaWFsIGF1dGhvcml0eSBpZ25vcmUgc2xhc2hlc1wiXSA9IGZ1bmN0aW9uIHBhcnNlU3BlY2lhbEF1dGhvcml0eUlnbm9yZVNsYXNoZXMoYykge1xyXG4gIGlmIChjICE9PSA0NyAmJiBjICE9PSA5Mikge1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwiYXV0aG9yaXR5XCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIGF1dGhvcml0eVwiXSA9IGZ1bmN0aW9uIHBhcnNlQXV0aG9yaXR5KGMsIGNTdHIpIHtcclxuICBpZiAoYyA9PT0gNjQpIHtcclxuICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICBpZiAodGhpcy5hdEZsYWcpIHtcclxuICAgICAgdGhpcy5idWZmZXIgPSBcIiU0MFwiICsgdGhpcy5idWZmZXI7XHJcbiAgICB9XHJcbiAgICB0aGlzLmF0RmxhZyA9IHRydWU7XHJcblxyXG4gICAgLy8gY2FyZWZ1bCwgdGhpcyBpcyBiYXNlZCBvbiBidWZmZXIgYW5kIGhhcyBpdHMgb3duIHBvaW50ZXIgKHRoaXMucG9pbnRlciAhPSBwb2ludGVyKSBhbmQgaW5uZXIgY2hhcnNcclxuICAgIGNvbnN0IGxlbiA9IGNvdW50U3ltYm9scyh0aGlzLmJ1ZmZlcik7XHJcbiAgICBmb3IgKGxldCBwb2ludGVyID0gMDsgcG9pbnRlciA8IGxlbjsgKytwb2ludGVyKSB7XHJcbiAgICAgIGNvbnN0IGNvZGVQb2ludCA9IHRoaXMuYnVmZmVyLmNvZGVQb2ludEF0KHBvaW50ZXIpO1xyXG5cclxuICAgICAgaWYgKGNvZGVQb2ludCA9PT0gNTggJiYgIXRoaXMucGFzc3dvcmRUb2tlblNlZW5GbGFnKSB7XHJcbiAgICAgICAgdGhpcy5wYXNzd29yZFRva2VuU2VlbkZsYWcgPSB0cnVlO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGVuY29kZWRDb2RlUG9pbnRzID0gcGVyY2VudEVuY29kZUNoYXIoY29kZVBvaW50LCBpc1VzZXJpbmZvUGVyY2VudEVuY29kZSk7XHJcbiAgICAgIGlmICh0aGlzLnBhc3N3b3JkVG9rZW5TZWVuRmxhZykge1xyXG4gICAgICAgIHRoaXMudXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMudXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgfSBlbHNlIGlmIChpc05hTihjKSB8fCBjID09PSA0NyB8fCBjID09PSA2MyB8fCBjID09PSAzNSB8fFxyXG4gICAgICAgICAgICAgKGlzU3BlY2lhbCh0aGlzLnVybCkgJiYgYyA9PT0gOTIpKSB7XHJcbiAgICBpZiAodGhpcy5hdEZsYWcgJiYgdGhpcy5idWZmZXIgPT09IFwiXCIpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBvaW50ZXIgLT0gY291bnRTeW1ib2xzKHRoaXMuYnVmZmVyKSArIDE7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJob3N0XCI7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuYnVmZmVyICs9IGNTdHI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBob3N0bmFtZVwiXSA9XHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBob3N0XCJdID0gZnVuY3Rpb24gcGFyc2VIb3N0TmFtZShjLCBjU3RyKSB7XHJcbiAgaWYgKHRoaXMuc3RhdGVPdmVycmlkZSAmJiB0aGlzLnVybC5zY2hlbWUgPT09IFwiZmlsZVwiKSB7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICAgIHRoaXMuc3RhdGUgPSBcImZpbGUgaG9zdFwiO1xyXG4gIH0gZWxzZSBpZiAoYyA9PT0gNTggJiYgIXRoaXMuYXJyRmxhZykge1xyXG4gICAgaWYgKHRoaXMuYnVmZmVyID09PSBcIlwiKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgIHJldHVybiBmYWlsdXJlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGhvc3QgPSBwYXJzZUhvc3QodGhpcy5idWZmZXIsIGlzU3BlY2lhbCh0aGlzLnVybCkpO1xyXG4gICAgaWYgKGhvc3QgPT09IGZhaWx1cmUpIHtcclxuICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy51cmwuaG9zdCA9IGhvc3Q7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJwb3J0XCI7XHJcbiAgICBpZiAodGhpcy5zdGF0ZU92ZXJyaWRlID09PSBcImhvc3RuYW1lXCIpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH0gZWxzZSBpZiAoaXNOYU4oYykgfHwgYyA9PT0gNDcgfHwgYyA9PT0gNjMgfHwgYyA9PT0gMzUgfHxcclxuICAgICAgICAgICAgIChpc1NwZWNpYWwodGhpcy51cmwpICYmIGMgPT09IDkyKSkge1xyXG4gICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgICBpZiAoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiB0aGlzLmJ1ZmZlciA9PT0gXCJcIikge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZU92ZXJyaWRlICYmIHRoaXMuYnVmZmVyID09PSBcIlwiICYmXHJcbiAgICAgICAgICAgICAgIChpbmNsdWRlc0NyZWRlbnRpYWxzKHRoaXMudXJsKSB8fCB0aGlzLnVybC5wb3J0ICE9PSBudWxsKSkge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaG9zdCA9IHBhcnNlSG9zdCh0aGlzLmJ1ZmZlciwgaXNTcGVjaWFsKHRoaXMudXJsKSk7XHJcbiAgICBpZiAoaG9zdCA9PT0gZmFpbHVyZSkge1xyXG4gICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnVybC5ob3N0ID0gaG9zdDtcclxuICAgIHRoaXMuYnVmZmVyID0gXCJcIjtcclxuICAgIHRoaXMuc3RhdGUgPSBcInBhdGggc3RhcnRcIjtcclxuICAgIGlmICh0aGlzLnN0YXRlT3ZlcnJpZGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAoYyA9PT0gOTEpIHtcclxuICAgICAgdGhpcy5hcnJGbGFnID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoYyA9PT0gOTMpIHtcclxuICAgICAgdGhpcy5hcnJGbGFnID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLmJ1ZmZlciArPSBjU3RyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgcG9ydFwiXSA9IGZ1bmN0aW9uIHBhcnNlUG9ydChjLCBjU3RyKSB7XHJcbiAgaWYgKGlzQVNDSUlEaWdpdChjKSkge1xyXG4gICAgdGhpcy5idWZmZXIgKz0gY1N0cjtcclxuICB9IGVsc2UgaWYgKGlzTmFOKGMpIHx8IGMgPT09IDQ3IHx8IGMgPT09IDYzIHx8IGMgPT09IDM1IHx8XHJcbiAgICAgICAgICAgICAoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiBjID09PSA5MikgfHxcclxuICAgICAgICAgICAgIHRoaXMuc3RhdGVPdmVycmlkZSkge1xyXG4gICAgaWYgKHRoaXMuYnVmZmVyICE9PSBcIlwiKSB7XHJcbiAgICAgIGNvbnN0IHBvcnQgPSBwYXJzZUludCh0aGlzLmJ1ZmZlcik7XHJcbiAgICAgIGlmIChwb3J0ID4gTWF0aC5wb3coMiwgMTYpIC0gMSkge1xyXG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIGZhaWx1cmU7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cmwucG9ydCA9IHBvcnQgPT09IGRlZmF1bHRQb3J0KHRoaXMudXJsLnNjaGVtZSkgPyBudWxsIDogcG9ydDtcclxuICAgICAgdGhpcy5idWZmZXIgPSBcIlwiO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuc3RhdGVPdmVycmlkZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLnN0YXRlID0gXCJwYXRoIHN0YXJ0XCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIHJldHVybiBmYWlsdXJlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5jb25zdCBmaWxlT3RoZXJ3aXNlQ29kZVBvaW50cyA9IG5ldyBTZXQoWzQ3LCA5MiwgNjMsIDM1XSk7XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgZmlsZVwiXSA9IGZ1bmN0aW9uIHBhcnNlRmlsZShjKSB7XHJcbiAgdGhpcy51cmwuc2NoZW1lID0gXCJmaWxlXCI7XHJcblxyXG4gIGlmIChjID09PSA0NyB8fCBjID09PSA5Mikge1xyXG4gICAgaWYgKGMgPT09IDkyKSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcbiAgICB0aGlzLnN0YXRlID0gXCJmaWxlIHNsYXNoXCI7XHJcbiAgfSBlbHNlIGlmICh0aGlzLmJhc2UgIT09IG51bGwgJiYgdGhpcy5iYXNlLnNjaGVtZSA9PT0gXCJmaWxlXCIpIHtcclxuICAgIGlmIChpc05hTihjKSkge1xyXG4gICAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgpO1xyXG4gICAgICB0aGlzLnVybC5xdWVyeSA9IHRoaXMuYmFzZS5xdWVyeTtcclxuICAgIH0gZWxzZSBpZiAoYyA9PT0gNjMpIHtcclxuICAgICAgdGhpcy51cmwuaG9zdCA9IHRoaXMuYmFzZS5ob3N0O1xyXG4gICAgICB0aGlzLnVybC5wYXRoID0gdGhpcy5iYXNlLnBhdGguc2xpY2UoKTtcclxuICAgICAgdGhpcy51cmwucXVlcnkgPSBcIlwiO1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJxdWVyeVwiO1xyXG4gICAgfSBlbHNlIGlmIChjID09PSAzNSkge1xyXG4gICAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgpO1xyXG4gICAgICB0aGlzLnVybC5xdWVyeSA9IHRoaXMuYmFzZS5xdWVyeTtcclxuICAgICAgdGhpcy51cmwuZnJhZ21lbnQgPSBcIlwiO1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJmcmFnbWVudFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuaW5wdXQubGVuZ3RoIC0gdGhpcy5wb2ludGVyIC0gMSA9PT0gMCB8fCAvLyByZW1haW5pbmcgY29uc2lzdHMgb2YgMCBjb2RlIHBvaW50c1xyXG4gICAgICAgICAgIWlzV2luZG93c0RyaXZlTGV0dGVyQ29kZVBvaW50cyhjLCB0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDFdKSB8fFxyXG4gICAgICAgICAgKHRoaXMuaW5wdXQubGVuZ3RoIC0gdGhpcy5wb2ludGVyIC0gMSA+PSAyICYmIC8vIHJlbWFpbmluZyBoYXMgYXQgbGVhc3QgMiBjb2RlIHBvaW50c1xyXG4gICAgICAgICAgICFmaWxlT3RoZXJ3aXNlQ29kZVBvaW50cy5oYXModGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAyXSkpKSB7XHJcbiAgICAgICAgdGhpcy51cmwuaG9zdCA9IHRoaXMuYmFzZS5ob3N0O1xyXG4gICAgICAgIHRoaXMudXJsLnBhdGggPSB0aGlzLmJhc2UucGF0aC5zbGljZSgpO1xyXG4gICAgICAgIHNob3J0ZW5QYXRoKHRoaXMudXJsKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnN0YXRlID0gXCJwYXRoXCI7XHJcbiAgICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJwYXRoXCI7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICB9XHJcblxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxuVVJMU3RhdGVNYWNoaW5lLnByb3RvdHlwZVtcInBhcnNlIGZpbGUgc2xhc2hcIl0gPSBmdW5jdGlvbiBwYXJzZUZpbGVTbGFzaChjKSB7XHJcbiAgaWYgKGMgPT09IDQ3IHx8IGMgPT09IDkyKSB7XHJcbiAgICBpZiAoYyA9PT0gOTIpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGUgPSBcImZpbGUgaG9zdFwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAodGhpcy5iYXNlICE9PSBudWxsICYmIHRoaXMuYmFzZS5zY2hlbWUgPT09IFwiZmlsZVwiKSB7XHJcbiAgICAgIGlmIChpc05vcm1hbGl6ZWRXaW5kb3dzRHJpdmVMZXR0ZXJTdHJpbmcodGhpcy5iYXNlLnBhdGhbMF0pKSB7XHJcbiAgICAgICAgdGhpcy51cmwucGF0aC5wdXNoKHRoaXMuYmFzZS5wYXRoWzBdKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnVybC5ob3N0ID0gdGhpcy5iYXNlLmhvc3Q7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGUgPSBcInBhdGhcIjtcclxuICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgZmlsZSBob3N0XCJdID0gZnVuY3Rpb24gcGFyc2VGaWxlSG9zdChjLCBjU3RyKSB7XHJcbiAgaWYgKGlzTmFOKGMpIHx8IGMgPT09IDQ3IHx8IGMgPT09IDkyIHx8IGMgPT09IDYzIHx8IGMgPT09IDM1KSB7XHJcbiAgICAtLXRoaXMucG9pbnRlcjtcclxuICAgIGlmICghdGhpcy5zdGF0ZU92ZXJyaWRlICYmIGlzV2luZG93c0RyaXZlTGV0dGVyU3RyaW5nKHRoaXMuYnVmZmVyKSkge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJwYXRoXCI7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuYnVmZmVyID09PSBcIlwiKSB7XHJcbiAgICAgIHRoaXMudXJsLmhvc3QgPSBcIlwiO1xyXG4gICAgICBpZiAodGhpcy5zdGF0ZU92ZXJyaWRlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcInBhdGggc3RhcnRcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBob3N0ID0gcGFyc2VIb3N0KHRoaXMuYnVmZmVyLCBpc1NwZWNpYWwodGhpcy51cmwpKTtcclxuICAgICAgaWYgKGhvc3QgPT09IGZhaWx1cmUpIHtcclxuICAgICAgICByZXR1cm4gZmFpbHVyZTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaG9zdCA9PT0gXCJsb2NhbGhvc3RcIikge1xyXG4gICAgICAgIGhvc3QgPSBcIlwiO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudXJsLmhvc3QgPSBob3N0O1xyXG5cclxuICAgICAgaWYgKHRoaXMuc3RhdGVPdmVycmlkZSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5idWZmZXIgPSBcIlwiO1xyXG4gICAgICB0aGlzLnN0YXRlID0gXCJwYXRoIHN0YXJ0XCI7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHRoaXMuYnVmZmVyICs9IGNTdHI7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblVSTFN0YXRlTWFjaGluZS5wcm90b3R5cGVbXCJwYXJzZSBwYXRoIHN0YXJ0XCJdID0gZnVuY3Rpb24gcGFyc2VQYXRoU3RhcnQoYykge1xyXG4gIGlmIChpc1NwZWNpYWwodGhpcy51cmwpKSB7XHJcbiAgICBpZiAoYyA9PT0gOTIpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RhdGUgPSBcInBhdGhcIjtcclxuXHJcbiAgICBpZiAoYyAhPT0gNDcgJiYgYyAhPT0gOTIpIHtcclxuICAgICAgLS10aGlzLnBvaW50ZXI7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmICghdGhpcy5zdGF0ZU92ZXJyaWRlICYmIGMgPT09IDYzKSB7XHJcbiAgICB0aGlzLnVybC5xdWVyeSA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJxdWVyeVwiO1xyXG4gIH0gZWxzZSBpZiAoIXRoaXMuc3RhdGVPdmVycmlkZSAmJiBjID09PSAzNSkge1xyXG4gICAgdGhpcy51cmwuZnJhZ21lbnQgPSBcIlwiO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwiZnJhZ21lbnRcIjtcclxuICB9IGVsc2UgaWYgKGMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicGF0aFwiO1xyXG4gICAgaWYgKGMgIT09IDQ3KSB7XHJcbiAgICAgIC0tdGhpcy5wb2ludGVyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgcGF0aFwiXSA9IGZ1bmN0aW9uIHBhcnNlUGF0aChjKSB7XHJcbiAgaWYgKGlzTmFOKGMpIHx8IGMgPT09IDQ3IHx8IChpc1NwZWNpYWwodGhpcy51cmwpICYmIGMgPT09IDkyKSB8fFxyXG4gICAgICAoIXRoaXMuc3RhdGVPdmVycmlkZSAmJiAoYyA9PT0gNjMgfHwgYyA9PT0gMzUpKSkge1xyXG4gICAgaWYgKGlzU3BlY2lhbCh0aGlzLnVybCkgJiYgYyA9PT0gOTIpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNEb3VibGVEb3QodGhpcy5idWZmZXIpKSB7XHJcbiAgICAgIHNob3J0ZW5QYXRoKHRoaXMudXJsKTtcclxuICAgICAgaWYgKGMgIT09IDQ3ICYmICEoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiBjID09PSA5MikpIHtcclxuICAgICAgICB0aGlzLnVybC5wYXRoLnB1c2goXCJcIik7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVEb3QodGhpcy5idWZmZXIpICYmIGMgIT09IDQ3ICYmXHJcbiAgICAgICAgICAgICAgICEoaXNTcGVjaWFsKHRoaXMudXJsKSAmJiBjID09PSA5MikpIHtcclxuICAgICAgdGhpcy51cmwucGF0aC5wdXNoKFwiXCIpO1xyXG4gICAgfSBlbHNlIGlmICghaXNTaW5nbGVEb3QodGhpcy5idWZmZXIpKSB7XHJcbiAgICAgIGlmICh0aGlzLnVybC5zY2hlbWUgPT09IFwiZmlsZVwiICYmIHRoaXMudXJsLnBhdGgubGVuZ3RoID09PSAwICYmIGlzV2luZG93c0RyaXZlTGV0dGVyU3RyaW5nKHRoaXMuYnVmZmVyKSkge1xyXG4gICAgICAgIGlmICh0aGlzLnVybC5ob3N0ICE9PSBcIlwiICYmIHRoaXMudXJsLmhvc3QgIT09IG51bGwpIHtcclxuICAgICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICB0aGlzLnVybC5ob3N0ID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlclswXSArIFwiOlwiO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudXJsLnBhdGgucHVzaCh0aGlzLmJ1ZmZlcik7XHJcbiAgICB9XHJcbiAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XHJcbiAgICBpZiAodGhpcy51cmwuc2NoZW1lID09PSBcImZpbGVcIiAmJiAoYyA9PT0gdW5kZWZpbmVkIHx8IGMgPT09IDYzIHx8IGMgPT09IDM1KSkge1xyXG4gICAgICB3aGlsZSAodGhpcy51cmwucGF0aC5sZW5ndGggPiAxICYmIHRoaXMudXJsLnBhdGhbMF0gPT09IFwiXCIpIHtcclxuICAgICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudXJsLnBhdGguc2hpZnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGMgPT09IDYzKSB7XHJcbiAgICAgIHRoaXMudXJsLnF1ZXJ5ID0gXCJcIjtcclxuICAgICAgdGhpcy5zdGF0ZSA9IFwicXVlcnlcIjtcclxuICAgIH1cclxuICAgIGlmIChjID09PSAzNSkge1xyXG4gICAgICB0aGlzLnVybC5mcmFnbWVudCA9IFwiXCI7XHJcbiAgICAgIHRoaXMuc3RhdGUgPSBcImZyYWdtZW50XCI7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFRPRE86IElmIGMgaXMgbm90IGEgVVJMIGNvZGUgcG9pbnQgYW5kIG5vdCBcIiVcIiwgcGFyc2UgZXJyb3IuXHJcblxyXG4gICAgaWYgKGMgPT09IDM3ICYmXHJcbiAgICAgICghaXNBU0NJSUhleCh0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDFdKSB8fFxyXG4gICAgICAgICFpc0FTQ0lJSGV4KHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMl0pKSkge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYnVmZmVyICs9IHBlcmNlbnRFbmNvZGVDaGFyKGMsIGlzUGF0aFBlcmNlbnRFbmNvZGUpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgY2Fubm90LWJlLWEtYmFzZS1VUkwgcGF0aFwiXSA9IGZ1bmN0aW9uIHBhcnNlQ2Fubm90QmVBQmFzZVVSTFBhdGgoYykge1xyXG4gIGlmIChjID09PSA2Mykge1xyXG4gICAgdGhpcy51cmwucXVlcnkgPSBcIlwiO1xyXG4gICAgdGhpcy5zdGF0ZSA9IFwicXVlcnlcIjtcclxuICB9IGVsc2UgaWYgKGMgPT09IDM1KSB7XHJcbiAgICB0aGlzLnVybC5mcmFnbWVudCA9IFwiXCI7XHJcbiAgICB0aGlzLnN0YXRlID0gXCJmcmFnbWVudFwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBUT0RPOiBBZGQ6IG5vdCBhIFVSTCBjb2RlIHBvaW50XHJcbiAgICBpZiAoIWlzTmFOKGMpICYmIGMgIT09IDM3KSB7XHJcbiAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGMgPT09IDM3ICYmXHJcbiAgICAgICAgKCFpc0FTQ0lJSGV4KHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMV0pIHx8XHJcbiAgICAgICAgICFpc0FTQ0lJSGV4KHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMl0pKSkge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghaXNOYU4oYykpIHtcclxuICAgICAgdGhpcy51cmwucGF0aFswXSA9IHRoaXMudXJsLnBhdGhbMF0gKyBwZXJjZW50RW5jb2RlQ2hhcihjLCBpc0MwQ29udHJvbFBlcmNlbnRFbmNvZGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgcXVlcnlcIl0gPSBmdW5jdGlvbiBwYXJzZVF1ZXJ5KGMsIGNTdHIpIHtcclxuICBpZiAoaXNOYU4oYykgfHwgKCF0aGlzLnN0YXRlT3ZlcnJpZGUgJiYgYyA9PT0gMzUpKSB7XHJcbiAgICBpZiAoIWlzU3BlY2lhbCh0aGlzLnVybCkgfHwgdGhpcy51cmwuc2NoZW1lID09PSBcIndzXCIgfHwgdGhpcy51cmwuc2NoZW1lID09PSBcIndzc1wiKSB7XHJcbiAgICAgIHRoaXMuZW5jb2RpbmdPdmVycmlkZSA9IFwidXRmLThcIjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgQnVmZmVyKHRoaXMuYnVmZmVyKTsgLy8gVE9ETzogVXNlIGVuY29kaW5nIG92ZXJyaWRlIGluc3RlYWRcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmIChidWZmZXJbaV0gPCAweDIxIHx8IGJ1ZmZlcltpXSA+IDB4N0UgfHwgYnVmZmVyW2ldID09PSAweDIyIHx8IGJ1ZmZlcltpXSA9PT0gMHgyMyB8fFxyXG4gICAgICAgICAgYnVmZmVyW2ldID09PSAweDNDIHx8IGJ1ZmZlcltpXSA9PT0gMHgzRSkge1xyXG4gICAgICAgIHRoaXMudXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoYnVmZmVyW2ldKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnVybC5xdWVyeSArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChidWZmZXJbaV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5idWZmZXIgPSBcIlwiO1xyXG4gICAgaWYgKGMgPT09IDM1KSB7XHJcbiAgICAgIHRoaXMudXJsLmZyYWdtZW50ID0gXCJcIjtcclxuICAgICAgdGhpcy5zdGF0ZSA9IFwiZnJhZ21lbnRcIjtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gVE9ETzogSWYgYyBpcyBub3QgYSBVUkwgY29kZSBwb2ludCBhbmQgbm90IFwiJVwiLCBwYXJzZSBlcnJvci5cclxuICAgIGlmIChjID09PSAzNyAmJlxyXG4gICAgICAoIWlzQVNDSUlIZXgodGhpcy5pbnB1dFt0aGlzLnBvaW50ZXIgKyAxXSkgfHxcclxuICAgICAgICAhaXNBU0NJSUhleCh0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDJdKSkpIHtcclxuICAgICAgdGhpcy5wYXJzZUVycm9yID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJ1ZmZlciArPSBjU3RyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5VUkxTdGF0ZU1hY2hpbmUucHJvdG90eXBlW1wicGFyc2UgZnJhZ21lbnRcIl0gPSBmdW5jdGlvbiBwYXJzZUZyYWdtZW50KGMpIHtcclxuICBpZiAoaXNOYU4oYykpIHsgLy8gZG8gbm90aGluZ1xyXG4gIH0gZWxzZSBpZiAoYyA9PT0gMHgwKSB7XHJcbiAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBUT0RPOiBJZiBjIGlzIG5vdCBhIFVSTCBjb2RlIHBvaW50IGFuZCBub3QgXCIlXCIsIHBhcnNlIGVycm9yLlxyXG4gICAgaWYgKGMgPT09IDM3ICYmXHJcbiAgICAgICghaXNBU0NJSUhleCh0aGlzLmlucHV0W3RoaXMucG9pbnRlciArIDFdKSB8fFxyXG4gICAgICAgICFpc0FTQ0lJSGV4KHRoaXMuaW5wdXRbdGhpcy5wb2ludGVyICsgMl0pKSkge1xyXG4gICAgICB0aGlzLnBhcnNlRXJyb3IgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGVDaGFyKGMsIGlzQzBDb250cm9sUGVyY2VudEVuY29kZSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIHNlcmlhbGl6ZVVSTCh1cmwsIGV4Y2x1ZGVGcmFnbWVudCkge1xyXG4gIGxldCBvdXRwdXQgPSB1cmwuc2NoZW1lICsgXCI6XCI7XHJcbiAgaWYgKHVybC5ob3N0ICE9PSBudWxsKSB7XHJcbiAgICBvdXRwdXQgKz0gXCIvL1wiO1xyXG5cclxuICAgIGlmICh1cmwudXNlcm5hbWUgIT09IFwiXCIgfHwgdXJsLnBhc3N3b3JkICE9PSBcIlwiKSB7XHJcbiAgICAgIG91dHB1dCArPSB1cmwudXNlcm5hbWU7XHJcbiAgICAgIGlmICh1cmwucGFzc3dvcmQgIT09IFwiXCIpIHtcclxuICAgICAgICBvdXRwdXQgKz0gXCI6XCIgKyB1cmwucGFzc3dvcmQ7XHJcbiAgICAgIH1cclxuICAgICAgb3V0cHV0ICs9IFwiQFwiO1xyXG4gICAgfVxyXG5cclxuICAgIG91dHB1dCArPSBzZXJpYWxpemVIb3N0KHVybC5ob3N0KTtcclxuXHJcbiAgICBpZiAodXJsLnBvcnQgIT09IG51bGwpIHtcclxuICAgICAgb3V0cHV0ICs9IFwiOlwiICsgdXJsLnBvcnQ7XHJcbiAgICB9XHJcbiAgfSBlbHNlIGlmICh1cmwuaG9zdCA9PT0gbnVsbCAmJiB1cmwuc2NoZW1lID09PSBcImZpbGVcIikge1xyXG4gICAgb3V0cHV0ICs9IFwiLy9cIjtcclxuICB9XHJcblxyXG4gIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkge1xyXG4gICAgb3V0cHV0ICs9IHVybC5wYXRoWzBdO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmb3IgKGNvbnN0IHN0cmluZyBvZiB1cmwucGF0aCkge1xyXG4gICAgICBvdXRwdXQgKz0gXCIvXCIgKyBzdHJpbmc7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAodXJsLnF1ZXJ5ICE9PSBudWxsKSB7XHJcbiAgICBvdXRwdXQgKz0gXCI/XCIgKyB1cmwucXVlcnk7XHJcbiAgfVxyXG5cclxuICBpZiAoIWV4Y2x1ZGVGcmFnbWVudCAmJiB1cmwuZnJhZ21lbnQgIT09IG51bGwpIHtcclxuICAgIG91dHB1dCArPSBcIiNcIiArIHVybC5mcmFnbWVudDtcclxuICB9XHJcblxyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlcmlhbGl6ZU9yaWdpbih0dXBsZSkge1xyXG4gIGxldCByZXN1bHQgPSB0dXBsZS5zY2hlbWUgKyBcIjovL1wiO1xyXG4gIHJlc3VsdCArPSBzZXJpYWxpemVIb3N0KHR1cGxlLmhvc3QpO1xyXG5cclxuICBpZiAodHVwbGUucG9ydCAhPT0gbnVsbCkge1xyXG4gICAgcmVzdWx0ICs9IFwiOlwiICsgdHVwbGUucG9ydDtcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLnNlcmlhbGl6ZVVSTCA9IHNlcmlhbGl6ZVVSTDtcclxuXHJcbm1vZHVsZS5leHBvcnRzLnNlcmlhbGl6ZVVSTE9yaWdpbiA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtdXJsLW9yaWdpblxyXG4gIHN3aXRjaCAodXJsLnNjaGVtZSkge1xyXG4gICAgY2FzZSBcImJsb2JcIjpcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gbW9kdWxlLmV4cG9ydHMuc2VyaWFsaXplVVJMT3JpZ2luKG1vZHVsZS5leHBvcnRzLnBhcnNlVVJMKHVybC5wYXRoWzBdKSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBzZXJpYWxpemluZyBhbiBvcGFxdWUgb3JpZ2luIHJldHVybnMgXCJudWxsXCJcclxuICAgICAgICByZXR1cm4gXCJudWxsXCI7XHJcbiAgICAgIH1cclxuICAgIGNhc2UgXCJmdHBcIjpcclxuICAgIGNhc2UgXCJnb3BoZXJcIjpcclxuICAgIGNhc2UgXCJodHRwXCI6XHJcbiAgICBjYXNlIFwiaHR0cHNcIjpcclxuICAgIGNhc2UgXCJ3c1wiOlxyXG4gICAgY2FzZSBcIndzc1wiOlxyXG4gICAgICByZXR1cm4gc2VyaWFsaXplT3JpZ2luKHtcclxuICAgICAgICBzY2hlbWU6IHVybC5zY2hlbWUsXHJcbiAgICAgICAgaG9zdDogdXJsLmhvc3QsXHJcbiAgICAgICAgcG9ydDogdXJsLnBvcnRcclxuICAgICAgfSk7XHJcbiAgICBjYXNlIFwiZmlsZVwiOlxyXG4gICAgICAvLyBzcGVjIHNheXMgXCJleGVyY2lzZSB0byB0aGUgcmVhZGVyXCIsIGNocm9tZSBzYXlzIFwiZmlsZTovL1wiXHJcbiAgICAgIHJldHVybiBcImZpbGU6Ly9cIjtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIC8vIHNlcmlhbGl6aW5nIGFuIG9wYXF1ZSBvcmlnaW4gcmV0dXJucyBcIm51bGxcIlxyXG4gICAgICByZXR1cm4gXCJudWxsXCI7XHJcbiAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMuYmFzaWNVUkxQYXJzZSA9IGZ1bmN0aW9uIChpbnB1dCwgb3B0aW9ucykge1xyXG4gIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgIG9wdGlvbnMgPSB7fTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHVzbSA9IG5ldyBVUkxTdGF0ZU1hY2hpbmUoaW5wdXQsIG9wdGlvbnMuYmFzZVVSTCwgb3B0aW9ucy5lbmNvZGluZ092ZXJyaWRlLCBvcHRpb25zLnVybCwgb3B0aW9ucy5zdGF0ZU92ZXJyaWRlKTtcclxuICBpZiAodXNtLmZhaWx1cmUpIHtcclxuICAgIHJldHVybiBcImZhaWx1cmVcIjtcclxuICB9XHJcblxyXG4gIHJldHVybiB1c20udXJsO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMuc2V0VGhlVXNlcm5hbWUgPSBmdW5jdGlvbiAodXJsLCB1c2VybmFtZSkge1xyXG4gIHVybC51c2VybmFtZSA9IFwiXCI7XHJcbiAgY29uc3QgZGVjb2RlZCA9IHB1bnljb2RlLnVjczIuZGVjb2RlKHVzZXJuYW1lKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlY29kZWQubGVuZ3RoOyArK2kpIHtcclxuICAgIHVybC51c2VybmFtZSArPSBwZXJjZW50RW5jb2RlQ2hhcihkZWNvZGVkW2ldLCBpc1VzZXJpbmZvUGVyY2VudEVuY29kZSk7XHJcbiAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMuc2V0VGhlUGFzc3dvcmQgPSBmdW5jdGlvbiAodXJsLCBwYXNzd29yZCkge1xyXG4gIHVybC5wYXNzd29yZCA9IFwiXCI7XHJcbiAgY29uc3QgZGVjb2RlZCA9IHB1bnljb2RlLnVjczIuZGVjb2RlKHBhc3N3b3JkKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGRlY29kZWQubGVuZ3RoOyArK2kpIHtcclxuICAgIHVybC5wYXNzd29yZCArPSBwZXJjZW50RW5jb2RlQ2hhcihkZWNvZGVkW2ldLCBpc1VzZXJpbmZvUGVyY2VudEVuY29kZSk7XHJcbiAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMuc2VyaWFsaXplSG9zdCA9IHNlcmlhbGl6ZUhvc3Q7XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5jYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0ID0gY2Fubm90SGF2ZUFVc2VybmFtZVBhc3N3b3JkUG9ydDtcclxuXHJcbm1vZHVsZS5leHBvcnRzLnNlcmlhbGl6ZUludGVnZXIgPSBmdW5jdGlvbiAoaW50ZWdlcikge1xyXG4gIHJldHVybiBTdHJpbmcoaW50ZWdlcik7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5wYXJzZVVSTCA9IGZ1bmN0aW9uIChpbnB1dCwgb3B0aW9ucykge1xyXG4gIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgIG9wdGlvbnMgPSB7fTtcclxuICB9XHJcblxyXG4gIC8vIFdlIGRvbid0IGhhbmRsZSBibG9icywgc28gdGhpcyBqdXN0IGRlbGVnYXRlczpcclxuICByZXR1cm4gbW9kdWxlLmV4cG9ydHMuYmFzaWNVUkxQYXJzZShpbnB1dCwgeyBiYXNlVVJMOiBvcHRpb25zLmJhc2VVUkwsIGVuY29kaW5nT3ZlcnJpZGU6IG9wdGlvbnMuZW5jb2RpbmdPdmVycmlkZSB9KTtcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiemxpYlwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1cmxcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgTm9EZWZpbml0aW9uc0ZvdW5kOiBjbGFzcyBOb0RlZmluaXRpb25zRm91bmQgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yIChhZGRpdGlvbmFsSW5mbyA9IHt9KSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSAnTm9EZWZpbml0aW9uc0ZvdW5kJztcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSAnTm8gRGVmaW5pdGlvbnMgRm91bmQnO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gJ25vIGRlZmluaXRpb25zIGZvciAnK0pTT04uc3RyaW5naWZ5KGFkZGl0aW9uYWxJbmZvKSsnLic7XG4gICAgICAgICAgICB0aGlzLnJlc29sdXRpb24gPSAnWW91IGNhbiB0cnkgdGhlIHNlYXJjaCBhZ2FpbiBhdCBsYXRlciB0aW1lIG9yIGhlYWQgdG8gdGhlIHdlYiBpbnN0ZWFkLic7XG4gICAgICAgICAgICB0aGlzLmFkZGl0aW9uYWxJbmZvID0gYWRkaXRpb25hbEluZm87XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RUeXBlID0gJ25vdEZvdW5kJztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBSYXRlTGltaXRFcnJvcjogY2xhc3MgUmF0ZUxpbWl0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yIChhZGRpdGlvbmFsSW5mbyA9IHt9KSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSAnUmF0ZUxpbWl0RXJyb3InO1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9ICdBUEkgUmF0ZSBMaW1pdCBFeGNlZWRlZCc7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnU29ycnkgcGFsLCB5b3Ugd2VyZSBqdXN0IHJhdGUgbGltaXRlZCBieSB0aGUgdXBzdHJlYW0gc2VydmVyLic7XG4gICAgICAgICAgICB0aGlzLnJlc29sdXRpb24gPSAnWW91IGNhbiB0cnkgdGhlIHNlYXJjaCBhZ2FpbiBhdCBsYXRlciB0aW1lIG9yIGhlYWQgdG8gdGhlIHdlYiBpbnN0ZWFkLic7XG4gICAgICAgICAgICB0aGlzLmFkZGl0aW9uYWxJbmZvID0gYWRkaXRpb25hbEluZm87XG4gICAgICAgICAgICB0aGlzLnJlcXVlc3RUeXBlID0gJ3JhdGVMaW1pdCc7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgVW5leHBlY3RlZEVycm9yOiBjbGFzcyBVbmV4cGVjdGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yIChhZGRpdGlvbmFsSW5mbyA9IHt9KSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSAnVW5leHBlY3RlZEVycm9yJztcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSAnU29tZXRoaW5nIFdlbnQgV3JvbmcnO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1NvcnJ5IHBhbCwgc29tZXRoaW5nIHdlbnQgd3JvbmcsIGFuZCBpdFxccyBub3QgeW91ciBmYXVsdC4nO1xuICAgICAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gJ1lvdSBjYW4gdHJ5IHRoZSBzZWFyY2ggYWdhaW4gYXQgbGF0ZXIgdGltZSBvciBoZWFkIHRvIHRoZSB3ZWIgaW5zdGVhZC4nO1xuICAgICAgICAgICAgdGhpcy5hZGRpdGlvbmFsSW5mbyA9IGFkZGl0aW9uYWxJbmZvO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VHlwZSA9ICdzZXJ2ZXJFcnJvcic7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgQmFkSFRUUFJlc3BvbnNlOiBjbGFzcyBCYWRIVFRQUmVzcG9uc2UgZXh0ZW5kcyBFcnJvciB7XG4gICAgICAgIGNvbnN0cnVjdG9yIChhZGRpdGlvbmFsSW5mbyA9IHt9KSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSAnQmFkSFRUUFJlc3BvbnNlJztcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSAnVXBzdHJlYW0gU2VydmVyIEZhaWxlZCc7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnU29ycnkgcGFsLCB1cHN0cmVhbSBzZXJ2ZXJzIGZhaWxlZCB1cy4nO1xuICAgICAgICAgICAgdGhpcy5yZXNvbHV0aW9uID0gJ1lvdSBjYW4gdHJ5IHRoZSBzZWFyY2ggYWdhaW4gYXQgbGF0ZXIgdGltZSBvciBoZWFkIHRvIHRoZSB3ZWIgaW5zdGVhZC4nO1xuICAgICAgICAgICAgdGhpcy5hZGRpdGlvbmFsSW5mbyA9IGFkZGl0aW9uYWxJbmZvO1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0VHlwZSA9ICdzZXJ2ZXJFcnJvcic7XG4gICAgICAgIH1cbiAgICB9XG59IiwiXG4vLyBodHRwczovL3d3dy5lZi5jb20vd3dlbi9lbmdsaXNoLXJlc291cmNlcy9lbmdsaXNoLXZvY2FidWxhcnkvdG9wLTMwMDAtd29yZHMvXG5cbmV4cG9ydCBjb25zdCBUaGVNb3N0Q29tbW9uMzAwMCA9IHtcbiAgICBhIDogMSxcbiAgICBhYmFuZG9uIDogMSxcbiAgICBhYmlsaXR5IDogMSxcbiAgICBhYmxlIDogMSxcbiAgICBhYm9ydGlvbiA6IDEsXG4gICAgYWJvdXQgOiAxLFxuICAgIGFib3ZlIDogMSxcbiAgICBhYnJvYWQgOiAxLFxuICAgIGFic2VuY2UgOiAxLFxuICAgIGFic29sdXRlIDogMSxcbiAgICBhYnNvbHV0ZWx5IDogMSxcbiAgICBhYnNvcmIgOiAxLFxuICAgIGFidXNlIDogMSxcbiAgICBhY2FkZW1pYyA6IDEsXG4gICAgYWNjZXB0IDogMSxcbiAgICBhY2Nlc3MgOiAxLFxuICAgIGFjY2lkZW50IDogMSxcbiAgICBhY2NvbXBhbnkgOiAxLFxuICAgIGFjY29tcGxpc2ggOiAxLFxuICAgIGFjY29yZGluZyA6IDEsXG4gICAgYWNjb3VudCA6IDEsXG4gICAgYWNjdXJhdGUgOiAxLFxuICAgIGFjY3VzZSA6IDEsXG4gICAgYWNoaWV2ZSA6IDEsXG4gICAgYWNoaWV2ZW1lbnQgOiAxLFxuICAgIGFjaWQgOiAxLFxuICAgIGFja25vd2xlZGdlIDogMSxcbiAgICBhY3F1aXJlIDogMSxcbiAgICBhY3Jvc3MgOiAxLFxuICAgIGFjdCA6IDEsXG4gICAgYWN0aW9uIDogMSxcbiAgICBhY3RpdmUgOiAxLFxuICAgIGFjdGl2aXN0IDogMSxcbiAgICBhY3Rpdml0eSA6IDEsXG4gICAgYWN0b3IgOiAxLFxuICAgIGFjdHJlc3MgOiAxLFxuICAgIGFjdHVhbCA6IDEsXG4gICAgYWN0dWFsbHkgOiAxLFxuICAgIGFkIDogMSxcbiAgICBhZGFwdCA6IDEsXG4gICAgYWRkIDogMSxcbiAgICBhZGRpdGlvbiA6IDEsXG4gICAgYWRkaXRpb25hbCA6IDEsXG4gICAgYWRkcmVzcyA6IDEsXG4gICAgYWRlcXVhdGUgOiAxLFxuICAgIGFkanVzdCA6IDEsXG4gICAgYWRqdXN0bWVudCA6IDEsXG4gICAgYWRtaW5pc3RyYXRpb24gOiAxLFxuICAgIGFkbWluaXN0cmF0b3IgOiAxLFxuICAgIGFkbWlyZSA6IDEsXG4gICAgYWRtaXNzaW9uIDogMSxcbiAgICBhZG1pdCA6IDEsXG4gICAgYWRvbGVzY2VudCA6IDEsXG4gICAgYWRvcHQgOiAxLFxuICAgIGFkdWx0IDogMSxcbiAgICBhZHZhbmNlIDogMSxcbiAgICBhZHZhbmNlZCA6IDEsXG4gICAgYWR2YW50YWdlIDogMSxcbiAgICBhZHZlbnR1cmUgOiAxLFxuICAgIGFkdmVydGlzaW5nIDogMSxcbiAgICBhZHZpY2UgOiAxLFxuICAgIGFkdmlzZSA6IDEsXG4gICAgYWR2aXNlciA6IDEsXG4gICAgYWR2b2NhdGUgOiAxLFxuICAgIGFmZmFpciA6IDEsXG4gICAgYWZmZWN0IDogMSxcbiAgICBhZmZvcmQgOiAxLFxuICAgIGFmcmFpZCA6IDEsXG4gICAgQWZyaWNhbiA6IDEsXG4gICAgXCJBZnJpY2FuLUFtZXJpY2FuXCIgOiAxLFxuICAgIGFmdGVyIDogMSxcbiAgICBhZnRlcm5vb24gOiAxLFxuICAgIGFnYWluIDogMSxcbiAgICBhZ2FpbnN0IDogMSxcbiAgICBhZ2UgOiAxLFxuICAgIGFnZW5jeSA6IDEsXG4gICAgYWdlbmRhIDogMSxcbiAgICBhZ2VudCA6IDEsXG4gICAgYWdncmVzc2l2ZSA6IDEsXG4gICAgYWdvIDogMSxcbiAgICBhZ3JlZSA6IDEsXG4gICAgYWdyZWVtZW50IDogMSxcbiAgICBhZ3JpY3VsdHVyYWwgOiAxLFxuICAgIGFoIDogMSxcbiAgICBhaGVhZCA6IDEsXG4gICAgYWlkIDogMSxcbiAgICBhaWRlIDogMSxcbiAgICBBSURTIDogMSxcbiAgICBhaW0gOiAxLFxuICAgIGFpciA6IDEsXG4gICAgYWlyY3JhZnQgOiAxLFxuICAgIGFpcmxpbmUgOiAxLFxuICAgIGFpcnBvcnQgOiAxLFxuICAgIGFsYnVtIDogMSxcbiAgICBhbGNvaG9sIDogMSxcbiAgICBhbGl2ZSA6IDEsXG4gICAgYWxsIDogMSxcbiAgICBhbGxpYW5jZSA6IDEsXG4gICAgYWxsb3cgOiAxLFxuICAgIGFsbHkgOiAxLFxuICAgIGFsbW9zdCA6IDEsXG4gICAgYWxvbmUgOiAxLFxuICAgIGFsb25nIDogMSxcbiAgICBhbHJlYWR5IDogMSxcbiAgICBhbHNvIDogMSxcbiAgICBhbHRlciA6IDEsXG4gICAgYWx0ZXJuYXRpdmUgOiAxLFxuICAgIGFsdGhvdWdoIDogMSxcbiAgICBhbHdheXMgOiAxLFxuICAgIEFNIDogMSxcbiAgICBhbWF6aW5nIDogMSxcbiAgICBBbWVyaWNhbiA6IDEsXG4gICAgYW1vbmcgOiAxLFxuICAgIGFtb3VudCA6IDEsXG4gICAgYW5hbHlzaXMgOiAxLFxuICAgIGFuYWx5c3QgOiAxLFxuICAgIGFuYWx5emUgOiAxLFxuICAgIGFuY2llbnQgOiAxLFxuICAgIGFuZCA6IDEsXG4gICAgYW5nZXIgOiAxLFxuICAgIGFuZ2xlIDogMSxcbiAgICBhbmdyeSA6IDEsXG4gICAgYW5pbWFsIDogMSxcbiAgICBhbm5pdmVyc2FyeSA6IDEsXG4gICAgYW5ub3VuY2UgOiAxLFxuICAgIGFubnVhbCA6IDEsXG4gICAgYW5vdGhlciA6IDEsXG4gICAgYW5zd2VyIDogMSxcbiAgICBhbnRpY2lwYXRlIDogMSxcbiAgICBhbnhpZXR5IDogMSxcbiAgICBhbnkgOiAxLFxuICAgIGFueWJvZHkgOiAxLFxuICAgIGFueW1vcmUgOiAxLFxuICAgIGFueW9uZSA6IDEsXG4gICAgYW55dGhpbmcgOiAxLFxuICAgIGFueXdheSA6IDEsXG4gICAgYW55d2hlcmUgOiAxLFxuICAgIGFwYXJ0IDogMSxcbiAgICBhcGFydG1lbnQgOiAxLFxuICAgIGFwcGFyZW50IDogMSxcbiAgICBhcHBhcmVudGx5IDogMSxcbiAgICBhcHBlYWwgOiAxLFxuICAgIGFwcGVhciA6IDEsXG4gICAgYXBwZWFyYW5jZSA6IDEsXG4gICAgYXBwbGUgOiAxLFxuICAgIGFwcGxpY2F0aW9uIDogMSxcbiAgICBhcHBseSA6IDEsXG4gICAgYXBwb2ludCA6IDEsXG4gICAgYXBwb2ludG1lbnQgOiAxLFxuICAgIGFwcHJlY2lhdGUgOiAxLFxuICAgIGFwcHJvYWNoIDogMSxcbiAgICBhcHByb3ByaWF0ZSA6IDEsXG4gICAgYXBwcm92YWwgOiAxLFxuICAgIGFwcHJvdmUgOiAxLFxuICAgIGFwcHJveGltYXRlbHkgOiAxLFxuICAgIEFyYWIgOiAxLFxuICAgIGFyY2hpdGVjdCA6IDEsXG4gICAgYXJlYSA6IDEsXG4gICAgYXJndWUgOiAxLFxuICAgIGFyZ3VtZW50IDogMSxcbiAgICBhcmlzZSA6IDEsXG4gICAgYXJtIDogMSxcbiAgICBhcm1lZCA6IDEsXG4gICAgYXJteSA6IDEsXG4gICAgYXJvdW5kIDogMSxcbiAgICBhcnJhbmdlIDogMSxcbiAgICBhcnJhbmdlbWVudCA6IDEsXG4gICAgYXJyZXN0IDogMSxcbiAgICBhcnJpdmFsIDogMSxcbiAgICBhcnJpdmUgOiAxLFxuICAgIGFydCA6IDEsXG4gICAgYXJ0aWNsZSA6IDEsXG4gICAgYXJ0aXN0IDogMSxcbiAgICBhcnRpc3RpYyA6IDEsXG4gICAgYXMgOiAxLFxuICAgIEFzaWFuIDogMSxcbiAgICBhc2lkZSA6IDEsXG4gICAgYXNrIDogMSxcbiAgICBhc2xlZXAgOiAxLFxuICAgIGFzcGVjdCA6IDEsXG4gICAgYXNzYXVsdCA6IDEsXG4gICAgYXNzZXJ0IDogMSxcbiAgICBhc3Nlc3MgOiAxLFxuICAgIGFzc2Vzc21lbnQgOiAxLFxuICAgIGFzc2V0IDogMSxcbiAgICBhc3NpZ24gOiAxLFxuICAgIGFzc2lnbm1lbnQgOiAxLFxuICAgIGFzc2lzdCA6IDEsXG4gICAgYXNzaXN0YW5jZSA6IDEsXG4gICAgYXNzaXN0YW50IDogMSxcbiAgICBhc3NvY2lhdGUgOiAxLFxuICAgIGFzc29jaWF0aW9uIDogMSxcbiAgICBhc3N1bWUgOiAxLFxuICAgIGFzc3VtcHRpb24gOiAxLFxuICAgIGFzc3VyZSA6IDEsXG4gICAgYXQgOiAxLFxuICAgIGF0aGxldGUgOiAxLFxuICAgIGF0aGxldGljIDogMSxcbiAgICBhdG1vc3BoZXJlIDogMSxcbiAgICBhdHRhY2ggOiAxLFxuICAgIGF0dGFjayA6IDEsXG4gICAgYXR0ZW1wdCA6IDEsXG4gICAgYXR0ZW5kIDogMSxcbiAgICBhdHRlbnRpb24gOiAxLFxuICAgIGF0dGl0dWRlIDogMSxcbiAgICBhdHRvcm5leSA6IDEsXG4gICAgYXR0cmFjdCA6IDEsXG4gICAgYXR0cmFjdGl2ZSA6IDEsXG4gICAgYXR0cmlidXRlIDogMSxcbiAgICBhdWRpZW5jZSA6IDEsXG4gICAgYXV0aG9yIDogMSxcbiAgICBhdXRob3JpdHkgOiAxLFxuICAgIGF1dG8gOiAxLFxuICAgIGF2YWlsYWJsZSA6IDEsXG4gICAgYXZlcmFnZSA6IDEsXG4gICAgYXZvaWQgOiAxLFxuICAgIGF3YXJkIDogMSxcbiAgICBhd2FyZSA6IDEsXG4gICAgYXdhcmVuZXNzIDogMSxcbiAgICBhd2F5IDogMSxcbiAgICBhd2Z1bCA6IDEsXG4gICAgYmFieSA6IDEsXG4gICAgYmFjayA6IDEsXG4gICAgYmFja2dyb3VuZCA6IDEsXG4gICAgYmFkIDogMSxcbiAgICBiYWRseSA6IDEsXG4gICAgYmFnIDogMSxcbiAgICBiYWtlIDogMSxcbiAgICBiYWxhbmNlIDogMSxcbiAgICBiYWxsIDogMSxcbiAgICBiYW4gOiAxLFxuICAgIGJhbmQgOiAxLFxuICAgIGJhbmsgOiAxLFxuICAgIGJhciA6IDEsXG4gICAgYmFyZWx5IDogMSxcbiAgICBiYXJyZWwgOiAxLFxuICAgIGJhcnJpZXIgOiAxLFxuICAgIGJhc2UgOiAxLFxuICAgIGJhc2ViYWxsIDogMSxcbiAgICBiYXNpYyA6IDEsXG4gICAgYmFzaWNhbGx5IDogMSxcbiAgICBiYXNpcyA6IDEsXG4gICAgYmFza2V0IDogMSxcbiAgICBiYXNrZXRiYWxsIDogMSxcbiAgICBiYXRocm9vbSA6IDEsXG4gICAgYmF0dGVyeSA6IDEsXG4gICAgYmF0dGxlIDogMSxcbiAgICBiZSA6IDEsXG4gICAgYmVhY2ggOiAxLFxuICAgIGJlYW4gOiAxLFxuICAgIGJlYXIgOiAxLFxuICAgIGJlYXQgOiAxLFxuICAgIGJlYXV0aWZ1bCA6IDEsXG4gICAgYmVhdXR5IDogMSxcbiAgICBiZWNhdXNlIDogMSxcbiAgICBiZWNvbWUgOiAxLFxuICAgIGJlZCA6IDEsXG4gICAgYmVkcm9vbSA6IDEsXG4gICAgYmVlciA6IDEsXG4gICAgYmVmb3JlIDogMSxcbiAgICBiZWdpbiA6IDEsXG4gICAgYmVnaW5uaW5nIDogMSxcbiAgICBiZWhhdmlvciA6IDEsXG4gICAgYmVoaW5kIDogMSxcbiAgICBiZWluZyA6IDEsXG4gICAgYmVsaWVmIDogMSxcbiAgICBiZWxpZXZlIDogMSxcbiAgICBiZWxsIDogMSxcbiAgICBiZWxvbmcgOiAxLFxuICAgIGJlbG93IDogMSxcbiAgICBiZWx0IDogMSxcbiAgICBiZW5jaCA6IDEsXG4gICAgYmVuZCA6IDEsXG4gICAgYmVuZWF0aCA6IDEsXG4gICAgYmVuZWZpdCA6IDEsXG4gICAgYmVzaWRlIDogMSxcbiAgICBiZXNpZGVzIDogMSxcbiAgICBiZXN0IDogMSxcbiAgICBiZXQgOiAxLFxuICAgIGJldHRlciA6IDEsXG4gICAgYmV0d2VlbiA6IDEsXG4gICAgYmV5b25kIDogMSxcbiAgICBCaWJsZSA6IDEsXG4gICAgYmlnIDogMSxcbiAgICBiaWtlIDogMSxcbiAgICBiaWxsIDogMSxcbiAgICBiaWxsaW9uIDogMSxcbiAgICBiaW5kIDogMSxcbiAgICBiaW9sb2dpY2FsIDogMSxcbiAgICBiaXJkIDogMSxcbiAgICBiaXJ0aCA6IDEsXG4gICAgYmlydGhkYXkgOiAxLFxuICAgIGJpdCA6IDEsXG4gICAgYml0ZSA6IDEsXG4gICAgYmxhY2sgOiAxLFxuICAgIGJsYWRlIDogMSxcbiAgICBibGFtZSA6IDEsXG4gICAgYmxhbmtldCA6IDEsXG4gICAgYmxpbmQgOiAxLFxuICAgIGJsb2NrIDogMSxcbiAgICBibG9vZCA6IDEsXG4gICAgYmxvdyA6IDEsXG4gICAgYmx1ZSA6IDEsXG4gICAgYm9hcmQgOiAxLFxuICAgIGJvYXQgOiAxLFxuICAgIGJvZHkgOiAxLFxuICAgIGJvbWIgOiAxLFxuICAgIGJvbWJpbmcgOiAxLFxuICAgIGJvbmQgOiAxLFxuICAgIGJvbmUgOiAxLFxuICAgIGJvb2sgOiAxLFxuICAgIGJvb20gOiAxLFxuICAgIGJvb3QgOiAxLFxuICAgIGJvcmRlciA6IDEsXG4gICAgYm9ybiA6IDEsXG4gICAgYm9ycm93IDogMSxcbiAgICBib3NzIDogMSxcbiAgICBib3RoIDogMSxcbiAgICBib3RoZXIgOiAxLFxuICAgIGJvdHRsZSA6IDEsXG4gICAgYm90dG9tIDogMSxcbiAgICBib3VuZGFyeSA6IDEsXG4gICAgYm93bCA6IDEsXG4gICAgYm94IDogMSxcbiAgICBib3kgOiAxLFxuICAgIGJveWZyaWVuZCA6IDEsXG4gICAgYnJhaW4gOiAxLFxuICAgIGJyYW5jaCA6IDEsXG4gICAgYnJhbmQgOiAxLFxuICAgIGJyZWFkIDogMSxcbiAgICBicmVhayA6IDEsXG4gICAgYnJlYWtmYXN0IDogMSxcbiAgICBicmVhc3QgOiAxLFxuICAgIGJyZWF0aCA6IDEsXG4gICAgYnJlYXRoZSA6IDEsXG4gICAgYnJpY2sgOiAxLFxuICAgIGJyaWRnZSA6IDEsXG4gICAgYnJpZWYgOiAxLFxuICAgIGJyaWVmbHkgOiAxLFxuICAgIGJyaWdodCA6IDEsXG4gICAgYnJpbGxpYW50IDogMSxcbiAgICBicmluZyA6IDEsXG4gICAgQnJpdGlzaCA6IDEsXG4gICAgYnJvYWQgOiAxLFxuICAgIGJyb2tlbiA6IDEsXG4gICAgYnJvdGhlciA6IDEsXG4gICAgYnJvd24gOiAxLFxuICAgIGJydXNoIDogMSxcbiAgICBidWNrIDogMSxcbiAgICBidWRnZXQgOiAxLFxuICAgIGJ1aWxkIDogMSxcbiAgICBidWlsZGluZyA6IDEsXG4gICAgYnVsbGV0IDogMSxcbiAgICBidW5jaCA6IDEsXG4gICAgYnVyZGVuIDogMSxcbiAgICBidXJuIDogMSxcbiAgICBidXJ5IDogMSxcbiAgICBidXMgOiAxLFxuICAgIGJ1c2luZXNzIDogMSxcbiAgICBidXN5IDogMSxcbiAgICBidXQgOiAxLFxuICAgIGJ1dHRlciA6IDEsXG4gICAgYnV0dG9uIDogMSxcbiAgICBidXkgOiAxLFxuICAgIGJ1eWVyIDogMSxcbiAgICBieSA6IDEsXG4gICAgY2FiaW4gOiAxLFxuICAgIGNhYmluZXQgOiAxLFxuICAgIGNhYmxlIDogMSxcbiAgICBjYWtlIDogMSxcbiAgICBjYWxjdWxhdGUgOiAxLFxuICAgIGNhbGwgOiAxLFxuICAgIGNhbWVyYSA6IDEsXG4gICAgY2FtcCA6IDEsXG4gICAgY2FtcGFpZ24gOiAxLFxuICAgIGNhbXB1cyA6IDEsXG4gICAgY2FuIDogMSxcbiAgICBDYW5hZGlhbiA6IDEsXG4gICAgY2FuY2VyIDogMSxcbiAgICBjYW5kaWRhdGUgOiAxLFxuICAgIGNhcCA6IDEsXG4gICAgY2FwYWJpbGl0eSA6IDEsXG4gICAgY2FwYWJsZSA6IDEsXG4gICAgY2FwYWNpdHkgOiAxLFxuICAgIGNhcGl0YWwgOiAxLFxuICAgIGNhcHRhaW4gOiAxLFxuICAgIGNhcHR1cmUgOiAxLFxuICAgIGNhciA6IDEsXG4gICAgY2FyYm9uIDogMSxcbiAgICBjYXJkIDogMSxcbiAgICBjYXJlIDogMSxcbiAgICBjYXJlZXIgOiAxLFxuICAgIGNhcmVmdWwgOiAxLFxuICAgIGNhcmVmdWxseSA6IDEsXG4gICAgY2FycmllciA6IDEsXG4gICAgY2FycnkgOiAxLFxuICAgIGNhc2UgOiAxLFxuICAgIGNhc2ggOiAxLFxuICAgIGNhc3QgOiAxLFxuICAgIGNhdCA6IDEsXG4gICAgY2F0Y2ggOiAxLFxuICAgIGNhdGVnb3J5IDogMSxcbiAgICBDYXRob2xpYyA6IDEsXG4gICAgY2F1c2UgOiAxLFxuICAgIGNlaWxpbmcgOiAxLFxuICAgIGNlbGVicmF0ZSA6IDEsXG4gICAgY2VsZWJyYXRpb24gOiAxLFxuICAgIGNlbGVicml0eSA6IDEsXG4gICAgY2VsbCA6IDEsXG4gICAgY2VudGVyIDogMSxcbiAgICBjZW50cmFsIDogMSxcbiAgICBjZW50dXJ5IDogMSxcbiAgICBDRU8gOiAxLFxuICAgIGNlcmVtb255IDogMSxcbiAgICBjZXJ0YWluIDogMSxcbiAgICBjZXJ0YWlubHkgOiAxLFxuICAgIGNoYWluIDogMSxcbiAgICBjaGFpciA6IDEsXG4gICAgY2hhaXJtYW4gOiAxLFxuICAgIGNoYWxsZW5nZSA6IDEsXG4gICAgY2hhbWJlciA6IDEsXG4gICAgY2hhbXBpb24gOiAxLFxuICAgIGNoYW1waW9uc2hpcCA6IDEsXG4gICAgY2hhbmNlIDogMSxcbiAgICBjaGFuZ2UgOiAxLFxuICAgIGNoYW5naW5nIDogMSxcbiAgICBjaGFubmVsIDogMSxcbiAgICBjaGFwdGVyIDogMSxcbiAgICBjaGFyYWN0ZXIgOiAxLFxuICAgIGNoYXJhY3RlcmlzdGljIDogMSxcbiAgICBjaGFyYWN0ZXJpemUgOiAxLFxuICAgIGNoYXJnZSA6IDEsXG4gICAgY2hhcml0eSA6IDEsXG4gICAgY2hhcnQgOiAxLFxuICAgIGNoYXNlIDogMSxcbiAgICBjaGVhcCA6IDEsXG4gICAgY2hlY2sgOiAxLFxuICAgIGNoZWVrIDogMSxcbiAgICBjaGVlc2UgOiAxLFxuICAgIGNoZWYgOiAxLFxuICAgIGNoZW1pY2FsIDogMSxcbiAgICBjaGVzdCA6IDEsXG4gICAgY2hpY2tlbiA6IDEsXG4gICAgY2hpZWYgOiAxLFxuICAgIGNoaWxkIDogMSxcbiAgICBjaGlsZGhvb2QgOiAxLFxuICAgIENoaW5lc2UgOiAxLFxuICAgIGNoaXAgOiAxLFxuICAgIGNob2NvbGF0ZSA6IDEsXG4gICAgY2hvaWNlIDogMSxcbiAgICBjaG9sZXN0ZXJvbCA6IDEsXG4gICAgY2hvb3NlIDogMSxcbiAgICBDaHJpc3RpYW4gOiAxLFxuICAgIENocmlzdG1hcyA6IDEsXG4gICAgY2h1cmNoIDogMSxcbiAgICBjaWdhcmV0dGUgOiAxLFxuICAgIGNpcmNsZSA6IDEsXG4gICAgY2lyY3Vtc3RhbmNlIDogMSxcbiAgICBjaXRlIDogMSxcbiAgICBjaXRpemVuIDogMSxcbiAgICBjaXR5IDogMSxcbiAgICBjaXZpbCA6IDEsXG4gICAgY2l2aWxpYW4gOiAxLFxuICAgIGNsYWltIDogMSxcbiAgICBjbGFzcyA6IDEsXG4gICAgY2xhc3NpYyA6IDEsXG4gICAgY2xhc3Nyb29tIDogMSxcbiAgICBjbGVhbiA6IDEsXG4gICAgY2xlYXIgOiAxLFxuICAgIGNsZWFybHkgOiAxLFxuICAgIGNsaWVudCA6IDEsXG4gICAgY2xpbWF0ZSA6IDEsXG4gICAgY2xpbWIgOiAxLFxuICAgIGNsaW5pYyA6IDEsXG4gICAgY2xpbmljYWwgOiAxLFxuICAgIGNsb2NrIDogMSxcbiAgICBjbG9zZSA6IDEsXG4gICAgY2xvc2VseSA6IDEsXG4gICAgY2xvc2VyIDogMSxcbiAgICBjbG90aGVzIDogMSxcbiAgICBjbG90aGluZyA6IDEsXG4gICAgY2xvdWQgOiAxLFxuICAgIGNsdWIgOiAxLFxuICAgIGNsdWUgOiAxLFxuICAgIGNsdXN0ZXIgOiAxLFxuICAgIGNvYWNoIDogMSxcbiAgICBjb2FsIDogMSxcbiAgICBjb2FsaXRpb24gOiAxLFxuICAgIGNvYXN0IDogMSxcbiAgICBjb2F0IDogMSxcbiAgICBjb2RlIDogMSxcbiAgICBjb2ZmZWUgOiAxLFxuICAgIGNvZ25pdGl2ZSA6IDEsXG4gICAgY29sZCA6IDEsXG4gICAgY29sbGFwc2UgOiAxLFxuICAgIGNvbGxlYWd1ZSA6IDEsXG4gICAgY29sbGVjdCA6IDEsXG4gICAgY29sbGVjdGlvbiA6IDEsXG4gICAgY29sbGVjdGl2ZSA6IDEsXG4gICAgY29sbGVnZSA6IDEsXG4gICAgY29sb25pYWwgOiAxLFxuICAgIGNvbG9yIDogMSxcbiAgICBjb2x1bW4gOiAxLFxuICAgIGNvbWJpbmF0aW9uIDogMSxcbiAgICBjb21iaW5lIDogMSxcbiAgICBjb21lIDogMSxcbiAgICBjb21lZHkgOiAxLFxuICAgIGNvbWZvcnQgOiAxLFxuICAgIGNvbWZvcnRhYmxlIDogMSxcbiAgICBjb21tYW5kIDogMSxcbiAgICBjb21tYW5kZXIgOiAxLFxuICAgIGNvbW1lbnQgOiAxLFxuICAgIGNvbW1lcmNpYWwgOiAxLFxuICAgIGNvbW1pc3Npb24gOiAxLFxuICAgIGNvbW1pdCA6IDEsXG4gICAgY29tbWl0bWVudCA6IDEsXG4gICAgY29tbWl0dGVlIDogMSxcbiAgICBjb21tb24gOiAxLFxuICAgIGNvbW11bmljYXRlIDogMSxcbiAgICBjb21tdW5pY2F0aW9uIDogMSxcbiAgICBjb21tdW5pdHkgOiAxLFxuICAgIGNvbXBhbnkgOiAxLFxuICAgIGNvbXBhcmUgOiAxLFxuICAgIGNvbXBhcmlzb24gOiAxLFxuICAgIGNvbXBldGUgOiAxLFxuICAgIGNvbXBldGl0aW9uIDogMSxcbiAgICBjb21wZXRpdGl2ZSA6IDEsXG4gICAgY29tcGV0aXRvciA6IDEsXG4gICAgY29tcGxhaW4gOiAxLFxuICAgIGNvbXBsYWludCA6IDEsXG4gICAgY29tcGxldGUgOiAxLFxuICAgIGNvbXBsZXRlbHkgOiAxLFxuICAgIGNvbXBsZXggOiAxLFxuICAgIGNvbXBsaWNhdGVkIDogMSxcbiAgICBjb21wb25lbnQgOiAxLFxuICAgIGNvbXBvc2UgOiAxLFxuICAgIGNvbXBvc2l0aW9uIDogMSxcbiAgICBjb21wcmVoZW5zaXZlIDogMSxcbiAgICBjb21wdXRlciA6IDEsXG4gICAgY29uY2VudHJhdGUgOiAxLFxuICAgIGNvbmNlbnRyYXRpb24gOiAxLFxuICAgIGNvbmNlcHQgOiAxLFxuICAgIGNvbmNlcm4gOiAxLFxuICAgIGNvbmNlcm5lZCA6IDEsXG4gICAgY29uY2VydCA6IDEsXG4gICAgY29uY2x1ZGUgOiAxLFxuICAgIGNvbmNsdXNpb24gOiAxLFxuICAgIGNvbmNyZXRlIDogMSxcbiAgICBjb25kaXRpb24gOiAxLFxuICAgIGNvbmR1Y3QgOiAxLFxuICAgIGNvbmZlcmVuY2UgOiAxLFxuICAgIGNvbmZpZGVuY2UgOiAxLFxuICAgIGNvbmZpZGVudCA6IDEsXG4gICAgY29uZmlybSA6IDEsXG4gICAgY29uZmxpY3QgOiAxLFxuICAgIGNvbmZyb250IDogMSxcbiAgICBjb25mdXNpb24gOiAxLFxuICAgIENvbmdyZXNzIDogMSxcbiAgICBjb25ncmVzc2lvbmFsIDogMSxcbiAgICBjb25uZWN0IDogMSxcbiAgICBjb25uZWN0aW9uIDogMSxcbiAgICBjb25zY2lvdXNuZXNzIDogMSxcbiAgICBjb25zZW5zdXMgOiAxLFxuICAgIGNvbnNlcXVlbmNlIDogMSxcbiAgICBjb25zZXJ2YXRpdmUgOiAxLFxuICAgIGNvbnNpZGVyIDogMSxcbiAgICBjb25zaWRlcmFibGUgOiAxLFxuICAgIGNvbnNpZGVyYXRpb24gOiAxLFxuICAgIGNvbnNpc3QgOiAxLFxuICAgIGNvbnNpc3RlbnQgOiAxLFxuICAgIGNvbnN0YW50IDogMSxcbiAgICBjb25zdGFudGx5IDogMSxcbiAgICBjb25zdGl0dXRlIDogMSxcbiAgICBjb25zdGl0dXRpb25hbCA6IDEsXG4gICAgY29uc3RydWN0IDogMSxcbiAgICBjb25zdHJ1Y3Rpb24gOiAxLFxuICAgIGNvbnN1bHRhbnQgOiAxLFxuICAgIGNvbnN1bWUgOiAxLFxuICAgIGNvbnN1bWVyIDogMSxcbiAgICBjb25zdW1wdGlvbiA6IDEsXG4gICAgY29udGFjdCA6IDEsXG4gICAgY29udGFpbiA6IDEsXG4gICAgY29udGFpbmVyIDogMSxcbiAgICBjb250ZW1wb3JhcnkgOiAxLFxuICAgIGNvbnRlbnQgOiAxLFxuICAgIGNvbnRlc3QgOiAxLFxuICAgIGNvbnRleHQgOiAxLFxuICAgIGNvbnRpbnVlIDogMSxcbiAgICBjb250aW51ZWQgOiAxLFxuICAgIGNvbnRyYWN0IDogMSxcbiAgICBjb250cmFzdCA6IDEsXG4gICAgY29udHJpYnV0ZSA6IDEsXG4gICAgY29udHJpYnV0aW9uIDogMSxcbiAgICBjb250cm9sIDogMSxcbiAgICBjb250cm92ZXJzaWFsIDogMSxcbiAgICBjb250cm92ZXJzeSA6IDEsXG4gICAgY29udmVudGlvbiA6IDEsXG4gICAgY29udmVudGlvbmFsIDogMSxcbiAgICBjb252ZXJzYXRpb24gOiAxLFxuICAgIGNvbnZlcnQgOiAxLFxuICAgIGNvbnZpY3Rpb24gOiAxLFxuICAgIGNvbnZpbmNlIDogMSxcbiAgICBjb29rIDogMSxcbiAgICBjb29raWUgOiAxLFxuICAgIGNvb2tpbmcgOiAxLFxuICAgIGNvb2wgOiAxLFxuICAgIGNvb3BlcmF0aW9uIDogMSxcbiAgICBjb3AgOiAxLFxuICAgIGNvcGUgOiAxLFxuICAgIGNvcHkgOiAxLFxuICAgIGNvcmUgOiAxLFxuICAgIGNvcm4gOiAxLFxuICAgIGNvcm5lciA6IDEsXG4gICAgY29ycG9yYXRlIDogMSxcbiAgICBjb3Jwb3JhdGlvbiA6IDEsXG4gICAgY29ycmVjdCA6IDEsXG4gICAgY29ycmVzcG9uZGVudCA6IDEsXG4gICAgY29zdCA6IDEsXG4gICAgY290dG9uIDogMSxcbiAgICBjb3VjaCA6IDEsXG4gICAgY291bGQgOiAxLFxuICAgIGNvdW5jaWwgOiAxLFxuICAgIGNvdW5zZWxvciA6IDEsXG4gICAgY291bnQgOiAxLFxuICAgIGNvdW50ZXIgOiAxLFxuICAgIGNvdW50cnkgOiAxLFxuICAgIGNvdW50eSA6IDEsXG4gICAgY291cGxlIDogMSxcbiAgICBjb3VyYWdlIDogMSxcbiAgICBjb3Vyc2UgOiAxLFxuICAgIGNvdXJ0IDogMSxcbiAgICBjb3VzaW4gOiAxLFxuICAgIGNvdmVyIDogMSxcbiAgICBjb3ZlcmFnZSA6IDEsXG4gICAgY293IDogMSxcbiAgICBjcmFjayA6IDEsXG4gICAgY3JhZnQgOiAxLFxuICAgIGNyYXNoIDogMSxcbiAgICBjcmF6eSA6IDEsXG4gICAgY3JlYW0gOiAxLFxuICAgIGNyZWF0ZSA6IDEsXG4gICAgY3JlYXRpb24gOiAxLFxuICAgIGNyZWF0aXZlIDogMSxcbiAgICBjcmVhdHVyZSA6IDEsXG4gICAgY3JlZGl0IDogMSxcbiAgICBjcmV3IDogMSxcbiAgICBjcmltZSA6IDEsXG4gICAgY3JpbWluYWwgOiAxLFxuICAgIGNyaXNpcyA6IDEsXG4gICAgY3JpdGVyaWEgOiAxLFxuICAgIGNyaXRpYyA6IDEsXG4gICAgY3JpdGljYWwgOiAxLFxuICAgIGNyaXRpY2lzbSA6IDEsXG4gICAgY3JpdGljaXplIDogMSxcbiAgICBjcm9wIDogMSxcbiAgICBjcm9zcyA6IDEsXG4gICAgY3Jvd2QgOiAxLFxuICAgIGNydWNpYWwgOiAxLFxuICAgIGNyeSA6IDEsXG4gICAgY3VsdHVyYWwgOiAxLFxuICAgIGN1bHR1cmUgOiAxLFxuICAgIGN1cCA6IDEsXG4gICAgY3VyaW91cyA6IDEsXG4gICAgY3VycmVudCA6IDEsXG4gICAgY3VycmVudGx5IDogMSxcbiAgICBjdXJyaWN1bHVtIDogMSxcbiAgICBjdXN0b20gOiAxLFxuICAgIGN1c3RvbWVyIDogMSxcbiAgICBjdXQgOiAxLFxuICAgIGN5Y2xlIDogMSxcbiAgICBkYWQgOiAxLFxuICAgIGRhaWx5IDogMSxcbiAgICBkYW1hZ2UgOiAxLFxuICAgIGRhbmNlIDogMSxcbiAgICBkYW5nZXIgOiAxLFxuICAgIGRhbmdlcm91cyA6IDEsXG4gICAgZGFyZSA6IDEsXG4gICAgZGFyayA6IDEsXG4gICAgZGFya25lc3MgOiAxLFxuICAgIGRhdGEgOiAxLFxuICAgIGRhdGUgOiAxLFxuICAgIGRhdWdodGVyIDogMSxcbiAgICBkYXkgOiAxLFxuICAgIGRlYWQgOiAxLFxuICAgIGRlYWwgOiAxLFxuICAgIGRlYWxlciA6IDEsXG4gICAgZGVhciA6IDEsXG4gICAgZGVhdGggOiAxLFxuICAgIGRlYmF0ZSA6IDEsXG4gICAgZGVidCA6IDEsXG4gICAgZGVjYWRlIDogMSxcbiAgICBkZWNpZGUgOiAxLFxuICAgIGRlY2lzaW9uIDogMSxcbiAgICBkZWNrIDogMSxcbiAgICBkZWNsYXJlIDogMSxcbiAgICBkZWNsaW5lIDogMSxcbiAgICBkZWNyZWFzZSA6IDEsXG4gICAgZGVlcCA6IDEsXG4gICAgZGVlcGx5IDogMSxcbiAgICBkZWVyIDogMSxcbiAgICBkZWZlYXQgOiAxLFxuICAgIGRlZmVuZCA6IDEsXG4gICAgZGVmZW5kYW50IDogMSxcbiAgICBkZWZlbnNlIDogMSxcbiAgICBkZWZlbnNpdmUgOiAxLFxuICAgIGRlZmljaXQgOiAxLFxuICAgIGRlZmluZSA6IDEsXG4gICAgZGVmaW5pdGVseSA6IDEsXG4gICAgZGVmaW5pdGlvbiA6IDEsXG4gICAgZGVncmVlIDogMSxcbiAgICBkZWxheSA6IDEsXG4gICAgZGVsaXZlciA6IDEsXG4gICAgZGVsaXZlcnkgOiAxLFxuICAgIGRlbWFuZCA6IDEsXG4gICAgZGVtb2NyYWN5IDogMSxcbiAgICBEZW1vY3JhdCA6IDEsXG4gICAgZGVtb2NyYXRpYyA6IDEsXG4gICAgZGVtb25zdHJhdGUgOiAxLFxuICAgIGRlbW9uc3RyYXRpb24gOiAxLFxuICAgIGRlbnkgOiAxLFxuICAgIGRlcGFydG1lbnQgOiAxLFxuICAgIGRlcGVuZCA6IDEsXG4gICAgZGVwZW5kZW50IDogMSxcbiAgICBkZXBlbmRpbmcgOiAxLFxuICAgIGRlcGljdCA6IDEsXG4gICAgZGVwcmVzc2lvbiA6IDEsXG4gICAgZGVwdGggOiAxLFxuICAgIGRlcHV0eSA6IDEsXG4gICAgZGVyaXZlIDogMSxcbiAgICBkZXNjcmliZSA6IDEsXG4gICAgZGVzY3JpcHRpb24gOiAxLFxuICAgIGRlc2VydCA6IDEsXG4gICAgZGVzZXJ2ZSA6IDEsXG4gICAgZGVzaWduIDogMSxcbiAgICBkZXNpZ25lciA6IDEsXG4gICAgZGVzaXJlIDogMSxcbiAgICBkZXNrIDogMSxcbiAgICBkZXNwZXJhdGUgOiAxLFxuICAgIGRlc3BpdGUgOiAxLFxuICAgIGRlc3Ryb3kgOiAxLFxuICAgIGRlc3RydWN0aW9uIDogMSxcbiAgICBkZXRhaWwgOiAxLFxuICAgIGRldGFpbGVkIDogMSxcbiAgICBkZXRlY3QgOiAxLFxuICAgIGRldGVybWluZSA6IDEsXG4gICAgZGV2ZWxvcCA6IDEsXG4gICAgZGV2ZWxvcGluZyA6IDEsXG4gICAgZGV2ZWxvcG1lbnQgOiAxLFxuICAgIGRldmljZSA6IDEsXG4gICAgZGV2b3RlIDogMSxcbiAgICBkaWFsb2d1ZSA6IDEsXG4gICAgZGllIDogMSxcbiAgICBkaWV0IDogMSxcbiAgICBkaWZmZXIgOiAxLFxuICAgIGRpZmZlcmVuY2UgOiAxLFxuICAgIGRpZmZlcmVudCA6IDEsXG4gICAgZGlmZmVyZW50bHkgOiAxLFxuICAgIGRpZmZpY3VsdCA6IDEsXG4gICAgZGlmZmljdWx0eSA6IDEsXG4gICAgZGlnIDogMSxcbiAgICBkaWdpdGFsIDogMSxcbiAgICBkaW1lbnNpb24gOiAxLFxuICAgIGRpbmluZyA6IDEsXG4gICAgZGlubmVyIDogMSxcbiAgICBkaXJlY3QgOiAxLFxuICAgIGRpcmVjdGlvbiA6IDEsXG4gICAgZGlyZWN0bHkgOiAxLFxuICAgIGRpcmVjdG9yIDogMSxcbiAgICBkaXJ0IDogMSxcbiAgICBkaXJ0eSA6IDEsXG4gICAgZGlzYWJpbGl0eSA6IDEsXG4gICAgZGlzYWdyZWUgOiAxLFxuICAgIGRpc2FwcGVhciA6IDEsXG4gICAgZGlzYXN0ZXIgOiAxLFxuICAgIGRpc2NpcGxpbmUgOiAxLFxuICAgIGRpc2NvdXJzZSA6IDEsXG4gICAgZGlzY292ZXIgOiAxLFxuICAgIGRpc2NvdmVyeSA6IDEsXG4gICAgZGlzY3JpbWluYXRpb24gOiAxLFxuICAgIGRpc2N1c3MgOiAxLFxuICAgIGRpc2N1c3Npb24gOiAxLFxuICAgIGRpc2Vhc2UgOiAxLFxuICAgIGRpc2ggOiAxLFxuICAgIGRpc21pc3MgOiAxLFxuICAgIGRpc29yZGVyIDogMSxcbiAgICBkaXNwbGF5IDogMSxcbiAgICBkaXNwdXRlIDogMSxcbiAgICBkaXN0YW5jZSA6IDEsXG4gICAgZGlzdGFudCA6IDEsXG4gICAgZGlzdGluY3QgOiAxLFxuICAgIGRpc3RpbmN0aW9uIDogMSxcbiAgICBkaXN0aW5ndWlzaCA6IDEsXG4gICAgZGlzdHJpYnV0ZSA6IDEsXG4gICAgZGlzdHJpYnV0aW9uIDogMSxcbiAgICBkaXN0cmljdCA6IDEsXG4gICAgZGl2ZXJzZSA6IDEsXG4gICAgZGl2ZXJzaXR5IDogMSxcbiAgICBkaXZpZGUgOiAxLFxuICAgIGRpdmlzaW9uIDogMSxcbiAgICBkaXZvcmNlIDogMSxcbiAgICBETkEgOiAxLFxuICAgIGRvIDogMSxcbiAgICBkb2N0b3IgOiAxLFxuICAgIGRvY3VtZW50IDogMSxcbiAgICBkb2cgOiAxLFxuICAgIGRvbWVzdGljIDogMSxcbiAgICBkb21pbmFudCA6IDEsXG4gICAgZG9taW5hdGUgOiAxLFxuICAgIGRvb3IgOiAxLFxuICAgIGRvdWJsZSA6IDEsXG4gICAgZG91YnQgOiAxLFxuICAgIGRvd24gOiAxLFxuICAgIGRvd250b3duIDogMSxcbiAgICBkb3plbiA6IDEsXG4gICAgZHJhZnQgOiAxLFxuICAgIGRyYWcgOiAxLFxuICAgIGRyYW1hIDogMSxcbiAgICBkcmFtYXRpYyA6IDEsXG4gICAgZHJhbWF0aWNhbGx5IDogMSxcbiAgICBkcmF3IDogMSxcbiAgICBkcmF3aW5nIDogMSxcbiAgICBkcmVhbSA6IDEsXG4gICAgZHJlc3MgOiAxLFxuICAgIGRyaW5rIDogMSxcbiAgICBkcml2ZSA6IDEsXG4gICAgZHJpdmVyIDogMSxcbiAgICBkcm9wIDogMSxcbiAgICBkcnVnIDogMSxcbiAgICBkcnkgOiAxLFxuICAgIGR1ZSA6IDEsXG4gICAgZHVyaW5nIDogMSxcbiAgICBkdXN0IDogMSxcbiAgICBkdXR5IDogMSxcbiAgICBlYWNoIDogMSxcbiAgICBlYWdlciA6IDEsXG4gICAgZWFyIDogMSxcbiAgICBlYXJseSA6IDEsXG4gICAgZWFybiA6IDEsXG4gICAgZWFybmluZ3MgOiAxLFxuICAgIGVhcnRoIDogMSxcbiAgICBlYXNlIDogMSxcbiAgICBlYXNpbHkgOiAxLFxuICAgIGVhc3QgOiAxLFxuICAgIGVhc3Rlcm4gOiAxLFxuICAgIGVhc3kgOiAxLFxuICAgIGVhdCA6IDEsXG4gICAgZWNvbm9taWMgOiAxLFxuICAgIGVjb25vbWljcyA6IDEsXG4gICAgZWNvbm9taXN0IDogMSxcbiAgICBlY29ub215IDogMSxcbiAgICBlZGdlIDogMSxcbiAgICBlZGl0aW9uIDogMSxcbiAgICBlZGl0b3IgOiAxLFxuICAgIGVkdWNhdGUgOiAxLFxuICAgIGVkdWNhdGlvbiA6IDEsXG4gICAgZWR1Y2F0aW9uYWwgOiAxLFxuICAgIGVkdWNhdG9yIDogMSxcbiAgICBlZmZlY3QgOiAxLFxuICAgIGVmZmVjdGl2ZSA6IDEsXG4gICAgZWZmZWN0aXZlbHkgOiAxLFxuICAgIGVmZmljaWVuY3kgOiAxLFxuICAgIGVmZmljaWVudCA6IDEsXG4gICAgZWZmb3J0IDogMSxcbiAgICBlZ2cgOiAxLFxuICAgIGVpZ2h0IDogMSxcbiAgICBlaXRoZXIgOiAxLFxuICAgIGVsZGVybHkgOiAxLFxuICAgIGVsZWN0IDogMSxcbiAgICBlbGVjdGlvbiA6IDEsXG4gICAgZWxlY3RyaWMgOiAxLFxuICAgIGVsZWN0cmljaXR5IDogMSxcbiAgICBlbGVjdHJvbmljIDogMSxcbiAgICBlbGVtZW50IDogMSxcbiAgICBlbGVtZW50YXJ5IDogMSxcbiAgICBlbGltaW5hdGUgOiAxLFxuICAgIGVsaXRlIDogMSxcbiAgICBlbHNlIDogMSxcbiAgICBlbHNld2hlcmUgOiAxLFxuICAgIFwiZS1tYWlsXCIgOiAxLFxuICAgIGVtYnJhY2UgOiAxLFxuICAgIGVtZXJnZSA6IDEsXG4gICAgZW1lcmdlbmN5IDogMSxcbiAgICBlbWlzc2lvbiA6IDEsXG4gICAgZW1vdGlvbiA6IDEsXG4gICAgZW1vdGlvbmFsIDogMSxcbiAgICBlbXBoYXNpcyA6IDEsXG4gICAgZW1waGFzaXplIDogMSxcbiAgICBlbXBsb3kgOiAxLFxuICAgIGVtcGxveWVlIDogMSxcbiAgICBlbXBsb3llciA6IDEsXG4gICAgZW1wbG95bWVudCA6IDEsXG4gICAgZW1wdHkgOiAxLFxuICAgIGVuYWJsZSA6IDEsXG4gICAgZW5jb3VudGVyIDogMSxcbiAgICBlbmNvdXJhZ2UgOiAxLFxuICAgIGVuZCA6IDEsXG4gICAgZW5lbXkgOiAxLFxuICAgIGVuZXJneSA6IDEsXG4gICAgZW5mb3JjZW1lbnQgOiAxLFxuICAgIGVuZ2FnZSA6IDEsXG4gICAgZW5naW5lIDogMSxcbiAgICBlbmdpbmVlciA6IDEsXG4gICAgZW5naW5lZXJpbmcgOiAxLFxuICAgIEVuZ2xpc2ggOiAxLFxuICAgIGVuaGFuY2UgOiAxLFxuICAgIGVuam95IDogMSxcbiAgICBlbm9ybW91cyA6IDEsXG4gICAgZW5vdWdoIDogMSxcbiAgICBlbnN1cmUgOiAxLFxuICAgIGVudGVyIDogMSxcbiAgICBlbnRlcnByaXNlIDogMSxcbiAgICBlbnRlcnRhaW5tZW50IDogMSxcbiAgICBlbnRpcmUgOiAxLFxuICAgIGVudGlyZWx5IDogMSxcbiAgICBlbnRyYW5jZSA6IDEsXG4gICAgZW50cnkgOiAxLFxuICAgIGVudmlyb25tZW50IDogMSxcbiAgICBlbnZpcm9ubWVudGFsIDogMSxcbiAgICBlcGlzb2RlIDogMSxcbiAgICBlcXVhbCA6IDEsXG4gICAgZXF1YWxseSA6IDEsXG4gICAgZXF1aXBtZW50IDogMSxcbiAgICBlcmEgOiAxLFxuICAgIGVycm9yIDogMSxcbiAgICBlc2NhcGUgOiAxLFxuICAgIGVzcGVjaWFsbHkgOiAxLFxuICAgIGVzc2F5IDogMSxcbiAgICBlc3NlbnRpYWwgOiAxLFxuICAgIGVzc2VudGlhbGx5IDogMSxcbiAgICBlc3RhYmxpc2ggOiAxLFxuICAgIGVzdGFibGlzaG1lbnQgOiAxLFxuICAgIGVzdGF0ZSA6IDEsXG4gICAgZXN0aW1hdGUgOiAxLFxuICAgIGV0YyA6IDEsXG4gICAgZXRoaWNzIDogMSxcbiAgICBldGhuaWMgOiAxLFxuICAgIEV1cm9wZWFuIDogMSxcbiAgICBldmFsdWF0ZSA6IDEsXG4gICAgZXZhbHVhdGlvbiA6IDEsXG4gICAgZXZlbiA6IDEsXG4gICAgZXZlbmluZyA6IDEsXG4gICAgZXZlbnQgOiAxLFxuICAgIGV2ZW50dWFsbHkgOiAxLFxuICAgIGV2ZXIgOiAxLFxuICAgIGV2ZXJ5IDogMSxcbiAgICBldmVyeWJvZHkgOiAxLFxuICAgIGV2ZXJ5ZGF5IDogMSxcbiAgICBldmVyeW9uZSA6IDEsXG4gICAgZXZlcnl0aGluZyA6IDEsXG4gICAgZXZlcnl3aGVyZSA6IDEsXG4gICAgZXZpZGVuY2UgOiAxLFxuICAgIGV2b2x1dGlvbiA6IDEsXG4gICAgZXZvbHZlIDogMSxcbiAgICBleGFjdCA6IDEsXG4gICAgZXhhY3RseSA6IDEsXG4gICAgZXhhbWluYXRpb24gOiAxLFxuICAgIGV4YW1pbmUgOiAxLFxuICAgIGV4YW1wbGUgOiAxLFxuICAgIGV4Y2VlZCA6IDEsXG4gICAgZXhjZWxsZW50IDogMSxcbiAgICBleGNlcHQgOiAxLFxuICAgIGV4Y2VwdGlvbiA6IDEsXG4gICAgZXhjaGFuZ2UgOiAxLFxuICAgIGV4Y2l0aW5nIDogMSxcbiAgICBleGVjdXRpdmUgOiAxLFxuICAgIGV4ZXJjaXNlIDogMSxcbiAgICBleGhpYml0IDogMSxcbiAgICBleGhpYml0aW9uIDogMSxcbiAgICBleGlzdCA6IDEsXG4gICAgZXhpc3RlbmNlIDogMSxcbiAgICBleGlzdGluZyA6IDEsXG4gICAgZXhwYW5kIDogMSxcbiAgICBleHBhbnNpb24gOiAxLFxuICAgIGV4cGVjdCA6IDEsXG4gICAgZXhwZWN0YXRpb24gOiAxLFxuICAgIGV4cGVuc2UgOiAxLFxuICAgIGV4cGVuc2l2ZSA6IDEsXG4gICAgZXhwZXJpZW5jZSA6IDEsXG4gICAgZXhwZXJpbWVudCA6IDEsXG4gICAgZXhwZXJ0IDogMSxcbiAgICBleHBsYWluIDogMSxcbiAgICBleHBsYW5hdGlvbiA6IDEsXG4gICAgZXhwbG9kZSA6IDEsXG4gICAgZXhwbG9yZSA6IDEsXG4gICAgZXhwbG9zaW9uIDogMSxcbiAgICBleHBvc2UgOiAxLFxuICAgIGV4cG9zdXJlIDogMSxcbiAgICBleHByZXNzIDogMSxcbiAgICBleHByZXNzaW9uIDogMSxcbiAgICBleHRlbmQgOiAxLFxuICAgIGV4dGVuc2lvbiA6IDEsXG4gICAgZXh0ZW5zaXZlIDogMSxcbiAgICBleHRlbnQgOiAxLFxuICAgIGV4dGVybmFsIDogMSxcbiAgICBleHRyYSA6IDEsXG4gICAgZXh0cmFvcmRpbmFyeSA6IDEsXG4gICAgZXh0cmVtZSA6IDEsXG4gICAgZXh0cmVtZWx5IDogMSxcbiAgICBleWUgOiAxLFxuXG4gIH07IiwiXG4vLyBodHRwczovL3d3dy5lZi5jb20vd3dlbi9lbmdsaXNoLXJlc291cmNlcy9lbmdsaXNoLXZvY2FidWxhcnkvdG9wLTMwMDAtd29yZHMvXG5cbmV4cG9ydCBjb25zdCBUaGVNb3N0Q29tbW9uMzAwMCA9IHtcbiAgICBmYWJyaWMgOiAxLFxuICAgIGZhY2UgOiAxLFxuICAgIGZhY2lsaXR5IDogMSxcbiAgICBmYWN0IDogMSxcbiAgICBmYWN0b3IgOiAxLFxuICAgIGZhY3RvcnkgOiAxLFxuICAgIGZhY3VsdHkgOiAxLFxuICAgIGZhZGUgOiAxLFxuICAgIGZhaWwgOiAxLFxuICAgIGZhaWx1cmUgOiAxLFxuICAgIGZhaXIgOiAxLFxuICAgIGZhaXJseSA6IDEsXG4gICAgZmFpdGggOiAxLFxuICAgIGZhbGwgOiAxLFxuICAgIGZhbHNlIDogMSxcbiAgICBmYW1pbGlhciA6IDEsXG4gICAgZmFtaWx5IDogMSxcbiAgICBmYW1vdXMgOiAxLFxuICAgIGZhbiA6IDEsXG4gICAgZmFudGFzeSA6IDEsXG4gICAgZmFyIDogMSxcbiAgICBmYXJtIDogMSxcbiAgICBmYXJtZXIgOiAxLFxuICAgIGZhc2hpb24gOiAxLFxuICAgIGZhc3QgOiAxLFxuICAgIGZhdCA6IDEsXG4gICAgZmF0ZSA6IDEsXG4gICAgZmF0aGVyIDogMSxcbiAgICBmYXVsdCA6IDEsXG4gICAgZmF2b3IgOiAxLFxuICAgIGZhdm9yaXRlIDogMSxcbiAgICBmZWFyIDogMSxcbiAgICBmZWF0dXJlIDogMSxcbiAgICBmZWRlcmFsIDogMSxcbiAgICBmZWUgOiAxLFxuICAgIGZlZWQgOiAxLFxuICAgIGZlZWwgOiAxLFxuICAgIGZlZWxpbmcgOiAxLFxuICAgIGZlbGxvdyA6IDEsXG4gICAgZmVtYWxlIDogMSxcbiAgICBmZW5jZSA6IDEsXG4gICAgZmV3IDogMSxcbiAgICBmZXdlciA6IDEsXG4gICAgZmliZXIgOiAxLFxuICAgIGZpY3Rpb24gOiAxLFxuICAgIGZpZWxkIDogMSxcbiAgICBmaWZ0ZWVuIDogMSxcbiAgICBmaWZ0aCA6IDEsXG4gICAgZmlmdHkgOiAxLFxuICAgIGZpZ2h0IDogMSxcbiAgICBmaWdodGVyIDogMSxcbiAgICBmaWdodGluZyA6IDEsXG4gICAgZmlndXJlIDogMSxcbiAgICBmaWxlIDogMSxcbiAgICBmaWxsIDogMSxcbiAgICBmaWxtIDogMSxcbiAgICBmaW5hbCA6IDEsXG4gICAgZmluYWxseSA6IDEsXG4gICAgZmluYW5jZSA6IDEsXG4gICAgZmluYW5jaWFsIDogMSxcbiAgICBmaW5kIDogMSxcbiAgICBmaW5kaW5nIDogMSxcbiAgICBmaW5lIDogMSxcbiAgICBmaW5nZXIgOiAxLFxuICAgIGZpbmlzaCA6IDEsXG4gICAgZmlyZSA6IDEsXG4gICAgZmlybSA6IDEsXG4gICAgZmlyc3QgOiAxLFxuICAgIGZpc2ggOiAxLFxuICAgIGZpc2hpbmcgOiAxLFxuICAgIGZpdCA6IDEsXG4gICAgZml0bmVzcyA6IDEsXG4gICAgZml2ZSA6IDEsXG4gICAgZml4IDogMSxcbiAgICBmbGFnIDogMSxcbiAgICBmbGFtZSA6IDEsXG4gICAgZmxhdCA6IDEsXG4gICAgZmxhdm9yIDogMSxcbiAgICBmbGVlIDogMSxcbiAgICBmbGVzaCA6IDEsXG4gICAgZmxpZ2h0IDogMSxcbiAgICBmbG9hdCA6IDEsXG4gICAgZmxvb3IgOiAxLFxuICAgIGZsb3cgOiAxLFxuICAgIGZsb3dlciA6IDEsXG4gICAgZmx5IDogMSxcbiAgICBmb2N1cyA6IDEsXG4gICAgZm9sayA6IDEsXG4gICAgZm9sbG93IDogMSxcbiAgICBmb2xsb3dpbmcgOiAxLFxuICAgIGZvb2QgOiAxLFxuICAgIGZvb3QgOiAxLFxuICAgIGZvb3RiYWxsIDogMSxcbiAgICBmb3IgOiAxLFxuICAgIGZvcmNlIDogMSxcbiAgICBmb3JlaWduIDogMSxcbiAgICBmb3Jlc3QgOiAxLFxuICAgIGZvcmV2ZXIgOiAxLFxuICAgIGZvcmdldCA6IDEsXG4gICAgZm9ybSA6IDEsXG4gICAgZm9ybWFsIDogMSxcbiAgICBmb3JtYXRpb24gOiAxLFxuICAgIGZvcm1lciA6IDEsXG4gICAgZm9ybXVsYSA6IDEsXG4gICAgZm9ydGggOiAxLFxuICAgIGZvcnR1bmUgOiAxLFxuICAgIGZvcndhcmQgOiAxLFxuICAgIGZvdW5kIDogMSxcbiAgICBmb3VuZGF0aW9uIDogMSxcbiAgICBmb3VuZGVyIDogMSxcbiAgICBmb3VyIDogMSxcbiAgICBmb3VydGggOiAxLFxuICAgIGZyYW1lIDogMSxcbiAgICBmcmFtZXdvcmsgOiAxLFxuICAgIGZyZWUgOiAxLFxuICAgIGZyZWVkb20gOiAxLFxuICAgIGZyZWV6ZSA6IDEsXG4gICAgRnJlbmNoIDogMSxcbiAgICBmcmVxdWVuY3kgOiAxLFxuICAgIGZyZXF1ZW50IDogMSxcbiAgICBmcmVxdWVudGx5IDogMSxcbiAgICBmcmVzaCA6IDEsXG4gICAgZnJpZW5kIDogMSxcbiAgICBmcmllbmRseSA6IDEsXG4gICAgZnJpZW5kc2hpcCA6IDEsXG4gICAgZnJvbSA6IDEsXG4gICAgZnJvbnQgOiAxLFxuICAgIGZydWl0IDogMSxcbiAgICBmcnVzdHJhdGlvbiA6IDEsXG4gICAgZnVlbCA6IDEsXG4gICAgZnVsbCA6IDEsXG4gICAgZnVsbHkgOiAxLFxuICAgIGZ1biA6IDEsXG4gICAgZnVuY3Rpb24gOiAxLFxuICAgIGZ1bmQgOiAxLFxuICAgIGZ1bmRhbWVudGFsIDogMSxcbiAgICBmdW5kaW5nIDogMSxcbiAgICBmdW5lcmFsIDogMSxcbiAgICBmdW5ueSA6IDEsXG4gICAgZnVybml0dXJlIDogMSxcbiAgICBmdXJ0aGVybW9yZSA6IDEsXG4gICAgZnV0dXJlIDogMSxcbiAgICBnYWluIDogMSxcbiAgICBnYWxheHkgOiAxLFxuICAgIGdhbGxlcnkgOiAxLFxuICAgIGdhbWUgOiAxLFxuICAgIGdhbmcgOiAxLFxuICAgIGdhcCA6IDEsXG4gICAgZ2FyYWdlIDogMSxcbiAgICBnYXJkZW4gOiAxLFxuICAgIGdhcmxpYyA6IDEsXG4gICAgZ2FzIDogMSxcbiAgICBnYXRlIDogMSxcbiAgICBnYXRoZXIgOiAxLFxuICAgIGdheSA6IDEsXG4gICAgZ2F6ZSA6IDEsXG4gICAgZ2VhciA6IDEsXG4gICAgZ2VuZGVyIDogMSxcbiAgICBnZW5lIDogMSxcbiAgICBnZW5lcmFsIDogMSxcbiAgICBnZW5lcmFsbHkgOiAxLFxuICAgIGdlbmVyYXRlIDogMSxcbiAgICBnZW5lcmF0aW9uIDogMSxcbiAgICBnZW5ldGljIDogMSxcbiAgICBnZW50bGVtYW4gOiAxLFxuICAgIGdlbnRseSA6IDEsXG4gICAgR2VybWFuIDogMSxcbiAgICBnZXN0dXJlIDogMSxcbiAgICBnZXQgOiAxLFxuICAgIGdob3N0IDogMSxcbiAgICBnaWFudCA6IDEsXG4gICAgZ2lmdCA6IDEsXG4gICAgZ2lmdGVkIDogMSxcbiAgICBnaXJsIDogMSxcbiAgICBnaXJsZnJpZW5kIDogMSxcbiAgICBnaXZlIDogMSxcbiAgICBnaXZlbiA6IDEsXG4gICAgZ2xhZCA6IDEsXG4gICAgZ2xhbmNlIDogMSxcbiAgICBnbGFzcyA6IDEsXG4gICAgZ2xvYmFsIDogMSxcbiAgICBnbG92ZSA6IDEsXG4gICAgZ28gOiAxLFxuICAgIGdvYWwgOiAxLFxuICAgIEdvZCA6IDEsXG4gICAgZ29sZCA6IDEsXG4gICAgZ29sZGVuIDogMSxcbiAgICBnb2xmIDogMSxcbiAgICBnb29kIDogMSxcbiAgICBnb3Zlcm5tZW50IDogMSxcbiAgICBnb3Zlcm5vciA6IDEsXG4gICAgZ3JhYiA6IDEsXG4gICAgZ3JhZGUgOiAxLFxuICAgIGdyYWR1YWxseSA6IDEsXG4gICAgZ3JhZHVhdGUgOiAxLFxuICAgIGdyYWluIDogMSxcbiAgICBncmFuZCA6IDEsXG4gICAgZ3JhbmRmYXRoZXIgOiAxLFxuICAgIGdyYW5kbW90aGVyIDogMSxcbiAgICBncmFudCA6IDEsXG4gICAgZ3Jhc3MgOiAxLFxuICAgIGdyYXZlIDogMSxcbiAgICBncmF5IDogMSxcbiAgICBncmVhdCA6IDEsXG4gICAgZ3JlYXRlc3QgOiAxLFxuICAgIGdyZWVuIDogMSxcbiAgICBncm9jZXJ5IDogMSxcbiAgICBncm91bmQgOiAxLFxuICAgIGdyb3VwIDogMSxcbiAgICBncm93IDogMSxcbiAgICBncm93aW5nIDogMSxcbiAgICBncm93dGggOiAxLFxuICAgIGd1YXJhbnRlZSA6IDEsXG4gICAgZ3VhcmQgOiAxLFxuICAgIGd1ZXNzIDogMSxcbiAgICBndWVzdCA6IDEsXG4gICAgZ3VpZGUgOiAxLFxuICAgIGd1aWRlbGluZSA6IDEsXG4gICAgZ3VpbHR5IDogMSxcbiAgICBndW4gOiAxLFxuICAgIGd1eSA6IDEsXG4gICAgaGFiaXQgOiAxLFxuICAgIGhhYml0YXQgOiAxLFxuICAgIGhhaXIgOiAxLFxuICAgIGhhbGYgOiAxLFxuICAgIGhhbGwgOiAxLFxuICAgIGhhbmQgOiAxLFxuICAgIGhhbmRmdWwgOiAxLFxuICAgIGhhbmRsZSA6IDEsXG4gICAgaGFuZyA6IDEsXG4gICAgaGFwcGVuIDogMSxcbiAgICBoYXBweSA6IDEsXG4gICAgaGFyZCA6IDEsXG4gICAgaGFyZGx5IDogMSxcbiAgICBoYXQgOiAxLFxuICAgIGhhdGUgOiAxLFxuICAgIGhhdmUgOiAxLFxuICAgIGhlIDogMSxcbiAgICBoZWFkIDogMSxcbiAgICBoZWFkbGluZSA6IDEsXG4gICAgaGVhZHF1YXJ0ZXJzIDogMSxcbiAgICBoZWFsdGggOiAxLFxuICAgIGhlYWx0aHkgOiAxLFxuICAgIGhlYXIgOiAxLFxuICAgIGhlYXJpbmcgOiAxLFxuICAgIGhlYXJ0IDogMSxcbiAgICBoZWF0IDogMSxcbiAgICBoZWF2ZW4gOiAxLFxuICAgIGhlYXZpbHkgOiAxLFxuICAgIGhlYXZ5IDogMSxcbiAgICBoZWVsIDogMSxcbiAgICBoZWlnaHQgOiAxLFxuICAgIGhlbGljb3B0ZXIgOiAxLFxuICAgIGhlbGwgOiAxLFxuICAgIGhlbGxvIDogMSxcbiAgICBoZWxwIDogMSxcbiAgICBoZWxwZnVsIDogMSxcbiAgICBoZXIgOiAxLFxuICAgIGhlcmUgOiAxLFxuICAgIGhlcml0YWdlIDogMSxcbiAgICBoZXJvIDogMSxcbiAgICBoZXJzZWxmIDogMSxcbiAgICBoZXkgOiAxLFxuICAgIGhpIDogMSxcbiAgICBoaWRlIDogMSxcbiAgICBoaWdoIDogMSxcbiAgICBoaWdobGlnaHQgOiAxLFxuICAgIGhpZ2hseSA6IDEsXG4gICAgaGlnaHdheSA6IDEsXG4gICAgaGlsbCA6IDEsXG4gICAgaGltIDogMSxcbiAgICBoaW1zZWxmIDogMSxcbiAgICBoaXAgOiAxLFxuICAgIGhpcmUgOiAxLFxuICAgIGhpcyA6IDEsXG4gICAgaGlzdG9yaWFuIDogMSxcbiAgICBoaXN0b3JpYyA6IDEsXG4gICAgaGlzdG9yaWNhbCA6IDEsXG4gICAgaGlzdG9yeSA6IDEsXG4gICAgaGl0IDogMSxcbiAgICBob2xkIDogMSxcbiAgICBob2xlIDogMSxcbiAgICBob2xpZGF5IDogMSxcbiAgICBob2x5IDogMSxcbiAgICBob21lIDogMSxcbiAgICBob21lbGVzcyA6IDEsXG4gICAgaG9uZXN0IDogMSxcbiAgICBob25leSA6IDEsXG4gICAgaG9ub3IgOiAxLFxuICAgIGhvcGUgOiAxLFxuICAgIGhvcml6b24gOiAxLFxuICAgIGhvcnJvciA6IDEsXG4gICAgaG9yc2UgOiAxLFxuICAgIGhvc3BpdGFsIDogMSxcbiAgICBob3N0IDogMSxcbiAgICBob3QgOiAxLFxuICAgIGhvdGVsIDogMSxcbiAgICBob3VyIDogMSxcbiAgICBob3VzZSA6IDEsXG4gICAgaG91c2Vob2xkIDogMSxcbiAgICBob3VzaW5nIDogMSxcbiAgICBob3cgOiAxLFxuICAgIGhvd2V2ZXIgOiAxLFxuICAgIGh1Z2UgOiAxLFxuICAgIGh1bWFuIDogMSxcbiAgICBodW1vciA6IDEsXG4gICAgaHVuZHJlZCA6IDEsXG4gICAgaHVuZ3J5IDogMSxcbiAgICBodW50ZXIgOiAxLFxuICAgIGh1bnRpbmcgOiAxLFxuICAgIGh1cnQgOiAxLFxuICAgIGh1c2JhbmQgOiAxLFxuICAgIGh5cG90aGVzaXMgOiAxLFxuICAgIEkgOiAxLFxuICAgIGljZSA6IDEsXG4gICAgaWRlYSA6IDEsXG4gICAgaWRlYWwgOiAxLFxuICAgIGlkZW50aWZpY2F0aW9uIDogMSxcbiAgICBpZGVudGlmeSA6IDEsXG4gICAgaWRlbnRpdHkgOiAxLFxuICAgIGllIDogMSxcbiAgICBpZiA6IDEsXG4gICAgaWdub3JlIDogMSxcbiAgICBpbGwgOiAxLFxuICAgIGlsbGVnYWwgOiAxLFxuICAgIGlsbG5lc3MgOiAxLFxuICAgIGlsbHVzdHJhdGUgOiAxLFxuICAgIGltYWdlIDogMSxcbiAgICBpbWFnaW5hdGlvbiA6IDEsXG4gICAgaW1hZ2luZSA6IDEsXG4gICAgaW1tZWRpYXRlIDogMSxcbiAgICBpbW1lZGlhdGVseSA6IDEsXG4gICAgaW1taWdyYW50IDogMSxcbiAgICBpbW1pZ3JhdGlvbiA6IDEsXG4gICAgaW1wYWN0IDogMSxcbiAgICBpbXBsZW1lbnQgOiAxLFxuICAgIGltcGxpY2F0aW9uIDogMSxcbiAgICBpbXBseSA6IDEsXG4gICAgaW1wb3J0YW5jZSA6IDEsXG4gICAgaW1wb3J0YW50IDogMSxcbiAgICBpbXBvc2UgOiAxLFxuICAgIGltcG9zc2libGUgOiAxLFxuICAgIGltcHJlc3MgOiAxLFxuICAgIGltcHJlc3Npb24gOiAxLFxuICAgIGltcHJlc3NpdmUgOiAxLFxuICAgIGltcHJvdmUgOiAxLFxuICAgIGltcHJvdmVtZW50IDogMSxcbiAgICBpbiA6IDEsXG4gICAgaW5jZW50aXZlIDogMSxcbiAgICBpbmNpZGVudCA6IDEsXG4gICAgaW5jbHVkZSA6IDEsXG4gICAgaW5jbHVkaW5nIDogMSxcbiAgICBpbmNvbWUgOiAxLFxuICAgIGluY29ycG9yYXRlIDogMSxcbiAgICBpbmNyZWFzZSA6IDEsXG4gICAgaW5jcmVhc2VkIDogMSxcbiAgICBpbmNyZWFzaW5nIDogMSxcbiAgICBpbmNyZWFzaW5nbHkgOiAxLFxuICAgIGluY3JlZGlibGUgOiAxLFxuICAgIGluZGVlZCA6IDEsXG4gICAgaW5kZXBlbmRlbmNlIDogMSxcbiAgICBpbmRlcGVuZGVudCA6IDEsXG4gICAgaW5kZXggOiAxLFxuICAgIEluZGlhbiA6IDEsXG4gICAgaW5kaWNhdGUgOiAxLFxuICAgIGluZGljYXRpb24gOiAxLFxuICAgIGluZGl2aWR1YWwgOiAxLFxuICAgIGluZHVzdHJpYWwgOiAxLFxuICAgIGluZHVzdHJ5IDogMSxcbiAgICBpbmZhbnQgOiAxLFxuICAgIGluZmVjdGlvbiA6IDEsXG4gICAgaW5mbGF0aW9uIDogMSxcbiAgICBpbmZsdWVuY2UgOiAxLFxuICAgIGluZm9ybSA6IDEsXG4gICAgaW5mb3JtYXRpb24gOiAxLFxuICAgIGluZ3JlZGllbnQgOiAxLFxuICAgIGluaXRpYWwgOiAxLFxuICAgIGluaXRpYWxseSA6IDEsXG4gICAgaW5pdGlhdGl2ZSA6IDEsXG4gICAgaW5qdXJ5IDogMSxcbiAgICBpbm5lciA6IDEsXG4gICAgaW5ub2NlbnQgOiAxLFxuICAgIGlucXVpcnkgOiAxLFxuICAgIGluc2lkZSA6IDEsXG4gICAgaW5zaWdodCA6IDEsXG4gICAgaW5zaXN0IDogMSxcbiAgICBpbnNwaXJlIDogMSxcbiAgICBpbnN0YWxsIDogMSxcbiAgICBpbnN0YW5jZSA6IDEsXG4gICAgaW5zdGVhZCA6IDEsXG4gICAgaW5zdGl0dXRpb24gOiAxLFxuICAgIGluc3RpdHV0aW9uYWwgOiAxLFxuICAgIGluc3RydWN0aW9uIDogMSxcbiAgICBpbnN0cnVjdG9yIDogMSxcbiAgICBpbnN0cnVtZW50IDogMSxcbiAgICBpbnN1cmFuY2UgOiAxLFxuICAgIGludGVsbGVjdHVhbCA6IDEsXG4gICAgaW50ZWxsaWdlbmNlIDogMSxcbiAgICBpbnRlbmQgOiAxLFxuICAgIGludGVuc2UgOiAxLFxuICAgIGludGVuc2l0eSA6IDEsXG4gICAgaW50ZW50aW9uIDogMSxcbiAgICBpbnRlcmFjdGlvbiA6IDEsXG4gICAgaW50ZXJlc3QgOiAxLFxuICAgIGludGVyZXN0ZWQgOiAxLFxuICAgIGludGVyZXN0aW5nIDogMSxcbiAgICBpbnRlcm5hbCA6IDEsXG4gICAgaW50ZXJuYXRpb25hbCA6IDEsXG4gICAgSW50ZXJuZXQgOiAxLFxuICAgIGludGVycHJldCA6IDEsXG4gICAgaW50ZXJwcmV0YXRpb24gOiAxLFxuICAgIGludGVydmVudGlvbiA6IDEsXG4gICAgaW50ZXJ2aWV3IDogMSxcbiAgICBpbnRvIDogMSxcbiAgICBpbnRyb2R1Y2UgOiAxLFxuICAgIGludHJvZHVjdGlvbiA6IDEsXG4gICAgaW52YXNpb24gOiAxLFxuICAgIGludmVzdCA6IDEsXG4gICAgaW52ZXN0aWdhdGUgOiAxLFxuICAgIGludmVzdGlnYXRpb24gOiAxLFxuICAgIGludmVzdGlnYXRvciA6IDEsXG4gICAgaW52ZXN0bWVudCA6IDEsXG4gICAgaW52ZXN0b3IgOiAxLFxuICAgIGludml0ZSA6IDEsXG4gICAgaW52b2x2ZSA6IDEsXG4gICAgaW52b2x2ZWQgOiAxLFxuICAgIGludm9sdmVtZW50IDogMSxcbiAgICBJcmFxaSA6IDEsXG4gICAgSXJpc2ggOiAxLFxuICAgIGlyb24gOiAxLFxuICAgIElzbGFtaWMgOiAxLFxuICAgIGlzbGFuZCA6IDEsXG4gICAgSXNyYWVsaSA6IDEsXG4gICAgaXNzdWUgOiAxLFxuICAgIGl0IDogMSxcbiAgICBJdGFsaWFuIDogMSxcbiAgICBpdGVtIDogMSxcbiAgICBpdHMgOiAxLFxuICAgIGl0c2VsZiA6IDEsXG4gICAgamFja2V0IDogMSxcbiAgICBqYWlsIDogMSxcbiAgICBKYXBhbmVzZSA6IDEsXG4gICAgamV0IDogMSxcbiAgICBKZXcgOiAxLFxuICAgIEpld2lzaCA6IDEsXG4gICAgam9iIDogMSxcbiAgICBqb2luIDogMSxcbiAgICBqb2ludCA6IDEsXG4gICAgam9rZSA6IDEsXG4gICAgam91cm5hbCA6IDEsXG4gICAgam91cm5hbGlzdCA6IDEsXG4gICAgam91cm5leSA6IDEsXG4gICAgam95IDogMSxcbiAgICBqdWRnZSA6IDEsXG4gICAganVkZ21lbnQgOiAxLFxuICAgIGp1aWNlIDogMSxcbiAgICBqdW1wIDogMSxcbiAgICBqdW5pb3IgOiAxLFxuICAgIGp1cnkgOiAxLFxuICAgIGp1c3QgOiAxLFxuICAgIGp1c3RpY2UgOiAxLFxuICAgIGp1c3RpZnkgOiAxLFxuICAgIGtlZXAgOiAxLFxuICAgIGtleSA6IDEsXG4gICAga2ljayA6IDEsXG4gICAga2lkIDogMSxcbiAgICBraWxsIDogMSxcbiAgICBraWxsZXIgOiAxLFxuICAgIGtpbGxpbmcgOiAxLFxuICAgIGtpbmQgOiAxLFxuICAgIGtpbmcgOiAxLFxuICAgIGtpc3MgOiAxLFxuICAgIGtpdGNoZW4gOiAxLFxuICAgIGtuZWUgOiAxLFxuICAgIGtuaWZlIDogMSxcbiAgICBrbm9jayA6IDEsXG4gICAga25vdyA6IDEsXG4gICAga25vd2xlZGdlIDogMSxcbiAgICBsYWIgOiAxLFxuICAgIGxhYmVsIDogMSxcbiAgICBsYWJvciA6IDEsXG4gICAgbGFib3JhdG9yeSA6IDEsXG4gICAgbGFjayA6IDEsXG4gICAgbGFkeSA6IDEsXG4gICAgbGFrZSA6IDEsXG4gICAgbGFuZCA6IDEsXG4gICAgbGFuZHNjYXBlIDogMSxcbiAgICBsYW5ndWFnZSA6IDEsXG4gICAgbGFwIDogMSxcbiAgICBsYXJnZSA6IDEsXG4gICAgbGFyZ2VseSA6IDEsXG4gICAgbGFzdCA6IDEsXG4gICAgbGF0ZSA6IDEsXG4gICAgbGF0ZXIgOiAxLFxuICAgIExhdGluIDogMSxcbiAgICBsYXR0ZXIgOiAxLFxuICAgIGxhdWdoIDogMSxcbiAgICBsYXVuY2ggOiAxLFxuICAgIGxhdyA6IDEsXG4gICAgbGF3biA6IDEsXG4gICAgbGF3c3VpdCA6IDEsXG4gICAgbGF3eWVyIDogMSxcbiAgICBsYXkgOiAxLFxuICAgIGxheWVyIDogMSxcbiAgICBsZWFkIDogMSxcbiAgICBsZWFkZXIgOiAxLFxuICAgIGxlYWRlcnNoaXAgOiAxLFxuICAgIGxlYWRpbmcgOiAxLFxuICAgIGxlYWYgOiAxLFxuICAgIGxlYWd1ZSA6IDEsXG4gICAgbGVhbiA6IDEsXG4gICAgbGVhcm4gOiAxLFxuICAgIGxlYXJuaW5nIDogMSxcbiAgICBsZWFzdCA6IDEsXG4gICAgbGVhdGhlciA6IDEsXG4gICAgbGVhdmUgOiAxLFxuICAgIGxlZnQgOiAxLFxuICAgIGxlZyA6IDEsXG4gICAgbGVnYWN5IDogMSxcbiAgICBsZWdhbCA6IDEsXG4gICAgbGVnZW5kIDogMSxcbiAgICBsZWdpc2xhdGlvbiA6IDEsXG4gICAgbGVnaXRpbWF0ZSA6IDEsXG4gICAgbGVtb24gOiAxLFxuICAgIGxlbmd0aCA6IDEsXG4gICAgbGVzcyA6IDEsXG4gICAgbGVzc29uIDogMSxcbiAgICBsZXQgOiAxLFxuICAgIGxldHRlciA6IDEsXG4gICAgbGV2ZWwgOiAxLFxuICAgIGxpYmVyYWwgOiAxLFxuICAgIGxpYnJhcnkgOiAxLFxuICAgIGxpY2Vuc2UgOiAxLFxuICAgIGxpZSA6IDEsXG4gICAgbGlmZSA6IDEsXG4gICAgbGlmZXN0eWxlIDogMSxcbiAgICBsaWZldGltZSA6IDEsXG4gICAgbGlmdCA6IDEsXG4gICAgbGlnaHQgOiAxLFxuICAgIGxpa2UgOiAxLFxuICAgIGxpa2VseSA6IDEsXG4gICAgbGltaXQgOiAxLFxuICAgIGxpbWl0YXRpb24gOiAxLFxuICAgIGxpbWl0ZWQgOiAxLFxuICAgIGxpbmUgOiAxLFxuICAgIGxpbmsgOiAxLFxuICAgIGxpcCA6IDEsXG4gICAgbGlzdCA6IDEsXG4gICAgbGlzdGVuIDogMSxcbiAgICBsaXRlcmFsbHkgOiAxLFxuICAgIGxpdGVyYXJ5IDogMSxcbiAgICBsaXRlcmF0dXJlIDogMSxcbiAgICBsaXR0bGUgOiAxLFxuICAgIGxpdmUgOiAxLFxuICAgIGxpdmluZyA6IDEsXG4gICAgbG9hZCA6IDEsXG4gICAgbG9hbiA6IDEsXG4gICAgbG9jYWwgOiAxLFxuICAgIGxvY2F0ZSA6IDEsXG4gICAgbG9jYXRpb24gOiAxLFxuICAgIGxvY2sgOiAxLFxuICAgIGxvbmcgOiAxLFxuICAgIFwibG9uZy10ZXJtXCIgOiAxLFxuICAgIGxvb2sgOiAxLFxuICAgIGxvb3NlIDogMSxcbiAgICBsb3NlIDogMSxcbiAgICBsb3NzIDogMSxcbiAgICBsb3N0IDogMSxcbiAgICBsb3QgOiAxLFxuICAgIGxvdHMgOiAxLFxuICAgIGxvdWQgOiAxLFxuICAgIGxvdmUgOiAxLFxuICAgIGxvdmVseSA6IDEsXG4gICAgbG92ZXIgOiAxLFxuICAgIGxvdyA6IDEsXG4gICAgbG93ZXIgOiAxLFxuICAgIGx1Y2sgOiAxLFxuICAgIGx1Y2t5IDogMSxcbiAgICBsdW5jaCA6IDEsXG4gICAgbHVuZyA6IDEsXG4gICAgbWFjaGluZSA6IDEsXG4gICAgbWFkIDogMSxcbiAgICBtYWdhemluZSA6IDEsXG4gICAgbWFpbCA6IDEsXG4gICAgbWFpbiA6IDEsXG4gICAgbWFpbmx5IDogMSxcbiAgICBtYWludGFpbiA6IDEsXG4gICAgbWFpbnRlbmFuY2UgOiAxLFxuICAgIG1ham9yIDogMSxcbiAgICBtYWpvcml0eSA6IDEsXG4gICAgbWFrZSA6IDEsXG4gICAgbWFrZXIgOiAxLFxuICAgIG1ha2V1cCA6IDEsXG4gICAgbWFsZSA6IDEsXG4gICAgbWFsbCA6IDEsXG4gICAgbWFuIDogMSxcbiAgICBtYW5hZ2UgOiAxLFxuICAgIG1hbmFnZW1lbnQgOiAxLFxuICAgIG1hbmFnZXIgOiAxLFxuICAgIG1hbm5lciA6IDEsXG4gICAgbWFudWZhY3R1cmVyIDogMSxcbiAgICBtYW51ZmFjdHVyaW5nIDogMSxcbiAgICBtYW55IDogMSxcbiAgICBtYXAgOiAxLFxuICAgIG1hcmdpbiA6IDEsXG4gICAgbWFyayA6IDEsXG4gICAgbWFya2V0IDogMSxcbiAgICBtYXJrZXRpbmcgOiAxLFxuICAgIG1hcnJpYWdlIDogMSxcbiAgICBtYXJyaWVkIDogMSxcbiAgICBtYXJyeSA6IDEsXG4gICAgbWFzayA6IDEsXG4gICAgbWFzcyA6IDEsXG4gICAgbWFzc2l2ZSA6IDEsXG4gICAgbWFzdGVyIDogMSxcbiAgICBtYXRjaCA6IDEsXG4gICAgbWF0ZXJpYWwgOiAxLFxuICAgIG1hdGggOiAxLFxuICAgIG1hdHRlciA6IDEsXG4gICAgbWF5IDogMSxcbiAgICBtYXliZSA6IDEsXG4gICAgbWF5b3IgOiAxLFxuICAgIG1lIDogMSxcbiAgICBtZWFsIDogMSxcbiAgICBtZWFuIDogMSxcbiAgICBtZWFuaW5nIDogMSxcbiAgICBtZWFud2hpbGUgOiAxLFxuICAgIG1lYXN1cmUgOiAxLFxuICAgIG1lYXN1cmVtZW50IDogMSxcbiAgICBtZWF0IDogMSxcbiAgICBtZWNoYW5pc20gOiAxLFxuICAgIG1lZGlhIDogMSxcbiAgICBtZWRpY2FsIDogMSxcbiAgICBtZWRpY2F0aW9uIDogMSxcbiAgICBtZWRpY2luZSA6IDEsXG4gICAgbWVkaXVtIDogMSxcbiAgICBtZWV0IDogMSxcbiAgICBtZWV0aW5nIDogMSxcbiAgICBtZW1iZXIgOiAxLFxuICAgIG1lbWJlcnNoaXAgOiAxLFxuICAgIG1lbW9yeSA6IDEsXG4gICAgbWVudGFsIDogMSxcbiAgICBtZW50aW9uIDogMSxcbiAgICBtZW51IDogMSxcbiAgICBtZXJlIDogMSxcbiAgICBtZXJlbHkgOiAxLFxuICAgIG1lc3MgOiAxLFxuICAgIG1lc3NhZ2UgOiAxLFxuICAgIG1ldGFsIDogMSxcbiAgICBtZXRlciA6IDEsXG4gICAgbWV0aG9kIDogMSxcbiAgICBNZXhpY2FuIDogMSxcbiAgICBtaWRkbGUgOiAxLFxuICAgIG1pZ2h0IDogMSxcbiAgICBtaWxpdGFyeSA6IDEsXG4gICAgbWlsayA6IDEsXG4gICAgbWlsbGlvbiA6IDEsXG4gICAgbWluZCA6IDEsXG4gICAgbWluZSA6IDEsXG4gICAgbWluaXN0ZXIgOiAxLFxuICAgIG1pbm9yIDogMSxcbiAgICBtaW5vcml0eSA6IDEsXG4gICAgbWludXRlIDogMSxcbiAgICBtaXJhY2xlIDogMSxcbiAgICBtaXJyb3IgOiAxLFxuICAgIG1pc3MgOiAxLFxuICAgIG1pc3NpbGUgOiAxLFxuICAgIG1pc3Npb24gOiAxLFxuICAgIG1pc3Rha2UgOiAxLFxuICAgIG1peCA6IDEsXG4gICAgbWl4dHVyZSA6IDEsXG4gICAgXCJtbS1obW1cIiA6IDEsXG4gICAgbW9kZSA6IDEsXG4gICAgbW9kZWwgOiAxLFxuICAgIG1vZGVyYXRlIDogMSxcbiAgICBtb2Rlcm4gOiAxLFxuICAgIG1vZGVzdCA6IDEsXG4gICAgbW9tIDogMSxcbiAgICBtb21lbnQgOiAxLFxuICAgIG1vbmV5IDogMSxcbiAgICBtb25pdG9yIDogMSxcbiAgICBtb250aCA6IDEsXG4gICAgbW9vZCA6IDEsXG4gICAgbW9vbiA6IDEsXG4gICAgbW9yYWwgOiAxLFxuICAgIG1vcmUgOiAxLFxuICAgIG1vcmVvdmVyIDogMSxcbiAgICBtb3JuaW5nIDogMSxcbiAgICBtb3J0Z2FnZSA6IDEsXG4gICAgbW9zdCA6IDEsXG4gICAgbW9zdGx5IDogMSxcbiAgICBtb3RoZXIgOiAxLFxuICAgIG1vdGlvbiA6IDEsXG4gICAgbW90aXZhdGlvbiA6IDEsXG4gICAgbW90b3IgOiAxLFxuICAgIG1vdW50IDogMSxcbiAgICBtb3VudGFpbiA6IDEsXG4gICAgbW91c2UgOiAxLFxuICAgIG1vdXRoIDogMSxcbiAgICBtb3ZlIDogMSxcbiAgICBtb3ZlbWVudCA6IDEsXG4gICAgbW92aWUgOiAxLFxuICAgIE1yIDogMSxcbiAgICBNcnMgOiAxLFxuICAgIE1zIDogMSxcbiAgICBtdWNoIDogMSxcbiAgICBtdWx0aXBsZSA6IDEsXG4gICAgbXVyZGVyIDogMSxcbiAgICBtdXNjbGUgOiAxLFxuICAgIG11c2V1bSA6IDEsXG4gICAgbXVzaWMgOiAxLFxuICAgIG11c2ljYWwgOiAxLFxuICAgIG11c2ljaWFuIDogMSxcbiAgICBNdXNsaW0gOiAxLFxuICAgIG11c3QgOiAxLFxuICAgIG11dHVhbCA6IDEsXG4gICAgbXkgOiAxLFxuICAgIG15c2VsZiA6IDEsXG4gICAgbXlzdGVyeSA6IDEsXG4gICAgbXl0aCA6IDEsXG4gICAgbmFrZWQgOiAxLFxuICAgIG5hbWUgOiAxLFxuICAgIG5hcnJhdGl2ZSA6IDEsXG4gICAgbmFycm93IDogMSxcbiAgICBuYXRpb24gOiAxLFxuICAgIG5hdGlvbmFsIDogMSxcbiAgICBuYXRpdmUgOiAxLFxuICAgIG5hdHVyYWwgOiAxLFxuICAgIG5hdHVyYWxseSA6IDEsXG4gICAgbmF0dXJlIDogMSxcbiAgICBuZWFyIDogMSxcbiAgICBuZWFyYnkgOiAxLFxuICAgIG5lYXJseSA6IDEsXG4gICAgbmVjZXNzYXJpbHkgOiAxLFxuICAgIG5lY2Vzc2FyeSA6IDEsXG4gICAgbmVjayA6IDEsXG4gICAgbmVlZCA6IDEsXG4gICAgbmVnYXRpdmUgOiAxLFxuICAgIG5lZ290aWF0ZSA6IDEsXG4gICAgbmVnb3RpYXRpb24gOiAxLFxuICAgIG5laWdoYm9yIDogMSxcbiAgICBuZWlnaGJvcmhvb2QgOiAxLFxuICAgIG5laXRoZXIgOiAxLFxuICAgIG5lcnZlIDogMSxcbiAgICBuZXJ2b3VzIDogMSxcbiAgICBuZXQgOiAxLFxuICAgIG5ldHdvcmsgOiAxLFxuICAgIG5ldmVyIDogMSxcbiAgICBuZXZlcnRoZWxlc3MgOiAxLFxuICAgIG5ldyA6IDEsXG4gICAgbmV3bHkgOiAxLFxuICAgIG5ld3MgOiAxLFxuICAgIG5ld3NwYXBlciA6IDEsXG4gICAgbmV4dCA6IDEsXG4gICAgbmljZSA6IDEsXG4gICAgbmlnaHQgOiAxLFxuICAgIG5pbmUgOiAxLFxuICAgIG5vIDogMSxcbiAgICBub2JvZHkgOiAxLFxuICAgIG5vZCA6IDEsXG4gICAgbm9pc2UgOiAxLFxuICAgIG5vbWluYXRpb24gOiAxLFxuICAgIG5vbmUgOiAxLFxuICAgIG5vbmV0aGVsZXNzIDogMSxcbiAgICBub3IgOiAxLFxuICAgIG5vcm1hbCA6IDEsXG4gICAgbm9ybWFsbHkgOiAxLFxuICAgIG5vcnRoIDogMSxcbiAgICBub3J0aGVybiA6IDEsXG4gICAgbm9zZSA6IDEsXG4gICAgbm90IDogMSxcbiAgICBub3RlIDogMSxcbiAgICBub3RoaW5nIDogMSxcbiAgICBub3RpY2UgOiAxLFxuICAgIG5vdGlvbiA6IDEsXG4gICAgbm92ZWwgOiAxLFxuICAgIG5vdyA6IDEsXG4gICAgbm93aGVyZSA6IDEsXG4gICAgXCJuJ3RcIiA6IDEsXG4gICAgbnVjbGVhciA6IDEsXG4gICAgbnVtYmVyIDogMSxcbiAgICBudW1lcm91cyA6IDEsXG4gICAgbnVyc2UgOiAxLFxuICAgIG51dCA6IDEsXG4gICAgb2JqZWN0IDogMSxcbiAgICBvYmplY3RpdmUgOiAxLFxuICAgIG9ibGlnYXRpb24gOiAxLFxuICAgIG9ic2VydmF0aW9uIDogMSxcbiAgICBvYnNlcnZlIDogMSxcbiAgICBvYnNlcnZlciA6IDEsXG4gICAgb2J0YWluIDogMSxcbiAgICBvYnZpb3VzIDogMSxcbiAgICBvYnZpb3VzbHkgOiAxLFxuICAgIG9jY2FzaW9uIDogMSxcbiAgICBvY2Nhc2lvbmFsbHkgOiAxLFxuICAgIG9jY3VwYXRpb24gOiAxLFxuICAgIG9jY3VweSA6IDEsXG4gICAgb2NjdXIgOiAxLFxuICAgIG9jZWFuIDogMSxcbiAgICBvZGQgOiAxLFxuICAgIG9kZHMgOiAxLFxuICAgIG9mIDogMSxcbiAgICBvZmYgOiAxLFxuICAgIG9mZmVuc2UgOiAxLFxuICAgIG9mZmVuc2l2ZSA6IDEsXG4gICAgb2ZmZXIgOiAxLFxuICAgIG9mZmljZSA6IDEsXG4gICAgb2ZmaWNlciA6IDEsXG4gICAgb2ZmaWNpYWwgOiAxLFxuICAgIG9mdGVuIDogMSxcbiAgICBvaCA6IDEsXG4gICAgb2lsIDogMSxcbiAgICBvayA6IDEsXG4gICAgb2theSA6IDEsXG4gICAgb2xkIDogMSxcbiAgICBPbHltcGljIDogMSxcbiAgICBvbiA6IDEsXG4gICAgb25jZSA6IDEsXG4gICAgb25lIDogMSxcbiAgICBvbmdvaW5nIDogMSxcbiAgICBvbmlvbiA6IDEsXG4gICAgb25saW5lIDogMSxcbiAgICBvbmx5IDogMSxcbiAgICBvbnRvIDogMSxcbiAgICBvcGVuIDogMSxcbiAgICBvcGVuaW5nIDogMSxcbiAgICBvcGVyYXRlIDogMSxcbiAgICBvcGVyYXRpbmcgOiAxLFxuICAgIG9wZXJhdGlvbiA6IDEsXG4gICAgb3BlcmF0b3IgOiAxLFxuICAgIG9waW5pb24gOiAxLFxuICAgIG9wcG9uZW50IDogMSxcbiAgICBvcHBvcnR1bml0eSA6IDEsXG4gICAgb3Bwb3NlIDogMSxcbiAgICBvcHBvc2l0ZSA6IDEsXG4gICAgb3Bwb3NpdGlvbiA6IDEsXG4gICAgb3B0aW9uIDogMSxcbiAgICBvciA6IDEsXG4gICAgb3JhbmdlIDogMSxcbiAgICBvcmRlciA6IDEsXG4gICAgb3JkaW5hcnkgOiAxLFxuICAgIG9yZ2FuaWMgOiAxLFxuICAgIG9yZ2FuaXphdGlvbiA6IDEsXG4gICAgb3JnYW5pemUgOiAxLFxuICAgIG9yaWVudGF0aW9uIDogMSxcbiAgICBvcmlnaW4gOiAxLFxuICAgIG9yaWdpbmFsIDogMSxcbiAgICBvcmlnaW5hbGx5IDogMSxcbiAgICBvdGhlciA6IDEsXG4gICAgb3RoZXJzIDogMSxcbiAgICBvdGhlcndpc2UgOiAxLFxuICAgIG91Z2h0IDogMSxcbiAgICBvdXIgOiAxLFxuICAgIG91cnNlbHZlcyA6IDEsXG4gICAgb3V0IDogMSxcbiAgICBvdXRjb21lIDogMSxcbiAgICBvdXRzaWRlIDogMSxcbiAgICBvdmVuIDogMSxcbiAgICBvdmVyIDogMSxcbiAgICBvdmVyYWxsIDogMSxcbiAgICBvdmVyY29tZSA6IDEsXG4gICAgb3Zlcmxvb2sgOiAxLFxuICAgIG93ZSA6IDEsXG4gICAgb3duIDogMSxcbiAgICBvd25lciA6IDEsXG4gICAgcGFjZSA6IDEsXG4gICAgcGFjayA6IDEsXG4gICAgcGFja2FnZSA6IDEsXG4gICAgcGFnZSA6IDEsXG4gICAgcGFpbiA6IDEsXG4gICAgcGFpbmZ1bCA6IDEsXG4gICAgcGFpbnQgOiAxLFxuICAgIHBhaW50ZXIgOiAxLFxuICAgIHBhaW50aW5nIDogMSxcbiAgICBwYWlyIDogMSxcbiAgICBwYWxlIDogMSxcbiAgICBQYWxlc3RpbmlhbiA6IDEsXG4gICAgcGFsbSA6IDEsXG4gICAgcGFuIDogMSxcbiAgICBwYW5lbCA6IDEsXG4gICAgcGFudCA6IDEsXG4gICAgcGFwZXIgOiAxLFxuICAgIHBhcmVudCA6IDEsXG4gICAgcGFyayA6IDEsXG4gICAgcGFya2luZyA6IDEsXG4gICAgcGFydCA6IDEsXG4gICAgcGFydGljaXBhbnQgOiAxLFxuICAgIHBhcnRpY2lwYXRlIDogMSxcbiAgICBwYXJ0aWNpcGF0aW9uIDogMSxcbiAgICBwYXJ0aWN1bGFyIDogMSxcbiAgICBwYXJ0aWN1bGFybHkgOiAxLFxuICAgIHBhcnRseSA6IDEsXG4gICAgcGFydG5lciA6IDEsXG4gICAgcGFydG5lcnNoaXAgOiAxLFxuICAgIHBhcnR5IDogMSxcbiAgICBwYXNzIDogMSxcbiAgICBwYXNzYWdlIDogMSxcbiAgICBwYXNzZW5nZXIgOiAxLFxuICAgIHBhc3Npb24gOiAxLFxuICAgIHBhc3QgOiAxLFxuICAgIHBhdGNoIDogMSxcbiAgICBwYXRoIDogMSxcbiAgICBwYXRpZW50IDogMSxcbiAgICBwYXR0ZXJuIDogMSxcbiAgICBwYXVzZSA6IDEsXG4gICAgcGF5IDogMSxcbiAgICBwYXltZW50IDogMSxcbiAgICBQQyA6IDEsXG4gICAgcGVhY2UgOiAxLFxuICAgIHBlYWsgOiAxLFxuICAgIHBlZXIgOiAxLFxuICAgIHBlbmFsdHkgOiAxLFxuICAgIHBlb3BsZSA6IDEsXG4gICAgcGVwcGVyIDogMSxcbiAgICBwZXIgOiAxLFxuICAgIHBlcmNlaXZlIDogMSxcbiAgICBwZXJjZW50YWdlIDogMSxcbiAgICBwZXJjZXB0aW9uIDogMSxcbiAgICBwZXJmZWN0IDogMSxcbiAgICBwZXJmZWN0bHkgOiAxLFxuICAgIHBlcmZvcm0gOiAxLFxuICAgIHBlcmZvcm1hbmNlIDogMSxcbiAgICBwZXJoYXBzIDogMSxcbiAgICBwZXJpb2QgOiAxLFxuICAgIHBlcm1hbmVudCA6IDEsXG4gICAgcGVybWlzc2lvbiA6IDEsXG4gICAgcGVybWl0IDogMSxcbiAgICBwZXJzb24gOiAxLFxuICAgIHBlcnNvbmFsIDogMSxcbiAgICBwZXJzb25hbGl0eSA6IDEsXG4gICAgcGVyc29uYWxseSA6IDEsXG4gICAgcGVyc29ubmVsIDogMSxcbiAgICBwZXJzcGVjdGl2ZSA6IDEsXG4gICAgcGVyc3VhZGUgOiAxLFxuICAgIHBldCA6IDEsXG4gICAgcGhhc2UgOiAxLFxuICAgIHBoZW5vbWVub24gOiAxLFxuICAgIHBoaWxvc29waHkgOiAxLFxuICAgIHBob25lIDogMSxcbiAgICBwaG90byA6IDEsXG4gICAgcGhvdG9ncmFwaCA6IDEsXG4gICAgcGhvdG9ncmFwaGVyIDogMSxcbiAgICBwaHJhc2UgOiAxLFxuICAgIHBoeXNpY2FsIDogMSxcbiAgICBwaHlzaWNhbGx5IDogMSxcbiAgICBwaHlzaWNpYW4gOiAxLFxuICAgIHBpYW5vIDogMSxcbiAgICBwaWNrIDogMSxcbiAgICBwaWN0dXJlIDogMSxcbiAgICBwaWUgOiAxLFxuICAgIHBpZWNlIDogMSxcbiAgICBwaWxlIDogMSxcbiAgICBwaWxvdCA6IDEsXG4gICAgcGluZSA6IDEsXG4gICAgcGluayA6IDEsXG4gICAgcGlwZSA6IDEsXG4gICAgcGl0Y2ggOiAxLFxuICAgIHBsYWNlIDogMSxcbiAgICBwbGFuIDogMSxcbiAgICBwbGFuZSA6IDEsXG4gICAgcGxhbmV0IDogMSxcbiAgICBwbGFubmluZyA6IDEsXG4gICAgcGxhbnQgOiAxLFxuICAgIHBsYXN0aWMgOiAxLFxuICAgIHBsYXRlIDogMSxcbiAgICBwbGF0Zm9ybSA6IDEsXG4gICAgcGxheSA6IDEsXG4gICAgcGxheWVyIDogMSxcbiAgICBwbGVhc2UgOiAxLFxuICAgIHBsZWFzdXJlIDogMSxcbiAgICBwbGVudHkgOiAxLFxuICAgIHBsb3QgOiAxLFxuICAgIHBsdXMgOiAxLFxuICAgIFBNIDogMSxcbiAgICBwb2NrZXQgOiAxLFxuICAgIHBvZW0gOiAxLFxuICAgIHBvZXQgOiAxLFxuICAgIHBvZXRyeSA6IDEsXG4gICAgcG9pbnQgOiAxLFxuICAgIHBvbGUgOiAxLFxuICAgIHBvbGljZSA6IDEsXG4gICAgcG9saWN5IDogMSxcbiAgICBwb2xpdGljYWwgOiAxLFxuICAgIHBvbGl0aWNhbGx5IDogMSxcbiAgICBwb2xpdGljaWFuIDogMSxcbiAgICBwb2xpdGljcyA6IDEsXG4gICAgcG9sbCA6IDEsXG4gICAgcG9sbHV0aW9uIDogMSxcbiAgICBwb29sIDogMSxcbiAgICBwb29yIDogMSxcbiAgICBwb3AgOiAxLFxuICAgIHBvcHVsYXIgOiAxLFxuICAgIHBvcHVsYXRpb24gOiAxLFxuICAgIHBvcmNoIDogMSxcbiAgICBwb3J0IDogMSxcbiAgICBwb3J0aW9uIDogMSxcbiAgICBwb3J0cmFpdCA6IDEsXG4gICAgcG9ydHJheSA6IDEsXG4gICAgcG9zZSA6IDEsXG4gICAgcG9zaXRpb24gOiAxLFxuICAgIHBvc2l0aXZlIDogMSxcbiAgICBwb3NzZXNzIDogMSxcbiAgICBwb3NzaWJpbGl0eSA6IDEsXG4gICAgcG9zc2libGUgOiAxLFxuICAgIHBvc3NpYmx5IDogMSxcbiAgICBwb3N0IDogMSxcbiAgICBwb3QgOiAxLFxuICAgIHBvdGF0byA6IDEsXG4gICAgcG90ZW50aWFsIDogMSxcbiAgICBwb3RlbnRpYWxseSA6IDEsXG4gICAgcG91bmQgOiAxLFxuICAgIHBvdXIgOiAxLFxuICAgIHBvdmVydHkgOiAxLFxuICAgIHBvd2RlciA6IDEsXG4gICAgcG93ZXIgOiAxLFxuICAgIHBvd2VyZnVsIDogMSxcbiAgICBwcmFjdGljYWwgOiAxLFxuICAgIHByYWN0aWNlIDogMSxcbiAgICBwcmF5IDogMSxcbiAgICBwcmF5ZXIgOiAxLFxuICAgIHByZWNpc2VseSA6IDEsXG4gICAgcHJlZGljdCA6IDEsXG4gICAgcHJlZmVyIDogMSxcbiAgICBwcmVmZXJlbmNlIDogMSxcbiAgICBwcmVnbmFuY3kgOiAxLFxuICAgIHByZWduYW50IDogMSxcbiAgICBwcmVwYXJhdGlvbiA6IDEsXG4gICAgcHJlcGFyZSA6IDEsXG4gICAgcHJlc2NyaXB0aW9uIDogMSxcbiAgICBwcmVzZW5jZSA6IDEsXG4gICAgcHJlc2VudCA6IDEsXG4gICAgcHJlc2VudGF0aW9uIDogMSxcbiAgICBwcmVzZXJ2ZSA6IDEsXG4gICAgcHJlc2lkZW50IDogMSxcbiAgICBwcmVzaWRlbnRpYWwgOiAxLFxuICAgIHByZXNzIDogMSxcbiAgICBwcmVzc3VyZSA6IDEsXG4gICAgcHJldGVuZCA6IDEsXG4gICAgcHJldHR5IDogMSxcbiAgICBwcmV2ZW50IDogMSxcbiAgICBwcmV2aW91cyA6IDEsXG4gICAgcHJldmlvdXNseSA6IDEsXG4gICAgcHJpY2UgOiAxLFxuICAgIHByaWRlIDogMSxcbiAgICBwcmllc3QgOiAxLFxuICAgIHByaW1hcmlseSA6IDEsXG4gICAgcHJpbWFyeSA6IDEsXG4gICAgcHJpbWUgOiAxLFxuICAgIHByaW5jaXBhbCA6IDEsXG4gICAgcHJpbmNpcGxlIDogMSxcbiAgICBwcmludCA6IDEsXG4gICAgcHJpb3IgOiAxLFxuICAgIHByaW9yaXR5IDogMSxcbiAgICBwcmlzb24gOiAxLFxuICAgIHByaXNvbmVyIDogMSxcbiAgICBwcml2YWN5IDogMSxcbiAgICBwcml2YXRlIDogMSxcbiAgICBwcm9iYWJseSA6IDEsXG4gICAgcHJvYmxlbSA6IDEsXG4gICAgcHJvY2VkdXJlIDogMSxcbiAgICBwcm9jZWVkIDogMSxcbiAgICBwcm9jZXNzIDogMSxcbiAgICBwcm9kdWNlIDogMSxcbiAgICBwcm9kdWNlciA6IDEsXG4gICAgcHJvZHVjdCA6IDEsXG4gICAgcHJvZHVjdGlvbiA6IDEsXG4gICAgcHJvZmVzc2lvbiA6IDEsXG4gICAgcHJvZmVzc2lvbmFsIDogMSxcbiAgICBwcm9mZXNzb3IgOiAxLFxuICAgIHByb2ZpbGUgOiAxLFxuICAgIHByb2ZpdCA6IDEsXG4gICAgcHJvZ3JhbSA6IDEsXG4gICAgcHJvZ3Jlc3MgOiAxLFxuICAgIHByb2plY3QgOiAxLFxuICAgIHByb21pbmVudCA6IDEsXG4gICAgcHJvbWlzZSA6IDEsXG4gICAgcHJvbW90ZSA6IDEsXG4gICAgcHJvbXB0IDogMSxcbiAgICBwcm9vZiA6IDEsXG4gICAgcHJvcGVyIDogMSxcbiAgICBwcm9wZXJseSA6IDEsXG4gICAgcHJvcGVydHkgOiAxLFxuICAgIHByb3BvcnRpb24gOiAxLFxuICAgIHByb3Bvc2FsIDogMSxcbiAgICBwcm9wb3NlIDogMSxcbiAgICBwcm9wb3NlZCA6IDEsXG4gICAgcHJvc2VjdXRvciA6IDEsXG4gICAgcHJvc3BlY3QgOiAxLFxuICAgIHByb3RlY3QgOiAxLFxuICAgIHByb3RlY3Rpb24gOiAxLFxuICAgIHByb3RlaW4gOiAxLFxuICAgIHByb3Rlc3QgOiAxLFxuICAgIHByb3VkIDogMSxcbiAgICBwcm92ZSA6IDEsXG4gICAgcHJvdmlkZSA6IDEsXG4gICAgcHJvdmlkZXIgOiAxLFxuICAgIHByb3ZpbmNlIDogMSxcbiAgICBwcm92aXNpb24gOiAxLFxuICAgIHBzeWNob2xvZ2ljYWwgOiAxLFxuICAgIHBzeWNob2xvZ2lzdCA6IDEsXG4gICAgcHN5Y2hvbG9neSA6IDEsXG4gICAgcHVibGljIDogMSxcbiAgICBwdWJsaWNhdGlvbiA6IDEsXG4gICAgcHVibGljbHkgOiAxLFxuICAgIHB1Ymxpc2ggOiAxLFxuICAgIHB1Ymxpc2hlciA6IDEsXG4gICAgcHVsbCA6IDEsXG4gICAgcHVuaXNobWVudCA6IDEsXG4gICAgcHVyY2hhc2UgOiAxLFxuICAgIHB1cmUgOiAxLFxuICAgIHB1cnBvc2UgOiAxLFxuICAgIHB1cnN1ZSA6IDEsXG4gICAgcHVzaCA6IDEsXG4gICAgcHV0IDogMSxcblxuICB9OyIsIlxuLy8gaHR0cHM6Ly93d3cuZWYuY29tL3d3ZW4vZW5nbGlzaC1yZXNvdXJjZXMvZW5nbGlzaC12b2NhYnVsYXJ5L3RvcC0zMDAwLXdvcmRzL1xuXG5leHBvcnQgY29uc3QgVGhlTW9zdENvbW1vbjMwMDAgPSB7XG5cbiAgcXVhbGlmeSA6IDEsXG4gIHF1YWxpdHkgOiAxLFxuICBxdWFydGVyIDogMSxcbiAgcXVhcnRlcmJhY2sgOiAxLFxuICBxdWVzdGlvbiA6IDEsXG4gIHF1aWNrIDogMSxcbiAgcXVpY2tseSA6IDEsXG4gIHF1aWV0IDogMSxcbiAgcXVpZXRseSA6IDEsXG4gIHF1aXQgOiAxLFxuICBxdWl0ZSA6IDEsXG4gIHF1b3RlIDogMSxcbiAgcmFjZSA6IDEsXG4gIHJhY2lhbCA6IDEsXG4gIHJhZGljYWwgOiAxLFxuICByYWRpbyA6IDEsXG4gIHJhaWwgOiAxLFxuICByYWluIDogMSxcbiAgcmFpc2UgOiAxLFxuICByYW5nZSA6IDEsXG4gIHJhbmsgOiAxLFxuICByYXBpZCA6IDEsXG4gIHJhcGlkbHkgOiAxLFxuICByYXJlIDogMSxcbiAgcmFyZWx5IDogMSxcbiAgcmF0ZSA6IDEsXG4gIHJhdGhlciA6IDEsXG4gIHJhdGluZyA6IDEsXG4gIHJhdGlvIDogMSxcbiAgcmF3IDogMSxcbiAgcmVhY2ggOiAxLFxuICByZWFjdCA6IDEsXG4gIHJlYWN0aW9uIDogMSxcbiAgcmVhZCA6IDEsXG4gIHJlYWRlciA6IDEsXG4gIHJlYWRpbmcgOiAxLFxuICByZWFkeSA6IDEsXG4gIHJlYWwgOiAxLFxuICByZWFsaXR5IDogMSxcbiAgcmVhbGl6ZSA6IDEsXG4gIHJlYWxseSA6IDEsXG4gIHJlYXNvbiA6IDEsXG4gIHJlYXNvbmFibGUgOiAxLFxuICByZWNhbGwgOiAxLFxuICByZWNlaXZlIDogMSxcbiAgcmVjZW50IDogMSxcbiAgcmVjZW50bHkgOiAxLFxuICByZWNpcGUgOiAxLFxuICByZWNvZ25pdGlvbiA6IDEsXG4gIHJlY29nbml6ZSA6IDEsXG4gIHJlY29tbWVuZCA6IDEsXG4gIHJlY29tbWVuZGF0aW9uIDogMSxcbiAgcmVjb3JkIDogMSxcbiAgcmVjb3JkaW5nIDogMSxcbiAgcmVjb3ZlciA6IDEsXG4gIHJlY292ZXJ5IDogMSxcbiAgcmVjcnVpdCA6IDEsXG4gIHJlZCA6IDEsXG4gIHJlZHVjZSA6IDEsXG4gIHJlZHVjdGlvbiA6IDEsXG4gIHJlZmVyIDogMSxcbiAgcmVmZXJlbmNlIDogMSxcbiAgcmVmbGVjdCA6IDEsXG4gIHJlZmxlY3Rpb24gOiAxLFxuICByZWZvcm0gOiAxLFxuICByZWZ1Z2VlIDogMSxcbiAgcmVmdXNlIDogMSxcbiAgcmVnYXJkIDogMSxcbiAgcmVnYXJkaW5nIDogMSxcbiAgcmVnYXJkbGVzcyA6IDEsXG4gIHJlZ2ltZSA6IDEsXG4gIHJlZ2lvbiA6IDEsXG4gIHJlZ2lvbmFsIDogMSxcbiAgcmVnaXN0ZXIgOiAxLFxuICByZWd1bGFyIDogMSxcbiAgcmVndWxhcmx5IDogMSxcbiAgcmVndWxhdGUgOiAxLFxuICByZWd1bGF0aW9uIDogMSxcbiAgcmVpbmZvcmNlIDogMSxcbiAgcmVqZWN0IDogMSxcbiAgcmVsYXRlIDogMSxcbiAgcmVsYXRpb24gOiAxLFxuICByZWxhdGlvbnNoaXAgOiAxLFxuICByZWxhdGl2ZSA6IDEsXG4gIHJlbGF0aXZlbHkgOiAxLFxuICByZWxheCA6IDEsXG4gIHJlbGVhc2UgOiAxLFxuICByZWxldmFudCA6IDEsXG4gIHJlbGllZiA6IDEsXG4gIHJlbGlnaW9uIDogMSxcbiAgcmVsaWdpb3VzIDogMSxcbiAgcmVseSA6IDEsXG4gIHJlbWFpbiA6IDEsXG4gIHJlbWFpbmluZyA6IDEsXG4gIHJlbWFya2FibGUgOiAxLFxuICByZW1lbWJlciA6IDEsXG4gIHJlbWluZCA6IDEsXG4gIHJlbW90ZSA6IDEsXG4gIHJlbW92ZSA6IDEsXG4gIHJlcGVhdCA6IDEsXG4gIHJlcGVhdGVkbHkgOiAxLFxuICByZXBsYWNlIDogMSxcbiAgcmVwbHkgOiAxLFxuICByZXBvcnQgOiAxLFxuICByZXBvcnRlciA6IDEsXG4gIHJlcHJlc2VudCA6IDEsXG4gIHJlcHJlc2VudGF0aW9uIDogMSxcbiAgcmVwcmVzZW50YXRpdmUgOiAxLFxuICBSZXB1YmxpY2FuIDogMSxcbiAgcmVwdXRhdGlvbiA6IDEsXG4gIHJlcXVlc3QgOiAxLFxuICByZXF1aXJlIDogMSxcbiAgcmVxdWlyZW1lbnQgOiAxLFxuICByZXNlYXJjaCA6IDEsXG4gIHJlc2VhcmNoZXIgOiAxLFxuICByZXNlbWJsZSA6IDEsXG4gIHJlc2VydmF0aW9uIDogMSxcbiAgcmVzaWRlbnQgOiAxLFxuICByZXNpc3QgOiAxLFxuICByZXNpc3RhbmNlIDogMSxcbiAgcmVzb2x1dGlvbiA6IDEsXG4gIHJlc29sdmUgOiAxLFxuICByZXNvcnQgOiAxLFxuICByZXNvdXJjZSA6IDEsXG4gIHJlc3BlY3QgOiAxLFxuICByZXNwb25kIDogMSxcbiAgcmVzcG9uZGVudCA6IDEsXG4gIHJlc3BvbnNlIDogMSxcbiAgcmVzcG9uc2liaWxpdHkgOiAxLFxuICByZXNwb25zaWJsZSA6IDEsXG4gIHJlc3QgOiAxLFxuICByZXN0YXVyYW50IDogMSxcbiAgcmVzdG9yZSA6IDEsXG4gIHJlc3RyaWN0aW9uIDogMSxcbiAgcmVzdWx0IDogMSxcbiAgcmV0YWluIDogMSxcbiAgcmV0aXJlIDogMSxcbiAgcmV0aXJlbWVudCA6IDEsXG4gIHJldHVybiA6IDEsXG4gIHJldmVhbCA6IDEsXG4gIHJldmVudWUgOiAxLFxuICByZXZpZXcgOiAxLFxuICByZXZvbHV0aW9uIDogMSxcbiAgcmh5dGhtIDogMSxcbiAgcmljZSA6IDEsXG4gIHJpY2ggOiAxLFxuICByaWQgOiAxLFxuICByaWRlIDogMSxcbiAgcmlmbGUgOiAxLFxuICByaWdodCA6IDEsXG4gIHJpbmcgOiAxLFxuICByaXNlIDogMSxcbiAgcmlzayA6IDEsXG4gIHJpdmVyIDogMSxcbiAgcm9hZCA6IDEsXG4gIHJvY2sgOiAxLFxuICByb2xlIDogMSxcbiAgcm9sbCA6IDEsXG4gIHJvbWFudGljIDogMSxcbiAgcm9vZiA6IDEsXG4gIHJvb20gOiAxLFxuICByb290IDogMSxcbiAgcm9wZSA6IDEsXG4gIHJvc2UgOiAxLFxuICByb3VnaCA6IDEsXG4gIHJvdWdobHkgOiAxLFxuICByb3VuZCA6IDEsXG4gIHJvdXRlIDogMSxcbiAgcm91dGluZSA6IDEsXG4gIHJvdyA6IDEsXG4gIHJ1YiA6IDEsXG4gIHJ1bGUgOiAxLFxuICBydW4gOiAxLFxuICBydW5uaW5nIDogMSxcbiAgcnVyYWwgOiAxLFxuICBydXNoIDogMSxcbiAgUnVzc2lhbiA6IDEsXG4gIHNhY3JlZCA6IDEsXG4gIHNhZCA6IDEsXG4gIHNhZmUgOiAxLFxuICBzYWZldHkgOiAxLFxuICBzYWtlIDogMSxcbiAgc2FsYWQgOiAxLFxuICBzYWxhcnkgOiAxLFxuICBzYWxlIDogMSxcbiAgc2FsZXMgOiAxLFxuICBzYWx0IDogMSxcbiAgc2FtZSA6IDEsXG4gIHNhbXBsZSA6IDEsXG4gIHNhbmN0aW9uIDogMSxcbiAgc2FuZCA6IDEsXG4gIHNhdGVsbGl0ZSA6IDEsXG4gIHNhdGlzZmFjdGlvbiA6IDEsXG4gIHNhdGlzZnkgOiAxLFxuICBzYXVjZSA6IDEsXG4gIHNhdmUgOiAxLFxuICBzYXZpbmcgOiAxLFxuICBzYXkgOiAxLFxuICBzY2FsZSA6IDEsXG4gIHNjYW5kYWwgOiAxLFxuICBzY2FyZWQgOiAxLFxuICBzY2VuYXJpbyA6IDEsXG4gIHNjZW5lIDogMSxcbiAgc2NoZWR1bGUgOiAxLFxuICBzY2hlbWUgOiAxLFxuICBzY2hvbGFyIDogMSxcbiAgc2Nob2xhcnNoaXAgOiAxLFxuICBzY2hvb2wgOiAxLFxuICBzY2llbmNlIDogMSxcbiAgc2NpZW50aWZpYyA6IDEsXG4gIHNjaWVudGlzdCA6IDEsXG4gIHNjb3BlIDogMSxcbiAgc2NvcmUgOiAxLFxuICBzY3JlYW0gOiAxLFxuICBzY3JlZW4gOiAxLFxuICBzY3JpcHQgOiAxLFxuICBzZWEgOiAxLFxuICBzZWFyY2ggOiAxLFxuICBzZWFzb24gOiAxLFxuICBzZWF0IDogMSxcbiAgc2Vjb25kIDogMSxcbiAgc2VjcmV0IDogMSxcbiAgc2VjcmV0YXJ5IDogMSxcbiAgc2VjdGlvbiA6IDEsXG4gIHNlY3RvciA6IDEsXG4gIHNlY3VyZSA6IDEsXG4gIHNlY3VyaXR5IDogMSxcbiAgc2VlIDogMSxcbiAgc2VlZCA6IDEsXG4gIHNlZWsgOiAxLFxuICBzZWVtIDogMSxcbiAgc2VnbWVudCA6IDEsXG4gIHNlaXplIDogMSxcbiAgc2VsZWN0IDogMSxcbiAgc2VsZWN0aW9uIDogMSxcbiAgc2VsZiA6IDEsXG4gIHNlbGwgOiAxLFxuICBTZW5hdGUgOiAxLFxuICBzZW5hdG9yIDogMSxcbiAgc2VuZCA6IDEsXG4gIHNlbmlvciA6IDEsXG4gIHNlbnNlIDogMSxcbiAgc2Vuc2l0aXZlIDogMSxcbiAgc2VudGVuY2UgOiAxLFxuICBzZXBhcmF0ZSA6IDEsXG4gIHNlcXVlbmNlIDogMSxcbiAgc2VyaWVzIDogMSxcbiAgc2VyaW91cyA6IDEsXG4gIHNlcmlvdXNseSA6IDEsXG4gIHNlcnZlIDogMSxcbiAgc2VydmljZSA6IDEsXG4gIHNlc3Npb24gOiAxLFxuICBzZXQgOiAxLFxuICBzZXR0aW5nIDogMSxcbiAgc2V0dGxlIDogMSxcbiAgc2V0dGxlbWVudCA6IDEsXG4gIHNldmVuIDogMSxcbiAgc2V2ZXJhbCA6IDEsXG4gIHNldmVyZSA6IDEsXG4gIHNleCA6IDEsXG4gIHNleHVhbCA6IDEsXG4gIHNoYWRlIDogMSxcbiAgc2hhZG93IDogMSxcbiAgc2hha2UgOiAxLFxuICBzaGFsbCA6IDEsXG4gIHNoYXBlIDogMSxcbiAgc2hhcmUgOiAxLFxuICBzaGFycCA6IDEsXG4gIHNoZSA6IDEsXG4gIHNoZWV0IDogMSxcbiAgc2hlbGYgOiAxLFxuICBzaGVsbCA6IDEsXG4gIHNoZWx0ZXIgOiAxLFxuICBzaGlmdCA6IDEsXG4gIHNoaW5lIDogMSxcbiAgc2hpcCA6IDEsXG4gIHNoaXJ0IDogMSxcbiAgc2hpdCA6IDEsXG4gIHNob2NrIDogMSxcbiAgc2hvZSA6IDEsXG4gIHNob290IDogMSxcbiAgc2hvb3RpbmcgOiAxLFxuICBzaG9wIDogMSxcbiAgc2hvcHBpbmcgOiAxLFxuICBzaG9yZSA6IDEsXG4gIHNob3J0IDogMSxcbiAgc2hvcnRseSA6IDEsXG4gIHNob3QgOiAxLFxuICBzaG91bGQgOiAxLFxuICBzaG91bGRlciA6IDEsXG4gIHNob3V0IDogMSxcbiAgc2hvdyA6IDEsXG4gIHNob3dlciA6IDEsXG4gIHNocnVnIDogMSxcbiAgc2h1dCA6IDEsXG4gIHNpY2sgOiAxLFxuICBzaWRlIDogMSxcbiAgc2lnaCA6IDEsXG4gIHNpZ2h0IDogMSxcbiAgc2lnbiA6IDEsXG4gIHNpZ25hbCA6IDEsXG4gIHNpZ25pZmljYW5jZSA6IDEsXG4gIHNpZ25pZmljYW50IDogMSxcbiAgc2lnbmlmaWNhbnRseSA6IDEsXG4gIHNpbGVuY2UgOiAxLFxuICBzaWxlbnQgOiAxLFxuICBzaWx2ZXIgOiAxLFxuICBzaW1pbGFyIDogMSxcbiAgc2ltaWxhcmx5IDogMSxcbiAgc2ltcGxlIDogMSxcbiAgc2ltcGx5IDogMSxcbiAgc2luIDogMSxcbiAgc2luY2UgOiAxLFxuICBzaW5nIDogMSxcbiAgc2luZ2VyIDogMSxcbiAgc2luZ2xlIDogMSxcbiAgc2luayA6IDEsXG4gIHNpciA6IDEsXG4gIHNpc3RlciA6IDEsXG4gIHNpdCA6IDEsXG4gIHNpdGUgOiAxLFxuICBzaXR1YXRpb24gOiAxLFxuICBzaXggOiAxLFxuICBzaXplIDogMSxcbiAgc2tpIDogMSxcbiAgc2tpbGwgOiAxLFxuICBza2luIDogMSxcbiAgc2t5IDogMSxcbiAgc2xhdmUgOiAxLFxuICBzbGVlcCA6IDEsXG4gIHNsaWNlIDogMSxcbiAgc2xpZGUgOiAxLFxuICBzbGlnaHQgOiAxLFxuICBzbGlnaHRseSA6IDEsXG4gIHNsaXAgOiAxLFxuICBzbG93IDogMSxcbiAgc2xvd2x5IDogMSxcbiAgc21hbGwgOiAxLFxuICBzbWFydCA6IDEsXG4gIHNtZWxsIDogMSxcbiAgc21pbGUgOiAxLFxuICBzbW9rZSA6IDEsXG4gIHNtb290aCA6IDEsXG4gIHNuYXAgOiAxLFxuICBzbm93IDogMSxcbiAgc28gOiAxLFxuICBcInNvLWNhbGxlZFwiIDogMSxcbiAgc29jY2VyIDogMSxcbiAgc29jaWFsIDogMSxcbiAgc29jaWV0eSA6IDEsXG4gIHNvZnQgOiAxLFxuICBzb2Z0d2FyZSA6IDEsXG4gIHNvaWwgOiAxLFxuICBzb2xhciA6IDEsXG4gIHNvbGRpZXIgOiAxLFxuICBzb2xpZCA6IDEsXG4gIHNvbHV0aW9uIDogMSxcbiAgc29sdmUgOiAxLFxuICBzb21lIDogMSxcbiAgc29tZWJvZHkgOiAxLFxuICBzb21laG93IDogMSxcbiAgc29tZW9uZSA6IDEsXG4gIHNvbWV0aGluZyA6IDEsXG4gIHNvbWV0aW1lcyA6IDEsXG4gIHNvbWV3aGF0IDogMSxcbiAgc29tZXdoZXJlIDogMSxcbiAgc29uIDogMSxcbiAgc29uZyA6IDEsXG4gIHNvb24gOiAxLFxuICBzb3BoaXN0aWNhdGVkIDogMSxcbiAgc29ycnkgOiAxLFxuICBzb3J0IDogMSxcbiAgc291bCA6IDEsXG4gIHNvdW5kIDogMSxcbiAgc291cCA6IDEsXG4gIHNvdXJjZSA6IDEsXG4gIHNvdXRoIDogMSxcbiAgc291dGhlcm4gOiAxLFxuICBTb3ZpZXQgOiAxLFxuICBzcGFjZSA6IDEsXG4gIFNwYW5pc2ggOiAxLFxuICBzcGVhayA6IDEsXG4gIHNwZWFrZXIgOiAxLFxuICBzcGVjaWFsIDogMSxcbiAgc3BlY2lhbGlzdCA6IDEsXG4gIHNwZWNpZXMgOiAxLFxuICBzcGVjaWZpYyA6IDEsXG4gIHNwZWNpZmljYWxseSA6IDEsXG4gIHNwZWVjaCA6IDEsXG4gIHNwZWVkIDogMSxcbiAgc3BlbmQgOiAxLFxuICBzcGVuZGluZyA6IDEsXG4gIHNwaW4gOiAxLFxuICBzcGlyaXQgOiAxLFxuICBzcGlyaXR1YWwgOiAxLFxuICBzcGxpdCA6IDEsXG4gIHNwb2tlc21hbiA6IDEsXG4gIHNwb3J0IDogMSxcbiAgc3BvdCA6IDEsXG4gIHNwcmVhZCA6IDEsXG4gIHNwcmluZyA6IDEsXG4gIHNxdWFyZSA6IDEsXG4gIHNxdWVlemUgOiAxLFxuICBzdGFiaWxpdHkgOiAxLFxuICBzdGFibGUgOiAxLFxuICBzdGFmZiA6IDEsXG4gIHN0YWdlIDogMSxcbiAgc3RhaXIgOiAxLFxuICBzdGFrZSA6IDEsXG4gIHN0YW5kIDogMSxcbiAgc3RhbmRhcmQgOiAxLFxuICBzdGFuZGluZyA6IDEsXG4gIHN0YXIgOiAxLFxuICBzdGFyZSA6IDEsXG4gIHN0YXJ0IDogMSxcbiAgc3RhdGUgOiAxLFxuICBzdGF0ZW1lbnQgOiAxLFxuICBzdGF0aW9uIDogMSxcbiAgc3RhdGlzdGljcyA6IDEsXG4gIHN0YXR1cyA6IDEsXG4gIHN0YXkgOiAxLFxuICBzdGVhZHkgOiAxLFxuICBzdGVhbCA6IDEsXG4gIHN0ZWVsIDogMSxcbiAgc3RlcCA6IDEsXG4gIHN0aWNrIDogMSxcbiAgc3RpbGwgOiAxLFxuICBzdGlyIDogMSxcbiAgc3RvY2sgOiAxLFxuICBzdG9tYWNoIDogMSxcbiAgc3RvbmUgOiAxLFxuICBzdG9wIDogMSxcbiAgc3RvcmFnZSA6IDEsXG4gIHN0b3JlIDogMSxcbiAgc3Rvcm0gOiAxLFxuICBzdG9yeSA6IDEsXG4gIHN0cmFpZ2h0IDogMSxcbiAgc3RyYW5nZSA6IDEsXG4gIHN0cmFuZ2VyIDogMSxcbiAgc3RyYXRlZ2ljIDogMSxcbiAgc3RyYXRlZ3kgOiAxLFxuICBzdHJlYW0gOiAxLFxuICBzdHJlZXQgOiAxLFxuICBzdHJlbmd0aCA6IDEsXG4gIHN0cmVuZ3RoZW4gOiAxLFxuICBzdHJlc3MgOiAxLFxuICBzdHJldGNoIDogMSxcbiAgc3RyaWtlIDogMSxcbiAgc3RyaW5nIDogMSxcbiAgc3RyaXAgOiAxLFxuICBzdHJva2UgOiAxLFxuICBzdHJvbmcgOiAxLFxuICBzdHJvbmdseSA6IDEsXG4gIHN0cnVjdHVyZSA6IDEsXG4gIHN0cnVnZ2xlIDogMSxcbiAgc3R1ZGVudCA6IDEsXG4gIHN0dWRpbyA6IDEsXG4gIHN0dWR5IDogMSxcbiAgc3R1ZmYgOiAxLFxuICBzdHVwaWQgOiAxLFxuICBzdHlsZSA6IDEsXG4gIHN1YmplY3QgOiAxLFxuICBzdWJtaXQgOiAxLFxuICBzdWJzZXF1ZW50IDogMSxcbiAgc3Vic3RhbmNlIDogMSxcbiAgc3Vic3RhbnRpYWwgOiAxLFxuICBzdWNjZWVkIDogMSxcbiAgc3VjY2VzcyA6IDEsXG4gIHN1Y2Nlc3NmdWwgOiAxLFxuICBzdWNjZXNzZnVsbHkgOiAxLFxuICBzdWNoIDogMSxcbiAgc3VkZGVuIDogMSxcbiAgc3VkZGVubHkgOiAxLFxuICBzdWUgOiAxLFxuICBzdWZmZXIgOiAxLFxuICBzdWZmaWNpZW50IDogMSxcbiAgc3VnYXIgOiAxLFxuICBzdWdnZXN0IDogMSxcbiAgc3VnZ2VzdGlvbiA6IDEsXG4gIHN1aWNpZGUgOiAxLFxuICBzdWl0IDogMSxcbiAgc3VtbWVyIDogMSxcbiAgc3VtbWl0IDogMSxcbiAgc3VuIDogMSxcbiAgc3VwZXIgOiAxLFxuICBzdXBwbHkgOiAxLFxuICBzdXBwb3J0IDogMSxcbiAgc3VwcG9ydGVyIDogMSxcbiAgc3VwcG9zZSA6IDEsXG4gIHN1cHBvc2VkIDogMSxcbiAgU3VwcmVtZSA6IDEsXG4gIHN1cmUgOiAxLFxuICBzdXJlbHkgOiAxLFxuICBzdXJmYWNlIDogMSxcbiAgc3VyZ2VyeSA6IDEsXG4gIHN1cnByaXNlIDogMSxcbiAgc3VycHJpc2VkIDogMSxcbiAgc3VycHJpc2luZyA6IDEsXG4gIHN1cnByaXNpbmdseSA6IDEsXG4gIHN1cnJvdW5kIDogMSxcbiAgc3VydmV5IDogMSxcbiAgc3Vydml2YWwgOiAxLFxuICBzdXJ2aXZlIDogMSxcbiAgc3Vydml2b3IgOiAxLFxuICBzdXNwZWN0IDogMSxcbiAgc3VzdGFpbiA6IDEsXG4gIHN3ZWFyIDogMSxcbiAgc3dlZXAgOiAxLFxuICBzd2VldCA6IDEsXG4gIHN3aW0gOiAxLFxuICBzd2luZyA6IDEsXG4gIHN3aXRjaCA6IDEsXG4gIHN5bWJvbCA6IDEsXG4gIHN5bXB0b20gOiAxLFxuICBzeXN0ZW0gOiAxLFxuICB0YWJsZSA6IDEsXG4gIHRhYmxlc3Bvb24gOiAxLFxuICB0YWN0aWMgOiAxLFxuICB0YWlsIDogMSxcbiAgdGFrZSA6IDEsXG4gIHRhbGUgOiAxLFxuICB0YWxlbnQgOiAxLFxuICB0YWxrIDogMSxcbiAgdGFsbCA6IDEsXG4gIHRhbmsgOiAxLFxuICB0YXAgOiAxLFxuICB0YXBlIDogMSxcbiAgdGFyZ2V0IDogMSxcbiAgdGFzayA6IDEsXG4gIHRhc3RlIDogMSxcbiAgdGF4IDogMSxcbiAgdGF4cGF5ZXIgOiAxLFxuICB0ZWEgOiAxLFxuICB0ZWFjaCA6IDEsXG4gIHRlYWNoZXIgOiAxLFxuICB0ZWFjaGluZyA6IDEsXG4gIHRlYW0gOiAxLFxuICB0ZWFyIDogMSxcbiAgdGVhc3Bvb24gOiAxLFxuICB0ZWNobmljYWwgOiAxLFxuICB0ZWNobmlxdWUgOiAxLFxuICB0ZWNobm9sb2d5IDogMSxcbiAgdGVlbiA6IDEsXG4gIHRlZW5hZ2VyIDogMSxcbiAgdGVsZXBob25lIDogMSxcbiAgdGVsZXNjb3BlIDogMSxcbiAgdGVsZXZpc2lvbiA6IDEsXG4gIHRlbGwgOiAxLFxuICB0ZW1wZXJhdHVyZSA6IDEsXG4gIHRlbXBvcmFyeSA6IDEsXG4gIHRlbiA6IDEsXG4gIHRlbmQgOiAxLFxuICB0ZW5kZW5jeSA6IDEsXG4gIHRlbm5pcyA6IDEsXG4gIHRlbnNpb24gOiAxLFxuICB0ZW50IDogMSxcbiAgdGVybSA6IDEsXG4gIHRlcm1zIDogMSxcbiAgdGVycmlibGUgOiAxLFxuICB0ZXJyaXRvcnkgOiAxLFxuICB0ZXJyb3IgOiAxLFxuICB0ZXJyb3Jpc20gOiAxLFxuICB0ZXJyb3Jpc3QgOiAxLFxuICB0ZXN0IDogMSxcbiAgdGVzdGlmeSA6IDEsXG4gIHRlc3RpbW9ueSA6IDEsXG4gIHRlc3RpbmcgOiAxLFxuICB0ZXh0IDogMSxcbiAgdGhhbiA6IDEsXG4gIHRoYW5rIDogMSxcbiAgdGhhbmtzIDogMSxcbiAgdGhhdCA6IDEsXG4gIHRoZSA6IDEsXG4gIHRoZWF0ZXIgOiAxLFxuICB0aGVpciA6IDEsXG4gIHRoZW0gOiAxLFxuICB0aGVtZSA6IDEsXG4gIHRoZW1zZWx2ZXMgOiAxLFxuICB0aGVuIDogMSxcbiAgdGhlb3J5IDogMSxcbiAgdGhlcmFweSA6IDEsXG4gIHRoZXJlIDogMSxcbiAgdGhlcmVmb3JlIDogMSxcbiAgdGhlc2UgOiAxLFxuICB0aGV5IDogMSxcbiAgdGhpY2sgOiAxLFxuICB0aGluIDogMSxcbiAgdGhpbmcgOiAxLFxuICB0aGluayA6IDEsXG4gIHRoaW5raW5nIDogMSxcbiAgdGhpcmQgOiAxLFxuICB0aGlydHkgOiAxLFxuICB0aGlzIDogMSxcbiAgdGhvc2UgOiAxLFxuICB0aG91Z2ggOiAxLFxuICB0aG91Z2h0IDogMSxcbiAgdGhvdXNhbmQgOiAxLFxuICB0aHJlYXQgOiAxLFxuICB0aHJlYXRlbiA6IDEsXG4gIHRocmVlIDogMSxcbiAgdGhyb2F0IDogMSxcbiAgdGhyb3VnaCA6IDEsXG4gIHRocm91Z2hvdXQgOiAxLFxuICB0aHJvdyA6IDEsXG4gIHRodXMgOiAxLFxuICB0aWNrZXQgOiAxLFxuICB0aWUgOiAxLFxuICB0aWdodCA6IDEsXG4gIHRpbWUgOiAxLFxuICB0aW55IDogMSxcbiAgdGlwIDogMSxcbiAgdGlyZSA6IDEsXG4gIHRpcmVkIDogMSxcbiAgdGlzc3VlIDogMSxcbiAgdGl0bGUgOiAxLFxuICB0byA6IDEsXG4gIHRvYmFjY28gOiAxLFxuICB0b2RheSA6IDEsXG4gIHRvZSA6IDEsXG4gIHRvZ2V0aGVyIDogMSxcbiAgdG9tYXRvIDogMSxcbiAgdG9tb3Jyb3cgOiAxLFxuICB0b25lIDogMSxcbiAgdG9uZ3VlIDogMSxcbiAgdG9uaWdodCA6IDEsXG4gIHRvbyA6IDEsXG4gIHRvb2wgOiAxLFxuICB0b290aCA6IDEsXG4gIHRvcCA6IDEsXG4gIHRvcGljIDogMSxcbiAgdG9zcyA6IDEsXG4gIHRvdGFsIDogMSxcbiAgdG90YWxseSA6IDEsXG4gIHRvdWNoIDogMSxcbiAgdG91Z2ggOiAxLFxuICB0b3VyIDogMSxcbiAgdG91cmlzdCA6IDEsXG4gIHRvdXJuYW1lbnQgOiAxLFxuICB0b3dhcmQgOiAxLFxuICB0b3dhcmRzIDogMSxcbiAgdG93ZXIgOiAxLFxuICB0b3duIDogMSxcbiAgdG95IDogMSxcbiAgdHJhY2UgOiAxLFxuICB0cmFjayA6IDEsXG4gIHRyYWRlIDogMSxcbiAgdHJhZGl0aW9uIDogMSxcbiAgdHJhZGl0aW9uYWwgOiAxLFxuICB0cmFmZmljIDogMSxcbiAgdHJhZ2VkeSA6IDEsXG4gIHRyYWlsIDogMSxcbiAgdHJhaW4gOiAxLFxuICB0cmFpbmluZyA6IDEsXG4gIHRyYW5zZmVyIDogMSxcbiAgdHJhbnNmb3JtIDogMSxcbiAgdHJhbnNmb3JtYXRpb24gOiAxLFxuICB0cmFuc2l0aW9uIDogMSxcbiAgdHJhbnNsYXRlIDogMSxcbiAgdHJhbnNwb3J0YXRpb24gOiAxLFxuICB0cmF2ZWwgOiAxLFxuICB0cmVhdCA6IDEsXG4gIHRyZWF0bWVudCA6IDEsXG4gIHRyZWF0eSA6IDEsXG4gIHRyZWUgOiAxLFxuICB0cmVtZW5kb3VzIDogMSxcbiAgdHJlbmQgOiAxLFxuICB0cmlhbCA6IDEsXG4gIHRyaWJlIDogMSxcbiAgdHJpY2sgOiAxLFxuICB0cmlwIDogMSxcbiAgdHJvb3AgOiAxLFxuICB0cm91YmxlIDogMSxcbiAgdHJ1Y2sgOiAxLFxuICB0cnVlIDogMSxcbiAgdHJ1bHkgOiAxLFxuICB0cnVzdCA6IDEsXG4gIHRydXRoIDogMSxcbiAgdHJ5IDogMSxcbiAgdHViZSA6IDEsXG4gIHR1bm5lbCA6IDEsXG4gIHR1cm4gOiAxLFxuICBUViA6IDEsXG4gIHR3ZWx2ZSA6IDEsXG4gIHR3ZW50eSA6IDEsXG4gIHR3aWNlIDogMSxcbiAgdHdpbiA6IDEsXG4gIHR3byA6IDEsXG4gIHR5cGUgOiAxLFxuICB0eXBpY2FsIDogMSxcbiAgdHlwaWNhbGx5IDogMSxcbiAgdWdseSA6IDEsXG4gIHVsdGltYXRlIDogMSxcbiAgdWx0aW1hdGVseSA6IDEsXG4gIHVuYWJsZSA6IDEsXG4gIHVuY2xlIDogMSxcbiAgdW5kZXIgOiAxLFxuICB1bmRlcmdvIDogMSxcbiAgdW5kZXJzdGFuZCA6IDEsXG4gIHVuZGVyc3RhbmRpbmcgOiAxLFxuICB1bmZvcnR1bmF0ZWx5IDogMSxcbiAgdW5pZm9ybSA6IDEsXG4gIHVuaW9uIDogMSxcbiAgdW5pcXVlIDogMSxcbiAgdW5pdCA6IDEsXG4gIFVuaXRlZCA6IDEsXG4gIHVuaXZlcnNhbCA6IDEsXG4gIHVuaXZlcnNlIDogMSxcbiAgdW5pdmVyc2l0eSA6IDEsXG4gIHVua25vd24gOiAxLFxuICB1bmxlc3MgOiAxLFxuICB1bmxpa2UgOiAxLFxuICB1bmxpa2VseSA6IDEsXG4gIHVudGlsIDogMSxcbiAgdW51c3VhbCA6IDEsXG4gIHVwIDogMSxcbiAgdXBvbiA6IDEsXG4gIHVwcGVyIDogMSxcbiAgdXJiYW4gOiAxLFxuICB1cmdlIDogMSxcbiAgdXMgOiAxLFxuICB1c2UgOiAxLFxuICB1c2VkIDogMSxcbiAgdXNlZnVsIDogMSxcbiAgdXNlciA6IDEsXG4gIHVzdWFsIDogMSxcbiAgdXN1YWxseSA6IDEsXG4gIHV0aWxpdHkgOiAxLFxuICB2YWNhdGlvbiA6IDEsXG4gIHZhbGxleSA6IDEsXG4gIHZhbHVhYmxlIDogMSxcbiAgdmFsdWUgOiAxLFxuICB2YXJpYWJsZSA6IDEsXG4gIHZhcmlhdGlvbiA6IDEsXG4gIHZhcmlldHkgOiAxLFxuICB2YXJpb3VzIDogMSxcbiAgdmFyeSA6IDEsXG4gIHZhc3QgOiAxLFxuICB2ZWdldGFibGUgOiAxLFxuICB2ZWhpY2xlIDogMSxcbiAgdmVudHVyZSA6IDEsXG4gIHZlcnNpb24gOiAxLFxuICB2ZXJzdXMgOiAxLFxuICB2ZXJ5IDogMSxcbiAgdmVzc2VsIDogMSxcbiAgdmV0ZXJhbiA6IDEsXG4gIHZpYSA6IDEsXG4gIHZpY3RpbSA6IDEsXG4gIHZpY3RvcnkgOiAxLFxuICB2aWRlbyA6IDEsXG4gIHZpZXcgOiAxLFxuICB2aWV3ZXIgOiAxLFxuICB2aWxsYWdlIDogMSxcbiAgdmlvbGF0ZSA6IDEsXG4gIHZpb2xhdGlvbiA6IDEsXG4gIHZpb2xlbmNlIDogMSxcbiAgdmlvbGVudCA6IDEsXG4gIHZpcnR1YWxseSA6IDEsXG4gIHZpcnR1ZSA6IDEsXG4gIHZpcnVzIDogMSxcbiAgdmlzaWJsZSA6IDEsXG4gIHZpc2lvbiA6IDEsXG4gIHZpc2l0IDogMSxcbiAgdmlzaXRvciA6IDEsXG4gIHZpc3VhbCA6IDEsXG4gIHZpdGFsIDogMSxcbiAgdm9pY2UgOiAxLFxuICB2b2x1bWUgOiAxLFxuICB2b2x1bnRlZXIgOiAxLFxuICB2b3RlIDogMSxcbiAgdm90ZXIgOiAxLFxuICB2cyA6IDEsXG4gIHZ1bG5lcmFibGUgOiAxLFxuICB3YWdlIDogMSxcbiAgd2FpdCA6IDEsXG4gIHdha2UgOiAxLFxuICB3YWxrIDogMSxcbiAgd2FsbCA6IDEsXG4gIHdhbmRlciA6IDEsXG4gIHdhbnQgOiAxLFxuICB3YXIgOiAxLFxuICB3YXJtIDogMSxcbiAgd2FybiA6IDEsXG4gIHdhcm5pbmcgOiAxLFxuICB3YXNoIDogMSxcbiAgd2FzdGUgOiAxLFxuICB3YXRjaCA6IDEsXG4gIHdhdGVyIDogMSxcbiAgd2F2ZSA6IDEsXG4gIHdheSA6IDEsXG4gIHdlIDogMSxcbiAgd2VhayA6IDEsXG4gIHdlYWx0aCA6IDEsXG4gIHdlYWx0aHkgOiAxLFxuICB3ZWFwb24gOiAxLFxuICB3ZWFyIDogMSxcbiAgd2VhdGhlciA6IDEsXG4gIHdlZGRpbmcgOiAxLFxuICB3ZWVrIDogMSxcbiAgd2Vla2VuZCA6IDEsXG4gIHdlZWtseSA6IDEsXG4gIHdlaWdoIDogMSxcbiAgd2VpZ2h0IDogMSxcbiAgd2VsY29tZSA6IDEsXG4gIHdlbGZhcmUgOiAxLFxuICB3ZWxsIDogMSxcbiAgd2VzdCA6IDEsXG4gIHdlc3Rlcm4gOiAxLFxuICB3ZXQgOiAxLFxuICB3aGF0IDogMSxcbiAgd2hhdGV2ZXIgOiAxLFxuICB3aGVlbCA6IDEsXG4gIHdoZW4gOiAxLFxuICB3aGVuZXZlciA6IDEsXG4gIHdoZXJlIDogMSxcbiAgd2hlcmVhcyA6IDEsXG4gIHdoZXRoZXIgOiAxLFxuICB3aGljaCA6IDEsXG4gIHdoaWxlIDogMSxcbiAgd2hpc3BlciA6IDEsXG4gIHdoaXRlIDogMSxcbiAgd2hvIDogMSxcbiAgd2hvbGUgOiAxLFxuICB3aG9tIDogMSxcbiAgd2hvc2UgOiAxLFxuICB3aHkgOiAxLFxuICB3aWRlIDogMSxcbiAgd2lkZWx5IDogMSxcbiAgd2lkZXNwcmVhZCA6IDEsXG4gIHdpZmUgOiAxLFxuICB3aWxkIDogMSxcbiAgd2lsbCA6IDEsXG4gIHdpbGxpbmcgOiAxLFxuICB3aW4gOiAxLFxuICB3aW5kIDogMSxcbiAgd2luZG93IDogMSxcbiAgd2luZSA6IDEsXG4gIHdpbmcgOiAxLFxuICB3aW5uZXIgOiAxLFxuICB3aW50ZXIgOiAxLFxuICB3aXBlIDogMSxcbiAgd2lyZSA6IDEsXG4gIHdpc2RvbSA6IDEsXG4gIHdpc2UgOiAxLFxuICB3aXNoIDogMSxcbiAgd2l0aCA6IDEsXG4gIHdpdGhkcmF3IDogMSxcbiAgd2l0aGluIDogMSxcbiAgd2l0aG91dCA6IDEsXG4gIHdpdG5lc3MgOiAxLFxuICB3b21hbiA6IDEsXG4gIHdvbmRlciA6IDEsXG4gIHdvbmRlcmZ1bCA6IDEsXG4gIHdvb2QgOiAxLFxuICB3b29kZW4gOiAxLFxuICB3b3JkIDogMSxcbiAgd29yayA6IDEsXG4gIHdvcmtlciA6IDEsXG4gIHdvcmtpbmcgOiAxLFxuICB3b3JrcyA6IDEsXG4gIHdvcmtzaG9wIDogMSxcbiAgd29ybGQgOiAxLFxuICB3b3JyaWVkIDogMSxcbiAgd29ycnkgOiAxLFxuICB3b3J0aCA6IDEsXG4gIHdvdWxkIDogMSxcbiAgd291bmQgOiAxLFxuICB3cmFwIDogMSxcbiAgd3JpdGUgOiAxLFxuICB3cml0ZXIgOiAxLFxuICB3cml0aW5nIDogMSxcbiAgd3JvbmcgOiAxLFxuICB5YXJkIDogMSxcbiAgeWVhaCA6IDEsXG4gIHllYXIgOiAxLFxuICB5ZWxsIDogMSxcbiAgeWVsbG93IDogMSxcbiAgeWVzIDogMSxcbiAgeWVzdGVyZGF5IDogMSxcbiAgeWV0IDogMSxcbiAgeWllbGQgOiAxLFxuICB5b3UgOiAxLFxuICB5b3VuZyA6IDEsXG4gIHlvdXIgOiAxLFxuICB5b3VycyA6IDEsXG4gIHlvdXJzZWxmIDogMSxcbiAgeW91dGggOiAxLFxuICB6b25lIDogMSxcbn07IiwiLy8gaHR0cHM6Ly9lbmdsaXNoZ3JhbW1hcmhlcmUuY29tL3ZvY2FidWxhcnkvMTAwMDAtbW9zdC1jb21tb24td29yZHMtaW4tZW5nbGlzaC1wYXJ0LTUvXG5leHBvcnQgY29uc3QgVGhlTW9zdENvbW1vbjEwMDAwID0ge1xuXG4gICAgYTogMSxcbiAgICBhYTogMSxcbiAgICBhYWE6IDEsXG4gICAgYWFyb246IDEsXG4gICAgYWI6IDEsXG4gICAgYWJhbmRvbmVkOiAxLFxuICAgIGFiYzogMSxcbiAgICBhYmVyZGVlbjogMSxcbiAgICBhYmlsaXRpZXM6IDEsXG4gICAgYWJpbGl0eTogMSxcbiAgICBhYmxlOiAxLFxuICAgIGFib3JpZ2luYWw6IDEsXG4gICAgYWJvcnRpb246IDEsXG4gICAgYWJvdXQ6IDEsXG4gICAgYWJvdmU6IDEsXG4gICAgYWJyYWhhbTogMSxcbiAgICBhYnJvYWQ6IDEsXG5cblxuXG5cblxuXG5cbiAgICBhYnM6IDEsXG4gICAgYWJzZW5jZTogMSxcbiAgICBhYnNlbnQ6IDEsXG4gICAgYWJzb2x1dGU6IDEsXG4gICAgYWJzb2x1dGVseTogMSxcbiAgICBhYnNvcnB0aW9uOiAxLFxuICAgIGFic3RyYWN0OiAxLFxuICAgIGFic3RyYWN0czogMSxcbiAgICBhYnU6IDEsXG4gICAgYWJ1c2U6IDEsXG4gICAgYWM6IDEsXG4gICAgYWNhZGVtaWM6IDEsXG4gICAgYWNhZGVtaWNzOiAxLFxuICAgIGFjYWRlbXk6IDEsXG4gICAgYWNjOiAxLFxuICAgIGFjY2VudDogMSxcbiAgICBhY2NlcHQ6IDEsXG4gICAgYWNjZXB0YWJsZTogMSxcbiAgICBhY2NlcHRhbmNlOiAxLFxuICAgIGFjY2VwdGVkOiAxLFxuICAgIGFjY2VwdGluZzogMSxcbiAgICBhY2NlcHRzOiAxLFxuICAgIGFjY2VzczogMSxcbiAgICBhY2Nlc3NlZDogMSxcbiAgICBhY2Nlc3NpYmlsaXR5OiAxLFxuICAgIGFjY2Vzc2libGU6IDEsXG4gICAgYWNjZXNzaW5nOiAxLFxuICAgIGFjY2Vzc29yaWVzOiAxLFxuICAgIGFjY2Vzc29yeTogMSxcbiAgICBhY2NpZGVudDogMSxcbiAgICBhY2NpZGVudHM6IDEsXG4gICAgYWNjb21tb2RhdGU6IDEsXG4gICAgYWNjb21tb2RhdGlvbjogMSxcbiAgICBhY2NvbW1vZGF0aW9uczogMSxcbiAgICBhY2NvbXBhbmllZDogMSxcbiAgICBhY2NvbXBhbnlpbmc6IDEsXG4gICAgYWNjb21wbGlzaDogMSxcbiAgICBhY2NvbXBsaXNoZWQ6IDEsXG4gICAgYWNjb3JkYW5jZTogMSxcbiAgICBhY2NvcmRpbmc6IDEsXG4gICAgYWNjb3JkaW5nbHk6IDEsXG4gICAgYWNjb3VudDogMSxcbiAgICBhY2NvdW50YWJpbGl0eTogMSxcbiAgICBhY2NvdW50aW5nOiAxLFxuICAgIGFjY291bnRzOiAxLFxuICAgIGFjY3JlZGl0YXRpb246IDEsXG4gICAgYWNjcmVkaXRlZDogMSxcbiAgICBhY2N1cmFjeTogMSxcbiAgICBhY2N1cmF0ZTogMSxcbiAgICBhY2N1cmF0ZWx5OiAxLFxuICAgIGFjY3VzZWQ6IDEsXG4gICAgYWNkYmVudGl0eTogMSxcbiAgICBhY2U6IDEsXG4gICAgYWNlcjogMSxcbiAgICBhY2hpZXZlOiAxLFxuICAgIGFjaGlldmVkOiAxLFxuICAgIGFjaGlldmVtZW50OiAxLFxuICAgIGFjaGlldmVtZW50czogMSxcbiAgICBhY2hpZXZpbmc6IDEsXG4gICAgYWNpZDogMSxcbiAgICBhY2lkczogMSxcbiAgICBhY2tub3dsZWRnZTogMSxcbiAgICBhY2tub3dsZWRnZWQ6IDEsXG4gICAgYWNtOiAxLFxuICAgIGFjbmU6IDEsXG4gICAgYWNvdXN0aWM6IDEsXG4gICAgYWNxdWlyZTogMSxcbiAgICBhY3F1aXJlZDogMSxcbiAgICBhY3F1aXNpdGlvbjogMSxcbiAgICBhY3F1aXNpdGlvbnM6IDEsXG4gICAgYWNyZTogMSxcbiAgICBhY3JlczogMSxcbiAgICBhY3JvYmF0OiAxLFxuICAgIGFjcm9zczogMSxcbiAgICBhY3J5bGljOiAxLFxuICAgIGFjdDogMSxcbiAgICBhY3Rpbmc6IDEsXG4gICAgYWN0aW9uOiAxLFxuICAgIGFjdGlvbnM6IDEsXG4gICAgYWN0aXZhdGVkOiAxLFxuICAgIGFjdGl2YXRpb246IDEsXG4gICAgYWN0aXZlOiAxLFxuICAgIGFjdGl2ZWx5OiAxLFxuICAgIGFjdGl2aXN0czogMSxcbiAgICBhY3Rpdml0aWVzOiAxLFxuICAgIGFjdGl2aXR5OiAxLFxuICAgIGFjdG9yOiAxLFxuICAgIGFjdG9yczogMSxcbiAgICBhY3RyZXNzOiAxLFxuICAgIGFjdHM6IDEsXG4gICAgYWN0dWFsOiAxLFxuICAgIGFjdHVhbGx5OiAxLFxuICAgIGFjdXRlOiAxLFxuICAgIGFkOiAxLFxuICAgIGFkYTogMSxcbiAgICBhZGFtOiAxLFxuICAgIGFkYW1zOiAxLFxuICAgIGFkYXB0YXRpb246IDEsXG4gICAgYWRhcHRlZDogMSxcbiAgICBhZGFwdGVyOiAxLFxuICAgIGFkYXB0ZXJzOiAxLFxuICAgIGFkYXB0aXZlOiAxLFxuICAgIGFkYXB0b3I6IDEsXG4gICAgYWRkOiAxLFxuICAgIGFkZGVkOiAxLFxuICAgIGFkZGljdGlvbjogMSxcbiAgICBhZGRpbmc6IDEsXG4gICAgYWRkaXRpb246IDEsXG4gICAgYWRkaXRpb25hbDogMSxcbiAgICBhZGRpdGlvbmFsbHk6IDEsXG4gICAgYWRkaXRpb25zOiAxLFxuICAgIGFkZHJlc3M6IDEsXG4gICAgYWRkcmVzc2VkOiAxLFxuICAgIGFkZHJlc3NlczogMSxcbiAgICBhZGRyZXNzaW5nOiAxLFxuICAgIGFkZHM6IDEsXG4gICAgYWRlbGFpZGU6IDEsXG4gICAgYWRlcXVhdGU6IDEsXG4gICAgYWRpZGFzOiAxLFxuICAgIGFkaXBleDogMSxcbiAgICBhZGphY2VudDogMSxcbiAgICBhZGp1c3Q6IDEsXG4gICAgYWRqdXN0YWJsZTogMSxcbiAgICBhZGp1c3RlZDogMSxcbiAgICBhZGp1c3RtZW50OiAxLFxuICAgIGFkanVzdG1lbnRzOiAxLFxuICAgIGFkbWluOiAxLFxuICAgIGFkbWluaXN0ZXJlZDogMSxcbiAgICBhZG1pbmlzdHJhdGlvbjogMSxcbiAgICBhZG1pbmlzdHJhdGl2ZTogMSxcbiAgICBhZG1pbmlzdHJhdG9yOiAxLFxuICAgIGFkbWluaXN0cmF0b3JzOiAxLFxuICAgIGFkbWlzc2lvbjogMSxcbiAgICBhZG1pc3Npb25zOiAxLFxuICAgIGFkbWl0OiAxLFxuICAgIGFkbWl0dGVkOiAxLFxuICAgIGFkb2JlOiAxLFxuICAgIGFkb2xlc2NlbnQ6IDEsXG4gICAgYWRvcHQ6IDEsXG4gICAgYWRvcHRlZDogMSxcbiAgICBhZG9wdGlvbjogMSxcbiAgICBhZHJpYW46IDEsXG4gICAgYWRzOiAxLFxuICAgIGFkc2w6IDEsXG4gICAgYWR1bHQ6IDEsXG4gICAgYWR1bHRzOiAxLFxuICAgIGFkdmFuY2U6IDEsXG4gICAgYWR2YW5jZWQ6IDEsXG4gICAgYWR2YW5jZW1lbnQ6IDEsXG4gICAgYWR2YW5jZXM6IDEsXG5cblxuXG5cblxuXG5cbiAgICBhZHZhbnRhZ2U6IDEsXG4gICAgYWR2YW50YWdlczogMSxcbiAgICBhZHZlbnR1cmU6IDEsXG4gICAgYWR2ZW50dXJlczogMSxcbiAgICBhZHZlcnNlOiAxLFxuICAgIGFkdmVydDogMSxcbiAgICBhZHZlcnRpc2U6IDEsXG4gICAgYWR2ZXJ0aXNlbWVudDogMSxcbiAgICBhZHZlcnRpc2VtZW50czogMSxcbiAgICBhZHZlcnRpc2VyOiAxLFxuICAgIGFkdmVydGlzZXJzOiAxLFxuICAgIGFkdmVydGlzaW5nOiAxLFxuICAgIGFkdmljZTogMSxcbiAgICBhZHZpc2U6IDEsXG4gICAgYWR2aXNlZDogMSxcbiAgICBhZHZpc29yOiAxLFxuICAgIGFkdmlzb3JzOiAxLFxuICAgIGFkdmlzb3J5OiAxLFxuICAgIGFkdm9jYWN5OiAxLFxuICAgIGFkdm9jYXRlOiAxLFxuICAgIGFkd2FyZTogMSxcbiAgICBhZTogMSxcbiAgICBhZXJpYWw6IDEsXG4gICAgYWVyb3NwYWNlOiAxLFxuICAgIGFmOiAxLFxuICAgIGFmZmFpcjogMSxcbiAgICBhZmZhaXJzOiAxLFxuICAgIGFmZmVjdDogMSxcbiAgICBhZmZlY3RlZDogMSxcbiAgICBhZmZlY3Rpbmc6IDEsXG4gICAgYWZmZWN0czogMSxcbiAgICBhZmZpbGlhdGU6IDEsXG4gICAgYWZmaWxpYXRlZDogMSxcbiAgICBhZmZpbGlhdGVzOiAxLFxuICAgIGFmZmlsaWF0aW9uOiAxLFxuICAgIGFmZm9yZDogMSxcbiAgICBhZmZvcmRhYmxlOiAxLFxuICAgIGFmZ2hhbmlzdGFuOiAxLFxuICAgIGFmcmFpZDogMSxcbiAgICBhZnJpY2E6IDEsXG4gICAgYWZyaWNhbjogMSxcbiAgICBhZnRlcjogMSxcbiAgICBhZnRlcm5vb246IDEsXG4gICAgYWZ0ZXJ3YXJkczogMSxcbiAgICBhZzogMSxcbiAgICBhZ2FpbjogMSxcbiAgICBhZ2FpbnN0OiAxLFxuICAgIGFnZTogMSxcbiAgICBhZ2VkOiAxLFxuICAgIGFnZW5jaWVzOiAxLFxuICAgIGFnZW5jeTogMSxcbiAgICBhZ2VuZGE6IDEsXG4gICAgYWdlbnQ6IDEsXG4gICAgYWdlbnRzOiAxLFxuICAgIGFnZXM6IDEsXG4gICAgYWdncmVnYXRlOiAxLFxuICAgIGFnZ3Jlc3NpdmU6IDEsXG4gICAgYWdpbmc6IDEsXG4gICAgYWdvOiAxLFxuICAgIGFncmVlOiAxLFxuICAgIGFncmVlZDogMSxcbiAgICBhZ3JlZW1lbnQ6IDEsXG4gICAgYWdyZWVtZW50czogMSxcbiAgICBhZ3JlZXM6IDEsXG4gICAgYWdyaWN1bHR1cmFsOiAxLFxuICAgIGFncmljdWx0dXJlOiAxLFxuICAgIGFoOiAxLFxuICAgIGFoZWFkOiAxLFxuICAgIGFpOiAxLFxuICAgIGFpZDogMSxcbiAgICBhaWRzOiAxLFxuICAgIGFpbTogMSxcbiAgICBhaW1lZDogMSxcbiAgICBhaW1zOiAxLFxuICAgIGFpcjogMSxcbiAgICBhaXJjcmFmdDogMSxcbiAgICBhaXJmYXJlOiAxLFxuICAgIGFpcmxpbmU6IDEsXG4gICAgYWlybGluZXM6IDEsXG4gICAgYWlycGxhbmU6IDEsXG4gICAgYWlycG9ydDogMSxcbiAgICBhaXJwb3J0czogMSxcbiAgICBhajogMSxcbiAgICBhazogMSxcbiAgICBha2E6IDEsXG4gICAgYWw6IDEsXG4gICAgYWxhOiAxLFxuICAgIGFsYWJhbWE6IDEsXG4gICAgYWxhbjogMSxcbiAgICBhbGFybTogMSxcbiAgICBhbGFza2E6IDEsXG4gICAgYWxiYW5pYTogMSxcbiAgICBhbGJhbnk6IDEsXG4gICAgYWxiZXJ0OiAxLFxuICAgIGFsYmVydGE6IDEsXG4gICAgYWxidW06IDEsXG4gICAgYWxidW1zOiAxLFxuICAgIGFsYnVxdWVycXVlOiAxLFxuICAgIGFsY29ob2w6IDEsXG4gICAgYWxlcnQ6IDEsXG4gICAgYWxlcnRzOiAxLFxuICAgIGFsZXg6IDEsXG4gICAgYWxleGFuZGVyOiAxLFxuICAgIGFsZXhhbmRyaWE6IDEsXG4gICAgYWxmcmVkOiAxLFxuICAgIGFsZ2VicmE6IDEsXG4gICAgYWxnZXJpYTogMSxcbiAgICBhbGdvcml0aG06IDEsXG4gICAgYWxnb3JpdGhtczogMSxcbiAgICBhbGk6IDEsXG4gICAgYWxpYXM6IDEsXG4gICAgYWxpY2U6IDEsXG4gICAgYWxpZW46IDEsXG4gICAgYWxpZ246IDEsXG4gICAgYWxpZ25tZW50OiAxLFxuICAgIGFsaWtlOiAxLFxuICAgIGFsaXZlOiAxLFxuICAgIGFsbDogMSxcbiAgICBhbGxhaDogMSxcbiAgICBhbGxhbjogMSxcbiAgICBhbGxlZ2VkOiAxLFxuICAgIGFsbGVuOiAxLFxuICAgIGFsbGVyZ3k6IDEsXG4gICAgYWxsaWFuY2U6IDEsXG4gICAgYWxsaWVkOiAxLFxuICAgIGFsbG9jYXRlZDogMSxcbiAgICBhbGxvY2F0aW9uOiAxLFxuICAgIGFsbG93OiAxLFxuICAgIGFsbG93YW5jZTogMSxcbiAgICBhbGxvd2VkOiAxLFxuICAgIGFsbG93aW5nOiAxLFxuICAgIGFsbG93czogMSxcbiAgICBhbGxveTogMSxcbiAgICBhbG1vc3Q6IDEsXG4gICAgYWxvbmU6IDEsXG4gICAgYWxvbmc6IDEsXG4gICAgYWxvdDogMSxcbiAgICBhbHBoYTogMSxcbiAgICBhbHBoYWJldGljYWw6IDEsXG4gICAgYWxwaW5lOiAxLFxuICAgIGFscmVhZHk6IDEsXG4gICAgYWxzbzogMSxcbiAgICBhbHQ6IDEsXG4gICAgYWx0ZXI6IDEsXG4gICAgYWx0ZXJlZDogMSxcbiAgICBhbHRlcm5hdGU6IDEsXG4gICAgYWx0ZXJuYXRpdmU6IDEsXG4gICAgYWx0ZXJuYXRpdmVseTogMSxcbiAgICBhbHRlcm5hdGl2ZXM6IDEsXG4gICAgYWx0aG91Z2g6IDEsXG4gICAgYWx0bzogMSxcbiAgICBhbHVtaW5pdW06IDEsXG4gICAgYWx1bWludW06IDEsXG4gICAgYWx1bW5pOiAxLFxuICAgIGFsd2F5czogMSxcbiAgICBhbTogMSxcbiAgICBhbWFuZGE6IDEsXG4gICAgYW1hdGV1cjogMSxcbiAgICBhbWF6aW5nOiAxLFxuICAgIGFtYXpvbjogMSxcbiAgICBhbWJhc3NhZG9yOiAxLFxuICAgIGFtYmVyOiAxLFxuICAgIGFtYmllbjogMSxcbiAgICBhbWJpZW50OiAxLFxuICAgIGFtZDogMSxcbiAgICBhbWVuZDogMSxcbiAgICBhbWVuZGVkOiAxLFxuICAgIGFtZW5kbWVudDogMSxcbiAgICBhbWVuZG1lbnRzOiAxLFxuICAgIGFtZW5pdGllczogMSxcbiAgICBhbWVyaWNhOiAxLFxuICAgIGFtZXJpY2FuOiAxLFxuICAgIGFtZXJpY2FuczogMSxcbiAgICBhbWVyaWNhczogMSxcbiAgICBhbWlubzogMSxcbiAgICBhbW9uZzogMSxcbiAgICBhbW9uZ3N0OiAxLFxuICAgIGFtb3VudDogMSxcbiAgICBhbW91bnRzOiAxLFxuICAgIGFtcDogMSxcbiAgICBhbXBsYW5kOiAxLFxuICAgIGFtcGxpZmllcjogMSxcbiAgICBhbXN0ZXJkYW06IDEsXG4gICAgYW15OiAxLFxuICAgIGFuOiAxLFxuICAgIGFuYTogMSxcbiAgICBhbmFoZWltOiAxLFxuICAgIGFuYWw6IDEsXG4gICAgYW5hbG9nOiAxLFxuICAgIGFuYWx5c2VzOiAxLFxuICAgIGFuYWx5c2lzOiAxLFxuICAgIGFuYWx5c3Q6IDEsXG4gICAgYW5hbHlzdHM6IDEsXG4gICAgYW5hbHl0aWNhbDogMSxcbiAgICBhbmFseXplOiAxLFxuICAgIGFuYWx5emVkOiAxLFxuICAgIGFuYXRvbXk6IDEsXG4gICAgYW5jaG9yOiAxLFxuICAgIGFuY2llbnQ6IDEsXG4gICAgYW5kOiAxLFxuXG5cblxuXG5cblxuXG4gICAgYW5kYWxlOiAxLFxuICAgIGFuZGVyc29uOiAxLFxuICAgIGFuZG9ycmE6IDEsXG4gICAgYW5kcmVhOiAxLFxuICAgIGFuZHJlYXM6IDEsXG4gICAgYW5kcmV3OiAxLFxuICAgIGFuZHJld3M6IDEsXG4gICAgYW5keTogMSxcbiAgICBhbmdlbDogMSxcbiAgICBhbmdlbGE6IDEsXG4gICAgYW5nZWxlczogMSxcbiAgICBhbmdlbHM6IDEsXG4gICAgYW5nZXI6IDEsXG4gICAgYW5nbGU6IDEsXG4gICAgYW5nb2xhOiAxLFxuICAgIGFuZ3J5OiAxLFxuICAgIGFuaW1hbDogMSxcbiAgICBhbmltYWxzOiAxLFxuICAgIGFuaW1hdGVkOiAxLFxuICAgIGFuaW1hdGlvbjogMSxcbiAgICBhbmltZTogMSxcbiAgICBhbm46IDEsXG4gICAgYW5uYTogMSxcbiAgICBhbm5lOiAxLFxuICAgIGFubmV4OiAxLFxuICAgIGFubmllOiAxLFxuICAgIGFubml2ZXJzYXJ5OiAxLFxuICAgIGFubm90YXRlZDogMSxcbiAgICBhbm5vdGF0aW9uOiAxLFxuICAgIGFubm91bmNlOiAxLFxuICAgIGFubm91bmNlZDogMSxcbiAgICBhbm5vdW5jZW1lbnQ6IDEsXG4gICAgYW5ub3VuY2VtZW50czogMSxcbiAgICBhbm5vdW5jZXM6IDEsXG4gICAgYW5ub3lpbmc6IDEsXG4gICAgYW5udWFsOiAxLFxuICAgIGFubnVhbGx5OiAxLFxuICAgIGFub255bW91czogMSxcbiAgICBhbm90aGVyOiAxLFxuICAgIGFuc3dlcjogMSxcbiAgICBhbnN3ZXJlZDogMSxcbiAgICBhbnN3ZXJpbmc6IDEsXG4gICAgYW5zd2VyczogMSxcbiAgICBhbnQ6IDEsXG4gICAgYW50YXJjdGljYTogMSxcbiAgICBhbnRlbm5hOiAxLFxuICAgIGFudGhvbnk6IDEsXG4gICAgYW50aHJvcG9sb2d5OiAxLFxuICAgIGFudGk6IDEsXG4gICAgYW50aWJvZGllczogMSxcbiAgICBhbnRpYm9keTogMSxcbiAgICBhbnRpY2lwYXRlZDogMSxcbiAgICBhbnRpZ3VhOiAxLFxuICAgIGFudGlxdWU6IDEsXG4gICAgYW50aXF1ZXM6IDEsXG4gICAgYW50aXZpcnVzOiAxLFxuICAgIGFudG9uaW86IDEsXG4gICAgYW54aWV0eTogMSxcbiAgICBhbnk6IDEsXG4gICAgYW55Ym9keTogMSxcbiAgICBhbnltb3JlOiAxLFxuICAgIGFueW9uZTogMSxcbiAgICBhbnl0aGluZzogMSxcbiAgICBhbnl0aW1lOiAxLFxuICAgIGFueXdheTogMSxcbiAgICBhbnl3aGVyZTogMSxcbiAgICBhb2w6IDEsXG4gICAgYXA6IDEsXG4gICAgYXBhY2hlOiAxLFxuICAgIGFwYXJ0OiAxLFxuICAgIGFwYXJ0bWVudDogMSxcbiAgICBhcGFydG1lbnRzOiAxLFxuICAgIGFwaTogMSxcbiAgICBhcG5pYzogMSxcbiAgICBhcG9sbG86IDEsXG4gICAgYXBwOiAxLFxuICAgIGFwcGFyYXR1czogMSxcbiAgICBhcHBhcmVsOiAxLFxuICAgIGFwcGFyZW50OiAxLFxuICAgIGFwcGFyZW50bHk6IDEsXG4gICAgYXBwZWFsOiAxLFxuICAgIGFwcGVhbHM6IDEsXG4gICAgYXBwZWFyOiAxLFxuICAgIGFwcGVhcmFuY2U6IDEsXG4gICAgYXBwZWFyZWQ6IDEsXG4gICAgYXBwZWFyaW5nOiAxLFxuICAgIGFwcGVhcnM6IDEsXG4gICAgYXBwZW5kaXg6IDEsXG4gICAgYXBwbGU6IDEsXG4gICAgYXBwbGlhbmNlOiAxLFxuICAgIGFwcGxpYW5jZXM6IDEsXG4gICAgYXBwbGljYWJsZTogMSxcbiAgICBhcHBsaWNhbnQ6IDEsXG4gICAgYXBwbGljYW50czogMSxcbiAgICBhcHBsaWNhdGlvbjogMSxcbiAgICBhcHBsaWNhdGlvbnM6IDEsXG4gICAgYXBwbGllZDogMSxcbiAgICBhcHBsaWVzOiAxLFxuICAgIGFwcGx5OiAxLFxuICAgIGFwcGx5aW5nOiAxLFxuICAgIGFwcG9pbnRlZDogMSxcbiAgICBhcHBvaW50bWVudDogMSxcbiAgICBhcHBvaW50bWVudHM6IDEsXG4gICAgYXBwcmFpc2FsOiAxLFxuICAgIGFwcHJlY2lhdGU6IDEsXG4gICAgYXBwcmVjaWF0ZWQ6IDEsXG4gICAgYXBwcmVjaWF0aW9uOiAxLFxuICAgIGFwcHJvYWNoOiAxLFxuICAgIGFwcHJvYWNoZXM6IDEsXG4gICAgYXBwcm9wcmlhdGU6IDEsXG4gICAgYXBwcm9wcmlhdGlvbnM6IDEsXG4gICAgYXBwcm92YWw6IDEsXG4gICAgYXBwcm92ZTogMSxcbiAgICBhcHByb3ZlZDogMSxcbiAgICBhcHByb3g6IDEsXG4gICAgYXBwcm94aW1hdGU6IDEsXG4gICAgYXBwcm94aW1hdGVseTogMSxcbiAgICBhcHBzOiAxLFxuICAgIGFwcjogMSxcbiAgICBhcHJpbDogMSxcbiAgICBhcHQ6IDEsXG4gICAgYXF1YTogMSxcbiAgICBhcXVhcml1bTogMSxcbiAgICBhcXVhdGljOiAxLFxuICAgIGFyOiAxLFxuICAgIGFyYWI6IDEsXG4gICAgYXJhYmlhOiAxLFxuICAgIGFyYWJpYzogMSxcbiAgICBhcmJpdHJhcnk6IDEsXG4gICAgYXJiaXRyYXRpb246IDEsXG4gICAgYXJib3I6IDEsXG4gICAgYXJjOiAxLFxuICAgIGFyY2FkZTogMSxcbiAgICBhcmNoOiAxLFxuICAgIGFyY2hpdGVjdDogMSxcbiAgICBhcmNoaXRlY3RzOiAxLFxuICAgIGFyY2hpdGVjdHVyYWw6IDEsXG4gICAgYXJjaGl0ZWN0dXJlOiAxLFxuICAgIGFyY2hpdmU6IDEsXG4gICAgYXJjaGl2ZWQ6IDEsXG4gICAgYXJjaGl2ZXM6IDEsXG4gICAgYXJjdGljOiAxLFxuICAgIGFyZTogMSxcbiAgICBhcmVhOiAxLFxuICAgIGFyZWFzOiAxLFxuICAgIGFyZW5hOiAxLFxuICAgIGFyZzogMSxcbiAgICBhcmdlbnRpbmE6IDEsXG4gICAgYXJndWU6IDEsXG4gICAgYXJndWVkOiAxLFxuICAgIGFyZ3VtZW50OiAxLFxuICAgIGFyZ3VtZW50czogMSxcbiAgICBhcmlzZTogMSxcbiAgICBhcmlzaW5nOiAxLFxuICAgIGFyaXpvbmE6IDEsXG4gICAgYXJrYW5zYXM6IDEsXG4gICAgYXJsaW5ndG9uOiAxLFxuICAgIGFybTogMSxcbiAgICBhcm1lZDogMSxcbiAgICBhcm1lbmlhOiAxLFxuICAgIGFybW9yOiAxLFxuICAgIGFybXM6IDEsXG4gICAgYXJtc3Ryb25nOiAxLFxuICAgIGFybXk6IDEsXG4gICAgYXJub2xkOiAxLFxuICAgIGFyb3VuZDogMSxcbiAgICBhcnJhbmdlOiAxLFxuICAgIGFycmFuZ2VkOiAxLFxuICAgIGFycmFuZ2VtZW50OiAxLFxuICAgIGFycmFuZ2VtZW50czogMSxcbiAgICBhcnJheTogMSxcbiAgICBhcnJlc3Q6IDEsXG4gICAgYXJyZXN0ZWQ6IDEsXG4gICAgYXJyaXZhbDogMSxcbiAgICBhcnJpdmFsczogMSxcbiAgICBhcnJpdmU6IDEsXG4gICAgYXJyaXZlZDogMSxcbiAgICBhcnJpdmVzOiAxLFxuICAgIGFycm93OiAxLFxuICAgIGFydDogMSxcbiAgICBhcnRocml0aXM6IDEsXG4gICAgYXJ0aHVyOiAxLFxuICAgIGFydGljbGU6IDEsXG4gICAgYXJ0aWNsZXM6IDEsXG4gICAgYXJ0aWZpY2lhbDogMSxcbiAgICBhcnRpc3Q6IDEsXG4gICAgYXJ0aXN0aWM6IDEsXG4gICAgYXJ0aXN0czogMSxcbiAgICBhcnRzOiAxLFxuICAgIGFydHdvcms6IDEsXG4gICAgYXJ1YmE6IDEsXG4gICAgYXM6IDEsXG4gICAgYXNiZXN0b3M6IDEsXG4gICAgYXNjaWk6IDEsXG4gICAgYXNoOiAxLFxuICAgIGFzaGxleTogMSxcbiAgICBhc2lhOiAxLFxuICAgIGFzaWFuOiAxLFxuICAgIGFzaWRlOiAxLFxuICAgIGFzaW46IDEsXG4gICAgYXNrOiAxLFxuICAgIGFza2VkOiAxLFxuICAgIGFza2luZzogMSxcbiAgICBhc2tzOiAxLFxuICAgIGFzbjogMSxcbiAgICBhc3A6IDEsXG4gICAgYXNwZWN0OiAxLFxuICAgIGFzcGVjdHM6IDEsXG4gICAgYXNzOiAxLFxuICAgIGFzc2F1bHQ6IDEsXG4gICAgYXNzZW1ibGVkOiAxLFxuICAgIGFzc2VtYmx5OiAxLFxuICAgIGFzc2VzczogMSxcbiAgICBhc3Nlc3NlZDogMSxcbiAgICBhc3Nlc3Npbmc6IDEsXG4gICAgYXNzZXNzbWVudDogMSxcbiAgICBhc3Nlc3NtZW50czogMSxcbiAgICBhc3NldDogMSxcbiAgICBhc3NldHM6IDEsXG4gICAgYXNzaWduOiAxLFxuICAgIGFzc2lnbmVkOiAxLFxuICAgIGFzc2lnbm1lbnQ6IDEsXG4gICAgYXNzaWdubWVudHM6IDEsXG4gICAgYXNzaXN0OiAxLFxuICAgIGFzc2lzdGFuY2U6IDEsXG4gICAgYXNzaXN0YW50OiAxLFxuICAgIGFzc2lzdGVkOiAxLFxuICAgIGFzc2lzdHM6IDEsXG4gICAgYXNzb2NpYXRlOiAxLFxuICAgIGFzc29jaWF0ZWQ6IDEsXG4gICAgYXNzb2NpYXRlczogMSxcbiAgICBhc3NvY2lhdGlvbjogMSxcbiAgICBhc3NvY2lhdGlvbnM6IDEsXG4gICAgYXNzdW1lOiAxLFxuICAgIGFzc3VtZWQ6IDEsXG4gICAgYXNzdW1lczogMSxcbiAgICBhc3N1bWluZzogMSxcbiAgICBhc3N1bXB0aW9uOiAxLFxuICAgIGFzc3VtcHRpb25zOiAxLFxuICAgIGFzc3VyYW5jZTogMSxcbiAgICBhc3N1cmU6IDEsXG4gICAgYXNzdXJlZDogMSxcbiAgICBhc3RobWE6IDEsXG4gICAgYXN0cm9sb2d5OiAxLFxuXG5cblxuXG5cblxuXG4gICAgYXN0cm9ub215OiAxLFxuICAgIGFzdXM6IDEsXG4gICAgYXN5bHVtOiAxLFxuICAgIGF0OiAxLFxuICAgIGF0YTogMSxcbiAgICBhdGU6IDEsXG4gICAgYXRoZW5zOiAxLFxuICAgIGF0aGxldGVzOiAxLFxuICAgIGF0aGxldGljOiAxLFxuICAgIGF0aGxldGljczogMSxcbiAgICBhdGk6IDEsXG4gICAgYXRsYW50YTogMSxcbiAgICBhdGxhbnRpYzogMSxcbiAgICBhdGxhczogMSxcbiAgICBhdG06IDEsXG4gICAgYXRtb3NwaGVyZTogMSxcbiAgICBhdG1vc3BoZXJpYzogMSxcbiAgICBhdG9tOiAxLFxuICAgIGF0b21pYzogMSxcbiAgICBhdHRhY2g6IDEsXG4gICAgYXR0YWNoZWQ6IDEsXG4gICAgYXR0YWNobWVudDogMSxcbiAgICBhdHRhY2htZW50czogMSxcbiAgICBhdHRhY2s6IDEsXG4gICAgYXR0YWNrZWQ6IDEsXG4gICAgYXR0YWNrczogMSxcbiAgICBhdHRlbXB0OiAxLFxuICAgIGF0dGVtcHRlZDogMSxcbiAgICBhdHRlbXB0aW5nOiAxLFxuICAgIGF0dGVtcHRzOiAxLFxuICAgIGF0dGVuZDogMSxcbiAgICBhdHRlbmRhbmNlOiAxLFxuICAgIGF0dGVuZGVkOiAxLFxuICAgIGF0dGVuZGluZzogMSxcbiAgICBhdHRlbnRpb246IDEsXG4gICAgYXR0aXR1ZGU6IDEsXG4gICAgYXR0aXR1ZGVzOiAxLFxuICAgIGF0dG9ybmV5OiAxLFxuICAgIGF0dG9ybmV5czogMSxcbiAgICBhdHRyYWN0OiAxLFxuICAgIGF0dHJhY3Rpb246IDEsXG4gICAgYXR0cmFjdGlvbnM6IDEsXG4gICAgYXR0cmFjdGl2ZTogMSxcbiAgICBhdHRyaWJ1dGU6IDEsXG4gICAgYXR0cmlidXRlczogMSxcbiAgICBhdTogMSxcbiAgICBhdWJ1cm46IDEsXG4gICAgYXVja2xhbmQ6IDEsXG4gICAgYXVjdGlvbjogMSxcbiAgICBhdWN0aW9uczogMSxcbiAgICBhdWQ6IDEsXG4gICAgYXVkaTogMSxcbiAgICBhdWRpZW5jZTogMSxcbiAgICBhdWRpbzogMSxcbiAgICBhdWRpdDogMSxcbiAgICBhdWRpdG9yOiAxLFxuICAgIGF1ZzogMSxcbiAgICBhdWd1c3Q6IDEsXG4gICAgYXVyb3JhOiAxLFxuICAgIGF1czogMSxcbiAgICBhdXN0aW46IDEsXG4gICAgYXVzdHJhbGlhOiAxLFxuICAgIGF1c3RyYWxpYW46IDEsXG4gICAgYXVzdHJpYTogMSxcbiAgICBhdXRoZW50aWM6IDEsXG4gICAgYXV0aGVudGljYXRpb246IDEsXG4gICAgYXV0aG9yOiAxLFxuICAgIGF1dGhvcml0aWVzOiAxLFxuICAgIGF1dGhvcml0eTogMSxcbiAgICBhdXRob3JpemF0aW9uOiAxLFxuICAgIGF1dGhvcml6ZWQ6IDEsXG4gICAgYXV0aG9yczogMSxcbiAgICBhdXRvOiAxLFxuICAgIGF1dG9tYXRlZDogMSxcbiAgICBhdXRvbWF0aWM6IDEsXG4gICAgYXV0b21hdGljYWxseTogMSxcbiAgICBhdXRvbWF0aW9uOiAxLFxuICAgIGF1dG9tb2JpbGU6IDEsXG4gICAgYXV0b21vYmlsZXM6IDEsXG4gICAgYXV0b21vdGl2ZTogMSxcbiAgICBhdXRvczogMSxcbiAgICBhdXR1bW46IDEsXG4gICAgYXY6IDEsXG4gICAgYXZhaWxhYmlsaXR5OiAxLFxuICAgIGF2YWlsYWJsZTogMSxcbiAgICBhdmF0YXI6IDEsXG4gICAgYXZlOiAxLFxuICAgIGF2ZW51ZTogMSxcbiAgICBhdmVyYWdlOiAxLFxuICAgIGF2ZzogMSxcbiAgICBhdmk6IDEsXG4gICAgYXZpYXRpb246IDEsXG4gICAgYXZvaWQ6IDEsXG4gICAgYXZvaWRpbmc6IDEsXG4gICAgYXZvbjogMSxcbiAgICBhdzogMSxcbiAgICBhd2FyZDogMSxcbiAgICBhd2FyZGVkOiAxLFxuICAgIGF3YXJkczogMSxcbiAgICBhd2FyZTogMSxcbiAgICBhd2FyZW5lc3M6IDEsXG4gICAgYXdheTogMSxcbiAgICBhd2Vzb21lOiAxLFxuICAgIGF3ZnVsOiAxLFxuICAgIGF4aXM6IDEsXG4gICAgYXllOiAxLFxuICAgIGF6OiAxLFxuICAgIGF6ZXJiYWlqYW46IDEsXG4gICAgYjogMSxcbiAgICBiYTogMSxcbiAgICBiYWJlOiAxLFxuICAgIGJhYmVzOiAxLFxuICAgIGJhYmllczogMSxcbiAgICBiYWJ5OiAxLFxuICAgIGJhY2hlbG9yOiAxLFxuICAgIGJhY2s6IDEsXG4gICAgYmFja2VkOiAxLFxuICAgIGJhY2tncm91bmQ6IDEsXG4gICAgYmFja2dyb3VuZHM6IDEsXG4gICAgYmFja2luZzogMSxcbiAgICBiYWNrdXA6IDEsXG4gICAgYmFjb246IDEsXG4gICAgYmFjdGVyaWE6IDEsXG4gICAgYmFjdGVyaWFsOiAxLFxuICAgIGJhZDogMSxcbiAgICBiYWRnZTogMSxcbiAgICBiYWRseTogMSxcbiAgICBiYWc6IDEsXG4gICAgYmFnaGRhZDogMSxcbiAgICBiYWdzOiAxLFxuICAgIGJhaGFtYXM6IDEsXG4gICAgYmFocmFpbjogMSxcbiAgICBiYWlsZXk6IDEsXG4gICAgYmFrZXI6IDEsXG4gICAgYmFraW5nOiAxLFxuICAgIGJhbGFuY2U6IDEsXG4gICAgYmFsYW5jZWQ6IDEsXG4gICAgYmFsZDogMSxcbiAgICBiYWxpOiAxLFxuICAgIGJhbGw6IDEsXG4gICAgYmFsbGV0OiAxLFxuICAgIGJhbGxvb246IDEsXG4gICAgYmFsbG90OiAxLFxuICAgIGJhbGxzOiAxLFxuICAgIGJhbHRpbW9yZTogMSxcbiAgICBiYW46IDEsXG4gICAgYmFuYW5hOiAxLFxuICAgIGJhbmQ6IDEsXG4gICAgYmFuZHM6IDEsXG4gICAgYmFuZHdpZHRoOiAxLFxuICAgIGJhbmc6IDEsXG4gICAgYmFuZ2J1czogMSxcbiAgICBiYW5na29rOiAxLFxuICAgIGJhbmdsYWRlc2g6IDEsXG4gICAgYmFuazogMSxcbiAgICBiYW5raW5nOiAxLFxuICAgIGJhbmtydXB0Y3k6IDEsXG4gICAgYmFua3M6IDEsXG4gICAgYmFubmVkOiAxLFxuICAgIGJhbm5lcjogMSxcbiAgICBiYW5uZXJzOiAxLFxuICAgIGJhcHRpc3Q6IDEsXG4gICAgYmFyOiAxLFxuICAgIGJhcmJhZG9zOiAxLFxuICAgIGJhcmJhcmE6IDEsXG4gICAgYmFyYmllOiAxLFxuICAgIGJhcmNlbG9uYTogMSxcbiAgICBiYXJlOiAxLFxuICAgIGJhcmVseTogMSxcbiAgICBiYXJnYWluOiAxLFxuICAgIGJhcmdhaW5zOiAxLFxuICAgIGJhcm46IDEsXG4gICAgYmFybmVzOiAxLFxuICAgIGJhcnJlbDogMSxcbiAgICBiYXJyaWVyOiAxLFxuICAgIGJhcnJpZXJzOiAxLFxuICAgIGJhcnJ5OiAxLFxuICAgIGJhcnM6IDEsXG4gICAgYmFzZTogMSxcbiAgICBiYXNlYmFsbDogMSxcbiAgICBiYXNlZDogMSxcbiAgICBiYXNlbGluZTogMSxcbiAgICBiYXNlbWVudDogMSxcbiAgICBiYXNlbmFtZTogMSxcbiAgICBiYXNlczogMSxcbiAgICBiYXNpYzogMSxcbiAgICBiYXNpY2FsbHk6IDEsXG4gICAgYmFzaWNzOiAxLFxuICAgIGJhc2luOiAxLFxuICAgIGJhc2lzOiAxLFxuICAgIGJhc2tldDogMSxcbiAgICBiYXNrZXRiYWxsOiAxLFxuICAgIGJhc2tldHM6IDEsXG4gICAgYmFzczogMSxcbiAgICBiYXQ6IDEsXG4gICAgYmF0Y2g6IDEsXG4gICAgYmF0aDogMSxcbiAgICBiYXRocm9vbTogMSxcbiAgICBiYXRocm9vbXM6IDEsXG4gICAgYmF0aHM6IDEsXG4gICAgYmF0bWFuOiAxLFxuICAgIGJhdHRlcmllczogMSxcbiAgICBiYXR0ZXJ5OiAxLFxuICAgIGJhdHRsZTogMSxcbiAgICBiYXR0bGVmaWVsZDogMSxcbiAgICBiYXk6IDEsXG4gICAgYmI6IDEsXG4gICAgYmJjOiAxLFxuICAgIGJiczogMSxcbiAgICBiYnc6IDEsXG4gICAgYmM6IDEsXG4gICAgYmQ6IDEsXG4gICAgYmRzbTogMSxcbiAgICBiZTogMSxcbiAgICBiZWFjaDogMSxcbiAgICBiZWFjaGVzOiAxLFxuICAgIGJlYWRzOiAxLFxuICAgIGJlYW06IDEsXG4gICAgYmVhbjogMSxcbiAgICBiZWFuczogMSxcbiAgICBiZWFyOiAxLFxuICAgIGJlYXJpbmc6IDEsXG4gICAgYmVhcnM6IDEsXG4gICAgYmVhc3Q6IDEsXG4gICAgYmVhc3RhbGl0eTogMSxcbiAgICBiZWFzdGlhbGl0eTogMSxcbiAgICBiZWF0OiAxLFxuICAgIGJlYXRsZXM6IDEsXG4gICAgYmVhdHM6IDEsXG4gICAgYmVhdXRpZnVsOiAxLFxuICAgIGJlYXV0aWZ1bGx5OiAxLFxuICAgIGJlYXV0eTogMSxcbiAgICBiZWF2ZXI6IDEsXG4gICAgYmVjYW1lOiAxLFxuICAgIGJlY2F1c2U6IDEsXG4gICAgYmVjb21lOiAxLFxuICAgIGJlY29tZXM6IDEsXG4gICAgYmVjb21pbmc6IDEsXG4gICAgYmVkOiAxLFxuICAgIGJlZGRpbmc6IDEsXG4gICAgYmVkZm9yZDogMSxcbiAgICBiZWRyb29tOiAxLFxuICAgIGJlZHJvb21zOiAxLFxuICAgIGJlZHM6IDEsXG4gICAgYmVlOiAxLFxuICAgIGJlZWY6IDEsXG4gICAgYmVlbjogMSxcbiAgICBiZWVyOiAxLFxuICAgIGJlZm9yZTogMSxcbiAgICBiZWdhbjogMSxcbiAgICBiZWdpbjogMSxcbiAgICBiZWdpbm5lcjogMSxcbiAgICBiZWdpbm5lcnM6IDEsXG4gICAgYmVnaW5uaW5nOiAxLFxuICAgIGJlZ2luczogMSxcbiAgICBiZWd1bjogMSxcbiAgICBiZWhhbGY6IDEsXG4gICAgYmVoYXZpb3I6IDEsXG4gICAgYmVoYXZpb3JhbDogMSxcbiAgICBiZWhhdmlvdXI6IDEsXG4gICAgYmVoaW5kOiAxLFxuICAgIGJlaWppbmc6IDEsXG4gICAgYmVpbmc6IDEsXG4gICAgYmVpbmdzOiAxLFxuICAgIGJlbGFydXM6IDEsXG4gICAgYmVsZmFzdDogMSxcbiAgICBiZWxnaXVtOiAxLFxuICAgIGJlbGllZjogMSxcbiAgICBiZWxpZWZzOiAxLFxuICAgIGJlbGlldmU6IDEsXG4gICAgYmVsaWV2ZWQ6IDEsXG4gICAgYmVsaWV2ZXM6IDEsXG4gICAgYmVsaXplOiAxLFxuICAgIGJlbGtpbjogMSxcbiAgICBiZWxsOiAxLFxuICAgIGJlbGxlOiAxLFxuICAgIGJlbGx5OiAxLFxuICAgIGJlbG9uZzogMSxcbiAgICBiZWxvbmdzOiAxLFxuICAgIGJlbG93OiAxLFxuICAgIGJlbHQ6IDEsXG4gICAgYmVsdHM6IDEsXG4gICAgYmVuOiAxLFxuICAgIGJlbmNoOiAxLFxuICAgIGJlbmNobWFyazogMSxcbiAgICBiZW5kOiAxLFxuICAgIGJlbmVhdGg6IDEsXG4gICAgYmVuZWZpY2lhbDogMSxcbiAgICBiZW5lZml0OiAxLFxuICAgIGJlbmVmaXRzOiAxLFxuICAgIGJlbmphbWluOiAxLFxuICAgIGJlbm5ldHQ6IDEsXG4gICAgYmVudDogMSxcbiAgICBiZW56OiAxLFxuICAgIGJlcmtlbGV5OiAxLFxuICAgIGJlcmxpbjogMSxcbiAgICBiZXJtdWRhOiAxLFxuICAgIGJlcm5hcmQ6IDEsXG4gICAgYmVycnk6IDEsXG4gICAgYmVzaWRlOiAxLFxuICAgIGJlc2lkZXM6IDEsXG4gICAgYmVzdDogMSxcbiAgICBiZXN0aWFsaXR5OiAxLFxuICAgIGJlc3RzZWxsZXJzOiAxLFxuICAgIGJldDogMSxcbiAgICBiZXRhOiAxLFxuICAgIGJldGg6IDEsXG4gICAgYmV0dGVyOiAxLFxuICAgIGJldHRpbmc6IDEsXG4gICAgYmV0dHk6IDEsXG4gICAgYmV0d2VlbjogMSxcbiAgICBiZXZlcmFnZTogMSxcbiAgICBiZXZlcmFnZXM6IDEsXG4gICAgYmV2ZXJseTogMSxcbiAgICBiZXlvbmQ6IDEsXG4gICAgYmc6IDEsXG4gICAgYmh1dGFuOiAxLFxuICAgIGJpOiAxLFxuICAgIGJpYXM6IDEsXG4gICAgYmlibGU6IDEsXG4gICAgYmlibGljYWw6IDEsXG4gICAgYmlibGlvZ3JhcGhpYzogMSxcbiAgICBiaWJsaW9ncmFwaHk6IDEsXG4gICAgYmljeWNsZTogMSxcbiAgICBiaWQ6IDEsXG4gICAgYmlkZGVyOiAxLFxuICAgIGJpZGRpbmc6IDEsXG4gICAgYmlkczogMSxcbiAgICBiaWc6IDEsXG4gICAgYmlnZ2VyOiAxLFxuICAgIGJpZ2dlc3Q6IDEsXG4gICAgYmlrZTogMSxcbiAgICBiaWtlczogMSxcbiAgICBiaWtpbmk6IDEsXG4gICAgYmlsbDogMSxcbiAgICBiaWxsaW5nOiAxLFxuICAgIGJpbGxpb246IDEsXG4gICAgYmlsbHM6IDEsXG4gICAgYmlsbHk6IDEsXG4gICAgYmluOiAxLFxuICAgIGJpbmFyeTogMSxcbiAgICBiaW5kOiAxLFxuICAgIGJpbmRpbmc6IDEsXG4gICAgYmluZ286IDEsXG4gICAgYmlvOiAxLFxuICAgIGJpb2RpdmVyc2l0eTogMSxcbiAgICBiaW9ncmFwaGllczogMSxcbiAgICBiaW9ncmFwaHk6IDEsXG4gICAgYmlvbDogMSxcbiAgICBiaW9sb2dpY2FsOiAxLFxuICAgIGJpb2xvZ3k6IDEsXG4gICAgYmlvczogMSxcbiAgICBiaW90ZWNobm9sb2d5OiAxLFxuICAgIGJpcmQ6IDEsXG4gICAgYmlyZHM6IDEsXG4gICAgYmlybWluZ2hhbTogMSxcbiAgICBiaXJ0aDogMSxcbiAgICBiaXJ0aGRheTogMSxcbiAgICBiaXNob3A6IDEsXG4gICAgYml0OiAxLFxuICAgIGJpdGNoOiAxLFxuICAgIGJpdGU6IDEsXG4gICAgYml0czogMSxcbiAgICBiaXo6IDEsXG4gICAgYml6YXJyZTogMSxcbiAgICBiaXpyYXRlOiAxLFxuICAgIGJrOiAxLFxuICAgIGJsOiAxLFxuICAgIGJsYWNrOiAxLFxuICAgIGJsYWNrYmVycnk6IDEsXG4gICAgYmxhY2tqYWNrOiAxLFxuICAgIGJsYWNrczogMSxcbiAgICBibGFkZTogMSxcbiAgICBibGFkZXM6IDEsXG4gICAgYmxhaDogMSxcbiAgICBibGFpcjogMSxcbiAgICBibGFrZTogMSxcbiAgICBibGFtZTogMSxcbiAgICBibGFuazogMSxcbiAgICBibGFua2V0OiAxLFxuICAgIGJsYXN0OiAxLFxuICAgIGJsZWVkaW5nOiAxLFxuICAgIGJsZW5kOiAxLFxuICAgIGJsZXNzOiAxLFxuICAgIGJsZXNzZWQ6IDEsXG4gICAgYmxpbmQ6IDEsXG4gICAgYmxpbms6IDEsXG4gICAgYmxvY2s6IDEsXG4gICAgYmxvY2tlZDogMSxcbiAgICBibG9ja2luZzogMSxcbiAgICBibG9ja3M6IDEsXG4gICAgYmxvZzogMSxcbiAgICBibG9nZ2VyOiAxLFxuICAgIGJsb2dnZXJzOiAxLFxuICAgIGJsb2dnaW5nOiAxLFxuICAgIGJsb2dzOiAxLFxuICAgIGJsb25kOiAxLFxuICAgIGJsb25kZTogMSxcbiAgICBibG9vZDogMSxcbiAgICBibG9vZHk6IDEsXG4gICAgYmxvb206IDEsXG4gICAgYmxvb21iZXJnOiAxLFxuICAgIGJsb3c6IDEsXG4gICAgYmxvd2luZzogMSxcbiAgICBibG93am9iOiAxLFxuICAgIGJsb3dqb2JzOiAxLFxuICAgIGJsdWU6IDEsXG4gICAgYmx1ZXM6IDEsXG4gICAgYmx1ZXRvb3RoOiAxLFxuICAgIGJsdmQ6IDEsXG4gICAgYm06IDEsXG4gICAgYm13OiAxLFxuICAgIGJvOiAxLFxuICAgIGJvYXJkOiAxLFxuICAgIGJvYXJkczogMSxcbiAgICBib2F0OiAxLFxuICAgIGJvYXRpbmc6IDEsXG4gICAgYm9hdHM6IDEsXG4gICAgYm9iOiAxLFxuICAgIGJvYmJ5OiAxLFxuICAgIGJvYzogMSxcbiAgICBib2RpZXM6IDEsXG4gICAgYm9keTogMSxcbiAgICBib2xkOiAxLFxuICAgIGJvbGl2aWE6IDEsXG4gICAgYm9sdDogMSxcbiAgICBib21iOiAxLFxuICAgIGJvbjogMSxcbiAgICBib25kOiAxLFxuICAgIGJvbmRhZ2U6IDEsXG4gICAgYm9uZHM6IDEsXG4gICAgYm9uZTogMSxcbiAgICBib25lczogMSxcbiAgICBib251czogMSxcbiAgICBib29iOiAxLFxuICAgIGJvb2JzOiAxLFxuICAgIGJvb2s6IDEsXG4gICAgYm9va2luZzogMSxcbiAgICBib29raW5nczogMSxcbiAgICBib29rbWFyazogMSxcbiAgICBib29rbWFya3M6IDEsXG4gICAgYm9va3M6IDEsXG4gICAgYm9va3N0b3JlOiAxLFxuICAgIGJvb2w6IDEsXG4gICAgYm9vbGVhbjogMSxcbiAgICBib29tOiAxLFxuICAgIGJvb3N0OiAxLFxuICAgIGJvb3Q6IDEsXG4gICAgYm9vdGg6IDEsXG4gICAgYm9vdHM6IDEsXG4gICAgYm9vdHk6IDEsXG4gICAgYm9yZGVyOiAxLFxuICAgIGJvcmRlcnM6IDEsXG4gICAgYm9yZWQ6IDEsXG4gICAgYm9yaW5nOiAxLFxuICAgIGJvcm46IDEsXG4gICAgYm9yb3VnaDogMSxcbiAgICBib3NuaWE6IDEsXG4gICAgYm9zczogMSxcbiAgICBib3N0b246IDEsXG4gICAgYm90aDogMSxcbiAgICBib3RoZXI6IDEsXG4gICAgYm90c3dhbmE6IDEsXG4gICAgYm90dGxlOiAxLFxuICAgIGJvdHRsZXM6IDEsXG4gICAgYm90dG9tOiAxLFxuICAgIGJvdWdodDogMSxcbiAgICBib3VsZGVyOiAxLFxuICAgIGJvdWxldmFyZDogMSxcbiAgICBib3VuZDogMSxcbiAgICBib3VuZGFyaWVzOiAxLFxuICAgIGJvdW5kYXJ5OiAxLFxuICAgIGJvdXF1ZXQ6IDEsXG4gICAgYm91dGlxdWU6IDEsXG4gICAgYm93OiAxLFxuICAgIGJvd2w6IDEsXG4gICAgYm93bGluZzogMSxcbiAgICBib3g6IDEsXG4gICAgYm94ZWQ6IDEsXG4gICAgYm94ZXM6IDEsXG4gICAgYm94aW5nOiAxLFxuICAgIGJveTogMSxcbiAgICBib3lzOiAxLFxuICAgIGJwOiAxLFxuICAgIGJyOiAxLFxuICAgIGJyYTogMSxcbiAgICBicmFjZWxldDogMSxcbiAgICBicmFjZWxldHM6IDEsXG4gICAgYnJhY2tldDogMSxcbiAgICBicmFkOiAxLFxuICAgIGJyYWRmb3JkOiAxLFxuICAgIGJyYWRsZXk6IDEsXG4gICAgYnJhaW46IDEsXG4gICAgYnJha2U6IDEsXG4gICAgYnJha2VzOiAxLFxuICAgIGJyYW5jaDogMSxcbiAgICBicmFuY2hlczogMSxcbiAgICBicmFuZDogMSxcbiAgICBicmFuZG9uOiAxLFxuICAgIGJyYW5kczogMSxcbiAgICBicmFzOiAxLFxuICAgIGJyYXNzOiAxLFxuICAgIGJyYXZlOiAxLFxuICAgIGJyYXppbDogMSxcbiAgICBicmF6aWxpYW46IDEsXG4gICAgYnJlYWNoOiAxLFxuICAgIGJyZWFkOiAxLFxuICAgIGJyZWFrOiAxLFxuICAgIGJyZWFrZG93bjogMSxcbiAgICBicmVha2Zhc3Q6IDEsXG4gICAgYnJlYWtpbmc6IDEsXG4gICAgYnJlYWtzOiAxLFxuICAgIGJyZWFzdDogMSxcbiAgICBicmVhc3RzOiAxLFxuICAgIGJyZWF0aDogMSxcbiAgICBicmVhdGhpbmc6IDEsXG4gICAgYnJlZWQ6IDEsXG4gICAgYnJlZWRpbmc6IDEsXG4gICAgYnJlZWRzOiAxLFxuICAgIGJyaWFuOiAxLFxuICAgIGJyaWNrOiAxLFxuICAgIGJyaWRhbDogMSxcbiAgICBicmlkZTogMSxcbiAgICBicmlkZ2U6IDEsXG4gICAgYnJpZGdlczogMSxcbiAgICBicmllZjogMSxcbiAgICBicmllZmluZzogMSxcbiAgICBicmllZmx5OiAxLFxuICAgIGJyaWVmczogMSxcbiAgICBicmlnaHQ6IDEsXG4gICAgYnJpZ2h0b246IDEsXG4gICAgYnJpbGxpYW50OiAxLFxuICAgIGJyaW5nOiAxLFxuICAgIGJyaW5naW5nOiAxLFxuICAgIGJyaW5nczogMSxcbiAgICBicmlzYmFuZTogMSxcbiAgICBicmlzdG9sOiAxLFxuICAgIGJyaXRhaW46IDEsXG4gICAgYnJpdGFubmljYTogMSxcbiAgICBicml0aXNoOiAxLFxuICAgIGJyaXRuZXk6IDEsXG4gICAgYnJvYWQ6IDEsXG4gICAgYnJvYWRiYW5kOiAxLFxuICAgIGJyb2FkY2FzdDogMSxcbiAgICBicm9hZGNhc3Rpbmc6IDEsXG4gICAgYnJvYWRlcjogMSxcbiAgICBicm9hZHdheTogMSxcbiAgICBicm9jaHVyZTogMSxcbiAgICBicm9jaHVyZXM6IDEsXG4gICAgYnJva2U6IDEsXG4gICAgYnJva2VuOiAxLFxuICAgIGJyb2tlcjogMSxcbiAgICBicm9rZXJzOiAxLFxuICAgIGJyb256ZTogMSxcbiAgICBicm9vazogMSxcbiAgICBicm9va2x5bjogMSxcbiAgICBicm9va3M6IDEsXG4gICAgYnJvdGhlcjogMSxcbiAgICBicm90aGVyczogMSxcbiAgICBicm91Z2h0OiAxLFxuICAgIGJyb3duOiAxLFxuICAgIGJyb3dzZTogMSxcbiAgICBicm93c2VyOiAxLFxuICAgIGJyb3dzZXJzOiAxLFxuICAgIGJyb3dzaW5nOiAxLFxuICAgIGJydWNlOiAxLFxuICAgIGJydW5laTogMSxcbiAgICBicnVuZXR0ZTogMSxcbiAgICBicnVuc3dpY2s6IDEsXG4gICAgYnJ1c2g6IDEsXG4gICAgYnJ1c3NlbHM6IDEsXG4gICAgYnJ1dGFsOiAxLFxuICAgIGJyeWFuOiAxLFxuICAgIGJyeWFudDogMSxcbiAgICBiczogMSxcbiAgICBidDogMSxcbiAgICBidWJibGU6IDEsXG4gICAgYnVjazogMSxcbiAgICBidWNrczogMSxcbiAgICBidWRhcGVzdDogMSxcbiAgICBidWRkeTogMSxcbiAgICBidWRnZXQ6IDEsXG4gICAgYnVkZ2V0czogMSxcbiAgICBidWY6IDEsXG4gICAgYnVmZmFsbzogMSxcbiAgICBidWZmZXI6IDEsXG4gICAgYnVmaW5nOiAxLFxuICAgIGJ1ZzogMSxcbiAgICBidWdzOiAxLFxuICAgIGJ1aWxkOiAxLFxuICAgIGJ1aWxkZXI6IDEsXG4gICAgYnVpbGRlcnM6IDEsXG4gICAgYnVpbGRpbmc6IDEsXG4gICAgYnVpbGRpbmdzOiAxLFxuICAgIGJ1aWxkczogMSxcbiAgICBidWlsdDogMSxcbiAgICBidWtrYWtlOiAxLFxuICAgIGJ1bGdhcmlhOiAxLFxuICAgIGJ1bGdhcmlhbjogMSxcbiAgICBidWxrOiAxLFxuICAgIGJ1bGw6IDEsXG4gICAgYnVsbGV0OiAxLFxuICAgIGJ1bGxldGluOiAxLFxuICAgIGJ1bXBlcjogMSxcbiAgICBidW5jaDogMSxcbiAgICBidW5kbGU6IDEsXG4gICAgYnVubnk6IDEsXG4gICAgYnVyZGVuOiAxLFxuICAgIGJ1cmVhdTogMSxcbiAgICBidXJpZWQ6IDEsXG4gICAgYnVya2U6IDEsXG4gICAgYnVybGluZ3RvbjogMSxcbiAgICBidXJuOiAxLFxuICAgIGJ1cm5lcjogMSxcbiAgICBidXJuaW5nOiAxLFxuICAgIGJ1cm5zOiAxLFxuICAgIGJ1cnN0OiAxLFxuICAgIGJ1cnRvbjogMSxcbiAgICBidXM6IDEsXG4gICAgYnVzZXM6IDEsXG4gICAgYnVzaDogMSxcbiAgICBidXNpbmVzczogMSxcbiAgICBidXNpbmVzc2VzOiAxLFxuICAgIGJ1c3R5OiAxLFxuICAgIGJ1c3k6IDEsXG4gICAgYnV0OiAxLFxuICAgIGJ1dGxlcjogMSxcbiAgICBidXR0OiAxLFxuICAgIGJ1dHRlcjogMSxcbiAgICBidXR0ZXJmbHk6IDEsXG4gICAgYnV0dG9uOiAxLFxuICAgIGJ1dHRvbnM6IDEsXG4gICAgYnV0dHM6IDEsXG4gICAgYnV5OiAxLFxuICAgIGJ1eWVyOiAxLFxuICAgIGJ1eWVyczogMSxcbiAgICBidXlpbmc6IDEsXG4gICAgYnV5czogMSxcbiAgICBidXp6OiAxLFxuICAgIGJ3OiAxLFxuICAgIGJ5OiAxLFxuICAgIGJ5ZTogMSxcbiAgICBieXRlOiAxLFxuICAgIGJ5dGVzOiAxLFxuICAgIGM6IDEsXG4gICAgY2E6IDEsXG4gICAgY2FiOiAxLFxuICAgIGNhYmluOiAxLFxuICAgIGNhYmluZXQ6IDEsXG4gICAgY2FiaW5ldHM6IDEsXG4gICAgY2FibGU6IDEsXG4gICAgY2FibGVzOiAxLFxuICAgIGNhY2hlOiAxLFxuICAgIGNhY2hlZDogMSxcbiAgICBjYWQ6IDEsXG4gICAgY2FkaWxsYWM6IDEsXG4gICAgY2FmZTogMSxcbiAgICBjYWdlOiAxLFxuICAgIGNha2U6IDEsXG4gICAgY2FrZXM6IDEsXG4gICAgY2FsOiAxLFxuICAgIGNhbGNpdW06IDEsXG4gICAgY2FsY3VsYXRlOiAxLFxuICAgIGNhbGN1bGF0ZWQ6IDEsXG4gICAgY2FsY3VsYXRpb246IDEsXG4gICAgY2FsY3VsYXRpb25zOiAxLFxuICAgIGNhbGN1bGF0b3I6IDEsXG4gICAgY2FsY3VsYXRvcnM6IDEsXG4gICAgY2FsZW5kYXI6IDEsXG4gICAgY2FsZW5kYXJzOiAxLFxuICAgIGNhbGdhcnk6IDEsXG4gICAgY2FsaWJyYXRpb246IDEsXG4gICAgY2FsaWZvcm5pYTogMSxcbiAgICBjYWxsOiAxLFxuICAgIGNhbGxlZDogMSxcbiAgICBjYWxsaW5nOiAxLFxuICAgIGNhbGxzOiAxLFxuICAgIGNhbG06IDEsXG4gICAgY2FsdmluOiAxLFxuICAgIGNhbTogMSxcbiAgICBjYW1ib2RpYTogMSxcbiAgICBjYW1icmlkZ2U6IDEsXG4gICAgY2FtY29yZGVyOiAxLFxuICAgIGNhbWNvcmRlcnM6IDEsXG4gICAgY2FtZTogMSxcbiAgICBjYW1lbDogMSxcbiAgICBjYW1lcmE6IDEsXG4gICAgY2FtZXJhczogMSxcbiAgICBjYW1lcm9uOiAxLFxuICAgIGNhbWVyb29uOiAxLFxuICAgIGNhbXA6IDEsXG4gICAgY2FtcGFpZ246IDEsXG4gICAgY2FtcGFpZ25zOiAxLFxuICAgIGNhbXBiZWxsOiAxLFxuICAgIGNhbXBpbmc6IDEsXG4gICAgY2FtcHM6IDEsXG4gICAgY2FtcHVzOiAxLFxuICAgIGNhbXM6IDEsXG4gICAgY2FuOiAxLFxuICAgIGNhbmFkYTogMSxcbiAgICBjYW5hZGlhbjogMSxcbiAgICBjYW5hbDogMSxcbiAgICBjYW5iZXJyYTogMSxcbiAgICBjYW5jZWw6IDEsXG4gICAgY2FuY2VsbGF0aW9uOiAxLFxuICAgIGNhbmNlbGxlZDogMSxcbiAgICBjYW5jZXI6IDEsXG4gICAgY2FuZGlkYXRlOiAxLFxuICAgIGNhbmRpZGF0ZXM6IDEsXG4gICAgY2FuZGxlOiAxLFxuICAgIGNhbmRsZXM6IDEsXG4gICAgY2FuZHk6IDEsXG4gICAgY2Fubm9uOiAxLFxuICAgIGNhbm9uOiAxLFxuICAgIGNhbnQ6IDEsXG4gICAgY2FudmFzOiAxLFxuICAgIGNhbnlvbjogMSxcbiAgICBjYXA6IDEsXG4gICAgY2FwYWJpbGl0aWVzOiAxLFxuICAgIGNhcGFiaWxpdHk6IDEsXG4gICAgY2FwYWJsZTogMSxcbiAgICBjYXBhY2l0eTogMSxcbiAgICBjYXBlOiAxLFxuICAgIGNhcGl0YWw6IDEsXG4gICAgY2FwaXRvbDogMSxcbiAgICBjYXBzOiAxLFxuICAgIGNhcHRhaW46IDEsXG4gICAgY2FwdHVyZTogMSxcbiAgICBjYXB0dXJlZDogMSxcbiAgICBjYXI6IDEsXG4gICAgY2FyYjogMSxcbiAgICBjYXJib246IDEsXG4gICAgY2FyZDogMSxcbiAgICBjYXJkaWFjOiAxLFxuICAgIGNhcmRpZmY6IDEsXG4gICAgY2FyZGlvdmFzY3VsYXI6IDEsXG4gICAgY2FyZHM6IDEsXG4gICAgY2FyZTogMSxcbiAgICBjYXJlZXI6IDEsXG4gICAgY2FyZWVyczogMSxcbiAgICBjYXJlZnVsOiAxLFxuICAgIGNhcmVmdWxseTogMSxcbiAgICBjYXJleTogMSxcbiAgICBjYXJnbzogMSxcbiAgICBjYXJpYmJlYW46IDEsXG4gICAgY2FyaW5nOiAxLFxuICAgIGNhcmw6IDEsXG4gICAgY2FybG86IDEsXG4gICAgY2FybG9zOiAxLFxuICAgIGNhcm1lbjogMSxcbiAgICBjYXJuaXZhbDogMSxcbiAgICBjYXJvbDogMSxcbiAgICBjYXJvbGluYTogMSxcbiAgICBjYXJvbGluZTogMSxcbiAgICBjYXJwZXQ6IDEsXG4gICAgY2FycmllZDogMSxcbiAgICBjYXJyaWVyOiAxLFxuICAgIGNhcnJpZXJzOiAxLFxuICAgIGNhcnJpZXM6IDEsXG4gICAgY2Fycm9sbDogMSxcbiAgICBjYXJyeTogMSxcbiAgICBjYXJyeWluZzogMSxcbiAgICBjYXJzOiAxLFxuICAgIGNhcnQ6IDEsXG4gICAgY2FydGVyOiAxLFxuICAgIGNhcnRvb246IDEsXG4gICAgY2FydG9vbnM6IDEsXG4gICAgY2FydHJpZGdlOiAxLFxuICAgIGNhcnRyaWRnZXM6IDEsXG4gICAgY2FzOiAxLFxuICAgIGNhc2E6IDEsXG4gICAgY2FzZTogMSxcbiAgICBjYXNlczogMSxcbiAgICBjYXNleTogMSxcbiAgICBjYXNoOiAxLFxuICAgIGNhc2hpZXJzOiAxLFxuICAgIGNhc2lubzogMSxcbiAgICBjYXNpbm9zOiAxLFxuICAgIGNhc2lvOiAxLFxuICAgIGNhc3NldHRlOiAxLFxuICAgIGNhc3Q6IDEsXG4gICAgY2FzdGluZzogMSxcbiAgICBjYXN0bGU6IDEsXG4gICAgY2FzdWFsOiAxLFxuICAgIGNhdDogMSxcbiAgICBjYXRhbG9nOiAxLFxuICAgIGNhdGFsb2dzOiAxLFxuICAgIGNhdGFsb2d1ZTogMSxcbiAgICBjYXRhbHlzdDogMSxcbiAgICBjYXRjaDogMSxcbiAgICBjYXRlZ29yaWVzOiAxLFxuICAgIGNhdGVnb3J5OiAxLFxuICAgIGNhdGVyaW5nOiAxLFxuICAgIGNhdGhlZHJhbDogMSxcbiAgICBjYXRoZXJpbmU6IDEsXG4gICAgY2F0aG9saWM6IDEsXG4gICAgY2F0czogMSxcbiAgICBjYXR0bGU6IDEsXG4gICAgY2F1Z2h0OiAxLFxuICAgIGNhdXNlOiAxLFxuICAgIGNhdXNlZDogMSxcbiAgICBjYXVzZXM6IDEsXG4gICAgY2F1c2luZzogMSxcbiAgICBjYXV0aW9uOiAxLFxuICAgIGNhdmU6IDEsXG4gICAgY2F5bWFuOiAxLFxuICAgIGNiOiAxLFxuICAgIGNiczogMSxcbiAgICBjYzogMSxcbiAgICBjY2Q6IDEsXG4gICAgY2Q6IDEsXG4gICAgY2RuYTogMSxcbiAgICBjZHM6IDEsXG4gICAgY2R0OiAxLFxuICAgIGNlOiAxLFxuICAgIGNlZGFyOiAxLFxuICAgIGNlaWxpbmc6IDEsXG4gICAgY2VsZWJyYXRlOiAxLFxuICAgIGNlbGVicmF0aW9uOiAxLFxuICAgIGNlbGVicml0aWVzOiAxLFxuICAgIGNlbGVicml0eTogMSxcbiAgICBjZWxlYnM6IDEsXG4gICAgY2VsbDogMSxcbiAgICBjZWxsczogMSxcbiAgICBjZWxsdWxhcjogMSxcbiAgICBjZWx0aWM6IDEsXG4gICAgY2VtZW50OiAxLFxuICAgIGNlbWV0ZXJ5OiAxLFxuICAgIGNlbnN1czogMSxcbiAgICBjZW50OiAxLFxuICAgIGNlbnRlcjogMSxcbiAgICBjZW50ZXJlZDogMSxcbiAgICBjZW50ZXJzOiAxLFxuICAgIGNlbnRyYWw6IDEsXG4gICAgY2VudHJlOiAxLFxuICAgIGNlbnRyZXM6IDEsXG4gICAgY2VudHM6IDEsXG4gICAgY2VudHVyaWVzOiAxLFxuICAgIGNlbnR1cnk6IDEsXG4gICAgY2VvOiAxLFxuICAgIGNlcmFtaWM6IDEsXG4gICAgY2VyZW1vbnk6IDEsXG4gICAgY2VydGFpbjogMSxcbiAgICBjZXJ0YWlubHk6IDEsXG4gICAgY2VydGlmaWNhdGU6IDEsXG4gICAgY2VydGlmaWNhdGVzOiAxLFxuICAgIGNlcnRpZmljYXRpb246IDEsXG4gICAgY2VydGlmaWVkOiAxLFxuICAgIGNldDogMSxcbiAgICBjZjogMSxcbiAgICBjZnI6IDEsXG4gICAgY2c6IDEsXG4gICAgY2dpOiAxLFxuICAgIGNoOiAxLFxuICAgIGNoYWQ6IDEsXG4gICAgY2hhaW46IDEsXG4gICAgY2hhaW5zOiAxLFxuICAgIGNoYWlyOiAxLFxuICAgIGNoYWlybWFuOiAxLFxuICAgIGNoYWlyczogMSxcbiAgICBjaGFsbGVuZ2U6IDEsXG4gICAgY2hhbGxlbmdlZDogMSxcbiAgICBjaGFsbGVuZ2VzOiAxLFxuICAgIGNoYWxsZW5naW5nOiAxLFxuICAgIGNoYW1iZXI6IDEsXG4gICAgY2hhbWJlcnM6IDEsXG4gICAgY2hhbXBhZ25lOiAxLFxuICAgIGNoYW1waW9uOiAxLFxuICAgIGNoYW1waW9uczogMSxcbiAgICBjaGFtcGlvbnNoaXA6IDEsXG4gICAgY2hhbXBpb25zaGlwczogMSxcbiAgICBjaGFuOiAxLFxuICAgIGNoYW5jZTogMSxcbiAgICBjaGFuY2VsbG9yOiAxLFxuICAgIGNoYW5jZXM6IDEsXG4gICAgY2hhbmdlOiAxLFxuICAgIGNoYW5nZWQ6IDEsXG4gICAgY2hhbmdlbG9nOiAxLFxuICAgIGNoYW5nZXM6IDEsXG4gICAgY2hhbmdpbmc6IDEsXG4gICAgY2hhbm5lbDogMSxcbiAgICBjaGFubmVsczogMSxcbiAgICBjaGFvczogMSxcbiAgICBjaGFwZWw6IDEsXG4gICAgY2hhcHRlcjogMSxcbiAgICBjaGFwdGVyczogMSxcbiAgICBjaGFyOiAxLFxuICAgIGNoYXJhY3RlcjogMSxcbiAgICBjaGFyYWN0ZXJpc3RpYzogMSxcbiAgICBjaGFyYWN0ZXJpc3RpY3M6IDEsXG4gICAgY2hhcmFjdGVyaXphdGlvbjogMSxcbiAgICBjaGFyYWN0ZXJpemVkOiAxLFxuICAgIGNoYXJhY3RlcnM6IDEsXG4gICAgY2hhcmdlOiAxLFxuICAgIGNoYXJnZWQ6IDEsXG4gICAgY2hhcmdlcjogMSxcbiAgICBjaGFyZ2VyczogMSxcbiAgICBjaGFyZ2VzOiAxLFxuICAgIGNoYXJnaW5nOiAxLFxuICAgIGNoYXJpdGFibGU6IDEsXG4gICAgY2hhcml0eTogMSxcbiAgICBjaGFybGVzOiAxLFxuICAgIGNoYXJsZXN0b246IDEsXG4gICAgY2hhcmxpZTogMSxcbiAgICBjaGFybG90dGU6IDEsXG4gICAgY2hhcm06IDEsXG4gICAgY2hhcm1pbmc6IDEsXG4gICAgY2hhcm1zOiAxLFxuICAgIGNoYXJ0OiAxLFxuICAgIGNoYXJ0ZXI6IDEsXG4gICAgY2hhcnRzOiAxLFxuICAgIGNoYXNlOiAxLFxuICAgIGNoYXNzaXM6IDEsXG4gICAgY2hhdDogMSxcbiAgICBjaGVhcDogMSxcbiAgICBjaGVhcGVyOiAxLFxuICAgIGNoZWFwZXN0OiAxLFxuICAgIGNoZWF0OiAxLFxuICAgIGNoZWF0czogMSxcbiAgICBjaGVjazogMSxcbiAgICBjaGVja2VkOiAxLFxuICAgIGNoZWNraW5nOiAxLFxuICAgIGNoZWNrbGlzdDogMSxcbiAgICBjaGVja291dDogMSxcbiAgICBjaGVja3M6IDEsXG4gICAgY2hlZXJzOiAxLFxuICAgIGNoZWVzZTogMSxcbiAgICBjaGVmOiAxLFxuICAgIGNoZWxzZWE6IDEsXG4gICAgY2hlbTogMSxcbiAgICBjaGVtaWNhbDogMSxcbiAgICBjaGVtaWNhbHM6IDEsXG4gICAgY2hlbWlzdHJ5OiAxLFxuICAgIGNoZW46IDEsXG4gICAgY2hlcXVlOiAxLFxuICAgIGNoZXJyeTogMSxcbiAgICBjaGVzczogMSxcbiAgICBjaGVzdDogMSxcbiAgICBjaGVzdGVyOiAxLFxuICAgIGNoZXZyb2xldDogMSxcbiAgICBjaGV2eTogMSxcbiAgICBjaGk6IDEsXG4gICAgY2hpY2FnbzogMSxcbiAgICBjaGljazogMSxcbiAgICBjaGlja2VuOiAxLFxuICAgIGNoaWNrczogMSxcbiAgICBjaGllZjogMSxcbiAgICBjaGlsZDogMSxcbiAgICBjaGlsZGhvb2Q6IDEsXG4gICAgY2hpbGRyZW46IDEsXG4gICAgY2hpbGRyZW5zOiAxLFxuICAgIGNoaWxlOiAxLFxuICAgIGNoaW5hOiAxLFxuICAgIGNoaW5lc2U6IDEsXG4gICAgY2hpcDogMSxcbiAgICBjaGlwczogMSxcbiAgICBjaG86IDEsXG4gICAgY2hvY29sYXRlOiAxLFxuICAgIGNob2ljZTogMSxcbiAgICBjaG9pY2VzOiAxLFxuICAgIGNob2lyOiAxLFxuICAgIGNob2xlc3Rlcm9sOiAxLFxuICAgIGNob29zZTogMSxcbiAgICBjaG9vc2luZzogMSxcbiAgICBjaG9ydXM6IDEsXG4gICAgY2hvc2U6IDEsXG4gICAgY2hvc2VuOiAxLFxuICAgIGNocmlzOiAxLFxuICAgIGNocmlzdDogMSxcbiAgICBjaHJpc3RpYW46IDEsXG4gICAgY2hyaXN0aWFuaXR5OiAxLFxuICAgIGNocmlzdGlhbnM6IDEsXG4gICAgY2hyaXN0aW5hOiAxLFxuICAgIGNocmlzdGluZTogMSxcbiAgICBjaHJpc3RtYXM6IDEsXG4gICAgY2hyaXN0b3BoZXI6IDEsXG4gICAgY2hyb21lOiAxLFxuICAgIGNocm9uaWM6IDEsXG4gICAgY2hyb25pY2xlOiAxLFxuICAgIGNocm9uaWNsZXM6IDEsXG4gICAgY2hyeXNsZXI6IDEsXG4gICAgY2h1YmJ5OiAxLFxuICAgIGNodWNrOiAxLFxuICAgIGNodXJjaDogMSxcbiAgICBjaHVyY2hlczogMSxcbiAgICBjaTogMSxcbiAgICBjaWE6IDEsXG4gICAgY2lhbGlzOiAxLFxuICAgIGNpYW86IDEsXG4gICAgY2lnYXJldHRlOiAxLFxuICAgIGNpZ2FyZXR0ZXM6IDEsXG4gICAgY2luY2lubmF0aTogMSxcbiAgICBjaW5keTogMSxcbiAgICBjaW5lbWE6IDEsXG4gICAgY2luZ3VsYXI6IDEsXG4gICAgY2lvOiAxLFxuICAgIGNpcjogMSxcbiAgICBjaXJjbGU6IDEsXG4gICAgY2lyY2xlczogMSxcbiAgICBjaXJjdWl0OiAxLFxuICAgIGNpcmN1aXRzOiAxLFxuICAgIGNpcmN1bGFyOiAxLFxuICAgIGNpcmN1bGF0aW9uOiAxLFxuICAgIGNpcmN1bXN0YW5jZXM6IDEsXG4gICAgY2lyY3VzOiAxLFxuICAgIGNpc2NvOiAxLFxuICAgIGNpdGF0aW9uOiAxLFxuICAgIGNpdGF0aW9uczogMSxcbiAgICBjaXRlOiAxLFxuICAgIGNpdGVkOiAxLFxuICAgIGNpdGllczogMSxcbiAgICBjaXRpemVuOiAxLFxuICAgIGNpdGl6ZW5zOiAxLFxuICAgIGNpdGl6ZW5zaGlwOiAxLFxuICAgIGNpdHk6IDEsXG4gICAgY2l0eXNlYXJjaDogMSxcbiAgICBjaXZpYzogMSxcbiAgICBjaXZpbDogMSxcbiAgICBjaXZpbGlhbjogMSxcbiAgICBjaXZpbGl6YXRpb246IDEsXG4gICAgY2o6IDEsXG4gICAgY2w6IDEsXG4gICAgY2xhaW06IDEsXG4gICAgY2xhaW1lZDogMSxcbiAgICBjbGFpbXM6IDEsXG4gICAgY2xhaXJlOiAxLFxuICAgIGNsYW46IDEsXG4gICAgY2xhcmE6IDEsXG4gICAgY2xhcml0eTogMSxcbiAgICBjbGFyazogMSxcbiAgICBjbGFya2U6IDEsXG4gICAgY2xhc3M6IDEsXG4gICAgY2xhc3NlczogMSxcbiAgICBjbGFzc2ljOiAxLFxuICAgIGNsYXNzaWNhbDogMSxcbiAgICBjbGFzc2ljczogMSxcbiAgICBjbGFzc2lmaWNhdGlvbjogMSxcbiAgICBjbGFzc2lmaWVkOiAxLFxuICAgIGNsYXNzaWZpZWRzOiAxLFxuICAgIGNsYXNzcm9vbTogMSxcbiAgICBjbGF1c2U6IDEsXG4gICAgY2xheTogMSxcbiAgICBjbGVhbjogMSxcbiAgICBjbGVhbmVyOiAxLFxuICAgIGNsZWFuZXJzOiAxLFxuICAgIGNsZWFuaW5nOiAxLFxuICAgIGNsZWFudXA6IDEsXG4gICAgY2xlYXI6IDEsXG4gICAgY2xlYXJhbmNlOiAxLFxuICAgIGNsZWFyZWQ6IDEsXG4gICAgY2xlYXJpbmc6IDEsXG4gICAgY2xlYXJseTogMSxcbiAgICBjbGVyazogMSxcbiAgICBjbGV2ZWxhbmQ6IDEsXG4gICAgY2xpY2s6IDEsXG4gICAgY2xpY2tpbmc6IDEsXG4gICAgY2xpY2tzOiAxLFxuICAgIGNsaWVudDogMSxcbiAgICBjbGllbnRzOiAxLFxuICAgIGNsaWZmOiAxLFxuICAgIGNsaW1hdGU6IDEsXG4gICAgY2xpbWI6IDEsXG4gICAgY2xpbWJpbmc6IDEsXG4gICAgY2xpbmljOiAxLFxuICAgIGNsaW5pY2FsOiAxLFxuICAgIGNsaW5pY3M6IDEsXG4gICAgY2xpbnRvbjogMSxcbiAgICBjbGlwOiAxLFxuICAgIGNsaXBzOiAxLFxuICAgIGNsb2NrOiAxLFxuICAgIGNsb2NrczogMSxcbiAgICBjbG9uZTogMSxcbiAgICBjbG9zZTogMSxcbiAgICBjbG9zZWQ6IDEsXG4gICAgY2xvc2VseTogMSxcbiAgICBjbG9zZXI6IDEsXG4gICAgY2xvc2VzOiAxLFxuICAgIGNsb3Nlc3Q6IDEsXG4gICAgY2xvc2luZzogMSxcbiAgICBjbG9zdXJlOiAxLFxuICAgIGNsb3RoOiAxLFxuICAgIGNsb3RoZXM6IDEsXG4gICAgY2xvdGhpbmc6IDEsXG4gICAgY2xvdWQ6IDEsXG4gICAgY2xvdWRzOiAxLFxuICAgIGNsb3VkeTogMSxcbiAgICBjbHViOiAxLFxuICAgIGNsdWJzOiAxLFxuICAgIGNsdXN0ZXI6IDEsXG4gICAgY2x1c3RlcnM6IDEsXG4gICAgY206IDEsXG4gICAgY21zOiAxLFxuICAgIGNuOiAxLFxuICAgIGNuZXQ6IDEsXG4gICAgY25uOiAxLFxuICAgIGNvOiAxLFxuICAgIGNvYWNoOiAxLFxuICAgIGNvYWNoZXM6IDEsXG4gICAgY29hY2hpbmc6IDEsXG4gICAgY29hbDogMSxcbiAgICBjb2FsaXRpb246IDEsXG4gICAgY29hc3Q6IDEsXG4gICAgY29hc3RhbDogMSxcbiAgICBjb2F0OiAxLFxuICAgIGNvYXRlZDogMSxcbiAgICBjb2F0aW5nOiAxLFxuICAgIGNvY2s6IDEsXG4gICAgY29ja3M6IDEsXG4gICAgY29ja3RhaWw6IDEsXG4gICAgY29kOiAxLFxuICAgIGNvZGU6IDEsXG4gICAgY29kZXM6IDEsXG4gICAgY29kaW5nOiAxLFxuICAgIGNvZmZlZTogMSxcbiAgICBjb2duaXRpdmU6IDEsXG4gICAgY29oZW46IDEsXG4gICAgY29pbjogMSxcbiAgICBjb2luczogMSxcbiAgICBjb2w6IDEsXG4gICAgY29sZDogMSxcbiAgICBjb2xlOiAxLFxuICAgIGNvbGVtYW46IDEsXG4gICAgY29saW46IDEsXG4gICAgY29sbGFib3JhdGlvbjogMSxcbiAgICBjb2xsYWJvcmF0aXZlOiAxLFxuICAgIGNvbGxhcHNlOiAxLFxuICAgIGNvbGxhcjogMSxcbiAgICBjb2xsZWFndWU6IDEsXG4gICAgY29sbGVhZ3VlczogMSxcbiAgICBjb2xsZWN0OiAxLFxuICAgIGNvbGxlY3RhYmxlczogMSxcbiAgICBjb2xsZWN0ZWQ6IDEsXG4gICAgY29sbGVjdGlibGU6IDEsXG4gICAgY29sbGVjdGlibGVzOiAxLFxuICAgIGNvbGxlY3Rpbmc6IDEsXG4gICAgY29sbGVjdGlvbjogMSxcbiAgICBjb2xsZWN0aW9uczogMSxcbiAgICBjb2xsZWN0aXZlOiAxLFxuICAgIGNvbGxlY3RvcjogMSxcbiAgICBjb2xsZWN0b3JzOiAxLFxuICAgIGNvbGxlZ2U6IDEsXG4gICAgY29sbGVnZXM6IDEsXG4gICAgY29sbGluczogMSxcbiAgICBjb2xvZ25lOiAxLFxuICAgIGNvbG9tYmlhOiAxLFxuICAgIGNvbG9uOiAxLFxuICAgIGNvbG9uaWFsOiAxLFxuICAgIGNvbG9ueTogMSxcbiAgICBjb2xvcjogMSxcbiAgICBjb2xvcmFkbzogMSxcbiAgICBjb2xvcmVkOiAxLFxuICAgIGNvbG9yczogMSxcbiAgICBjb2xvdXI6IDEsXG4gICAgY29sb3VyczogMSxcbiAgICBjb2x1bWJpYTogMSxcbiAgICBjb2x1bWJ1czogMSxcbiAgICBjb2x1bW46IDEsXG4gICAgY29sdW1uaXN0czogMSxcbiAgICBjb2x1bW5zOiAxLFxuICAgIGNvbTogMSxcbiAgICBjb21iYXQ6IDEsXG4gICAgY29tYmluYXRpb246IDEsXG4gICAgY29tYmluYXRpb25zOiAxLFxuICAgIGNvbWJpbmU6IDEsXG4gICAgY29tYmluZWQ6IDEsXG4gICAgY29tYmluZXM6IDEsXG4gICAgY29tYmluaW5nOiAxLFxuICAgIGNvbWJvOiAxLFxuICAgIGNvbWU6IDEsXG4gICAgY29tZWR5OiAxLFxuICAgIGNvbWVzOiAxLFxuICAgIGNvbWZvcnQ6IDEsXG4gICAgY29tZm9ydGFibGU6IDEsXG4gICAgY29taWM6IDEsXG4gICAgY29taWNzOiAxLFxuICAgIGNvbWluZzogMSxcbiAgICBjb21tOiAxLFxuICAgIGNvbW1hbmQ6IDEsXG4gICAgY29tbWFuZGVyOiAxLFxuICAgIGNvbW1hbmRzOiAxLFxuICAgIGNvbW1lbnQ6IDEsXG4gICAgY29tbWVudGFyeTogMSxcbiAgICBjb21tZW50ZWQ6IDEsXG4gICAgY29tbWVudHM6IDEsXG4gICAgY29tbWVyY2U6IDEsXG4gICAgY29tbWVyY2lhbDogMSxcbiAgICBjb21taXNzaW9uOiAxLFxuICAgIGNvbW1pc3Npb25lcjogMSxcbiAgICBjb21taXNzaW9uZXJzOiAxLFxuICAgIGNvbW1pc3Npb25zOiAxLFxuICAgIGNvbW1pdDogMSxcbiAgICBjb21taXRtZW50OiAxLFxuICAgIGNvbW1pdG1lbnRzOiAxLFxuICAgIGNvbW1pdHRlZDogMSxcbiAgICBjb21taXR0ZWU6IDEsXG4gICAgY29tbWl0dGVlczogMSxcbiAgICBjb21tb2RpdGllczogMSxcblxuICAgIGNvbW1vZGl0eTogMSxcbiAgICBjb21tb246IDEsXG4gICAgY29tbW9ubHk6IDEsXG4gICAgY29tbW9uczogMSxcbiAgICBjb21tb253ZWFsdGg6IDEsXG4gICAgY29tbXVuaWNhdGU6IDEsXG4gICAgY29tbXVuaWNhdGlvbjogMSxcbiAgICBjb21tdW5pY2F0aW9uczogMSxcbiAgICBjb21tdW5pc3Q6IDEsXG4gICAgY29tbXVuaXRpZXM6IDEsXG4gICAgY29tbXVuaXR5OiAxLFxuICAgIGNvbXA6IDEsXG4gICAgY29tcGFjdDogMSxcbiAgICBjb21wYW5pZXM6IDEsXG4gICAgY29tcGFuaW9uOiAxLFxuICAgIGNvbXBhbnk6IDEsXG4gICAgY29tcGFxOiAxLFxuICAgIGNvbXBhcmFibGU6IDEsXG4gICAgY29tcGFyYXRpdmU6IDEsXG4gICAgY29tcGFyZTogMSxcbiAgICBjb21wYXJlZDogMSxcbiAgICBjb21wYXJpbmc6IDEsXG4gICAgY29tcGFyaXNvbjogMSxcbiAgICBjb21wYXJpc29uczogMSxcbiAgICBjb21wYXRpYmlsaXR5OiAxLFxuICAgIGNvbXBhdGlibGU6IDEsXG4gICAgY29tcGVuc2F0aW9uOiAxLFxuICAgIGNvbXBldGU6IDEsXG4gICAgY29tcGV0ZW50OiAxLFxuICAgIGNvbXBldGluZzogMSxcbiAgICBjb21wZXRpdGlvbjogMSxcbiAgICBjb21wZXRpdGlvbnM6IDEsXG4gICAgY29tcGV0aXRpdmU6IDEsXG4gICAgY29tcGV0aXRvcnM6IDEsXG4gICAgY29tcGlsYXRpb246IDEsXG4gICAgY29tcGlsZTogMSxcbiAgICBjb21waWxlZDogMSxcbiAgICBjb21waWxlcjogMSxcbiAgICBjb21wbGFpbnQ6IDEsXG4gICAgY29tcGxhaW50czogMSxcbiAgICBjb21wbGVtZW50OiAxLFxuICAgIGNvbXBsZXRlOiAxLFxuICAgIGNvbXBsZXRlZDogMSxcbiAgICBjb21wbGV0ZWx5OiAxLFxuICAgIGNvbXBsZXRpbmc6IDEsXG4gICAgY29tcGxldGlvbjogMSxcbiAgICBjb21wbGV4OiAxLFxuICAgIGNvbXBsZXhpdHk6IDEsXG4gICAgY29tcGxpYW5jZTogMSxcbiAgICBjb21wbGlhbnQ6IDEsXG4gICAgY29tcGxpY2F0ZWQ6IDEsXG4gICAgY29tcGxpY2F0aW9uczogMSxcbiAgICBjb21wbGltZW50YXJ5OiAxLFxuICAgIGNvbXBseTogMSxcbiAgICBjb21wb25lbnQ6IDEsXG4gICAgY29tcG9uZW50czogMSxcbiAgICBjb21wb3NlZDogMSxcbiAgICBjb21wb3NlcjogMSxcbiAgICBjb21wb3NpdGU6IDEsXG4gICAgY29tcG9zaXRpb246IDEsXG4gICAgY29tcG91bmQ6IDEsXG4gICAgY29tcG91bmRzOiAxLFxuICAgIGNvbXByZWhlbnNpdmU6IDEsXG4gICAgY29tcHJlc3NlZDogMSxcbiAgICBjb21wcmVzc2lvbjogMSxcbiAgICBjb21wcm9taXNlOiAxLFxuICAgIGNvbXB1dGF0aW9uOiAxLFxuICAgIGNvbXB1dGF0aW9uYWw6IDEsXG4gICAgY29tcHV0ZTogMSxcbiAgICBjb21wdXRlZDogMSxcbiAgICBjb21wdXRlcjogMSxcbiAgICBjb21wdXRlcnM6IDEsXG4gICAgY29tcHV0aW5nOiAxLFxuICAgIGNvbjogMSxcbiAgICBjb25jZW50cmF0ZTogMSxcbiAgICBjb25jZW50cmF0aW9uOiAxLFxuICAgIGNvbmNlbnRyYXRpb25zOiAxLFxuICAgIGNvbmNlcHQ6IDEsXG4gICAgY29uY2VwdHM6IDEsXG4gICAgY29uY2VwdHVhbDogMSxcbiAgICBjb25jZXJuOiAxLFxuICAgIGNvbmNlcm5lZDogMSxcbiAgICBjb25jZXJuaW5nOiAxLFxuICAgIGNvbmNlcm5zOiAxLFxuICAgIGNvbmNlcnQ6IDEsXG4gICAgY29uY2VydHM6IDEsXG4gICAgY29uY2x1ZGU6IDEsXG4gICAgY29uY2x1ZGVkOiAxLFxuICAgIGNvbmNsdXNpb246IDEsXG4gICAgY29uY2x1c2lvbnM6IDEsXG4gICAgY29uY29yZDogMSxcbiAgICBjb25jcmV0ZTogMSxcbiAgICBjb25kaXRpb246IDEsXG4gICAgY29uZGl0aW9uYWw6IDEsXG4gICAgY29uZGl0aW9uaW5nOiAxLFxuICAgIGNvbmRpdGlvbnM6IDEsXG4gICAgY29uZG86IDEsXG4gICAgY29uZG9zOiAxLFxuICAgIGNvbmR1Y3Q6IDEsXG4gICAgY29uZHVjdGVkOiAxLFxuICAgIGNvbmR1Y3Rpbmc6IDEsXG4gICAgY29uZjogMSxcbiAgICBjb25mZXJlbmNlOiAxLFxuICAgIGNvbmZlcmVuY2VzOiAxLFxuICAgIGNvbmZlcmVuY2luZzogMSxcbiAgICBjb25maWRlbmNlOiAxLFxuICAgIGNvbmZpZGVudDogMSxcbiAgICBjb25maWRlbnRpYWw6IDEsXG4gICAgY29uZmlkZW50aWFsaXR5OiAxLFxuICAgIGNvbmZpZzogMSxcbiAgICBjb25maWd1cmF0aW9uOiAxLFxuICAgIGNvbmZpZ3VyYXRpb25zOiAxLFxuICAgIGNvbmZpZ3VyZTogMSxcbiAgICBjb25maWd1cmVkOiAxLFxuICAgIGNvbmZpZ3VyaW5nOiAxLFxuICAgIGNvbmZpcm06IDEsXG4gICAgY29uZmlybWF0aW9uOiAxLFxuICAgIGNvbmZpcm1lZDogMSxcbiAgICBjb25mbGljdDogMSxcbiAgICBjb25mbGljdHM6IDEsXG4gICAgY29uZnVzZWQ6IDEsXG4gICAgY29uZnVzaW9uOiAxLFxuICAgIGNvbmdvOiAxLFxuICAgIGNvbmdyYXR1bGF0aW9uczogMSxcbiAgICBjb25ncmVzczogMSxcbiAgICBjb25ncmVzc2lvbmFsOiAxLFxuICAgIGNvbmp1bmN0aW9uOiAxLFxuICAgIGNvbm5lY3Q6IDEsXG4gICAgY29ubmVjdGVkOiAxLFxuICAgIGNvbm5lY3RpY3V0OiAxLFxuICAgIGNvbm5lY3Rpbmc6IDEsXG4gICAgY29ubmVjdGlvbjogMSxcbiAgICBjb25uZWN0aW9uczogMSxcbiAgICBjb25uZWN0aXZpdHk6IDEsXG4gICAgY29ubmVjdG9yOiAxLFxuICAgIGNvbm5lY3RvcnM6IDEsXG4gICAgY29uczogMSxcbiAgICBjb25zY2lvdXM6IDEsXG4gICAgY29uc2Npb3VzbmVzczogMSxcbiAgICBjb25zZWN1dGl2ZTogMSxcbiAgICBjb25zZW5zdXM6IDEsXG4gICAgY29uc2VudDogMSxcbiAgICBjb25zZXF1ZW5jZTogMSxcbiAgICBjb25zZXF1ZW5jZXM6IDEsXG4gICAgY29uc2VxdWVudGx5OiAxLFxuICAgIGNvbnNlcnZhdGlvbjogMSxcbiAgICBjb25zZXJ2YXRpdmU6IDEsXG4gICAgY29uc2lkZXI6IDEsXG4gICAgY29uc2lkZXJhYmxlOiAxLFxuICAgIGNvbnNpZGVyYXRpb246IDEsXG4gICAgY29uc2lkZXJhdGlvbnM6IDEsXG4gICAgY29uc2lkZXJlZDogMSxcbiAgICBjb25zaWRlcmluZzogMSxcbiAgICBjb25zaWRlcnM6IDEsXG4gICAgY29uc2lzdDogMSxcbiAgICBjb25zaXN0ZW5jeTogMSxcbiAgICBjb25zaXN0ZW50OiAxLFxuICAgIGNvbnNpc3RlbnRseTogMSxcbiAgICBjb25zaXN0aW5nOiAxLFxuICAgIGNvbnNpc3RzOiAxLFxuICAgIGNvbnNvbGU6IDEsXG4gICAgY29uc29sZXM6IDEsXG4gICAgY29uc29saWRhdGVkOiAxLFxuICAgIGNvbnNvbGlkYXRpb246IDEsXG4gICAgY29uc29ydGl1bTogMSxcbiAgICBjb25zcGlyYWN5OiAxLFxuICAgIGNvbnN0OiAxLFxuICAgIGNvbnN0YW50OiAxLFxuICAgIGNvbnN0YW50bHk6IDEsXG4gICAgY29uc3RpdHV0ZTogMSxcbiAgICBjb25zdGl0dXRlczogMSxcbiAgICBjb25zdGl0dXRpb246IDEsXG4gICAgY29uc3RpdHV0aW9uYWw6IDEsXG4gICAgY29uc3RyYWludDogMSxcbiAgICBjb25zdHJhaW50czogMSxcbiAgICBjb25zdHJ1Y3Q6IDEsXG4gICAgY29uc3RydWN0ZWQ6IDEsXG4gICAgY29uc3RydWN0aW9uOiAxLFxuICAgIGNvbnN1bHQ6IDEsXG4gICAgY29uc3VsdGFuY3k6IDEsXG4gICAgY29uc3VsdGFudDogMSxcbiAgICBjb25zdWx0YW50czogMSxcbiAgICBjb25zdWx0YXRpb246IDEsXG4gICAgY29uc3VsdGluZzogMSxcbiAgICBjb25zdW1lcjogMSxcbiAgICBjb25zdW1lcnM6IDEsXG4gICAgY29uc3VtcHRpb246IDEsXG4gICAgY29udGFjdDogMSxcbiAgICBjb250YWN0ZWQ6IDEsXG4gICAgY29udGFjdGluZzogMSxcbiAgICBjb250YWN0czogMSxcbiAgICBjb250YWluOiAxLFxuICAgIGNvbnRhaW5lZDogMSxcbiAgICBjb250YWluZXI6IDEsXG4gICAgY29udGFpbmVyczogMSxcbiAgICBjb250YWluaW5nOiAxLFxuICAgIGNvbnRhaW5zOiAxLFxuICAgIGNvbnRhbWluYXRpb246IDEsXG4gICAgY29udGVtcG9yYXJ5OiAxLFxuICAgIGNvbnRlbnQ6IDEsXG4gICAgY29udGVudHM6IDEsXG4gICAgY29udGVzdDogMSxcbiAgICBjb250ZXN0czogMSxcbiAgICBjb250ZXh0OiAxLFxuICAgIGNvbnRpbmVudDogMSxcbiAgICBjb250aW5lbnRhbDogMSxcbiAgICBjb250aW51YWxseTogMSxcbiAgICBjb250aW51ZTogMSxcbiAgICBjb250aW51ZWQ6IDEsXG4gICAgY29udGludWVzOiAxLFxuICAgIGNvbnRpbnVpbmc6IDEsXG4gICAgY29udGludWl0eTogMSxcbiAgICBjb250aW51b3VzOiAxLFxuICAgIGNvbnRpbnVvdXNseTogMSxcbiAgICBjb250cmFjdDogMSxcbiAgICBjb250cmFjdGluZzogMSxcbiAgICBjb250cmFjdG9yOiAxLFxuICAgIGNvbnRyYWN0b3JzOiAxLFxuICAgIGNvbnRyYWN0czogMSxcbiAgICBjb250cmFyeTogMSxcbiAgICBjb250cmFzdDogMSxcbiAgICBjb250cmlidXRlOiAxLFxuICAgIGNvbnRyaWJ1dGVkOiAxLFxuICAgIGNvbnRyaWJ1dGluZzogMSxcbiAgICBjb250cmlidXRpb246IDEsXG4gICAgY29udHJpYnV0aW9uczogMSxcbiAgICBjb250cmlidXRvcjogMSxcbiAgICBjb250cmlidXRvcnM6IDEsXG4gICAgY29udHJvbDogMSxcbiAgICBjb250cm9sbGVkOiAxLFxuICAgIGNvbnRyb2xsZXI6IDEsXG4gICAgY29udHJvbGxlcnM6IDEsXG4gICAgY29udHJvbGxpbmc6IDEsXG4gICAgY29udHJvbHM6IDEsXG4gICAgY29udHJvdmVyc2lhbDogMSxcbiAgICBjb250cm92ZXJzeTogMSxcbiAgICBjb252ZW5pZW5jZTogMSxcbiAgICBjb252ZW5pZW50OiAxLFxuICAgIGNvbnZlbnRpb246IDEsXG4gICAgY29udmVudGlvbmFsOiAxLFxuICAgIGNvbnZlbnRpb25zOiAxLFxuICAgIGNvbnZlcmdlbmNlOiAxLFxuICAgIGNvbnZlcnNhdGlvbjogMSxcbiAgICBjb252ZXJzYXRpb25zOiAxLFxuICAgIGNvbnZlcnNpb246IDEsXG4gICAgY29udmVydDogMSxcbiAgICBjb252ZXJ0ZWQ6IDEsXG4gICAgY29udmVydGVyOiAxLFxuICAgIGNvbnZlcnRpYmxlOiAxLFxuICAgIGNvbnZpY3RlZDogMSxcbiAgICBjb252aWN0aW9uOiAxLFxuICAgIGNvbnZpbmNlZDogMSxcbiAgICBjb29rOiAxLFxuICAgIGNvb2tib29rOiAxLFxuICAgIGNvb2tlZDogMSxcbiAgICBjb29raWU6IDEsXG4gICAgY29va2llczogMSxcbiAgICBjb29raW5nOiAxLFxuICAgIGNvb2w6IDEsXG4gICAgY29vbGVyOiAxLFxuICAgIGNvb2xpbmc6IDEsXG4gICAgY29vcGVyOiAxLFxuICAgIGNvb3BlcmF0aW9uOiAxLFxuICAgIGNvb3BlcmF0aXZlOiAxLFxuICAgIGNvb3JkaW5hdGU6IDEsXG4gICAgY29vcmRpbmF0ZWQ6IDEsXG4gICAgY29vcmRpbmF0ZXM6IDEsXG4gICAgY29vcmRpbmF0aW9uOiAxLFxuICAgIGNvb3JkaW5hdG9yOiAxLFxuICAgIGNvcDogMSxcbiAgICBjb3BlOiAxLFxuICAgIGNvcGllZDogMSxcbiAgICBjb3BpZXM6IDEsXG4gICAgY29wcGVyOiAxLFxuICAgIGNvcHk6IDEsXG4gICAgY29weWluZzogMSxcbiAgICBjb3B5cmlnaHQ6IDEsXG4gICAgY29weXJpZ2h0ZWQ6IDEsXG4gICAgY29weXJpZ2h0czogMSxcbiAgICBjb3JhbDogMSxcbiAgICBjb3JkOiAxLFxuICAgIGNvcmRsZXNzOiAxLFxuICAgIGNvcmU6IDEsXG4gICAgY29yazogMSxcbiAgICBjb3JuOiAxLFxuICAgIGNvcm5lbGw6IDEsXG4gICAgY29ybmVyOiAxLFxuICAgIGNvcm5lcnM6IDEsXG4gICAgY29ybndhbGw6IDEsXG4gICAgY29ycDogMSxcbiAgICBjb3Jwb3JhdGU6IDEsXG4gICAgY29ycG9yYXRpb246IDEsXG4gICAgY29ycG9yYXRpb25zOiAxLFxuICAgIGNvcnBzOiAxLFxuICAgIGNvcnB1czogMSxcbiAgICBjb3JyZWN0OiAxLFxuICAgIGNvcnJlY3RlZDogMSxcbiAgICBjb3JyZWN0aW9uOiAxLFxuICAgIGNvcnJlY3Rpb25zOiAxLFxuICAgIGNvcnJlY3RseTogMSxcbiAgICBjb3JyZWxhdGlvbjogMSxcbiAgICBjb3JyZXNwb25kZW5jZTogMSxcbiAgICBjb3JyZXNwb25kaW5nOiAxLFxuICAgIGNvcnJ1cHRpb246IDEsXG4gICAgY29zOiAxLFxuICAgIGNvc21ldGljOiAxLFxuICAgIGNvc21ldGljczogMSxcbiAgICBjb3N0OiAxLFxuICAgIGNvc3RhOiAxLFxuICAgIGNvc3RzOiAxLFxuICAgIGNvc3R1bWU6IDEsXG4gICAgY29zdHVtZXM6IDEsXG4gICAgY290dGFnZTogMSxcbiAgICBjb3R0YWdlczogMSxcbiAgICBjb3R0b246IDEsXG4gICAgY291bGQ6IDEsXG4gICAgY291bmNpbDogMSxcbiAgICBjb3VuY2lsczogMSxcbiAgICBjb3Vuc2VsOiAxLFxuICAgIGNvdW5zZWxpbmc6IDEsXG4gICAgY291bnQ6IDEsXG4gICAgY291bnRlZDogMSxcbiAgICBjb3VudGVyOiAxLFxuICAgIGNvdW50ZXJzOiAxLFxuICAgIGNvdW50aWVzOiAxLFxuICAgIGNvdW50aW5nOiAxLFxuICAgIGNvdW50cmllczogMSxcbiAgICBjb3VudHJ5OiAxLFxuICAgIGNvdW50czogMSxcbiAgICBjb3VudHk6IDEsXG4gICAgY291cGxlOiAxLFxuICAgIGNvdXBsZWQ6IDEsXG4gICAgY291cGxlczogMSxcbiAgICBjb3Vwb246IDEsXG4gICAgY291cG9uczogMSxcbiAgICBjb3VyYWdlOiAxLFxuICAgIGNvdXJpZXI6IDEsXG4gICAgY291cnNlOiAxLFxuICAgIGNvdXJzZXM6IDEsXG4gICAgY291cnQ6IDEsXG4gICAgY291cnRlc3k6IDEsXG4gICAgY291cnRzOiAxLFxuICAgIGNvdmU6IDEsXG4gICAgY292ZXI6IDEsXG4gICAgY292ZXJhZ2U6IDEsXG4gICAgY292ZXJlZDogMSxcbiAgICBjb3ZlcmluZzogMSxcbiAgICBjb3ZlcnM6IDEsXG4gICAgY293OiAxLFxuICAgIGNvd2JveTogMSxcbiAgICBjb3g6IDEsXG4gICAgY3A6IDEsXG4gICAgY3B1OiAxLFxuICAgIGNyOiAxLFxuICAgIGNyYWNrOiAxLFxuICAgIGNyYWRsZTogMSxcbiAgICBjcmFmdDogMSxcbiAgICBjcmFmdHM6IDEsXG4gICAgY3JhaWc6IDEsXG4gICAgY3JhcDogMSxcbiAgICBjcmFwczogMSxcbiAgICBjcmFzaDogMSxcbiAgICBjcmF3Zm9yZDogMSxcbiAgICBjcmF6eTogMSxcbiAgICBjcmVhbTogMSxcbiAgICBjcmVhdGU6IDEsXG4gICAgY3JlYXRlZDogMSxcbiAgICBjcmVhdGVzOiAxLFxuICAgIGNyZWF0aW5nOiAxLFxuICAgIGNyZWF0aW9uOiAxLFxuICAgIGNyZWF0aW9uczogMSxcbiAgICBjcmVhdGl2ZTogMSxcbiAgICBjcmVhdGl2aXR5OiAxLFxuICAgIGNyZWF0b3I6IDEsXG4gICAgY3JlYXR1cmU6IDEsXG4gICAgY3JlYXR1cmVzOiAxLFxuICAgIGNyZWRpdDogMSxcbiAgICBjcmVkaXRzOiAxLFxuICAgIGNyZWVrOiAxLFxuICAgIGNyZXN0OiAxLFxuICAgIGNyZXc6IDEsXG4gICAgY3JpY2tldDogMSxcbiAgICBjcmltZTogMSxcbiAgICBjcmltZXM6IDEsXG4gICAgY3JpbWluYWw6IDEsXG4gICAgY3Jpc2lzOiAxLFxuICAgIGNyaXRlcmlhOiAxLFxuICAgIGNyaXRlcmlvbjogMSxcbiAgICBjcml0aWNhbDogMSxcbiAgICBjcml0aWNpc206IDEsXG4gICAgY3JpdGljczogMSxcbiAgICBjcm06IDEsXG4gICAgY3JvYXRpYTogMSxcbiAgICBjcm9wOiAxLFxuICAgIGNyb3BzOiAxLFxuICAgIGNyb3NzOiAxLFxuICAgIGNyb3NzaW5nOiAxLFxuICAgIGNyb3Nzd29yZDogMSxcbiAgICBjcm93ZDogMSxcbiAgICBjcm93bjogMSxcbiAgICBjcnVjaWFsOiAxLFxuICAgIGNydWRlOiAxLFxuICAgIGNydWlzZTogMSxcbiAgICBjcnVpc2VzOiAxLFxuICAgIGNydXo6IDEsXG4gICAgY3J5OiAxLFxuICAgIGNyeXN0YWw6IDEsXG4gICAgY3M6IDEsXG4gICAgY3NzOiAxLFxuICAgIGNzdDogMSxcbiAgICBjdDogMSxcbiAgICBjdHJsOiAxLFxuICAgIGN1OiAxLFxuICAgIGN1YmE6IDEsXG4gICAgY3ViZTogMSxcbiAgICBjdWJpYzogMSxcbiAgICBjdWlzaW5lOiAxLFxuICAgIGN1bHQ6IDEsXG4gICAgY3VsdHVyYWw6IDEsXG4gICAgY3VsdHVyZTogMSxcbiAgICBjdWx0dXJlczogMSxcbiAgICBjdW06IDEsXG4gICAgY3Vtc2hvdDogMSxcbiAgICBjdW1zaG90czogMSxcbiAgICBjdW11bGF0aXZlOiAxLFxuICAgIGN1bnQ6IDEsXG4gICAgY3VwOiAxLFxuICAgIGN1cHM6IDEsXG4gICAgY3VyZTogMSxcbiAgICBjdXJpb3VzOiAxLFxuICAgIGN1cnJlbmNpZXM6IDEsXG4gICAgY3VycmVuY3k6IDEsXG4gICAgY3VycmVudDogMSxcbiAgICBjdXJyZW50bHk6IDEsXG4gICAgY3VycmljdWx1bTogMSxcbiAgICBjdXJzb3I6IDEsXG4gICAgY3VydGlzOiAxLFxuICAgIGN1cnZlOiAxLFxuICAgIGN1cnZlczogMSxcbiAgICBjdXN0b2R5OiAxLFxuICAgIGN1c3RvbTogMSxcbiAgICBjdXN0b21lcjogMSxcbiAgICBjdXN0b21lcnM6IDEsXG4gICAgY3VzdG9taXNlOiAxLFxuICAgIGN1c3RvbWl6ZTogMSxcbiAgICBjdXN0b21pemVkOiAxLFxuICAgIGN1c3RvbXM6IDEsXG4gICAgY3V0OiAxLFxuICAgIGN1dGU6IDEsXG4gICAgY3V0czogMSxcbiAgICBjdXR0aW5nOiAxLFxuICAgIGN2OiAxLFxuICAgIGN2czogMSxcbiAgICBjdzogMSxcbiAgICBjeWJlcjogMSxcbiAgICBjeWNsZTogMSxcbiAgICBjeWNsZXM6IDEsXG4gICAgY3ljbGluZzogMSxcbiAgICBjeWxpbmRlcjogMSxcbiAgICBjeXBydXM6IDEsXG4gICAgY3o6IDEsXG4gICAgY3plY2g6IDEsXG5cblxufTtcbiIsIi8vIGh0dHBzOi8vZW5nbGlzaGdyYW1tYXJoZXJlLmNvbS92b2NhYnVsYXJ5LzEwMDAwLW1vc3QtY29tbW9uLXdvcmRzLWluLWVuZ2xpc2gtcGFydC01L1xuZXhwb3J0IGNvbnN0IFRoZU1vc3RDb21tb24xMDAwMCA9IHtcbiAgICBkOiAxLFxuICAgIGRhOiAxLFxuICAgIGRhZDogMSxcbiAgICBkYWRkeTogMSxcbiAgICBkYWlseTogMSxcbiAgICBkYWlyeTogMSxcbiAgICBkYWlzeTogMSxcbiAgICBkYWtvdGE6IDEsXG4gICAgZGFsZTogMSxcbiAgICBkYWxsYXM6IDEsXG4gICAgZGFtOiAxLFxuICAgIGRhbWFnZTogMSxcbiAgICBkYW1hZ2VkOiAxLFxuICAgIGRhbWFnZXM6IDEsXG4gICAgZGFtZTogMSxcbiAgICBkYW1uOiAxLFxuICAgIGRhbjogMSxcbiAgICBkYW5hOiAxLFxuICAgIGRhbmNlOiAxLFxuICAgIGRhbmNpbmc6IDEsXG4gICAgZGFuZ2VyOiAxLFxuICAgIGRhbmdlcm91czogMSxcbiAgICBkYW5pZWw6IDEsXG4gICAgZGFuaXNoOiAxLFxuICAgIGRhbm55OiAxLFxuICAgIGRhbnM6IDEsXG4gICAgZGFyZTogMSxcbiAgICBkYXJrOiAxLFxuICAgIGRhcmtuZXNzOiAxLFxuICAgIGRhcndpbjogMSxcbiAgICBkYXM6IDEsXG4gICAgZGFzaDogMSxcbiAgICBkYXQ6IDEsXG4gICAgZGF0YTogMSxcbiAgICBkYXRhYmFzZTogMSxcbiAgICBkYXRhYmFzZXM6IDEsXG4gICAgZGF0ZTogMSxcbiAgICBkYXRlZDogMSxcbiAgICBkYXRlczogMSxcbiAgICBkYXRpbmc6IDEsXG4gICAgZGF1Z2h0ZXI6IDEsXG5cblxuXG5cblxuXG5cbiAgICBkYXVnaHRlcnM6IDEsXG4gICAgZGF2ZTogMSxcbiAgICBkYXZpZDogMSxcbiAgICBkYXZpZHNvbjogMSxcbiAgICBkYXZpczogMSxcbiAgICBkYXduOiAxLFxuICAgIGRheTogMSxcbiAgICBkYXlzOiAxLFxuICAgIGRheXRvbjogMSxcbiAgICBkYjogMSxcbiAgICBkYzogMSxcbiAgICBkZDogMSxcbiAgICBkZHI6IDEsXG4gICAgZGU6IDEsXG4gICAgZGVhZDogMSxcbiAgICBkZWFkbGluZTogMSxcbiAgICBkZWFkbHk6IDEsXG4gICAgZGVhZjogMSxcbiAgICBkZWFsOiAxLFxuICAgIGRlYWxlcjogMSxcbiAgICBkZWFsZXJzOiAxLFxuICAgIGRlYWxpbmc6IDEsXG4gICAgZGVhbHM6IDEsXG4gICAgZGVhbHQ6IDEsXG4gICAgZGVhbHRpbWU6IDEsXG4gICAgZGVhbjogMSxcbiAgICBkZWFyOiAxLFxuICAgIGRlYXRoOiAxLFxuICAgIGRlYXRoczogMSxcbiAgICBkZWJhdGU6IDEsXG4gICAgZGViaWFuOiAxLFxuICAgIGRlYm9yYWg6IDEsXG4gICAgZGVidDogMSxcbiAgICBkZWJ1ZzogMSxcbiAgICBkZWJ1dDogMSxcbiAgICBkZWM6IDEsXG4gICAgZGVjYWRlOiAxLFxuICAgIGRlY2FkZXM6IDEsXG4gICAgZGVjZW1iZXI6IDEsXG4gICAgZGVjZW50OiAxLFxuICAgIGRlY2lkZTogMSxcbiAgICBkZWNpZGVkOiAxLFxuICAgIGRlY2ltYWw6IDEsXG4gICAgZGVjaXNpb246IDEsXG4gICAgZGVjaXNpb25zOiAxLFxuICAgIGRlY2s6IDEsXG4gICAgZGVjbGFyYXRpb246IDEsXG4gICAgZGVjbGFyZTogMSxcbiAgICBkZWNsYXJlZDogMSxcbiAgICBkZWNsaW5lOiAxLFxuICAgIGRlY2xpbmVkOiAxLFxuICAgIGRlY29yOiAxLFxuICAgIGRlY29yYXRpbmc6IDEsXG4gICAgZGVjb3JhdGl2ZTogMSxcbiAgICBkZWNyZWFzZTogMSxcbiAgICBkZWNyZWFzZWQ6IDEsXG4gICAgZGVkaWNhdGVkOiAxLFxuICAgIGRlZTogMSxcbiAgICBkZWVtZWQ6IDEsXG4gICAgZGVlcDogMSxcbiAgICBkZWVwZXI6IDEsXG4gICAgZGVlcGx5OiAxLFxuICAgIGRlZXI6IDEsXG4gICAgZGVmOiAxLFxuICAgIGRlZmF1bHQ6IDEsXG4gICAgZGVmZWF0OiAxLFxuICAgIGRlZmVjdHM6IDEsXG4gICAgZGVmZW5jZTogMSxcbiAgICBkZWZlbmQ6IDEsXG4gICAgZGVmZW5kYW50OiAxLFxuICAgIGRlZmVuc2U6IDEsXG4gICAgZGVmZW5zaXZlOiAxLFxuICAgIGRlZmVycmVkOiAxLFxuICAgIGRlZmljaXQ6IDEsXG4gICAgZGVmaW5lOiAxLFxuICAgIGRlZmluZWQ6IDEsXG4gICAgZGVmaW5lczogMSxcbiAgICBkZWZpbmluZzogMSxcbiAgICBkZWZpbml0ZWx5OiAxLFxuICAgIGRlZmluaXRpb246IDEsXG4gICAgZGVmaW5pdGlvbnM6IDEsXG4gICAgZGVncmVlOiAxLFxuICAgIGRlZ3JlZXM6IDEsXG4gICAgZGVsOiAxLFxuICAgIGRlbGF3YXJlOiAxLFxuICAgIGRlbGF5OiAxLFxuICAgIGRlbGF5ZWQ6IDEsXG4gICAgZGVsYXlzOiAxLFxuICAgIGRlbGVnYXRpb246IDEsXG4gICAgZGVsZXRlOiAxLFxuICAgIGRlbGV0ZWQ6IDEsXG4gICAgZGVsaGk6IDEsXG4gICAgZGVsaWNpb3VzOiAxLFxuICAgIGRlbGlnaHQ6IDEsXG4gICAgZGVsaXZlcjogMSxcbiAgICBkZWxpdmVyZWQ6IDEsXG4gICAgZGVsaXZlcmluZzogMSxcbiAgICBkZWxpdmVyczogMSxcbiAgICBkZWxpdmVyeTogMSxcbiAgICBkZWxsOiAxLFxuICAgIGRlbHRhOiAxLFxuICAgIGRlbHV4ZTogMSxcbiAgICBkZW06IDEsXG4gICAgZGVtYW5kOiAxLFxuICAgIGRlbWFuZGluZzogMSxcbiAgICBkZW1hbmRzOiAxLFxuICAgIGRlbW86IDEsXG4gICAgZGVtb2NyYWN5OiAxLFxuICAgIGRlbW9jcmF0OiAxLFxuICAgIGRlbW9jcmF0aWM6IDEsXG4gICAgZGVtb2NyYXRzOiAxLFxuICAgIGRlbW9ncmFwaGljOiAxLFxuICAgIGRlbW9uc3RyYXRlOiAxLFxuICAgIGRlbW9uc3RyYXRlZDogMSxcbiAgICBkZW1vbnN0cmF0ZXM6IDEsXG4gICAgZGVtb25zdHJhdGlvbjogMSxcbiAgICBkZW46IDEsXG4gICAgZGVuaWFsOiAxLFxuICAgIGRlbmllZDogMSxcbiAgICBkZW5tYXJrOiAxLFxuICAgIGRlbm5pczogMSxcbiAgICBkZW5zZTogMSxcbiAgICBkZW5zaXR5OiAxLFxuICAgIGRlbnRhbDogMSxcbiAgICBkZW50aXN0czogMSxcbiAgICBkZW52ZXI6IDEsXG4gICAgZGVueTogMSxcbiAgICBkZXBhcnRtZW50OiAxLFxuICAgIGRlcGFydG1lbnRhbDogMSxcbiAgICBkZXBhcnRtZW50czogMSxcbiAgICBkZXBhcnR1cmU6IDEsXG4gICAgZGVwZW5kOiAxLFxuICAgIGRlcGVuZGVuY2U6IDEsXG4gICAgZGVwZW5kZW50OiAxLFxuICAgIGRlcGVuZGluZzogMSxcbiAgICBkZXBlbmRzOiAxLFxuICAgIGRlcGxveW1lbnQ6IDEsXG4gICAgZGVwb3NpdDogMSxcblxuXG5cblxuXG5cblxuICAgIGRlcG9zaXRzOiAxLFxuICAgIGRlcG90OiAxLFxuICAgIGRlcHJlc3Npb246IDEsXG4gICAgZGVwdDogMSxcbiAgICBkZXB0aDogMSxcbiAgICBkZXB1dHk6IDEsXG4gICAgZGVyOiAxLFxuICAgIGRlcmJ5OiAxLFxuICAgIGRlcmVrOiAxLFxuICAgIGRlcml2ZWQ6IDEsXG4gICAgZGVzOiAxLFxuICAgIGRlc2NlbmRpbmc6IDEsXG4gICAgZGVzY3JpYmU6IDEsXG4gICAgZGVzY3JpYmVkOiAxLFxuICAgIGRlc2NyaWJlczogMSxcbiAgICBkZXNjcmliaW5nOiAxLFxuICAgIGRlc2NyaXB0aW9uOiAxLFxuICAgIGRlc2NyaXB0aW9uczogMSxcbiAgICBkZXNlcnQ6IDEsXG4gICAgZGVzZXJ2ZTogMSxcbiAgICBkZXNpZ246IDEsXG4gICAgZGVzaWduYXRlZDogMSxcbiAgICBkZXNpZ25hdGlvbjogMSxcbiAgICBkZXNpZ25lZDogMSxcbiAgICBkZXNpZ25lcjogMSxcbiAgICBkZXNpZ25lcnM6IDEsXG4gICAgZGVzaWduaW5nOiAxLFxuICAgIGRlc2lnbnM6IDEsXG4gICAgZGVzaXJhYmxlOiAxLFxuICAgIGRlc2lyZTogMSxcbiAgICBkZXNpcmVkOiAxLFxuICAgIGRlc2s6IDEsXG4gICAgZGVza3RvcDogMSxcbiAgICBkZXNrdG9wczogMSxcbiAgICBkZXNwZXJhdGU6IDEsXG4gICAgZGVzcGl0ZTogMSxcbiAgICBkZXN0aW5hdGlvbjogMSxcbiAgICBkZXN0aW5hdGlvbnM6IDEsXG4gICAgZGVzdGlueTogMSxcbiAgICBkZXN0cm95OiAxLFxuICAgIGRlc3Ryb3llZDogMSxcbiAgICBkZXN0cnVjdGlvbjogMSxcbiAgICBkZXRhaWw6IDEsXG4gICAgZGV0YWlsZWQ6IDEsXG4gICAgZGV0YWlsczogMSxcbiAgICBkZXRlY3Q6IDEsXG4gICAgZGV0ZWN0ZWQ6IDEsXG4gICAgZGV0ZWN0aW9uOiAxLFxuICAgIGRldGVjdGl2ZTogMSxcbiAgICBkZXRlY3RvcjogMSxcbiAgICBkZXRlcm1pbmF0aW9uOiAxLFxuICAgIGRldGVybWluZTogMSxcbiAgICBkZXRlcm1pbmVkOiAxLFxuICAgIGRldGVybWluZXM6IDEsXG4gICAgZGV0ZXJtaW5pbmc6IDEsXG4gICAgZGV0cm9pdDogMSxcbiAgICBkZXV0c2NoOiAxLFxuICAgIGRldXRzY2hlOiAxLFxuICAgIGRldXRzY2hsYW5kOiAxLFxuICAgIGRldjogMSxcbiAgICBkZXZlbDogMSxcbiAgICBkZXZlbG9wOiAxLFxuICAgIGRldmVsb3BlZDogMSxcbiAgICBkZXZlbG9wZXI6IDEsXG4gICAgZGV2ZWxvcGVyczogMSxcbiAgICBkZXZlbG9waW5nOiAxLFxuICAgIGRldmVsb3BtZW50OiAxLFxuICAgIGRldmVsb3BtZW50YWw6IDEsXG4gICAgZGV2ZWxvcG1lbnRzOiAxLFxuICAgIGRldmVsb3BzOiAxLFxuICAgIGRldmlhbnQ6IDEsXG4gICAgZGV2aWF0aW9uOiAxLFxuICAgIGRldmljZTogMSxcbiAgICBkZXZpY2VzOiAxLFxuICAgIGRldmlsOiAxLFxuICAgIGRldm9uOiAxLFxuICAgIGRldm90ZWQ6IDEsXG4gICAgZGY6IDEsXG4gICAgZGc6IDEsXG4gICAgZGg6IDEsXG4gICAgZGk6IDEsXG4gICAgZGlhYmV0ZXM6IDEsXG4gICAgZGlhZ25vc2lzOiAxLFxuICAgIGRpYWdub3N0aWM6IDEsXG4gICAgZGlhZ3JhbTogMSxcbiAgICBkaWFsOiAxLFxuICAgIGRpYWxvZzogMSxcbiAgICBkaWFsb2d1ZTogMSxcbiAgICBkaWFtZXRlcjogMSxcbiAgICBkaWFtb25kOiAxLFxuICAgIGRpYW1vbmRzOiAxLFxuICAgIGRpYW5hOiAxLFxuICAgIGRpYW5lOiAxLFxuICAgIGRpYXJ5OiAxLFxuICAgIGRpY2U6IDEsXG4gICAgZGljazogMSxcbiAgICBkaWNrZTogMSxcbiAgICBkaWNrczogMSxcbiAgICBkaWN0aW9uYXJpZXM6IDEsXG4gICAgZGljdGlvbmFyeTogMSxcbiAgICBkaWQ6IDEsXG4gICAgZGllOiAxLFxuICAgIGRpZWQ6IDEsXG4gICAgZGllZ286IDEsXG4gICAgZGllczogMSxcbiAgICBkaWVzZWw6IDEsXG4gICAgZGlldDogMSxcbiAgICBkaWV0YXJ5OiAxLFxuICAgIGRpZmY6IDEsXG4gICAgZGlmZmVyOiAxLFxuICAgIGRpZmZlcmVuY2U6IDEsXG4gICAgZGlmZmVyZW5jZXM6IDEsXG4gICAgZGlmZmVyZW50OiAxLFxuICAgIGRpZmZlcmVudGlhbDogMSxcbiAgICBkaWZmZXJlbnRseTogMSxcbiAgICBkaWZmaWN1bHQ6IDEsXG4gICAgZGlmZmljdWx0aWVzOiAxLFxuICAgIGRpZmZpY3VsdHk6IDEsXG4gICAgZGlmZnM6IDEsXG4gICAgZGlnOiAxLFxuICAgIGRpZ2VzdDogMSxcbiAgICBkaWdpdDogMSxcbiAgICBkaWdpdGFsOiAxLFxuICAgIGRpbGRvOiAxLFxuICAgIGRpbGRvczogMSxcbiAgICBkaW06IDEsXG4gICAgZGltZW5zaW9uOiAxLFxuICAgIGRpbWVuc2lvbmFsOiAxLFxuICAgIGRpbWVuc2lvbnM6IDEsXG4gICAgZGluaW5nOiAxLFxuICAgIGRpbm5lcjogMSxcbiAgICBkaXA6IDEsXG4gICAgZGlwbG9tYTogMSxcbiAgICBkaXI6IDEsXG4gICAgZGlyZWN0OiAxLFxuICAgIGRpcmVjdGVkOiAxLFxuICAgIGRpcmVjdGlvbjogMSxcbiAgICBkaXJlY3Rpb25zOiAxLFxuICAgIGRpcmVjdGl2ZTogMSxcbiAgICBkaXJlY3RseTogMSxcbiAgICBkaXJlY3RvcjogMSxcbiAgICBkaXJlY3RvcmllczogMSxcbiAgICBkaXJlY3RvcnM6IDEsXG4gICAgZGlyZWN0b3J5OiAxLFxuICAgIGRpcnQ6IDEsXG4gICAgZGlydHk6IDEsXG4gICAgZGlzOiAxLFxuICAgIGRpc2FiaWxpdGllczogMSxcbiAgICBkaXNhYmlsaXR5OiAxLFxuICAgIGRpc2FibGU6IDEsXG4gICAgZGlzYWJsZWQ6IDEsXG4gICAgZGlzYWdyZWU6IDEsXG4gICAgZGlzYXBwb2ludGVkOiAxLFxuICAgIGRpc2FzdGVyOiAxLFxuICAgIGRpc2M6IDEsXG4gICAgZGlzY2hhcmdlOiAxLFxuICAgIGRpc2NpcGxpbmFyeTogMSxcbiAgICBkaXNjaXBsaW5lOiAxLFxuICAgIGRpc2NpcGxpbmVzOiAxLFxuICAgIGRpc2NsYWltZXI6IDEsXG4gICAgZGlzY2xhaW1lcnM6IDEsXG4gICAgZGlzY2xvc2U6IDEsXG4gICAgZGlzY2xvc3VyZTogMSxcbiAgICBkaXNjbzogMSxcbiAgICBkaXNjb3VudDogMSxcbiAgICBkaXNjb3VudGVkOiAxLFxuICAgIGRpc2NvdW50czogMSxcbiAgICBkaXNjb3ZlcjogMSxcbiAgICBkaXNjb3ZlcmVkOiAxLFxuICAgIGRpc2NvdmVyeTogMSxcbiAgICBkaXNjcmV0ZTogMSxcbiAgICBkaXNjcmV0aW9uOiAxLFxuICAgIGRpc2NyaW1pbmF0aW9uOiAxLFxuICAgIGRpc2NzOiAxLFxuICAgIGRpc2N1c3M6IDEsXG4gICAgZGlzY3Vzc2VkOiAxLFxuICAgIGRpc2N1c3NlczogMSxcbiAgICBkaXNjdXNzaW5nOiAxLFxuICAgIGRpc2N1c3Npb246IDEsXG4gICAgZGlzY3Vzc2lvbnM6IDEsXG4gICAgZGlzZWFzZTogMSxcbiAgICBkaXNlYXNlczogMSxcbiAgICBkaXNoOiAxLFxuICAgIGRpc2hlczogMSxcbiAgICBkaXNrOiAxLFxuICAgIGRpc2tzOiAxLFxuICAgIGRpc25leTogMSxcbiAgICBkaXNvcmRlcjogMSxcbiAgICBkaXNvcmRlcnM6IDEsXG4gICAgZGlzcGF0Y2g6IDEsXG4gICAgZGlzcGF0Y2hlZDogMSxcbiAgICBkaXNwbGF5OiAxLFxuICAgIGRpc3BsYXllZDogMSxcbiAgICBkaXNwbGF5aW5nOiAxLFxuICAgIGRpc3BsYXlzOiAxLFxuICAgIGRpc3Bvc2FsOiAxLFxuICAgIGRpc3Bvc2l0aW9uOiAxLFxuICAgIGRpc3B1dGU6IDEsXG4gICAgZGlzcHV0ZXM6IDEsXG4gICAgZGlzdDogMSxcbiAgICBkaXN0YW5jZTogMSxcbiAgICBkaXN0YW5jZXM6IDEsXG4gICAgZGlzdGFudDogMSxcbiAgICBkaXN0aW5jdDogMSxcbiAgICBkaXN0aW5jdGlvbjogMSxcbiAgICBkaXN0aW5ndWlzaGVkOiAxLFxuICAgIGRpc3RyaWJ1dGU6IDEsXG4gICAgZGlzdHJpYnV0ZWQ6IDEsXG4gICAgZGlzdHJpYnV0aW9uOiAxLFxuICAgIGRpc3RyaWJ1dGlvbnM6IDEsXG4gICAgZGlzdHJpYnV0b3I6IDEsXG4gICAgZGlzdHJpYnV0b3JzOiAxLFxuICAgIGRpc3RyaWN0OiAxLFxuICAgIGRpc3RyaWN0czogMSxcbiAgICBkaXN0dXJiZWQ6IDEsXG4gICAgZGl2OiAxLFxuICAgIGRpdmU6IDEsXG4gICAgZGl2ZXJzZTogMSxcbiAgICBkaXZlcnNpdHk6IDEsXG4gICAgZGl2aWRlOiAxLFxuICAgIGRpdmlkZWQ6IDEsXG4gICAgZGl2aWRlbmQ6IDEsXG4gICAgZGl2aW5lOiAxLFxuICAgIGRpdmluZzogMSxcbiAgICBkaXZpc2lvbjogMSxcbiAgICBkaXZpc2lvbnM6IDEsXG4gICAgZGl2b3JjZTogMSxcbiAgICBkaXZ4OiAxLFxuICAgIGRpeTogMSxcbiAgICBkajogMSxcbiAgICBkazogMSxcbiAgICBkbDogMSxcbiAgICBkbTogMSxcbiAgICBkbmE6IDEsXG4gICAgZG5zOiAxLFxuICAgIGRvOiAxLFxuICAgIGRvYzogMSxcbiAgICBkb2NrOiAxLFxuICAgIGRvY3M6IDEsXG4gICAgZG9jdG9yOiAxLFxuICAgIGRvY3RvcnM6IDEsXG4gICAgZG9jdHJpbmU6IDEsXG4gICAgZG9jdW1lbnQ6IDEsXG4gICAgZG9jdW1lbnRhcnk6IDEsXG4gICAgZG9jdW1lbnRhdGlvbjogMSxcbiAgICBkb2N1bWVudGVkOiAxLFxuICAgIGRvY3VtZW50czogMSxcbiAgICBkb2Q6IDEsXG4gICAgZG9kZ2U6IDEsXG4gICAgZG9lOiAxLFxuICAgIGRvZXM6IDEsXG4gICAgZG9nOiAxLFxuICAgIGRvZ3M6IDEsXG4gICAgZG9pbmc6IDEsXG4gICAgZG9sbDogMSxcbiAgICBkb2xsYXI6IDEsXG4gICAgZG9sbGFyczogMSxcbiAgICBkb2xsczogMSxcbiAgICBkb206IDEsXG4gICAgZG9tYWluOiAxLFxuICAgIGRvbWFpbnM6IDEsXG4gICAgZG9tZTogMSxcbiAgICBkb21lc3RpYzogMSxcbiAgICBkb21pbmFudDogMSxcbiAgICBkb21pbmljYW46IDEsXG4gICAgZG9uOiAxLFxuICAgIGRvbmFsZDogMSxcbiAgICBkb25hdGU6IDEsXG4gICAgZG9uYXRlZDogMSxcbiAgICBkb25hdGlvbjogMSxcbiAgICBkb25hdGlvbnM6IDEsXG4gICAgZG9uZTogMSxcbiAgICBkb25uYTogMSxcbiAgICBkb25vcjogMSxcbiAgICBkb25vcnM6IDEsXG4gICAgZG9udDogMSxcbiAgICBkb29tOiAxLFxuICAgIGRvb3I6IDEsXG4gICAgZG9vcnM6IDEsXG4gICAgZG9zOiAxLFxuICAgIGRvc2FnZTogMSxcbiAgICBkb3NlOiAxLFxuICAgIGRvdDogMSxcbiAgICBkb3VibGU6IDEsXG4gICAgZG91YnQ6IDEsXG4gICAgZG91ZzogMSxcbiAgICBkb3VnbGFzOiAxLFxuICAgIGRvdmVyOiAxLFxuICAgIGRvdzogMSxcbiAgICBkb3duOiAxLFxuICAgIGRvd25sb2FkOiAxLFxuICAgIGRvd25sb2FkYWJsZTogMSxcbiAgICBkb3dubG9hZGVkOiAxLFxuICAgIGRvd25sb2FkaW5nOiAxLFxuICAgIGRvd25sb2FkczogMSxcbiAgICBkb3dudG93bjogMSxcbiAgICBkb3plbjogMSxcbiAgICBkb3plbnM6IDEsXG4gICAgZHA6IDEsXG4gICAgZHBpOiAxLFxuICAgIGRyOiAxLFxuICAgIGRyYWZ0OiAxLFxuICAgIGRyYWc6IDEsXG4gICAgZHJhZ29uOiAxLFxuICAgIGRyYWluOiAxLFxuICAgIGRyYWluYWdlOiAxLFxuICAgIGRyYW1hOiAxLFxuICAgIGRyYW1hdGljOiAxLFxuICAgIGRyYW1hdGljYWxseTogMSxcbiAgICBkcmF3OiAxLFxuICAgIGRyYXdpbmc6IDEsXG4gICAgZHJhd2luZ3M6IDEsXG4gICAgZHJhd246IDEsXG4gICAgZHJhd3M6IDEsXG4gICAgZHJlYW06IDEsXG4gICAgZHJlYW1zOiAxLFxuICAgIGRyZXNzOiAxLFxuICAgIGRyZXNzZWQ6IDEsXG4gICAgZHJlc3NlczogMSxcbiAgICBkcmVzc2luZzogMSxcbiAgICBkcmV3OiAxLFxuICAgIGRyaWVkOiAxLFxuICAgIGRyaWxsOiAxLFxuICAgIGRyaWxsaW5nOiAxLFxuICAgIGRyaW5rOiAxLFxuICAgIGRyaW5raW5nOiAxLFxuICAgIGRyaW5rczogMSxcbiAgICBkcml2ZTogMSxcbiAgICBkcml2ZW46IDEsXG4gICAgZHJpdmVyOiAxLFxuICAgIGRyaXZlcnM6IDEsXG4gICAgZHJpdmVzOiAxLFxuICAgIGRyaXZpbmc6IDEsXG4gICAgZHJvcDogMSxcbiAgICBkcm9wcGVkOiAxLFxuICAgIGRyb3BzOiAxLFxuICAgIGRyb3ZlOiAxLFxuICAgIGRydWc6IDEsXG4gICAgZHJ1Z3M6IDEsXG4gICAgZHJ1bTogMSxcbiAgICBkcnVtczogMSxcbiAgICBkcnVuazogMSxcbiAgICBkcnk6IDEsXG4gICAgZHJ5ZXI6IDEsXG4gICAgZHM6IDEsXG4gICAgZHNjOiAxLFxuICAgIGRzbDogMSxcbiAgICBkdDogMSxcbiAgICBkdHM6IDEsXG4gICAgZHU6IDEsXG4gICAgZHVhbDogMSxcbiAgICBkdWJhaTogMSxcbiAgICBkdWJsaW46IDEsXG4gICAgZHVjazogMSxcbiAgICBkdWRlOiAxLFxuICAgIGR1ZTogMSxcbiAgICBkdWk6IDEsXG4gICAgZHVrZTogMSxcbiAgICBkdW1iOiAxLFxuICAgIGR1bXA6IDEsXG4gICAgZHVuY2FuOiAxLFxuICAgIGR1bzogMSxcbiAgICBkdXBsaWNhdGU6IDEsXG4gICAgZHVyYWJsZTogMSxcbiAgICBkdXJhdGlvbjogMSxcbiAgICBkdXJoYW06IDEsXG4gICAgZHVyaW5nOiAxLFxuICAgIGR1c3Q6IDEsXG4gICAgZHV0Y2g6IDEsXG4gICAgZHV0aWVzOiAxLFxuICAgIGR1dHk6IDEsXG4gICAgZHY6IDEsXG4gICAgZHZkOiAxLFxuICAgIGR2ZHM6IDEsXG4gICAgZHg6IDEsXG4gICAgZHlpbmc6IDEsXG4gICAgZHlsYW46IDEsXG4gICAgZHluYW1pYzogMSxcbiAgICBkeW5hbWljczogMSxcbiAgICBlOiAxLFxuICAgIGVhOiAxLFxuICAgIGVhY2g6IDEsXG4gICAgZWFnbGU6IDEsXG4gICAgZWFnbGVzOiAxLFxuICAgIGVhcjogMSxcbiAgICBlYXJsOiAxLFxuICAgIGVhcmxpZXI6IDEsXG4gICAgZWFybGllc3Q6IDEsXG4gICAgZWFybHk6IDEsXG4gICAgZWFybjogMSxcbiAgICBlYXJuZWQ6IDEsXG4gICAgZWFybmluZzogMSxcbiAgICBlYXJuaW5nczogMSxcbiAgICBlYXJyaW5nczogMSxcbiAgICBlYXJzOiAxLFxuICAgIGVhcnRoOiAxLFxuICAgIGVhcnRocXVha2U6IDEsXG4gICAgZWFzZTogMSxcbiAgICBlYXNpZXI6IDEsXG4gICAgZWFzaWx5OiAxLFxuICAgIGVhc3Q6IDEsXG4gICAgZWFzdGVyOiAxLFxuICAgIGVhc3Rlcm46IDEsXG4gICAgZWFzeTogMSxcbiAgICBlYXQ6IDEsXG4gICAgZWF0aW5nOiAxLFxuICAgIGVhdTogMSxcbiAgICBlYmF5OiAxLFxuICAgIGVib255OiAxLFxuICAgIGVib29rOiAxLFxuICAgIGVib29rczogMSxcbiAgICBlYzogMSxcbiAgICBlY2hvOiAxLFxuICAgIGVjbGlwc2U6IDEsXG4gICAgZWNvOiAxLFxuICAgIGVjb2xvZ2ljYWw6IDEsXG4gICAgZWNvbG9neTogMSxcbiAgICBlY29tbWVyY2U6IDEsXG4gICAgZWNvbm9taWM6IDEsXG4gICAgZWNvbm9taWNzOiAxLFxuICAgIGVjb25vbWllczogMSxcbiAgICBlY29ub215OiAxLFxuICAgIGVjdWFkb3I6IDEsXG4gICAgZWQ6IDEsXG4gICAgZWRkaWU6IDEsXG4gICAgZWRlbjogMSxcbiAgICBlZGdhcjogMSxcbiAgICBlZGdlOiAxLFxuICAgIGVkZ2VzOiAxLFxuICAgIGVkaW5idXJnaDogMSxcbiAgICBlZGl0OiAxLFxuICAgIGVkaXRlZDogMSxcbiAgICBlZGl0aW5nOiAxLFxuICAgIGVkaXRpb246IDEsXG4gICAgZWRpdGlvbnM6IDEsXG4gICAgZWRpdG9yOiAxLFxuICAgIGVkaXRvcmlhbDogMSxcbiAgICBlZGl0b3JpYWxzOiAxLFxuICAgIGVkaXRvcnM6IDEsXG4gICAgZWRtb250b246IDEsXG4gICAgZWRzOiAxLFxuICAgIGVkdDogMSxcbiAgICBlZHVjYXRlZDogMSxcbiAgICBlZHVjYXRpb246IDEsXG4gICAgZWR1Y2F0aW9uYWw6IDEsXG4gICAgZWR1Y2F0b3JzOiAxLFxuICAgIGVkd2FyZDogMSxcbiAgICBlZHdhcmRzOiAxLFxuICAgIGVlOiAxLFxuICAgIGVmOiAxLFxuICAgIGVmZmVjdDogMSxcbiAgICBlZmZlY3RpdmU6IDEsXG4gICAgZWZmZWN0aXZlbHk6IDEsXG4gICAgZWZmZWN0aXZlbmVzczogMSxcbiAgICBlZmZlY3RzOiAxLFxuICAgIGVmZmljaWVuY3k6IDEsXG4gICAgZWZmaWNpZW50OiAxLFxuICAgIGVmZmljaWVudGx5OiAxLFxuICAgIGVmZm9ydDogMSxcbiAgICBlZmZvcnRzOiAxLFxuICAgIGVnOiAxLFxuICAgIGVnZzogMSxcbiAgICBlZ2dzOiAxLFxuICAgIGVneXB0OiAxLFxuICAgIGVneXB0aWFuOiAxLFxuICAgIGVoOiAxLFxuICAgIGVpZ2h0OiAxLFxuICAgIGVpdGhlcjogMSxcbiAgICBlamFjdWxhdGlvbjogMSxcbiAgICBlbDogMSxcbiAgICBlbGRlcjogMSxcbiAgICBlbGRlcmx5OiAxLFxuICAgIGVsZWN0OiAxLFxuICAgIGVsZWN0ZWQ6IDEsXG4gICAgZWxlY3Rpb246IDEsXG4gICAgZWxlY3Rpb25zOiAxLFxuICAgIGVsZWN0b3JhbDogMSxcbiAgICBlbGVjdHJpYzogMSxcbiAgICBlbGVjdHJpY2FsOiAxLFxuICAgIGVsZWN0cmljaXR5OiAxLFxuICAgIGVsZWN0cm86IDEsXG4gICAgZWxlY3Ryb246IDEsXG4gICAgZWxlY3Ryb25pYzogMSxcbiAgICBlbGVjdHJvbmljczogMSxcbiAgICBlbGVnYW50OiAxLFxuICAgIGVsZW1lbnQ6IDEsXG4gICAgZWxlbWVudGFyeTogMSxcbiAgICBlbGVtZW50czogMSxcbiAgICBlbGVwaGFudDogMSxcbiAgICBlbGV2YXRpb246IDEsXG4gICAgZWxldmVuOiAxLFxuICAgIGVsaWdpYmlsaXR5OiAxLFxuICAgIGVsaWdpYmxlOiAxLFxuICAgIGVsaW1pbmF0ZTogMSxcbiAgICBlbGltaW5hdGlvbjogMSxcbiAgICBlbGl0ZTogMSxcbiAgICBlbGl6YWJldGg6IDEsXG4gICAgZWxsZW46IDEsXG4gICAgZWxsaW90dDogMSxcbiAgICBlbGxpczogMSxcbiAgICBlbHNlOiAxLFxuICAgIGVsc2V3aGVyZTogMSxcbiAgICBlbHZpczogMSxcbiAgICBlbTogMSxcbiAgICBlbWFjczogMSxcbiAgICBlbWFpbDogMSxcbiAgICBlbWFpbHM6IDEsXG4gICAgZW1iYXNzeTogMSxcbiAgICBlbWJlZGRlZDogMSxcbiAgICBlbWVyYWxkOiAxLFxuICAgIGVtZXJnZW5jeTogMSxcbiAgICBlbWVyZ2luZzogMSxcbiAgICBlbWlseTogMSxcbiAgICBlbWluZW06IDEsXG4gICAgZW1pcmF0ZXM6IDEsXG4gICAgZW1pc3Npb246IDEsXG4gICAgZW1pc3Npb25zOiAxLFxuICAgIGVtbWE6IDEsXG4gICAgZW1vdGlvbmFsOiAxLFxuICAgIGVtb3Rpb25zOiAxLFxuICAgIGVtcGVyb3I6IDEsXG4gICAgZW1waGFzaXM6IDEsXG4gICAgZW1waXJlOiAxLFxuICAgIGVtcGlyaWNhbDogMSxcbiAgICBlbXBsb3k6IDEsXG4gICAgZW1wbG95ZWQ6IDEsXG4gICAgZW1wbG95ZWU6IDEsXG4gICAgZW1wbG95ZWVzOiAxLFxuICAgIGVtcGxveWVyOiAxLFxuICAgIGVtcGxveWVyczogMSxcbiAgICBlbXBsb3ltZW50OiAxLFxuICAgIGVtcHR5OiAxLFxuICAgIGVuOiAxLFxuICAgIGVuYWJsZTogMSxcbiAgICBlbmFibGVkOiAxLFxuICAgIGVuYWJsZXM6IDEsXG4gICAgZW5hYmxpbmc6IDEsXG4gICAgZW5iOiAxLFxuICAgIGVuY2xvc2VkOiAxLFxuICAgIGVuY2xvc3VyZTogMSxcbiAgICBlbmNvZGluZzogMSxcbiAgICBlbmNvdW50ZXI6IDEsXG4gICAgZW5jb3VudGVyZWQ6IDEsXG4gICAgZW5jb3VyYWdlOiAxLFxuICAgIGVuY291cmFnZWQ6IDEsXG4gICAgZW5jb3VyYWdlczogMSxcbiAgICBlbmNvdXJhZ2luZzogMSxcbiAgICBlbmNyeXB0aW9uOiAxLFxuICAgIGVuY3ljbG9wZWRpYTogMSxcbiAgICBlbmQ6IDEsXG4gICAgZW5kYW5nZXJlZDogMSxcbiAgICBlbmRlZDogMSxcbiAgICBlbmRpZjogMSxcbiAgICBlbmRpbmc6IDEsXG4gICAgZW5kbGVzczogMSxcbiAgICBlbmRvcnNlZDogMSxcbiAgICBlbmRvcnNlbWVudDogMSxcbiAgICBlbmRzOiAxLFxuICAgIGVuZW1pZXM6IDEsXG4gICAgZW5lbXk6IDEsXG4gICAgZW5lcmd5OiAxLFxuICAgIGVuZm9yY2VtZW50OiAxLFxuICAgIGVuZzogMSxcbiAgICBlbmdhZ2U6IDEsXG4gICAgZW5nYWdlZDogMSxcbiAgICBlbmdhZ2VtZW50OiAxLFxuICAgIGVuZ2FnaW5nOiAxLFxuICAgIGVuZ2luZTogMSxcbiAgICBlbmdpbmVlcjogMSxcbiAgICBlbmdpbmVlcmluZzogMSxcbiAgICBlbmdpbmVlcnM6IDEsXG4gICAgZW5naW5lczogMSxcbiAgICBlbmdsYW5kOiAxLFxuICAgIGVuZ2xpc2g6IDEsXG4gICAgZW5oYW5jZTogMSxcbiAgICBlbmhhbmNlZDogMSxcbiAgICBlbmhhbmNlbWVudDogMSxcbiAgICBlbmhhbmNlbWVudHM6IDEsXG4gICAgZW5oYW5jaW5nOiAxLFxuICAgIGVuam95OiAxLFxuICAgIGVuam95ZWQ6IDEsXG4gICAgZW5qb3lpbmc6IDEsXG4gICAgZW5sYXJnZTogMSxcbiAgICBlbmxhcmdlbWVudDogMSxcbiAgICBlbm9ybW91czogMSxcbiAgICBlbm91Z2g6IDEsXG4gICAgZW5xdWlyaWVzOiAxLFxuICAgIGVucXVpcnk6IDEsXG4gICAgZW5yb2xsZWQ6IDEsXG4gICAgZW5yb2xsbWVudDogMSxcbiAgICBlbnNlbWJsZTogMSxcbiAgICBlbnN1cmU6IDEsXG4gICAgZW5zdXJlczogMSxcbiAgICBlbnN1cmluZzogMSxcbiAgICBlbnQ6IDEsXG4gICAgZW50ZXI6IDEsXG4gICAgZW50ZXJlZDogMSxcbiAgICBlbnRlcmluZzogMSxcbiAgICBlbnRlcnByaXNlOiAxLFxuICAgIGVudGVycHJpc2VzOiAxLFxuICAgIGVudGVyczogMSxcbiAgICBlbnRlcnRhaW5pbmc6IDEsXG4gICAgZW50ZXJ0YWlubWVudDogMSxcbiAgICBlbnRpcmU6IDEsXG4gICAgZW50aXJlbHk6IDEsXG4gICAgZW50aXRpZXM6IDEsXG4gICAgZW50aXRsZWQ6IDEsXG4gICAgZW50aXR5OiAxLFxuICAgIGVudHJhbmNlOiAxLFxuICAgIGVudHJlcHJlbmV1cjogMSxcbiAgICBlbnRyZXByZW5ldXJzOiAxLFxuICAgIGVudHJpZXM6IDEsXG4gICAgZW50cnk6IDEsXG4gICAgZW52ZWxvcGU6IDEsXG4gICAgZW52aXJvbm1lbnQ6IDEsXG4gICAgZW52aXJvbm1lbnRhbDogMSxcbiAgICBlbnZpcm9ubWVudHM6IDEsXG4gICAgZW56eW1lOiAxLFxuICAgIGVvczogMSxcbiAgICBlcDogMSxcbiAgICBlcGE6IDEsXG4gICAgZXBpYzogMSxcbiAgICBlcGluaW9uczogMSxcbiAgICBlcGlzb2RlOiAxLFxuICAgIGVwaXNvZGVzOiAxLFxuICAgIGVwc29uOiAxLFxuICAgIGVxOiAxLFxuICAgIGVxdWFsOiAxLFxuICAgIGVxdWFsaXR5OiAxLFxuICAgIGVxdWFsbHk6IDEsXG4gICAgZXF1YXRpb246IDEsXG4gICAgZXF1YXRpb25zOiAxLFxuICAgIGVxdWlsaWJyaXVtOiAxLFxuICAgIGVxdWlwbWVudDogMSxcbiAgICBlcXVpcHBlZDogMSxcbiAgICBlcXVpdHk6IDEsXG4gICAgZXF1aXZhbGVudDogMSxcbiAgICBlcjogMSxcbiAgICBlcmE6IDEsXG4gICAgZXJpYzogMSxcbiAgICBlcmljc3NvbjogMSxcbiAgICBlcmlrOiAxLFxuICAgIGVyb3RpYzogMSxcbiAgICBlcm90aWNhOiAxLFxuICAgIGVycDogMSxcbiAgICBlcnJvcjogMSxcbiAgICBlcnJvcnM6IDEsXG4gICAgZXM6IDEsXG4gICAgZXNjYXBlOiAxLFxuICAgIGVzY29ydDogMSxcbiAgICBlc2NvcnRzOiAxLFxuICAgIGVzcGVjaWFsbHk6IDEsXG4gICAgZXNwbjogMSxcbiAgICBlc3NheTogMSxcbiAgICBlc3NheXM6IDEsXG4gICAgZXNzZW5jZTogMSxcbiAgICBlc3NlbnRpYWw6IDEsXG4gICAgZXNzZW50aWFsbHk6IDEsXG4gICAgZXNzZW50aWFsczogMSxcbiAgICBlc3NleDogMSxcbiAgICBlc3Q6IDEsXG4gICAgZXN0YWJsaXNoOiAxLFxuICAgIGVzdGFibGlzaGVkOiAxLFxuICAgIGVzdGFibGlzaGluZzogMSxcbiAgICBlc3RhYmxpc2htZW50OiAxLFxuICAgIGVzdGF0ZTogMSxcbiAgICBlc3RhdGVzOiAxLFxuICAgIGVzdGltYXRlOiAxLFxuICAgIGVzdGltYXRlZDogMSxcbiAgICBlc3RpbWF0ZXM6IDEsXG4gICAgZXN0aW1hdGlvbjogMSxcbiAgICBlc3RvbmlhOiAxLFxuICAgIGV0OiAxLFxuICAgIGV0YzogMSxcbiAgICBldGVybmFsOiAxLFxuICAgIGV0aGVybmV0OiAxLFxuICAgIGV0aGljYWw6IDEsXG4gICAgZXRoaWNzOiAxLFxuICAgIGV0aGlvcGlhOiAxLFxuICAgIGV0aG5pYzogMSxcbiAgICBldTogMSxcbiAgICBldWdlbmU6IDEsXG4gICAgZXVyOiAxLFxuICAgIGV1cm86IDEsXG4gICAgZXVyb3BlOiAxLFxuICAgIGV1cm9wZWFuOiAxLFxuICAgIGV1cm9zOiAxLFxuICAgIGV2OiAxLFxuICAgIGV2YTogMSxcbiAgICBldmFsOiAxLFxuICAgIGV2YWx1YXRlOiAxLFxuICAgIGV2YWx1YXRlZDogMSxcbiAgICBldmFsdWF0aW5nOiAxLFxuICAgIGV2YWx1YXRpb246IDEsXG4gICAgZXZhbHVhdGlvbnM6IDEsXG4gICAgZXZhbmVzY2VuY2U6IDEsXG4gICAgZXZhbnM6IDEsXG4gICAgZXZlOiAxLFxuICAgIGV2ZW46IDEsXG4gICAgZXZlbmluZzogMSxcbiAgICBldmVudDogMSxcbiAgICBldmVudHM6IDEsXG4gICAgZXZlbnR1YWxseTogMSxcbiAgICBldmVyOiAxLFxuICAgIGV2ZXJ5OiAxLFxuICAgIGV2ZXJ5Ym9keTogMSxcbiAgICBldmVyeWRheTogMSxcbiAgICBldmVyeW9uZTogMSxcbiAgICBldmVyeXRoaW5nOiAxLFxuICAgIGV2ZXJ5d2hlcmU6IDEsXG4gICAgZXZpZGVuY2U6IDEsXG4gICAgZXZpZGVudDogMSxcbiAgICBldmlsOiAxLFxuICAgIGV2b2x1dGlvbjogMSxcbiAgICBleDogMSxcbiAgICBleGFjdDogMSxcbiAgICBleGFjdGx5OiAxLFxuICAgIGV4YW06IDEsXG4gICAgZXhhbWluYXRpb246IDEsXG4gICAgZXhhbWluYXRpb25zOiAxLFxuICAgIGV4YW1pbmU6IDEsXG4gICAgZXhhbWluZWQ6IDEsXG4gICAgZXhhbWluZXM6IDEsXG4gICAgZXhhbWluaW5nOiAxLFxuICAgIGV4YW1wbGU6IDEsXG4gICAgZXhhbXBsZXM6IDEsXG4gICAgZXhhbXM6IDEsXG4gICAgZXhjZWVkOiAxLFxuICAgIGV4Y2VsOiAxLFxuICAgIGV4Y2VsbGVuY2U6IDEsXG4gICAgZXhjZWxsZW50OiAxLFxuICAgIGV4Y2VwdDogMSxcbiAgICBleGNlcHRpb246IDEsXG4gICAgZXhjZXB0aW9uYWw6IDEsXG4gICAgZXhjZXB0aW9uczogMSxcbiAgICBleGNlcnB0OiAxLFxuICAgIGV4Y2VzczogMSxcbiAgICBleGNlc3NpdmU6IDEsXG4gICAgZXhjaGFuZ2U6IDEsXG4gICAgZXhjaGFuZ2VzOiAxLFxuICAgIGV4Y2l0ZWQ6IDEsXG4gICAgZXhjaXRlbWVudDogMSxcbiAgICBleGNpdGluZzogMSxcbiAgICBleGNsdWRlOiAxLFxuICAgIGV4Y2x1ZGVkOiAxLFxuICAgIGV4Y2x1ZGluZzogMSxcbiAgICBleGNsdXNpb246IDEsXG4gICAgZXhjbHVzaXZlOiAxLFxuICAgIGV4Y2x1c2l2ZWx5OiAxLFxuICAgIGV4Y3VzZTogMSxcbiAgICBleGVjOiAxLFxuICAgIGV4ZWN1dGU6IDEsXG4gICAgZXhlY3V0ZWQ6IDEsXG4gICAgZXhlY3V0aW9uOiAxLFxuICAgIGV4ZWN1dGl2ZTogMSxcbiAgICBleGVjdXRpdmVzOiAxLFxuICAgIGV4ZW1wdDogMSxcbiAgICBleGVtcHRpb246IDEsXG4gICAgZXhlcmNpc2U6IDEsXG4gICAgZXhlcmNpc2VzOiAxLFxuICAgIGV4aGF1c3Q6IDEsXG4gICAgZXhoaWJpdDogMSxcbiAgICBleGhpYml0aW9uOiAxLFxuICAgIGV4aGliaXRpb25zOiAxLFxuICAgIGV4aGliaXRzOiAxLFxuICAgIGV4aXN0OiAxLFxuICAgIGV4aXN0ZWQ6IDEsXG4gICAgZXhpc3RlbmNlOiAxLFxuICAgIGV4aXN0aW5nOiAxLFxuICAgIGV4aXN0czogMSxcbiAgICBleGl0OiAxLFxuICAgIGV4b3RpYzogMSxcbiAgICBleHA6IDEsXG4gICAgZXhwYW5kOiAxLFxuICAgIGV4cGFuZGVkOiAxLFxuICAgIGV4cGFuZGluZzogMSxcbiAgICBleHBhbnNpb246IDEsXG4gICAgZXhwYW5zeXM6IDEsXG4gICAgZXhwZWN0OiAxLFxuICAgIGV4cGVjdGF0aW9uczogMSxcbiAgICBleHBlY3RlZDogMSxcbiAgICBleHBlY3RzOiAxLFxuICAgIGV4cGVkaWE6IDEsXG4gICAgZXhwZW5kaXR1cmU6IDEsXG4gICAgZXhwZW5kaXR1cmVzOiAxLFxuICAgIGV4cGVuc2U6IDEsXG4gICAgZXhwZW5zZXM6IDEsXG4gICAgZXhwZW5zaXZlOiAxLFxuICAgIGV4cGVyaWVuY2U6IDEsXG4gICAgZXhwZXJpZW5jZWQ6IDEsXG4gICAgZXhwZXJpZW5jZXM6IDEsXG4gICAgZXhwZXJpZW5jaW5nOiAxLFxuICAgIGV4cGVyaW1lbnQ6IDEsXG4gICAgZXhwZXJpbWVudGFsOiAxLFxuICAgIGV4cGVyaW1lbnRzOiAxLFxuICAgIGV4cGVydDogMSxcbiAgICBleHBlcnRpc2U6IDEsXG4gICAgZXhwZXJ0czogMSxcbiAgICBleHBpcmF0aW9uOiAxLFxuICAgIGV4cGlyZWQ6IDEsXG4gICAgZXhwaXJlczogMSxcbiAgICBleHBsYWluOiAxLFxuICAgIGV4cGxhaW5lZDogMSxcbiAgICBleHBsYWluaW5nOiAxLFxuICAgIGV4cGxhaW5zOiAxLFxuICAgIGV4cGxhbmF0aW9uOiAxLFxuICAgIGV4cGxpY2l0OiAxLFxuICAgIGV4cGxpY2l0bHk6IDEsXG4gICAgZXhwbG9yYXRpb246IDEsXG4gICAgZXhwbG9yZTogMSxcbiAgICBleHBsb3JlcjogMSxcbiAgICBleHBsb3Jpbmc6IDEsXG4gICAgZXhwbG9zaW9uOiAxLFxuICAgIGV4cG86IDEsXG4gICAgZXhwb3J0OiAxLFxuICAgIGV4cG9ydHM6IDEsXG4gICAgZXhwb3NlZDogMSxcbiAgICBleHBvc3VyZTogMSxcbiAgICBleHByZXNzOiAxLFxuICAgIGV4cHJlc3NlZDogMSxcbiAgICBleHByZXNzaW9uOiAxLFxuICAgIGV4cHJlc3Npb25zOiAxLFxuICAgIGV4dDogMSxcbiAgICBleHRlbmQ6IDEsXG4gICAgZXh0ZW5kZWQ6IDEsXG4gICAgZXh0ZW5kaW5nOiAxLFxuICAgIGV4dGVuZHM6IDEsXG4gICAgZXh0ZW5zaW9uOiAxLFxuICAgIGV4dGVuc2lvbnM6IDEsXG4gICAgZXh0ZW5zaXZlOiAxLFxuICAgIGV4dGVudDogMSxcbiAgICBleHRlcmlvcjogMSxcbiAgICBleHRlcm5hbDogMSxcbiAgICBleHRyYTogMSxcbiAgICBleHRyYWN0OiAxLFxuICAgIGV4dHJhY3Rpb246IDEsXG4gICAgZXh0cmFvcmRpbmFyeTogMSxcbiAgICBleHRyYXM6IDEsXG4gICAgZXh0cmVtZTogMSxcbiAgICBleHRyZW1lbHk6IDEsXG4gICAgZXllOiAxLFxuICAgIGV5ZWQ6IDEsXG4gICAgZXllczogMSxcbiAgICBlejogMSxcbiAgICBmOiAxLFxuICAgIGZhOiAxLFxuICAgIGZhYnJpYzogMSxcbiAgICBmYWJyaWNzOiAxLFxuICAgIGZhYnVsb3VzOiAxLFxuICAgIGZhY2U6IDEsXG4gICAgZmFjZWQ6IDEsXG4gICAgZmFjZXM6IDEsXG4gICAgZmFjaWFsOiAxLFxuICAgIGZhY2lsaXRhdGU6IDEsXG4gICAgZmFjaWxpdGllczogMSxcbiAgICBmYWNpbGl0eTogMSxcbiAgICBmYWNpbmc6IDEsXG4gICAgZmFjdDogMSxcbiAgICBmYWN0b3I6IDEsXG4gICAgZmFjdG9yczogMSxcbiAgICBmYWN0b3J5OiAxLFxuICAgIGZhY3RzOiAxLFxuICAgIGZhY3VsdHk6IDEsXG4gICAgZmFpbDogMSxcbiAgICBmYWlsZWQ6IDEsXG4gICAgZmFpbGluZzogMSxcbiAgICBmYWlsczogMSxcbiAgICBmYWlsdXJlOiAxLFxuICAgIGZhaWx1cmVzOiAxLFxuICAgIGZhaXI6IDEsXG4gICAgZmFpcmZpZWxkOiAxLFxuICAgIGZhaXJseTogMSxcbiAgICBmYWlyeTogMSxcbiAgICBmYWl0aDogMSxcbiAgICBmYWtlOiAxLFxuICAgIGZhbGw6IDEsXG4gICAgZmFsbGVuOiAxLFxuICAgIGZhbGxpbmc6IDEsXG4gICAgZmFsbHM6IDEsXG4gICAgZmFsc2U6IDEsXG4gICAgZmFtZTogMSxcbiAgICBmYW1pbGlhcjogMSxcbiAgICBmYW1pbGllczogMSxcbiAgICBmYW1pbHk6IDEsXG4gICAgZmFtb3VzOiAxLFxuICAgIGZhbjogMSxcbiAgICBmYW5jeTogMSxcbiAgICBmYW5zOiAxLFxuICAgIGZhbnRhc3RpYzogMSxcbiAgICBmYW50YXN5OiAxLFxuICAgIGZhcTogMSxcbiAgICBmYXFzOiAxLFxuICAgIGZhcjogMSxcbiAgICBmYXJlOiAxLFxuICAgIGZhcmVzOiAxLFxuICAgIGZhcm06IDEsXG4gICAgZmFybWVyOiAxLFxuICAgIGZhcm1lcnM6IDEsXG4gICAgZmFybWluZzogMSxcbiAgICBmYXJtczogMSxcbiAgICBmYXNjaW5hdGluZzogMSxcbiAgICBmYXNoaW9uOiAxLFxuICAgIGZhc3Q6IDEsXG4gICAgZmFzdGVyOiAxLFxuICAgIGZhc3Rlc3Q6IDEsXG4gICAgZmF0OiAxLFxuICAgIGZhdGFsOiAxLFxuICAgIGZhdGU6IDEsXG4gICAgZmF0aGVyOiAxLFxuICAgIGZhdGhlcnM6IDEsXG4gICAgZmF0dHk6IDEsXG4gICAgZmF1bHQ6IDEsXG4gICAgZmF2b3I6IDEsXG4gICAgZmF2b3JpdGU6IDEsXG4gICAgZmF2b3JpdGVzOiAxLFxuICAgIGZhdm9yczogMSxcbiAgICBmYXZvdXI6IDEsXG4gICAgZmF2b3VyaXRlOiAxLFxuICAgIGZhdm91cml0ZXM6IDEsXG4gICAgZmF4OiAxLFxuICAgIGZiaTogMSxcbiAgICBmYzogMSxcbiAgICBmY2M6IDEsXG4gICAgZmQ6IDEsXG4gICAgZmRhOiAxLFxuICAgIGZlOiAxLFxuICAgIGZlYXI6IDEsXG4gICAgZmVhcnM6IDEsXG4gICAgZmVhdDogMSxcbiAgICBmZWF0dXJlOiAxLFxuICAgIGZlYXR1cmVkOiAxLFxuICAgIGZlYXR1cmVzOiAxLFxuICAgIGZlYXR1cmluZzogMSxcbiAgICBmZWI6IDEsXG4gICAgZmVicnVhcnk6IDEsXG4gICAgZmVkOiAxLFxuICAgIGZlZGVyYWw6IDEsXG4gICAgZmVkZXJhdGlvbjogMSxcbiAgICBmZWU6IDEsXG4gICAgZmVlZDogMSxcbiAgICBmZWVkYmFjazogMSxcbiAgICBmZWVkaW5nOiAxLFxuICAgIGZlZWRzOiAxLFxuICAgIGZlZWw6IDEsXG4gICAgZmVlbGluZzogMSxcbiAgICBmZWVsaW5nczogMSxcbiAgICBmZWVsczogMSxcbiAgICBmZWVzOiAxLFxuICAgIGZlZXQ6IDEsXG4gICAgZmVsbDogMSxcbiAgICBmZWxsb3c6IDEsXG4gICAgZmVsbG93c2hpcDogMSxcbiAgICBmZWx0OiAxLFxuICAgIGZlbWFsZTogMSxcbiAgICBmZW1hbGVzOiAxLFxuICAgIGZlbmNlOiAxLFxuICAgIGZlb2Y6IDEsXG4gICAgZmVycmFyaTogMSxcbiAgICBmZXJyeTogMSxcbiAgICBmZXN0aXZhbDogMSxcbiAgICBmZXN0aXZhbHM6IDEsXG4gICAgZmV0aXNoOiAxLFxuICAgIGZldmVyOiAxLFxuICAgIGZldzogMSxcbiAgICBmZXdlcjogMSxcbiAgICBmZjogMSxcbiAgICBmZzogMSxcbiAgICBmaTogMSxcbiAgICBmaWJlcjogMSxcbiAgICBmaWJyZTogMSxcbiAgICBmaWN0aW9uOiAxLFxuICAgIGZpZWxkOiAxLFxuICAgIGZpZWxkczogMSxcbiAgICBmaWZ0ZWVuOiAxLFxuICAgIGZpZnRoOiAxLFxuICAgIGZpZnR5OiAxLFxuICAgIGZpZzogMSxcbiAgICBmaWdodDogMSxcbiAgICBmaWdodGVyOiAxLFxuICAgIGZpZ2h0ZXJzOiAxLFxuICAgIGZpZ2h0aW5nOiAxLFxuICAgIGZpZ3VyZTogMSxcbiAgICBmaWd1cmVkOiAxLFxuICAgIGZpZ3VyZXM6IDEsXG4gICAgZmlqaTogMSxcbiAgICBmaWxlOiAxLFxuICAgIGZpbGVkOiAxLFxuICAgIGZpbGVuYW1lOiAxLFxuICAgIGZpbGVzOiAxLFxuICAgIGZpbGluZzogMSxcbiAgICBmaWxsOiAxLFxuICAgIGZpbGxlZDogMSxcbiAgICBmaWxsaW5nOiAxLFxuICAgIGZpbG06IDEsXG4gICAgZmlsbWU6IDEsXG4gICAgZmlsbXM6IDEsXG4gICAgZmlsdGVyOiAxLFxuICAgIGZpbHRlcmluZzogMSxcbiAgICBmaWx0ZXJzOiAxLFxuICAgIGZpbjogMSxcbiAgICBmaW5hbDogMSxcbiAgICBmaW5hbGx5OiAxLFxuICAgIGZpbmFsczogMSxcbiAgICBmaW5hbmNlOiAxLFxuICAgIGZpbmFuY2VzOiAxLFxuICAgIGZpbmFuY2lhbDogMSxcbiAgICBmaW5hbmNpbmc6IDEsXG4gICAgZmluZDogMSxcbiAgICBmaW5kYXJ0aWNsZXM6IDEsXG4gICAgZmluZGVyOiAxLFxuICAgIGZpbmRpbmc6IDEsXG4gICAgZmluZGluZ3M6IDEsXG4gICAgZmluZGxhdzogMSxcbiAgICBmaW5kczogMSxcbiAgICBmaW5lOiAxLFxuICAgIGZpbmVzdDogMSxcbiAgICBmaW5nZXI6IDEsXG4gICAgZmluZ2VyaW5nOiAxLFxuICAgIGZpbmdlcnM6IDEsXG4gICAgZmluaXNoOiAxLFxuICAgIGZpbmlzaGVkOiAxLFxuICAgIGZpbmlzaGluZzogMSxcbiAgICBmaW5pdGU6IDEsXG4gICAgZmlubGFuZDogMSxcbiAgICBmaW5uaXNoOiAxLFxuICAgIGZpb3JpY2V0OiAxLFxuICAgIGZpcmU6IDEsXG4gICAgZmlyZWQ6IDEsXG4gICAgZmlyZWZveDogMSxcbiAgICBmaXJlcGxhY2U6IDEsXG4gICAgZmlyZXM6IDEsXG4gICAgZmlyZXdhbGw6IDEsXG4gICAgZmlyZXdpcmU6IDEsXG4gICAgZmlybTogMSxcbiAgICBmaXJtczogMSxcbiAgICBmaXJtd2FyZTogMSxcbiAgICBmaXJzdDogMSxcbiAgICBmaXNjYWw6IDEsXG4gICAgZmlzaDogMSxcbiAgICBmaXNoZXI6IDEsXG4gICAgZmlzaGVyaWVzOiAxLFxuICAgIGZpc2hpbmc6IDEsXG4gICAgZmlzdDogMSxcbiAgICBmaXN0aW5nOiAxLFxuICAgIGZpdDogMSxcbiAgICBmaXRuZXNzOiAxLFxuICAgIGZpdHM6IDEsXG4gICAgZml0dGVkOiAxLFxuICAgIGZpdHRpbmc6IDEsXG4gICAgZml2ZTogMSxcbiAgICBmaXg6IDEsXG4gICAgZml4ZWQ6IDEsXG4gICAgZml4ZXM6IDEsXG4gICAgZml4dHVyZXM6IDEsXG4gICAgZmw6IDEsXG4gICAgZmxhZzogMSxcbiAgICBmbGFnczogMSxcbiAgICBmbGFtZTogMSxcbiAgICBmbGFzaDogMSxcbiAgICBmbGFzaGVyczogMSxcbiAgICBmbGFzaGluZzogMSxcbiAgICBmbGF0OiAxLFxuICAgIGZsYXZvcjogMSxcbiAgICBmbGVlY2U6IDEsXG4gICAgZmxlZXQ6IDEsXG4gICAgZmxlc2g6IDEsXG4gICAgZmxleDogMSxcbiAgICBmbGV4aWJpbGl0eTogMSxcbiAgICBmbGV4aWJsZTogMSxcbiAgICBmbGlja3I6IDEsXG4gICAgZmxpZ2h0OiAxLFxuICAgIGZsaWdodHM6IDEsXG4gICAgZmxpcDogMSxcbiAgICBmbG9hdDogMSxcbiAgICBmbG9hdGluZzogMSxcbiAgICBmbG9vZDogMSxcbiAgICBmbG9vcjogMSxcbiAgICBmbG9vcmluZzogMSxcbiAgICBmbG9vcnM6IDEsXG4gICAgZmxvcHB5OiAxLFxuICAgIGZsb3JhbDogMSxcbiAgICBmbG9yZW5jZTogMSxcbiAgICBmbG9yaWRhOiAxLFxuICAgIGZsb3Jpc3Q6IDEsXG4gICAgZmxvcmlzdHM6IDEsXG4gICAgZmxvdXI6IDEsXG4gICAgZmxvdzogMSxcbiAgICBmbG93ZXI6IDEsXG4gICAgZmxvd2VyczogMSxcbiAgICBmbG93czogMSxcbiAgICBmbG95ZDogMSxcbiAgICBmbHU6IDEsXG4gICAgZmx1aWQ6IDEsXG4gICAgZmx1c2g6IDEsXG4gICAgZmx1eDogMSxcbiAgICBmbHk6IDEsXG4gICAgZmx5ZXI6IDEsXG4gICAgZmx5aW5nOiAxLFxuICAgIGZtOiAxLFxuICAgIGZvOiAxLFxuICAgIGZvYW06IDEsXG4gICAgZm9jYWw6IDEsXG4gICAgZm9jdXM6IDEsXG4gICAgZm9jdXNlZDogMSxcbiAgICBmb2N1c2VzOiAxLFxuICAgIGZvY3VzaW5nOiAxLFxuICAgIGZvZzogMSxcbiAgICBmb2xkOiAxLFxuICAgIGZvbGRlcjogMSxcbiAgICBmb2xkZXJzOiAxLFxuICAgIGZvbGRpbmc6IDEsXG4gICAgZm9sazogMSxcbiAgICBmb2xrczogMSxcbiAgICBmb2xsb3c6IDEsXG4gICAgZm9sbG93ZWQ6IDEsXG4gICAgZm9sbG93aW5nOiAxLFxuICAgIGZvbGxvd3M6IDEsXG4gICAgZm9udDogMSxcbiAgICBmb250czogMSxcbiAgICBmb286IDEsXG4gICAgZm9vZDogMSxcbiAgICBmb29kczogMSxcbiAgICBmb29sOiAxLFxuICAgIGZvb3Q6IDEsXG4gICAgZm9vdGFnZTogMSxcbiAgICBmb290YmFsbDogMSxcbiAgICBmb290d2VhcjogMSxcbiAgICBmb3I6IDEsXG4gICAgZm9yYmVzOiAxLFxuICAgIGZvcmJpZGRlbjogMSxcbiAgICBmb3JjZTogMSxcbiAgICBmb3JjZWQ6IDEsXG4gICAgZm9yY2VzOiAxLFxuICAgIGZvcmQ6IDEsXG4gICAgZm9yZWNhc3Q6IDEsXG4gICAgZm9yZWNhc3RzOiAxLFxuICAgIGZvcmVpZ246IDEsXG4gICAgZm9yZXN0OiAxLFxuICAgIGZvcmVzdHJ5OiAxLFxuICAgIGZvcmVzdHM6IDEsXG4gICAgZm9yZXZlcjogMSxcbiAgICBmb3JnZTogMSxcbiAgICBmb3JnZXQ6IDEsXG4gICAgZm9yZ290OiAxLFxuICAgIGZvcmdvdHRlbjogMSxcbiAgICBmb3JrOiAxLFxuICAgIGZvcm06IDEsXG4gICAgZm9ybWFsOiAxLFxuICAgIGZvcm1hdDogMSxcbiAgICBmb3JtYXRpb246IDEsXG4gICAgZm9ybWF0czogMSxcbiAgICBmb3JtYXR0aW5nOiAxLFxuICAgIGZvcm1lZDogMSxcbiAgICBmb3JtZXI6IDEsXG4gICAgZm9ybWVybHk6IDEsXG4gICAgZm9ybWluZzogMSxcbiAgICBmb3JtczogMSxcbiAgICBmb3JtdWxhOiAxLFxuICAgIGZvcnQ6IDEsXG4gICAgZm9ydGg6IDEsXG4gICAgZm9ydHVuZTogMSxcbiAgICBmb3J0eTogMSxcbiAgICBmb3J1bTogMSxcbiAgICBmb3J1bXM6IDEsXG4gICAgZm9yd2FyZDogMSxcbiAgICBmb3J3YXJkaW5nOiAxLFxuICAgIGZvc3NpbDogMSxcbiAgICBmb3N0ZXI6IDEsXG4gICAgZm90bzogMSxcbiAgICBmb3RvczogMSxcbiAgICBmb3VnaHQ6IDEsXG4gICAgZm91bDogMSxcbiAgICBmb3VuZDogMSxcbiAgICBmb3VuZGF0aW9uOiAxLFxuICAgIGZvdW5kYXRpb25zOiAxLFxuICAgIGZvdW5kZWQ6IDEsXG4gICAgZm91bmRlcjogMSxcbiAgICBmb3VudGFpbjogMSxcbiAgICBmb3VyOiAxLFxuICAgIGZvdXJ0aDogMSxcbiAgICBmb3g6IDEsXG4gICAgZnA6IDEsXG4gICAgZnI6IDEsXG4gICAgZnJhY3Rpb246IDEsXG4gICAgZnJhZ3JhbmNlOiAxLFxuICAgIGZyYWdyYW5jZXM6IDEsXG4gICAgZnJhbWU6IDEsXG4gICAgZnJhbWVkOiAxLFxuICAgIGZyYW1lczogMSxcbiAgICBmcmFtZXdvcms6IDEsXG4gICAgZnJhbWluZzogMSxcbiAgICBmcmFuY2U6IDEsXG4gICAgZnJhbmNoaXNlOiAxLFxuICAgIGZyYW5jaXM6IDEsXG4gICAgZnJhbmNpc2NvOiAxLFxuICAgIGZyYW5rOiAxLFxuICAgIGZyYW5rZnVydDogMSxcbiAgICBmcmFua2xpbjogMSxcbiAgICBmcmFzZXI6IDEsXG4gICAgZnJhdWQ6IDEsXG4gICAgZnJlZDogMSxcbiAgICBmcmVkZXJpY2s6IDEsXG4gICAgZnJlZTogMSxcbiAgICBmcmVlYnNkOiAxLFxuICAgIGZyZWVkb206IDEsXG4gICAgZnJlZWxhbmNlOiAxLFxuICAgIGZyZWVseTogMSxcbiAgICBmcmVld2FyZTogMSxcbiAgICBmcmVlemU6IDEsXG4gICAgZnJlaWdodDogMSxcbiAgICBmcmVuY2g6IDEsXG4gICAgZnJlcXVlbmNpZXM6IDEsXG4gICAgZnJlcXVlbmN5OiAxLFxuICAgIGZyZXF1ZW50OiAxLFxuICAgIGZyZXF1ZW50bHk6IDEsXG4gICAgZnJlc2g6IDEsXG4gICAgZnJpOiAxLFxuICAgIGZyaWRheTogMSxcbiAgICBmcmlkZ2U6IDEsXG4gICAgZnJpZW5kOiAxLFxuICAgIGZyaWVuZGx5OiAxLFxuICAgIGZyaWVuZHM6IDEsXG4gICAgZnJpZW5kc2hpcDogMSxcbiAgICBmcm9nOiAxLFxuICAgIGZyb206IDEsXG4gICAgZnJvbnQ6IDEsXG4gICAgZnJvbnRpZXI6IDEsXG4gICAgZnJvbnRwYWdlOiAxLFxuICAgIGZyb3N0OiAxLFxuICAgIGZyb3plbjogMSxcbiAgICBmcnVpdDogMSxcbiAgICBmcnVpdHM6IDEsXG4gICAgZnM6IDEsXG4gICAgZnQ6IDEsXG4gICAgZnRwOiAxLFxuICAgIGZ1OiAxLFxuICAgIGZ1Y2s6IDEsXG4gICAgZnVja2VkOiAxLFxuICAgIGZ1Y2tpbmc6IDEsXG4gICAgZnVlbDogMSxcbiAgICBmdWppOiAxLFxuICAgIGZ1aml0c3U6IDEsXG4gICAgZnVsbDogMSxcbiAgICBmdWxseTogMSxcbiAgICBmdW46IDEsXG4gICAgZnVuY3Rpb246IDEsXG4gICAgZnVuY3Rpb25hbDogMSxcbiAgICBmdW5jdGlvbmFsaXR5OiAxLFxuICAgIGZ1bmN0aW9uaW5nOiAxLFxuICAgIGZ1bmN0aW9uczogMSxcbiAgICBmdW5kOiAxLFxuICAgIGZ1bmRhbWVudGFsOiAxLFxuICAgIGZ1bmRhbWVudGFsczogMSxcbiAgICBmdW5kZWQ6IDEsXG4gICAgZnVuZGluZzogMSxcbiAgICBmdW5kcmFpc2luZzogMSxcbiAgICBmdW5kczogMSxcbiAgICBmdW5lcmFsOiAxLFxuICAgIGZ1bms6IDEsXG4gICAgZnVua3k6IDEsXG4gICAgZnVubnk6IDEsXG4gICAgZnVyOiAxLFxuICAgIGZ1cm5pc2hlZDogMSxcbiAgICBmdXJuaXNoaW5nczogMSxcbiAgICBmdXJuaXR1cmU6IDEsXG4gICAgZnVydGhlcjogMSxcbiAgICBmdXJ0aGVybW9yZTogMSxcbiAgICBmdXNpb246IDEsXG4gICAgZnV0dXJlOiAxLFxuICAgIGZ1dHVyZXM6IDEsXG4gICAgZnV6enk6IDEsXG4gICAgZnc6IDEsXG4gICAgZndkOiAxLFxuICAgIGZ4OiAxLFxuICAgIGZ5OiAxLFxuICAgIGc6IDEsXG4gICAgZ2E6IDEsXG4gICAgZ2FicmllbDogMSxcbiAgICBnYWRnZXRzOiAxLFxuICAgIGdhZ2U6IDEsXG4gICAgZ2FpbjogMSxcbiAgICBnYWluZWQ6IDEsXG4gICAgZ2FpbnM6IDEsXG4gICAgZ2FsYXh5OiAxLFxuICAgIGdhbGU6IDEsXG4gICAgZ2FsbGVyaWVzOiAxLFxuICAgIGdhbGxlcnk6IDEsXG4gICAgZ2FtYmxpbmc6IDEsXG4gICAgZ2FtZTogMSxcbiAgICBnYW1lY3ViZTogMSxcbiAgICBnYW1lczogMSxcbiAgICBnYW1lc3BvdDogMSxcbiAgICBnYW1pbmc6IDEsXG4gICAgZ2FtbWE6IDEsXG4gICAgZ2FuZzogMSxcbiAgICBnYW5nYmFuZzogMSxcbiAgICBnYXA6IDEsXG4gICAgZ2FwczogMSxcbiAgICBnYXJhZ2U6IDEsXG4gICAgZ2FyYmFnZTogMSxcbiAgICBnYXJjaWE6IDEsXG4gICAgZ2FyZGVuOiAxLFxuICAgIGdhcmRlbmluZzogMSxcbiAgICBnYXJkZW5zOiAxLFxuICAgIGdhcmxpYzogMSxcbiAgICBnYXJtaW46IDEsXG4gICAgZ2FyeTogMSxcbiAgICBnYXM6IDEsXG4gICAgZ2Fzb2xpbmU6IDEsXG4gICAgZ2F0ZTogMSxcbiAgICBnYXRlczogMSxcbiAgICBnYXRld2F5OiAxLFxuICAgIGdhdGhlcjogMSxcbiAgICBnYXRoZXJlZDogMSxcbiAgICBnYXRoZXJpbmc6IDEsXG4gICAgZ2F1Z2U6IDEsXG4gICAgZ2F2ZTogMSxcbiAgICBnYXk6IDEsXG4gICAgZ2F5czogMSxcbiAgICBnYXpldHRlOiAxLFxuICAgIGdiOiAxLFxuICAgIGdiYTogMSxcbiAgICBnYnA6IDEsXG4gICAgZ2M6IDEsXG4gICAgZ2NjOiAxLFxuICAgIGdkOiAxLFxuICAgIGdkcDogMSxcbiAgICBnZTogMSxcbiAgICBnZWFyOiAxLFxuICAgIGdlZWs6IDEsXG4gICAgZ2VsOiAxLFxuICAgIGdlbTogMSxcbiAgICBnZW46IDEsXG4gICAgZ2VuZGVyOiAxLFxuICAgIGdlbmU6IDEsXG4gICAgZ2VuZWFsb2d5OiAxLFxuICAgIGdlbmVyYWw6IDEsXG4gICAgZ2VuZXJhbGx5OiAxLFxuICAgIGdlbmVyYXRlOiAxLFxuICAgIGdlbmVyYXRlZDogMSxcbiAgICBnZW5lcmF0ZXM6IDEsXG4gICAgZ2VuZXJhdGluZzogMSxcbiAgICBnZW5lcmF0aW9uOiAxLFxuICAgIGdlbmVyYXRpb25zOiAxLFxuICAgIGdlbmVyYXRvcjogMSxcbiAgICBnZW5lcmF0b3JzOiAxLFxuICAgIGdlbmVyaWM6IDEsXG4gICAgZ2VuZXJvdXM6IDEsXG4gICAgZ2VuZXM6IDEsXG4gICAgZ2VuZXNpczogMSxcbiAgICBnZW5ldGljOiAxLFxuICAgIGdlbmV0aWNzOiAxLFxuICAgIGdlbmV2YTogMSxcbiAgICBnZW5pdXM6IDEsXG4gICAgZ2Vub21lOiAxLFxuICAgIGdlbnJlOiAxLFxuICAgIGdlbnJlczogMSxcbiAgICBnZW50bGU6IDEsXG4gICAgZ2VudGxlbWFuOiAxLFxuICAgIGdlbnRseTogMSxcbiAgICBnZW51aW5lOiAxLFxuICAgIGdlbzogMSxcbiAgICBnZW9ncmFwaGljOiAxLFxuICAgIGdlb2dyYXBoaWNhbDogMSxcbiAgICBnZW9ncmFwaHk6IDEsXG4gICAgZ2VvbG9naWNhbDogMSxcbiAgICBnZW9sb2d5OiAxLFxuICAgIGdlb21ldHJ5OiAxLFxuICAgIGdlb3JnZTogMSxcbiAgICBnZW9yZ2lhOiAxLFxuICAgIGdlcmFsZDogMSxcbiAgICBnZXJtYW46IDEsXG4gICAgZ2VybWFueTogMSxcbiAgICBnZXQ6IDEsXG4gICAgZ2V0czogMSxcbiAgICBnZXR0aW5nOiAxLFxuICAgIGdnOiAxLFxuICAgIGdoYW5hOiAxLFxuICAgIGdob3N0OiAxLFxuICAgIGdoejogMSxcbiAgICBnaTogMSxcbiAgICBnaWFudDogMSxcbiAgICBnaWFudHM6IDEsXG4gICAgZ2licmFsdGFyOiAxLFxuICAgIGdpYnNvbjogMSxcbiAgICBnaWY6IDEsXG4gICAgZ2lmdDogMSxcbiAgICBnaWZ0czogMSxcbiAgICBnaWc6IDEsXG4gICAgZ2lsYmVydDogMSxcbiAgICBnaXJsOiAxLFxuICAgIGdpcmxmcmllbmQ6IDEsXG4gICAgZ2lybHM6IDEsXG4gICAgZ2lzOiAxLFxuICAgIGdpdmU6IDEsXG4gICAgZ2l2ZW46IDEsXG4gICAgZ2l2ZXM6IDEsXG4gICAgZ2l2aW5nOiAxLFxuICAgIGdsOiAxLFxuICAgIGdsYWQ6IDEsXG4gICAgZ2xhbmNlOiAxLFxuICAgIGdsYXNnb3c6IDEsXG4gICAgZ2xhc3M6IDEsXG4gICAgZ2xhc3NlczogMSxcbiAgICBnbGVuOiAxLFxuICAgIGdsZW5uOiAxLFxuICAgIGdsb2JhbDogMSxcbiAgICBnbG9iZTogMSxcbiAgICBnbG9yeTogMSxcbiAgICBnbG9zc2FyeTogMSxcbiAgICBnbG92ZXM6IDEsXG4gICAgZ2xvdzogMSxcbiAgICBnbHVjb3NlOiAxLFxuICAgIGdtOiAxLFxuICAgIGdtYmg6IDEsXG4gICAgZ21jOiAxLFxuICAgIGdtdDogMSxcbiAgICBnbm9tZTogMSxcbiAgICBnbnU6IDEsXG4gICAgZ286IDEsXG4gICAgZ29hbDogMSxcbiAgICBnb2FsczogMSxcbiAgICBnb2F0OiAxLFxuICAgIGdvZDogMSxcbiAgICBnb2RzOiAxLFxuICAgIGdvZXM6IDEsXG4gICAgZ29pbmc6IDEsXG4gICAgZ29sZDogMSxcbiAgICBnb2xkZW46IDEsXG4gICAgZ29sZjogMSxcbiAgICBnb25lOiAxLFxuICAgIGdvbm5hOiAxLFxuICAgIGdvb2Q6IDEsXG4gICAgZ29vZHM6IDEsXG4gICAgZ29vZ2xlOiAxLFxuICAgIGdvcmRvbjogMSxcbiAgICBnb3JlOiAxLFxuICAgIGdvcmdlb3VzOiAxLFxuICAgIGdvc3BlbDogMSxcbiAgICBnb3NzaXA6IDEsXG4gICAgZ290OiAxLFxuICAgIGdvdGhpYzogMSxcbiAgICBnb3RvOiAxLFxuICAgIGdvdHRhOiAxLFxuICAgIGdvdHRlbjogMSxcbiAgICBnb3VybWV0OiAxLFxuICAgIGdvdmVybmFuY2U6IDEsXG4gICAgZ292ZXJuaW5nOiAxLFxuICAgIGdvdmVybm1lbnQ6IDEsXG4gICAgZ292ZXJubWVudGFsOiAxLFxuICAgIGdvdmVybm1lbnRzOiAxLFxuICAgIGdvdmVybm9yOiAxLFxuICAgIGdwOiAxLFxuICAgIGdwbDogMSxcbiAgICBncHM6IDEsXG4gICAgZ3I6IDEsXG4gICAgZ3JhYjogMSxcbiAgICBncmFjZTogMSxcbiAgICBncmFkOiAxLFxuICAgIGdyYWRlOiAxLFxuICAgIGdyYWRlczogMSxcbiAgICBncmFkdWFsbHk6IDEsXG4gICAgZ3JhZHVhdGU6IDEsXG4gICAgZ3JhZHVhdGVkOiAxLFxuICAgIGdyYWR1YXRlczogMSxcbiAgICBncmFkdWF0aW9uOiAxLFxuICAgIGdyYWhhbTogMSxcbiAgICBncmFpbjogMSxcbiAgICBncmFtbWFyOiAxLFxuICAgIGdyYW1zOiAxLFxuICAgIGdyYW5kOiAxLFxuICAgIGdyYW5kZTogMSxcbiAgICBncmFubnk6IDEsXG4gICAgZ3JhbnQ6IDEsXG4gICAgZ3JhbnRlZDogMSxcbiAgICBncmFudHM6IDEsXG4gICAgZ3JhcGg6IDEsXG4gICAgZ3JhcGhpYzogMSxcbiAgICBncmFwaGljYWw6IDEsXG4gICAgZ3JhcGhpY3M6IDEsXG4gICAgZ3JhcGhzOiAxLFxuICAgIGdyYXM6IDEsXG4gICAgZ3Jhc3M6IDEsXG4gICAgZ3JhdGVmdWw6IDEsXG4gICAgZ3JhdGlzOiAxLFxuICAgIGdyYXR1aXQ6IDEsXG4gICAgZ3JhdmU6IDEsXG4gICAgZ3Jhdml0eTogMSxcbiAgICBncmF5OiAxLFxuICAgIGdyZWF0OiAxLFxuICAgIGdyZWF0ZXI6IDEsXG4gICAgZ3JlYXRlc3Q6IDEsXG4gICAgZ3JlYXRseTogMSxcbiAgICBncmVlY2U6IDEsXG4gICAgZ3JlZWs6IDEsXG4gICAgZ3JlZW46IDEsXG4gICAgZ3JlZW5lOiAxLFxuICAgIGdyZWVuaG91c2U6IDEsXG4gICAgZ3JlZW5zYm9ybzogMSxcbiAgICBncmVldGluZzogMSxcbiAgICBncmVldGluZ3M6IDEsXG4gICAgZ3JlZzogMSxcbiAgICBncmVnb3J5OiAxLFxuICAgIGdyZW5hZGE6IDEsXG4gICAgZ3JldzogMSxcbiAgICBncmV5OiAxLFxuICAgIGdyaWQ6IDEsXG4gICAgZ3JpZmZpbjogMSxcbiAgICBncmlsbDogMSxcbiAgICBncmlwOiAxLFxuICAgIGdyb2Nlcnk6IDEsXG4gICAgZ3Jvb3ZlOiAxLFxuICAgIGdyb3NzOiAxLFxuICAgIGdyb3VuZDogMSxcbiAgICBncm91bmRzOiAxLFxuICAgIGdyb3VuZHdhdGVyOiAxLFxuICAgIGdyb3VwOiAxLFxuICAgIGdyb3VwczogMSxcbiAgICBncm92ZTogMSxcbiAgICBncm93OiAxLFxuICAgIGdyb3dpbmc6IDEsXG4gICAgZ3Jvd246IDEsXG4gICAgZ3Jvd3M6IDEsXG4gICAgZ3Jvd3RoOiAxLFxuICAgIGdzOiAxLFxuICAgIGdzbTogMSxcbiAgICBnc3Q6IDEsXG4gICAgZ3Q6IDEsXG4gICAgZ3RrOiAxLFxuICAgIGd1YW06IDEsXG4gICAgZ3VhcmFudGVlOiAxLFxuICAgIGd1YXJhbnRlZWQ6IDEsXG4gICAgZ3VhcmFudGVlczogMSxcbiAgICBndWFyZDogMSxcbiAgICBndWFyZGlhbjogMSxcbiAgICBndWFyZHM6IDEsXG4gICAgZ3VhdGVtYWxhOiAxLFxuICAgIGd1ZXNzOiAxLFxuICAgIGd1ZXN0OiAxLFxuICAgIGd1ZXN0Ym9vazogMSxcbiAgICBndWVzdHM6IDEsXG4gICAgZ3VpOiAxLFxuICAgIGd1aWRhbmNlOiAxLFxuICAgIGd1aWRlOiAxLFxuICAgIGd1aWRlZDogMSxcbiAgICBndWlkZWxpbmVzOiAxLFxuICAgIGd1aWRlczogMSxcbiAgICBndWlsZDogMSxcbiAgICBndWlsdHk6IDEsXG4gICAgZ3VpbmVhOiAxLFxuICAgIGd1aXRhcjogMSxcbiAgICBndWl0YXJzOiAxLFxuICAgIGd1bGY6IDEsXG4gICAgZ3VuOiAxLFxuICAgIGd1bnM6IDEsXG4gICAgZ3VydTogMSxcbiAgICBndXk6IDEsXG4gICAgZ3V5YW5hOiAxLFxuICAgIGd1eXM6IDEsXG4gICAgZ3ltOiAxLFxuICAgIGd6aXA6IDEsXG4gICAgaDogMSxcbiAgICBoYTogMSxcbiAgICBoYWJpdGF0OiAxLFxuICAgIGhhYml0czogMSxcbiAgICBoYWNrOiAxLFxuICAgIGhhY2tlcjogMSxcbiAgICBoYWQ6IDEsXG4gICAgaGFpcjogMSxcbiAgICBoYWlyeTogMSxcbiAgICBoYWl0aTogMSxcbiAgICBoYWxmOiAxLFxuICAgIGhhbGlmYXg6IDEsXG4gICAgaGFsbDogMSxcbiAgICBoYWxsb3dlZW46IDEsXG4gICAgaGFsbzogMSxcbiAgICBoYW06IDEsXG4gICAgaGFtYnVyZzogMSxcbiAgICBoYW1pbHRvbjogMSxcbiAgICBoYW1tZXI6IDEsXG4gICAgaGFtcHNoaXJlOiAxLFxuICAgIGhhbXB0b246IDEsXG4gICAgaGFuZDogMSxcbiAgICBoYW5kYmFnczogMSxcbiAgICBoYW5kYm9vazogMSxcbiAgICBoYW5kZWQ6IDEsXG4gICAgaGFuZGhlbGQ6IDEsXG4gICAgaGFuZGhlbGRzOiAxLFxuICAgIGhhbmRqb2I6IDEsXG4gICAgaGFuZGpvYnM6IDEsXG4gICAgaGFuZGxlOiAxLFxuICAgIGhhbmRsZWQ6IDEsXG4gICAgaGFuZGxlczogMSxcbiAgICBoYW5kbGluZzogMSxcbiAgICBoYW5kbWFkZTogMSxcbiAgICBoYW5kczogMSxcbiAgICBoYW5keTogMSxcbiAgICBoYW5nOiAxLFxuICAgIGhhbmdpbmc6IDEsXG4gICAgaGFuczogMSxcbiAgICBoYW5zZW46IDEsXG4gICAgaGFwcGVuOiAxLFxuICAgIGhhcHBlbmVkOiAxLFxuICAgIGhhcHBlbmluZzogMSxcbiAgICBoYXBwZW5zOiAxLFxuICAgIGhhcHBpbmVzczogMSxcbiAgICBoYXBweTogMSxcbiAgICBoYXJhc3NtZW50OiAxLFxuICAgIGhhcmJvcjogMSxcbiAgICBoYXJib3VyOiAxLFxuICAgIGhhcmQ6IDEsXG4gICAgaGFyZGNvcmU6IDEsXG4gICAgaGFyZGNvdmVyOiAxLFxuICAgIGhhcmRlcjogMSxcbiAgICBoYXJkbHk6IDEsXG4gICAgaGFyZHdhcmU6IDEsXG4gICAgaGFyZHdvb2Q6IDEsXG4gICAgaGFybGV5OiAxLFxuICAgIGhhcm06IDEsXG4gICAgaGFybWZ1bDogMSxcbiAgICBoYXJtb255OiAxLFxuICAgIGhhcm9sZDogMSxcbiAgICBoYXJwZXI6IDEsXG4gICAgaGFycmlzOiAxLFxuICAgIGhhcnJpc29uOiAxLFxuICAgIGhhcnJ5OiAxLFxuICAgIGhhcnQ6IDEsXG4gICAgaGFydGZvcmQ6IDEsXG4gICAgaGFydmFyZDogMSxcbiAgICBoYXJ2ZXN0OiAxLFxuICAgIGhhcnZleTogMSxcbiAgICBoYXM6IDEsXG4gICAgaGFzaDogMSxcbiAgICBoYXQ6IDEsXG4gICAgaGF0ZTogMSxcbiAgICBoYXRzOiAxLFxuICAgIGhhdmU6IDEsXG4gICAgaGF2ZW46IDEsXG4gICAgaGF2aW5nOiAxLFxuICAgIGhhd2FpaTogMSxcbiAgICBoYXdhaWlhbjogMSxcbiAgICBoYXdrOiAxLFxuICAgIGhheTogMSxcbiAgICBoYXllczogMSxcbiAgICBoYXphcmQ6IDEsXG4gICAgaGF6YXJkb3VzOiAxLFxuICAgIGhhemFyZHM6IDEsXG4gICAgaGI6IDEsXG4gICAgaGM6IDEsXG4gICAgaGQ6IDEsXG4gICAgaGR0djogMSxcbiAgICBoZTogMSxcbiAgICBoZWFkOiAxLFxuICAgIGhlYWRlZDogMSxcbiAgICBoZWFkZXI6IDEsXG4gICAgaGVhZGVyczogMSxcbiAgICBoZWFkaW5nOiAxLFxuICAgIGhlYWRsaW5lOiAxLFxuICAgIGhlYWRsaW5lczogMSxcbiAgICBoZWFkcGhvbmVzOiAxLFxuICAgIGhlYWRxdWFydGVyczogMSxcbiAgICBoZWFkczogMSxcbiAgICBoZWFkc2V0OiAxLFxuICAgIGhlYWxpbmc6IDEsXG4gICAgaGVhbHRoOiAxLFxuICAgIGhlYWx0aGNhcmU6IDEsXG4gICAgaGVhbHRoeTogMSxcbiAgICBoZWFyOiAxLFxuICAgIGhlYXJkOiAxLFxuICAgIGhlYXJpbmc6IDEsXG4gICAgaGVhcmluZ3M6IDEsXG4gICAgaGVhcnQ6IDEsXG4gICAgaGVhcnRzOiAxLFxuICAgIGhlYXQ6IDEsXG4gICAgaGVhdGVkOiAxLFxuICAgIGhlYXRlcjogMSxcbiAgICBoZWF0aDogMSxcbiAgICBoZWF0aGVyOiAxLFxuICAgIGhlYXRpbmc6IDEsXG4gICAgaGVhdmVuOiAxLFxuICAgIGhlYXZpbHk6IDEsXG4gICAgaGVhdnk6IDEsXG4gICAgaGVicmV3OiAxLFxuICAgIGhlZWw6IDEsXG4gICAgaGVpZ2h0OiAxLFxuICAgIGhlaWdodHM6IDEsXG4gICAgaGVsZDogMSxcbiAgICBoZWxlbjogMSxcbiAgICBoZWxlbmE6IDEsXG4gICAgaGVsaWNvcHRlcjogMSxcbiAgICBoZWxsOiAxLFxuICAgIGhlbGxvOiAxLFxuICAgIGhlbG1ldDogMSxcbiAgICBoZWxwOiAxLFxuICAgIGhlbHBlZDogMSxcbiAgICBoZWxwZnVsOiAxLFxuICAgIGhlbHBpbmc6IDEsXG4gICAgaGVscHM6IDEsXG4gICAgaGVuY2U6IDEsXG4gICAgaGVuZGVyc29uOiAxLFxuICAgIGhlbnJ5OiAxLFxuICAgIGhlbnRhaTogMSxcbiAgICBoZXBhdGl0aXM6IDEsXG4gICAgaGVyOiAxLFxuICAgIGhlcmFsZDogMSxcbiAgICBoZXJiOiAxLFxuICAgIGhlcmJhbDogMSxcbiAgICBoZXJiczogMSxcbiAgICBoZXJlOiAxLFxuICAgIGhlcmVieTogMSxcbiAgICBoZXJlaW46IDEsXG4gICAgaGVyaXRhZ2U6IDEsXG4gICAgaGVybzogMSxcbiAgICBoZXJvZXM6IDEsXG4gICAgaGVyc2VsZjogMSxcbiAgICBoZXdsZXR0OiAxLFxuICAgIGhleTogMSxcbiAgICBoaDogMSxcbiAgICBoaTogMSxcbiAgICBoaWRkZW46IDEsXG4gICAgaGlkZTogMSxcbiAgICBoaWVyYXJjaHk6IDEsXG4gICAgaGlnaDogMSxcbiAgICBoaWdoZXI6IDEsXG4gICAgaGlnaGVzdDogMSxcbiAgICBoaWdobGFuZDogMSxcbiAgICBoaWdobGlnaHQ6IDEsXG4gICAgaGlnaGxpZ2h0ZWQ6IDEsXG4gICAgaGlnaGxpZ2h0czogMSxcbiAgICBoaWdobHk6IDEsXG4gICAgaGlnaHM6IDEsXG4gICAgaGlnaHdheTogMSxcbiAgICBoaWdod2F5czogMSxcbiAgICBoaWtpbmc6IDEsXG4gICAgaGlsbDogMSxcbiAgICBoaWxsczogMSxcbiAgICBoaWx0b246IDEsXG4gICAgaGltOiAxLFxuICAgIGhpbXNlbGY6IDEsXG4gICAgaGluZHU6IDEsXG4gICAgaGludDogMSxcbiAgICBoaW50czogMSxcbiAgICBoaXA6IDEsXG4gICAgaGlyZTogMSxcbiAgICBoaXJlZDogMSxcbiAgICBoaXJpbmc6IDEsXG4gICAgaGlzOiAxLFxuICAgIGhpc3BhbmljOiAxLFxuICAgIGhpc3Q6IDEsXG4gICAgaGlzdG9yaWM6IDEsXG4gICAgaGlzdG9yaWNhbDogMSxcbiAgICBoaXN0b3J5OiAxLFxuICAgIGhpdDogMSxcbiAgICBoaXRhY2hpOiAxLFxuICAgIGhpdHM6IDEsXG4gICAgaGl0dGluZzogMSxcbiAgICBoaXY6IDEsXG4gICAgaGs6IDEsXG4gICAgaGw6IDEsXG4gICAgaG86IDEsXG4gICAgaG9iYmllczogMSxcbiAgICBob2JieTogMSxcbiAgICBob2NrZXk6IDEsXG4gICAgaG9sZDogMSxcbiAgICBob2xkZW06IDEsXG4gICAgaG9sZGVyOiAxLFxuICAgIGhvbGRlcnM6IDEsXG4gICAgaG9sZGluZzogMSxcbiAgICBob2xkaW5nczogMSxcbiAgICBob2xkczogMSxcbiAgICBob2xlOiAxLFxuICAgIGhvbGVzOiAxLFxuICAgIGhvbGlkYXk6IDEsXG4gICAgaG9saWRheXM6IDEsXG4gICAgaG9sbGFuZDogMSxcbiAgICBob2xsb3c6IDEsXG4gICAgaG9sbHk6IDEsXG4gICAgaG9sbHl3b29kOiAxLFxuICAgIGhvbG1lczogMSxcbiAgICBob2xvY2F1c3Q6IDEsXG4gICAgaG9seTogMSxcbiAgICBob21lOiAxLFxuICAgIGhvbWVsYW5kOiAxLFxuICAgIGhvbWVsZXNzOiAxLFxuICAgIGhvbWVwYWdlOiAxLFxuICAgIGhvbWVzOiAxLFxuICAgIGhvbWV0b3duOiAxLFxuICAgIGhvbWV3b3JrOiAxLFxuICAgIGhvbjogMSxcbiAgICBob25kYTogMSxcbiAgICBob25kdXJhczogMSxcbiAgICBob25lc3Q6IDEsXG4gICAgaG9uZXk6IDEsXG4gICAgaG9uZzogMSxcbiAgICBob25vbHVsdTogMSxcbiAgICBob25vcjogMSxcbiAgICBob25vcnM6IDEsXG4gICAgaG9vZDogMSxcbiAgICBob29rOiAxLFxuICAgIGhvcDogMSxcbiAgICBob3BlOiAxLFxuICAgIGhvcGVkOiAxLFxuICAgIGhvcGVmdWxseTogMSxcbiAgICBob3BlczogMSxcbiAgICBob3Bpbmc6IDEsXG4gICAgaG9wa2luczogMSxcbiAgICBob3Jpem9uOiAxLFxuICAgIGhvcml6b250YWw6IDEsXG4gICAgaG9ybW9uZTogMSxcbiAgICBob3JuOiAxLFxuICAgIGhvcm55OiAxLFxuICAgIGhvcnJpYmxlOiAxLFxuICAgIGhvcnJvcjogMSxcbiAgICBob3JzZTogMSxcbiAgICBob3JzZXM6IDEsXG4gICAgaG9zZTogMSxcbiAgICBob3NwaXRhbDogMSxcbiAgICBob3NwaXRhbGl0eTogMSxcbiAgICBob3NwaXRhbHM6IDEsXG4gICAgaG9zdDogMSxcbiAgICBob3N0ZWQ6IDEsXG4gICAgaG9zdGVsOiAxLFxuICAgIGhvc3RlbHM6IDEsXG4gICAgaG9zdGluZzogMSxcbiAgICBob3N0czogMSxcbiAgICBob3Q6IDEsXG4gICAgaG90ZWw6IDEsXG4gICAgaG90ZWxzOiAxLFxuICAgIGhvdG1haWw6IDEsXG4gICAgaG90dGVzdDogMSxcbiAgICBob3VyOiAxLFxuICAgIGhvdXJseTogMSxcbiAgICBob3VyczogMSxcbiAgICBob3VzZTogMSxcbiAgICBob3VzZWhvbGQ6IDEsXG4gICAgaG91c2Vob2xkczogMSxcbiAgICBob3VzZXM6IDEsXG4gICAgaG91c2V3YXJlczogMSxcbiAgICBob3VzZXdpdmVzOiAxLFxuICAgIGhvdXNpbmc6IDEsXG4gICAgaG91c3RvbjogMSxcbiAgICBob3c6IDEsXG4gICAgaG93YXJkOiAxLFxuICAgIGhvd2V2ZXI6IDEsXG4gICAgaG93dG86IDEsXG4gICAgaHA6IDEsXG4gICAgaHE6IDEsXG4gICAgaHI6IDEsXG4gICAgaHJlZjogMSxcbiAgICBocnM6IDEsXG4gICAgaHM6IDEsXG4gICAgaHQ6IDEsXG4gICAgaHRtbDogMSxcbiAgICBodHRwOiAxLFxuICAgIGh1OiAxLFxuICAgIGh1YjogMSxcbiAgICBodWRzb246IDEsXG4gICAgaHVnZTogMSxcbiAgICBodWdoOiAxLFxuICAgIGh1Z2hlczogMSxcbiAgICBodWdvOiAxLFxuICAgIGh1bGw6IDEsXG4gICAgaHVtYW46IDEsXG4gICAgaHVtYW5pdGFyaWFuOiAxLFxuICAgIGh1bWFuaXRpZXM6IDEsXG4gICAgaHVtYW5pdHk6IDEsXG4gICAgaHVtYW5zOiAxLFxuICAgIGh1bWlkaXR5OiAxLFxuICAgIGh1bW9yOiAxLFxuICAgIGh1bmRyZWQ6IDEsXG4gICAgaHVuZHJlZHM6IDEsXG4gICAgaHVuZzogMSxcbiAgICBodW5nYXJpYW46IDEsXG4gICAgaHVuZ2FyeTogMSxcbiAgICBodW5nZXI6IDEsXG4gICAgaHVuZ3J5OiAxLFxuICAgIGh1bnQ6IDEsXG4gICAgaHVudGVyOiAxLFxuICAgIGh1bnRpbmc6IDEsXG4gICAgaHVudGluZ3RvbjogMSxcbiAgICBodXJyaWNhbmU6IDEsXG4gICAgaHVydDogMSxcbiAgICBodXNiYW5kOiAxLFxuICAgIGh3eTogMSxcbiAgICBoeWJyaWQ6IDEsXG4gICAgaHlkcmF1bGljOiAxLFxuICAgIGh5ZHJvY29kb25lOiAxLFxuICAgIGh5ZHJvZ2VuOiAxLFxuICAgIGh5Z2llbmU6IDEsXG4gICAgaHlwb3RoZXNpczogMSxcbiAgICBoeXBvdGhldGljYWw6IDEsXG4gICAgaHl1bmRhaTogMSxcbiAgICBoejogMSxcblxufTtcbiIsIi8vIGh0dHBzOi8vZW5nbGlzaGdyYW1tYXJoZXJlLmNvbS92b2NhYnVsYXJ5LzEwMDAwLW1vc3QtY29tbW9uLXdvcmRzLWluLWVuZ2xpc2gtcGFydC01L1xuZXhwb3J0IGNvbnN0IFRoZU1vc3RDb21tb24xMDAwMCA9IHtcbiAgICBpOiAxLFxuICAgIGlhOiAxLFxuICAgIGlhbjogMSxcbiAgICBpYm06IDEsXG4gICAgaWM6IDEsXG4gICAgaWNlOiAxLFxuICAgIGljZWxhbmQ6IDEsXG4gICAgaWNvbjogMSxcbiAgICBpY29uczogMSxcbiAgICBpY3E6IDEsXG4gICAgaWN0OiAxLFxuICAgIGlkOiAxLFxuICAgIGlkYWhvOiAxLFxuICAgIGlkZTogMSxcbiAgICBpZGVhOiAxLFxuICAgIGlkZWFsOiAxLFxuICAgIGlkZWFzOiAxLFxuICAgIGlkZW50aWNhbDogMSxcbiAgICBpZGVudGlmaWNhdGlvbjogMSxcbiAgICBpZGVudGlmaWVkOiAxLFxuICAgIGlkZW50aWZpZXI6IDEsXG4gICAgaWRlbnRpZmllczogMSxcbiAgICBpZGVudGlmeTogMSxcbiAgICBpZGVudGlmeWluZzogMSxcbiAgICBpZGVudGl0eTogMSxcbiAgICBpZGxlOiAxLFxuICAgIGlkb2w6IDEsXG4gICAgaWRzOiAxLFxuICAgIGllOiAxLFxuICAgIGllZWU6IDEsXG4gICAgaWY6IDEsXG4gICAgaWdub3JlOiAxLFxuICAgIGlnbm9yZWQ6IDEsXG4gICAgaWk6IDEsXG4gICAgaWlpOiAxLFxuICAgIGlsOiAxLFxuICAgIGlsbDogMSxcbiAgICBpbGxlZ2FsOiAxLFxuICAgIGlsbGlub2lzOiAxLFxuICAgIGlsbG5lc3M6IDEsXG4gICAgaWxsdXN0cmF0ZWQ6IDEsXG4gICAgaWxsdXN0cmF0aW9uOiAxLFxuICAgIGlsbHVzdHJhdGlvbnM6IDEsXG4gICAgaW06IDEsXG4gICAgaW1hZ2U6IDEsXG5cblxuXG5cblxuXG5cbiAgICBpbWFnZXM6IDEsXG4gICAgaW1hZ2luYXRpb246IDEsXG4gICAgaW1hZ2luZTogMSxcbiAgICBpbWFnaW5nOiAxLFxuICAgIGltZzogMSxcbiAgICBpbW1lZGlhdGU6IDEsXG4gICAgaW1tZWRpYXRlbHk6IDEsXG4gICAgaW1taWdyYW50czogMSxcbiAgICBpbW1pZ3JhdGlvbjogMSxcbiAgICBpbW11bmU6IDEsXG4gICAgaW1tdW5vbG9neTogMSxcbiAgICBpbXBhY3Q6IDEsXG4gICAgaW1wYWN0czogMSxcbiAgICBpbXBhaXJlZDogMSxcbiAgICBpbXBlcmlhbDogMSxcbiAgICBpbXBsZW1lbnQ6IDEsXG4gICAgaW1wbGVtZW50YXRpb246IDEsXG4gICAgaW1wbGVtZW50ZWQ6IDEsXG4gICAgaW1wbGVtZW50aW5nOiAxLFxuICAgIGltcGxpY2F0aW9uczogMSxcbiAgICBpbXBsaWVkOiAxLFxuICAgIGltcGxpZXM6IDEsXG4gICAgaW1wb3J0OiAxLFxuICAgIGltcG9ydGFuY2U6IDEsXG4gICAgaW1wb3J0YW50OiAxLFxuICAgIGltcG9ydGFudGx5OiAxLFxuICAgIGltcG9ydGVkOiAxLFxuICAgIGltcG9ydHM6IDEsXG4gICAgaW1wb3NlOiAxLFxuICAgIGltcG9zZWQ6IDEsXG4gICAgaW1wb3NzaWJsZTogMSxcbiAgICBpbXByZXNzZWQ6IDEsXG4gICAgaW1wcmVzc2lvbjogMSxcbiAgICBpbXByZXNzaXZlOiAxLFxuICAgIGltcHJvdmU6IDEsXG4gICAgaW1wcm92ZWQ6IDEsXG4gICAgaW1wcm92ZW1lbnQ6IDEsXG4gICAgaW1wcm92ZW1lbnRzOiAxLFxuICAgIGltcHJvdmluZzogMSxcbiAgICBpbjogMSxcbiAgICBpbmFwcHJvcHJpYXRlOiAxLFxuICAgIGluYm94OiAxLFxuICAgIGluYzogMSxcbiAgICBpbmNlbnRpdmU6IDEsXG4gICAgaW5jZW50aXZlczogMSxcbiAgICBpbmNlc3Q6IDEsXG4gICAgaW5jaDogMSxcbiAgICBpbmNoZXM6IDEsXG4gICAgaW5jaWRlbmNlOiAxLFxuICAgIGluY2lkZW50OiAxLFxuICAgIGluY2lkZW50czogMSxcbiAgICBpbmNsOiAxLFxuICAgIGluY2x1ZGU6IDEsXG4gICAgaW5jbHVkZWQ6IDEsXG4gICAgaW5jbHVkZXM6IDEsXG4gICAgaW5jbHVkaW5nOiAxLFxuICAgIGluY2x1c2lvbjogMSxcbiAgICBpbmNsdXNpdmU6IDEsXG4gICAgaW5jb21lOiAxLFxuICAgIGluY29taW5nOiAxLFxuICAgIGluY29tcGxldGU6IDEsXG4gICAgaW5jb3Jwb3JhdGU6IDEsXG4gICAgaW5jb3Jwb3JhdGVkOiAxLFxuICAgIGluY29ycmVjdDogMSxcbiAgICBpbmNyZWFzZTogMSxcbiAgICBpbmNyZWFzZWQ6IDEsXG4gICAgaW5jcmVhc2VzOiAxLFxuICAgIGluY3JlYXNpbmc6IDEsXG4gICAgaW5jcmVhc2luZ2x5OiAxLFxuICAgIGluY3JlZGlibGU6IDEsXG4gICAgaW5jdXJyZWQ6IDEsXG4gICAgaW5kOiAxLFxuICAgIGluZGVlZDogMSxcbiAgICBpbmRlcGVuZGVuY2U6IDEsXG4gICAgaW5kZXBlbmRlbnQ6IDEsXG4gICAgaW5kZXBlbmRlbnRseTogMSxcbiAgICBpbmRleDogMSxcbiAgICBpbmRleGVkOiAxLFxuICAgIGluZGV4ZXM6IDEsXG4gICAgaW5kaWE6IDEsXG4gICAgaW5kaWFuOiAxLFxuICAgIGluZGlhbmE6IDEsXG4gICAgaW5kaWFuYXBvbGlzOiAxLFxuICAgIGluZGlhbnM6IDEsXG4gICAgaW5kaWNhdGU6IDEsXG4gICAgaW5kaWNhdGVkOiAxLFxuICAgIGluZGljYXRlczogMSxcbiAgICBpbmRpY2F0aW5nOiAxLFxuICAgIGluZGljYXRpb246IDEsXG4gICAgaW5kaWNhdG9yOiAxLFxuICAgIGluZGljYXRvcnM6IDEsXG4gICAgaW5kaWNlczogMSxcbiAgICBpbmRpZTogMSxcbiAgICBpbmRpZ2Vub3VzOiAxLFxuICAgIGluZGlyZWN0OiAxLFxuXG5cblxuXG5cblxuXG4gICAgaW5kaXZpZHVhbDogMSxcbiAgICBpbmRpdmlkdWFsbHk6IDEsXG4gICAgaW5kaXZpZHVhbHM6IDEsXG4gICAgaW5kb25lc2lhOiAxLFxuICAgIGluZG9uZXNpYW46IDEsXG4gICAgaW5kb29yOiAxLFxuICAgIGluZHVjZWQ6IDEsXG4gICAgaW5kdWN0aW9uOiAxLFxuICAgIGluZHVzdHJpYWw6IDEsXG4gICAgaW5kdXN0cmllczogMSxcbiAgICBpbmR1c3RyeTogMSxcbiAgICBpbmV4cGVuc2l2ZTogMSxcbiAgICBpbmY6IDEsXG4gICAgaW5mYW50OiAxLFxuICAgIGluZmFudHM6IDEsXG4gICAgaW5mZWN0ZWQ6IDEsXG4gICAgaW5mZWN0aW9uOiAxLFxuICAgIGluZmVjdGlvbnM6IDEsXG4gICAgaW5mZWN0aW91czogMSxcbiAgICBpbmZpbml0ZTogMSxcbiAgICBpbmZsYXRpb246IDEsXG4gICAgaW5mbHVlbmNlOiAxLFxuICAgIGluZmx1ZW5jZWQ6IDEsXG4gICAgaW5mbHVlbmNlczogMSxcbiAgICBpbmZvOiAxLFxuICAgIGluZm9ybTogMSxcbiAgICBpbmZvcm1hbDogMSxcbiAgICBpbmZvcm1hdGlvbjogMSxcbiAgICBpbmZvcm1hdGlvbmFsOiAxLFxuICAgIGluZm9ybWF0aXZlOiAxLFxuICAgIGluZm9ybWVkOiAxLFxuICAgIGluZnJhcmVkOiAxLFxuICAgIGluZnJhc3RydWN0dXJlOiAxLFxuICAgIGluZnJpbmdlbWVudDogMSxcbiAgICBpbmc6IDEsXG4gICAgaW5ncmVkaWVudHM6IDEsXG4gICAgaW5oZXJpdGVkOiAxLFxuICAgIGluaXRpYWw6IDEsXG4gICAgaW5pdGlhbGx5OiAxLFxuICAgIGluaXRpYXRlZDogMSxcbiAgICBpbml0aWF0aXZlOiAxLFxuICAgIGluaXRpYXRpdmVzOiAxLFxuICAgIGluamVjdGlvbjogMSxcbiAgICBpbmp1cmVkOiAxLFxuICAgIGluanVyaWVzOiAxLFxuICAgIGluanVyeTogMSxcbiAgICBpbms6IDEsXG4gICAgaW5ramV0OiAxLFxuICAgIGlubGluZTogMSxcbiAgICBpbm46IDEsXG4gICAgaW5uZXI6IDEsXG4gICAgaW5ub2NlbnQ6IDEsXG4gICAgaW5ub3ZhdGlvbjogMSxcbiAgICBpbm5vdmF0aW9uczogMSxcbiAgICBpbm5vdmF0aXZlOiAxLFxuICAgIGlubnM6IDEsXG4gICAgaW5wdXQ6IDEsXG4gICAgaW5wdXRzOiAxLFxuICAgIGlucXVpcmU6IDEsXG4gICAgaW5xdWlyaWVzOiAxLFxuICAgIGlucXVpcnk6IDEsXG4gICAgaW5zOiAxLFxuICAgIGluc2VjdHM6IDEsXG4gICAgaW5zZXJ0OiAxLFxuICAgIGluc2VydGVkOiAxLFxuICAgIGluc2VydGlvbjogMSxcbiAgICBpbnNpZGU6IDEsXG4gICAgaW5zaWRlcjogMSxcbiAgICBpbnNpZ2h0OiAxLFxuICAgIGluc2lnaHRzOiAxLFxuICAgIGluc3BlY3Rpb246IDEsXG4gICAgaW5zcGVjdGlvbnM6IDEsXG4gICAgaW5zcGVjdG9yOiAxLFxuICAgIGluc3BpcmF0aW9uOiAxLFxuICAgIGluc3BpcmVkOiAxLFxuICAgIGluc3RhbGw6IDEsXG4gICAgaW5zdGFsbGF0aW9uOiAxLFxuICAgIGluc3RhbGxhdGlvbnM6IDEsXG4gICAgaW5zdGFsbGVkOiAxLFxuICAgIGluc3RhbGxpbmc6IDEsXG4gICAgaW5zdGFuY2U6IDEsXG4gICAgaW5zdGFuY2VzOiAxLFxuICAgIGluc3RhbnQ6IDEsXG4gICAgaW5zdGFudGx5OiAxLFxuICAgIGluc3RlYWQ6IDEsXG4gICAgaW5zdGl0dXRlOiAxLFxuICAgIGluc3RpdHV0ZXM6IDEsXG4gICAgaW5zdGl0dXRpb246IDEsXG4gICAgaW5zdGl0dXRpb25hbDogMSxcbiAgICBpbnN0aXR1dGlvbnM6IDEsXG4gICAgaW5zdHJ1Y3Rpb246IDEsXG4gICAgaW5zdHJ1Y3Rpb25hbDogMSxcbiAgICBpbnN0cnVjdGlvbnM6IDEsXG4gICAgaW5zdHJ1Y3RvcjogMSxcbiAgICBpbnN0cnVjdG9yczogMSxcbiAgICBpbnN0cnVtZW50OiAxLFxuICAgIGluc3RydW1lbnRhbDogMSxcbiAgICBpbnN0cnVtZW50YXRpb246IDEsXG4gICAgaW5zdHJ1bWVudHM6IDEsXG4gICAgaW5zdWxhdGlvbjogMSxcbiAgICBpbnN1bGluOiAxLFxuICAgIGluc3VyYW5jZTogMSxcbiAgICBpbnN1cmVkOiAxLFxuICAgIGludDogMSxcbiAgICBpbnRha2U6IDEsXG4gICAgaW50ZWdlcjogMSxcbiAgICBpbnRlZ3JhbDogMSxcbiAgICBpbnRlZ3JhdGU6IDEsXG4gICAgaW50ZWdyYXRlZDogMSxcbiAgICBpbnRlZ3JhdGluZzogMSxcbiAgICBpbnRlZ3JhdGlvbjogMSxcbiAgICBpbnRlZ3JpdHk6IDEsXG4gICAgaW50ZWw6IDEsXG4gICAgaW50ZWxsZWN0dWFsOiAxLFxuICAgIGludGVsbGlnZW5jZTogMSxcbiAgICBpbnRlbGxpZ2VudDogMSxcbiAgICBpbnRlbmQ6IDEsXG4gICAgaW50ZW5kZWQ6IDEsXG4gICAgaW50ZW5zZTogMSxcbiAgICBpbnRlbnNpdHk6IDEsXG4gICAgaW50ZW5zaXZlOiAxLFxuICAgIGludGVudDogMSxcbiAgICBpbnRlbnRpb246IDEsXG4gICAgaW50ZXI6IDEsXG4gICAgaW50ZXJhY3Q6IDEsXG4gICAgaW50ZXJhY3Rpb246IDEsXG4gICAgaW50ZXJhY3Rpb25zOiAxLFxuICAgIGludGVyYWN0aXZlOiAxLFxuICAgIGludGVyZXN0OiAxLFxuICAgIGludGVyZXN0ZWQ6IDEsXG4gICAgaW50ZXJlc3Rpbmc6IDEsXG4gICAgaW50ZXJlc3RzOiAxLFxuICAgIGludGVyZmFjZTogMSxcbiAgICBpbnRlcmZhY2VzOiAxLFxuICAgIGludGVyZmVyZW5jZTogMSxcbiAgICBpbnRlcmltOiAxLFxuICAgIGludGVyaW9yOiAxLFxuICAgIGludGVybWVkaWF0ZTogMSxcbiAgICBpbnRlcm5hbDogMSxcbiAgICBpbnRlcm5hdGlvbmFsOiAxLFxuICAgIGludGVybmF0aW9uYWxseTogMSxcbiAgICBpbnRlcm5ldDogMSxcbiAgICBpbnRlcm5zaGlwOiAxLFxuICAgIGludGVycHJldGF0aW9uOiAxLFxuICAgIGludGVycHJldGVkOiAxLFxuICAgIGludGVycmFjaWFsOiAxLFxuICAgIGludGVyc2VjdGlvbjogMSxcbiAgICBpbnRlcnN0YXRlOiAxLFxuICAgIGludGVydmFsOiAxLFxuICAgIGludGVydmFsczogMSxcbiAgICBpbnRlcnZlbnRpb246IDEsXG4gICAgaW50ZXJ2ZW50aW9uczogMSxcbiAgICBpbnRlcnZpZXc6IDEsXG4gICAgaW50ZXJ2aWV3czogMSxcbiAgICBpbnRpbWF0ZTogMSxcblxuXG5cblxuXG5cblxuICAgIGludGw6IDEsXG4gICAgaW50bzogMSxcbiAgICBpbnRyYW5ldDogMSxcbiAgICBpbnRybzogMSxcbiAgICBpbnRyb2R1Y2U6IDEsXG4gICAgaW50cm9kdWNlZDogMSxcbiAgICBpbnRyb2R1Y2VzOiAxLFxuICAgIGludHJvZHVjaW5nOiAxLFxuICAgIGludHJvZHVjdGlvbjogMSxcbiAgICBpbnRyb2R1Y3Rvcnk6IDEsXG4gICAgaW52YWxpZDogMSxcbiAgICBpbnZhc2lvbjogMSxcbiAgICBpbnZlbnRpb246IDEsXG4gICAgaW52ZW50b3J5OiAxLFxuICAgIGludmVzdDogMSxcbiAgICBpbnZlc3RpZ2F0ZTogMSxcbiAgICBpbnZlc3RpZ2F0ZWQ6IDEsXG4gICAgaW52ZXN0aWdhdGlvbjogMSxcbiAgICBpbnZlc3RpZ2F0aW9uczogMSxcbiAgICBpbnZlc3RpZ2F0b3I6IDEsXG4gICAgaW52ZXN0aWdhdG9yczogMSxcbiAgICBpbnZlc3Rpbmc6IDEsXG4gICAgaW52ZXN0bWVudDogMSxcbiAgICBpbnZlc3RtZW50czogMSxcbiAgICBpbnZlc3RvcjogMSxcbiAgICBpbnZlc3RvcnM6IDEsXG4gICAgaW52aXNpYmxlOiAxLFxuICAgIGludmlzaW9uOiAxLFxuICAgIGludml0YXRpb246IDEsXG4gICAgaW52aXRhdGlvbnM6IDEsXG4gICAgaW52aXRlOiAxLFxuICAgIGludml0ZWQ6IDEsXG4gICAgaW52b2ljZTogMSxcbiAgICBpbnZvbHZlOiAxLFxuICAgIGludm9sdmVkOiAxLFxuICAgIGludm9sdmVtZW50OiAxLFxuICAgIGludm9sdmVzOiAxLFxuICAgIGludm9sdmluZzogMSxcbiAgICBpbzogMSxcbiAgICBpb246IDEsXG4gICAgaW93YTogMSxcbiAgICBpcDogMSxcbiAgICBpcGFxOiAxLFxuICAgIGlwb2Q6IDEsXG4gICAgaXBzOiAxLFxuICAgIGlyOiAxLFxuICAgIGlyYTogMSxcbiAgICBpcmFuOiAxLFxuICAgIGlyYXE6IDEsXG4gICAgaXJhcWk6IDEsXG4gICAgaXJjOiAxLFxuICAgIGlyZWxhbmQ6IDEsXG4gICAgaXJpc2g6IDEsXG4gICAgaXJvbjogMSxcbiAgICBpcnJpZ2F0aW9uOiAxLFxuICAgIGlyczogMSxcbiAgICBpczogMSxcbiAgICBpc2E6IDEsXG4gICAgaXNhYWM6IDEsXG4gICAgaXNibjogMSxcbiAgICBpc2xhbTogMSxcbiAgICBpc2xhbWljOiAxLFxuICAgIGlzbGFuZDogMSxcbiAgICBpc2xhbmRzOiAxLFxuICAgIGlzbGU6IDEsXG4gICAgaXNvOiAxLFxuICAgIGlzb2xhdGVkOiAxLFxuICAgIGlzb2xhdGlvbjogMSxcbiAgICBpc3A6IDEsXG4gICAgaXNyYWVsOiAxLFxuICAgIGlzcmFlbGk6IDEsXG4gICAgaXNzbjogMSxcbiAgICBpc3N1ZTogMSxcbiAgICBpc3N1ZWQ6IDEsXG4gICAgaXNzdWVzOiAxLFxuICAgIGlzdDogMSxcbiAgICBpc3RhbmJ1bDogMSxcbiAgICBpdDogMSxcbiAgICBpdGFsaWE6IDEsXG4gICAgaXRhbGlhbjogMSxcbiAgICBpdGFsaWFubzogMSxcbiAgICBpdGFsaWM6IDEsXG4gICAgaXRhbHk6IDEsXG4gICAgaXRlbTogMSxcbiAgICBpdGVtczogMSxcbiAgICBpdHM6IDEsXG4gICAgaXRzZWxmOiAxLFxuICAgIGl0dW5lczogMSxcbiAgICBpdjogMSxcbiAgICBpdm9yeTogMSxcbiAgICBpeDogMSxcbiAgICBqOiAxLFxuICAgIGphOiAxLFxuICAgIGphY2s6IDEsXG4gICAgamFja2V0OiAxLFxuICAgIGphY2tldHM6IDEsXG4gICAgamFja2llOiAxLFxuICAgIGphY2tzb246IDEsXG4gICAgamFja3NvbnZpbGxlOiAxLFxuICAgIGphY29iOiAxLFxuICAgIGphZGU6IDEsXG4gICAgamFndWFyOiAxLFxuICAgIGphaWw6IDEsXG4gICAgamFrZTogMSxcbiAgICBqYW06IDEsXG4gICAgamFtYWljYTogMSxcbiAgICBqYW1lczogMSxcbiAgICBqYW1pZTogMSxcbiAgICBqYW46IDEsXG4gICAgamFuZTogMSxcbiAgICBqYW5ldDogMSxcbiAgICBqYW51YXJ5OiAxLFxuICAgIGphcGFuOiAxLFxuICAgIGphcGFuZXNlOiAxLFxuICAgIGphcjogMSxcbiAgICBqYXNvbjogMSxcbiAgICBqYXZhOiAxLFxuICAgIGphdmFzY3JpcHQ6IDEsXG4gICAgamF5OiAxLFxuICAgIGpheno6IDEsXG4gICAgamM6IDEsXG4gICAgamQ6IDEsXG4gICAgamU6IDEsXG4gICAgamVhbjogMSxcbiAgICBqZWFuczogMSxcbiAgICBqZWVwOiAxLFxuICAgIGplZmY6IDEsXG4gICAgamVmZmVyc29uOiAxLFxuICAgIGplZmZyZXk6IDEsXG4gICAgamVsc29mdDogMSxcbiAgICBqZW5uaWZlcjogMSxcbiAgICBqZW5ueTogMSxcbiAgICBqZXJlbXk6IDEsXG4gICAgamVycnk6IDEsXG4gICAgamVyc2V5OiAxLFxuICAgIGplcnVzYWxlbTogMSxcbiAgICBqZXNzZTogMSxcbiAgICBqZXNzaWNhOiAxLFxuICAgIGplc3VzOiAxLFxuICAgIGpldDogMSxcbiAgICBqZXRzOiAxLFxuICAgIGpld2VsOiAxLFxuICAgIGpld2VsbGVyeTogMSxcbiAgICBqZXdlbHJ5OiAxLFxuICAgIGpld2lzaDogMSxcbiAgICBqZXdzOiAxLFxuICAgIGppbGw6IDEsXG5cblxuXG5cblxuXG4gICAgamltOiAxLFxuICAgIGppbW15OiAxLFxuICAgIGpqOiAxLFxuICAgIGptOiAxLFxuICAgIGpvOiAxLFxuICAgIGpvYW46IDEsXG4gICAgam9iOiAxLFxuICAgIGpvYnM6IDEsXG4gICAgam9lOiAxLFxuICAgIGpvZWw6IDEsXG4gICAgam9objogMSxcbiAgICBqb2hubnk6IDEsXG4gICAgam9obnM6IDEsXG4gICAgam9obnNvbjogMSxcbiAgICBqb2huc3RvbjogMSxcbiAgICBqb2luOiAxLFxuICAgIGpvaW5lZDogMSxcbiAgICBqb2luaW5nOiAxLFxuICAgIGpvaW5zOiAxLFxuICAgIGpvaW50OiAxLFxuICAgIGpva2U6IDEsXG4gICAgam9rZXM6IDEsXG4gICAgam9uOiAxLFxuICAgIGpvbmF0aGFuOiAxLFxuICAgIGpvbmVzOiAxLFxuICAgIGpvcmRhbjogMSxcbiAgICBqb3NlOiAxLFxuICAgIGpvc2VwaDogMSxcbiAgICBqb3NoOiAxLFxuICAgIGpvc2h1YTogMSxcbiAgICBqb3VybmFsOiAxLFxuICAgIGpvdXJuYWxpc206IDEsXG4gICAgam91cm5hbGlzdDogMSxcbiAgICBqb3VybmFsaXN0czogMSxcbiAgICBqb3VybmFsczogMSxcbiAgICBqb3VybmV5OiAxLFxuICAgIGpveTogMSxcbiAgICBqb3ljZTogMSxcbiAgICBqcDogMSxcbiAgICBqcGVnOiAxLFxuICAgIGpwZzogMSxcbiAgICBqcjogMSxcbiAgICBqczogMSxcbiAgICBqdWFuOiAxLFxuICAgIGp1ZGdlOiAxLFxuICAgIGp1ZGdlczogMSxcbiAgICBqdWRnbWVudDogMSxcbiAgICBqdWRpY2lhbDogMSxcbiAgICBqdWR5OiAxLFxuICAgIGp1aWNlOiAxLFxuICAgIGp1bDogMSxcbiAgICBqdWxpYTogMSxcbiAgICBqdWxpYW46IDEsXG4gICAganVsaWU6IDEsXG4gICAganVseTogMSxcbiAgICBqdW1wOiAxLFxuICAgIGp1bXBpbmc6IDEsXG4gICAganVuOiAxLFxuICAgIGp1bmN0aW9uOiAxLFxuICAgIGp1bmU6IDEsXG4gICAganVuZ2xlOiAxLFxuICAgIGp1bmlvcjogMSxcbiAgICBqdW5rOiAxLFxuICAgIGp1cmlzZGljdGlvbjogMSxcbiAgICBqdXJ5OiAxLFxuICAgIGp1c3Q6IDEsXG4gICAganVzdGljZTogMSxcbiAgICBqdXN0aWZ5OiAxLFxuICAgIGp1c3RpbjogMSxcbiAgICBqdXZlbmlsZTogMSxcbiAgICBqdmM6IDEsXG4gICAgazogMSxcbiAgICBrYTogMSxcbiAgICBrYWk6IDEsXG4gICAga2Fuc2FzOiAxLFxuICAgIGthcmFva2U6IDEsXG4gICAga2FyZW46IDEsXG4gICAga2FybDogMSxcbiAgICBrYXJtYTogMSxcbiAgICBrYXRlOiAxLFxuICAgIGthdGh5OiAxLFxuICAgIGthdGllOiAxLFxuICAgIGthdHJpbmE6IDEsXG4gICAga2F5OiAxLFxuICAgIGthemFraHN0YW46IDEsXG4gICAga2I6IDEsXG4gICAga2RlOiAxLFxuICAgIGtlZW46IDEsXG4gICAga2VlcDogMSxcbiAgICBrZWVwaW5nOiAxLFxuICAgIGtlZXBzOiAxLFxuICAgIGtlaXRoOiAxLFxuICAgIGtlbGtvbzogMSxcbiAgICBrZWxseTogMSxcbiAgICBrZW46IDEsXG4gICAga2VubmVkeTogMSxcbiAgICBrZW5uZXRoOiAxLFxuICAgIGtlbm55OiAxLFxuICAgIGtlbm86IDEsXG4gICAga2VudDogMSxcbiAgICBrZW50dWNreTogMSxcbiAgICBrZW55YTogMSxcbiAgICBrZXB0OiAxLFxuICAgIGtlcm5lbDogMSxcbiAgICBrZXJyeTogMSxcbiAgICBrZXZpbjogMSxcbiAgICBrZXk6IDEsXG4gICAga2V5Ym9hcmQ6IDEsXG4gICAga2V5Ym9hcmRzOiAxLFxuICAgIGtleXM6IDEsXG4gICAga2V5d29yZDogMSxcbiAgICBrZXl3b3JkczogMSxcbiAgICBrZzogMSxcbiAgICBraWNrOiAxLFxuICAgIGtpZDogMSxcbiAgICBraWRuZXk6IDEsXG4gICAga2lkczogMSxcbiAgICBraWppamk6IDEsXG4gICAga2lsbDogMSxcbiAgICBraWxsZWQ6IDEsXG4gICAga2lsbGVyOiAxLFxuICAgIGtpbGxpbmc6IDEsXG4gICAga2lsbHM6IDEsXG4gICAga2lsb21ldGVyczogMSxcbiAgICBraW06IDEsXG4gICAga2luYXNlOiAxLFxuICAgIGtpbmQ6IDEsXG4gICAga2luZGE6IDEsXG4gICAga2luZHM6IDEsXG4gICAga2luZzogMSxcbiAgICBraW5nZG9tOiAxLFxuICAgIGtpbmdzOiAxLFxuICAgIGtpbmdzdG9uOiAxLFxuICAgIGtpcms6IDEsXG4gICAga2lzczogMSxcbiAgICBraXNzaW5nOiAxLFxuICAgIGtpdDogMSxcbiAgICBraXRjaGVuOiAxLFxuICAgIGtpdHM6IDEsXG4gICAga2l0dHk6IDEsXG4gICAga2xlaW46IDEsXG4gICAga206IDEsXG4gICAga25lZTogMSxcbiAgICBrbmV3OiAxLFxuICAgIGtuaWZlOiAxLFxuICAgIGtuaWdodDogMSxcbiAgICBrbmlnaHRzOiAxLFxuICAgIGtuaXQ6IDEsXG4gICAga25pdHRpbmc6IDEsXG4gICAga25pdmVzOiAxLFxuICAgIGtub2NrOiAxLFxuICAgIGtub3c6IDEsXG4gICAga25vd2luZzogMSxcbiAgICBrbm93bGVkZ2U6IDEsXG4gICAga25vd2xlZGdlc3Rvcm06IDEsXG4gICAga25vd246IDEsXG4gICAga25vd3M6IDEsXG4gICAga286IDEsXG4gICAga29kYWs6IDEsXG4gICAga29uZzogMSxcbiAgICBrb3JlYTogMSxcbiAgICBrb3JlYW46IDEsXG4gICAga3J1Z2VyOiAxLFxuICAgIGtzOiAxLFxuICAgIGt1cnQ6IDEsXG4gICAga3V3YWl0OiAxLFxuICAgIGt3OiAxLFxuICAgIGt5OiAxLFxuICAgIGt5bGU6IDEsXG4gICAgbDogMSxcbiAgICBsYTogMSxcbiAgICBsYWI6IDEsXG4gICAgbGFiZWw6IDEsXG4gICAgbGFiZWxlZDogMSxcbiAgICBsYWJlbHM6IDEsXG4gICAgbGFib3I6IDEsXG4gICAgbGFib3JhdG9yaWVzOiAxLFxuICAgIGxhYm9yYXRvcnk6IDEsXG4gICAgbGFib3VyOiAxLFxuICAgIGxhYnM6IDEsXG4gICAgbGFjZTogMSxcbiAgICBsYWNrOiAxLFxuICAgIGxhZGRlcjogMSxcbiAgICBsYWRlbjogMSxcbiAgICBsYWRpZXM6IDEsXG4gICAgbGFkeTogMSxcbiAgICBsYWZheWV0dGU6IDEsXG4gICAgbGFpZDogMSxcbiAgICBsYWtlOiAxLFxuICAgIGxha2VzOiAxLFxuICAgIGxhbWI6IDEsXG4gICAgbGFtYmRhOiAxLFxuICAgIGxhbXA6IDEsXG4gICAgbGFtcHM6IDEsXG4gICAgbGFuOiAxLFxuICAgIGxhbmNhc3RlcjogMSxcbiAgICBsYW5jZTogMSxcbiAgICBsYW5kOiAxLFxuICAgIGxhbmRpbmc6IDEsXG4gICAgbGFuZHM6IDEsXG4gICAgbGFuZHNjYXBlOiAxLFxuICAgIGxhbmRzY2FwZXM6IDEsXG4gICAgbGFuZTogMSxcbiAgICBsYW5lczogMSxcbiAgICBsYW5nOiAxLFxuICAgIGxhbmd1YWdlOiAxLFxuICAgIGxhbmd1YWdlczogMSxcbiAgICBsYW5rYTogMSxcbiAgICBsYW9zOiAxLFxuICAgIGxhcDogMSxcbiAgICBsYXB0b3A6IDEsXG4gICAgbGFwdG9wczogMSxcbiAgICBsYXJnZTogMSxcbiAgICBsYXJnZWx5OiAxLFxuICAgIGxhcmdlcjogMSxcbiAgICBsYXJnZXN0OiAxLFxuICAgIGxhcnJ5OiAxLFxuICAgIGxhczogMSxcbiAgICBsYXNlcjogMSxcbiAgICBsYXN0OiAxLFxuICAgIGxhc3Rpbmc6IDEsXG4gICAgbGF0OiAxLFxuICAgIGxhdGU6IDEsXG4gICAgbGF0ZWx5OiAxLFxuICAgIGxhdGVyOiAxLFxuICAgIGxhdGVzdDogMSxcbiAgICBsYXRleDogMSxcbiAgICBsYXRpbjogMSxcbiAgICBsYXRpbmE6IDEsXG4gICAgbGF0aW5hczogMSxcbiAgICBsYXRpbm86IDEsXG4gICAgbGF0aXR1ZGU6IDEsXG4gICAgbGF0dGVyOiAxLFxuICAgIGxhdHZpYTogMSxcbiAgICBsYXVkZXJkYWxlOiAxLFxuICAgIGxhdWdoOiAxLFxuICAgIGxhdWdoaW5nOiAxLFxuICAgIGxhdW5jaDogMSxcbiAgICBsYXVuY2hlZDogMSxcbiAgICBsYXVuY2hlczogMSxcbiAgICBsYXVuZHJ5OiAxLFxuICAgIGxhdXJhOiAxLFxuICAgIGxhdXJlbjogMSxcbiAgICBsYXc6IDEsXG4gICAgbGF3bjogMSxcbiAgICBsYXdyZW5jZTogMSxcbiAgICBsYXdzOiAxLFxuICAgIGxhd3N1aXQ6IDEsXG4gICAgbGF3eWVyOiAxLFxuICAgIGxhd3llcnM6IDEsXG4gICAgbGF5OiAxLFxuICAgIGxheWVyOiAxLFxuICAgIGxheWVyczogMSxcbiAgICBsYXlvdXQ6IDEsXG4gICAgbGF6eTogMSxcbiAgICBsYjogMSxcbiAgICBsYnM6IDEsXG4gICAgbGM6IDEsXG4gICAgbGNkOiAxLFxuICAgIGxkOiAxLFxuICAgIGxlOiAxLFxuICAgIGxlYWQ6IDEsXG4gICAgbGVhZGVyOiAxLFxuICAgIGxlYWRlcnM6IDEsXG4gICAgbGVhZGVyc2hpcDogMSxcbiAgICBsZWFkaW5nOiAxLFxuICAgIGxlYWRzOiAxLFxuICAgIGxlYWY6IDEsXG4gICAgbGVhZ3VlOiAxLFxuICAgIGxlYW46IDEsXG4gICAgbGVhcm46IDEsXG4gICAgbGVhcm5lZDogMSxcbiAgICBsZWFybmVyczogMSxcbiAgICBsZWFybmluZzogMSxcbiAgICBsZWFzZTogMSxcbiAgICBsZWFzaW5nOiAxLFxuICAgIGxlYXN0OiAxLFxuICAgIGxlYXRoZXI6IDEsXG4gICAgbGVhdmU6IDEsXG4gICAgbGVhdmVzOiAxLFxuICAgIGxlYXZpbmc6IDEsXG4gICAgbGViYW5vbjogMSxcbiAgICBsZWN0dXJlOiAxLFxuICAgIGxlY3R1cmVzOiAxLFxuICAgIGxlZDogMSxcbiAgICBsZWU6IDEsXG4gICAgbGVlZHM6IDEsXG4gICAgbGVmdDogMSxcbiAgICBsZWc6IDEsXG4gICAgbGVnYWN5OiAxLFxuICAgIGxlZ2FsOiAxLFxuICAgIGxlZ2FsbHk6IDEsXG4gICAgbGVnZW5kOiAxLFxuICAgIGxlZ2VuZGFyeTogMSxcbiAgICBsZWdlbmRzOiAxLFxuICAgIGxlZ2lzbGF0aW9uOiAxLFxuICAgIGxlZ2lzbGF0aXZlOiAxLFxuICAgIGxlZ2lzbGF0dXJlOiAxLFxuICAgIGxlZ2l0aW1hdGU6IDEsXG4gICAgbGVnczogMSxcbiAgICBsZWlzdXJlOiAxLFxuICAgIGxlbW9uOiAxLFxuICAgIGxlbjogMSxcbiAgICBsZW5kZXI6IDEsXG4gICAgbGVuZGVyczogMSxcbiAgICBsZW5kaW5nOiAxLFxuICAgIGxlbmd0aDogMSxcbiAgICBsZW5zOiAxLFxuICAgIGxlbnNlczogMSxcbiAgICBsZW86IDEsXG4gICAgbGVvbjogMSxcbiAgICBsZW9uYXJkOiAxLFxuICAgIGxlb25lOiAxLFxuICAgIGxlczogMSxcbiAgICBsZXNiaWFuOiAxLFxuICAgIGxlc2JpYW5zOiAxLFxuICAgIGxlc2xpZTogMSxcbiAgICBsZXNzOiAxLFxuICAgIGxlc3NlcjogMSxcbiAgICBsZXNzb246IDEsXG4gICAgbGVzc29uczogMSxcbiAgICBsZXQ6IDEsXG4gICAgbGV0czogMSxcbiAgICBsZXR0ZXI6IDEsXG4gICAgbGV0dGVyczogMSxcbiAgICBsZXR0aW5nOiAxLFxuICAgIGxldTogMSxcbiAgICBsZXZlbDogMSxcbiAgICBsZXZlbHM6IDEsXG4gICAgbGV2aXRyYTogMSxcbiAgICBsZXZ5OiAxLFxuICAgIGxld2lzOiAxLFxuICAgIGxleGluZ3RvbjogMSxcbiAgICBsZXhtYXJrOiAxLFxuICAgIGxleHVzOiAxLFxuICAgIGxmOiAxLFxuICAgIGxnOiAxLFxuICAgIGxpOiAxLFxuICAgIGxpYWJpbGl0aWVzOiAxLFxuICAgIGxpYWJpbGl0eTogMSxcbiAgICBsaWFibGU6IDEsXG4gICAgbGliOiAxLFxuICAgIGxpYmVyYWw6IDEsXG4gICAgbGliZXJpYTogMSxcbiAgICBsaWJlcnR5OiAxLFxuICAgIGxpYnJhcmlhbjogMSxcbiAgICBsaWJyYXJpZXM6IDEsXG4gICAgbGlicmFyeTogMSxcbiAgICBsaWJzOiAxLFxuICAgIGxpY2VuY2U6IDEsXG4gICAgbGljZW5zZTogMSxcbiAgICBsaWNlbnNlZDogMSxcbiAgICBsaWNlbnNlczogMSxcbiAgICBsaWNlbnNpbmc6IDEsXG4gICAgbGlja2luZzogMSxcbiAgICBsaWQ6IDEsXG4gICAgbGllOiAxLFxuICAgIGxpZWNodGVuc3RlaW46IDEsXG4gICAgbGllczogMSxcbiAgICBsaWZlOiAxLFxuICAgIGxpZmVzdHlsZTogMSxcbiAgICBsaWZldGltZTogMSxcbiAgICBsaWZ0OiAxLFxuICAgIGxpZ2h0OiAxLFxuICAgIGxpZ2h0Ym94OiAxLFxuICAgIGxpZ2h0ZXI6IDEsXG4gICAgbGlnaHRpbmc6IDEsXG4gICAgbGlnaHRuaW5nOiAxLFxuICAgIGxpZ2h0czogMSxcbiAgICBsaWdodHdlaWdodDogMSxcbiAgICBsaWtlOiAxLFxuICAgIGxpa2VkOiAxLFxuICAgIGxpa2VsaWhvb2Q6IDEsXG4gICAgbGlrZWx5OiAxLFxuICAgIGxpa2VzOiAxLFxuICAgIGxpa2V3aXNlOiAxLFxuICAgIGxpbDogMSxcbiAgICBsaW1lOiAxLFxuICAgIGxpbWl0OiAxLFxuICAgIGxpbWl0YXRpb246IDEsXG4gICAgbGltaXRhdGlvbnM6IDEsXG4gICAgbGltaXRlZDogMSxcbiAgICBsaW1pdGluZzogMSxcbiAgICBsaW1pdHM6IDEsXG4gICAgbGltb3VzaW5lczogMSxcbiAgICBsaW5jb2xuOiAxLFxuICAgIGxpbmRhOiAxLFxuICAgIGxpbmRzYXk6IDEsXG4gICAgbGluZTogMSxcbiAgICBsaW5lYXI6IDEsXG4gICAgbGluZWQ6IDEsXG4gICAgbGluZXM6IDEsXG4gICAgbGluZ2VyaWU6IDEsXG4gICAgbGluazogMSxcbiAgICBsaW5rZWQ6IDEsXG4gICAgbGlua2luZzogMSxcbiAgICBsaW5rczogMSxcbiAgICBsaW51eDogMSxcbiAgICBsaW9uOiAxLFxuICAgIGxpb25zOiAxLFxuICAgIGxpcDogMSxcbiAgICBsaXBzOiAxLFxuICAgIGxpcXVpZDogMSxcbiAgICBsaXNhOiAxLFxuICAgIGxpc3Q6IDEsXG4gICAgbGlzdGVkOiAxLFxuICAgIGxpc3RlbjogMSxcbiAgICBsaXN0ZW5pbmc6IDEsXG4gICAgbGlzdGluZzogMSxcbiAgICBsaXN0aW5nczogMSxcbiAgICBsaXN0cHJpY2U6IDEsXG4gICAgbGlzdHM6IDEsXG4gICAgbGl0OiAxLFxuICAgIGxpdGU6IDEsXG4gICAgbGl0ZXJhY3k6IDEsXG4gICAgbGl0ZXJhbGx5OiAxLFxuICAgIGxpdGVyYXJ5OiAxLFxuICAgIGxpdGVyYXR1cmU6IDEsXG4gICAgbGl0aHVhbmlhOiAxLFxuICAgIGxpdGlnYXRpb246IDEsXG4gICAgbGl0dGxlOiAxLFxuICAgIGxpdmU6IDEsXG4gICAgbGl2ZWNhbTogMSxcbiAgICBsaXZlZDogMSxcbiAgICBsaXZlcjogMSxcbiAgICBsaXZlcnBvb2w6IDEsXG4gICAgbGl2ZXM6IDEsXG4gICAgbGl2ZXNleDogMSxcbiAgICBsaXZlc3RvY2s6IDEsXG4gICAgbGl2aW5nOiAxLFxuICAgIGxpejogMSxcbiAgICBsbDogMSxcbiAgICBsbGM6IDEsXG4gICAgbGxveWQ6IDEsXG4gICAgbGxwOiAxLFxuICAgIGxtOiAxLFxuICAgIGxuOiAxLFxuICAgIGxvOiAxLFxuICAgIGxvYWQ6IDEsXG4gICAgbG9hZGVkOiAxLFxuICAgIGxvYWRpbmc6IDEsXG4gICAgbG9hZHM6IDEsXG4gICAgbG9hbjogMSxcbiAgICBsb2FuczogMSxcbiAgICBsb2JieTogMSxcbiAgICBsb2M6IDEsXG4gICAgbG9jYWw6IDEsXG4gICAgbG9jYWxlOiAxLFxuICAgIGxvY2FsbHk6IDEsXG4gICAgbG9jYXRlOiAxLFxuICAgIGxvY2F0ZWQ6IDEsXG4gICAgbG9jYXRpb246IDEsXG4gICAgbG9jYXRpb25zOiAxLFxuICAgIGxvY2F0b3I6IDEsXG4gICAgbG9jazogMSxcbiAgICBsb2NrZWQ6IDEsXG4gICAgbG9ja2luZzogMSxcbiAgICBsb2NrczogMSxcbiAgICBsb2RnZTogMSxcbiAgICBsb2RnaW5nOiAxLFxuICAgIGxvZzogMSxcbiAgICBsb2dhbjogMSxcbiAgICBsb2dnZWQ6IDEsXG4gICAgbG9nZ2luZzogMSxcbiAgICBsb2dpYzogMSxcbiAgICBsb2dpY2FsOiAxLFxuICAgIGxvZ2luOiAxLFxuICAgIGxvZ2lzdGljczogMSxcbiAgICBsb2dpdGVjaDogMSxcbiAgICBsb2dvOiAxLFxuICAgIGxvZ29zOiAxLFxuICAgIGxvZ3M6IDEsXG4gICAgbG9sOiAxLFxuICAgIGxvbGl0YTogMSxcbiAgICBsb25kb246IDEsXG4gICAgbG9uZTogMSxcbiAgICBsb25lbHk6IDEsXG4gICAgbG9uZzogMSxcbiAgICBsb25nZXI6IDEsXG4gICAgbG9uZ2VzdDogMSxcbiAgICBsb25naXR1ZGU6IDEsXG4gICAgbG9vazogMSxcbiAgICBsb29rZWQ6IDEsXG4gICAgbG9va2luZzogMSxcbiAgICBsb29rczogMSxcbiAgICBsb29rc21hcnQ6IDEsXG4gICAgbG9va3VwOiAxLFxuICAgIGxvb3A6IDEsXG4gICAgbG9vcHM6IDEsXG4gICAgbG9vc2U6IDEsXG4gICAgbG9wZXo6IDEsXG4gICAgbG9yZDogMSxcbiAgICBsb3M6IDEsXG4gICAgbG9zZTogMSxcbiAgICBsb3Npbmc6IDEsXG4gICAgbG9zczogMSxcbiAgICBsb3NzZXM6IDEsXG4gICAgbG9zdDogMSxcbiAgICBsb3Q6IDEsXG4gICAgbG90czogMSxcbiAgICBsb3R0ZXJ5OiAxLFxuICAgIGxvdHVzOiAxLFxuICAgIGxvdTogMSxcbiAgICBsb3VkOiAxLFxuICAgIGxvdWlzOiAxLFxuICAgIGxvdWlzZTogMSxcbiAgICBsb3Vpc2lhbmE6IDEsXG4gICAgbG91aXN2aWxsZTogMSxcbiAgICBsb3VuZ2U6IDEsXG4gICAgbG92ZTogMSxcbiAgICBsb3ZlZDogMSxcbiAgICBsb3ZlbHk6IDEsXG4gICAgbG92ZXI6IDEsXG4gICAgbG92ZXJzOiAxLFxuICAgIGxvdmVzOiAxLFxuICAgIGxvdmluZzogMSxcbiAgICBsb3c6IDEsXG4gICAgbG93ZXI6IDEsXG4gICAgbG93ZXN0OiAxLFxuICAgIGxvd3M6IDEsXG4gICAgbHA6IDEsXG4gICAgbHM6IDEsXG4gICAgbHQ6IDEsXG4gICAgbHRkOiAxLFxuICAgIGx1OiAxLFxuICAgIGx1Y2FzOiAxLFxuICAgIGx1Y2lhOiAxLFxuICAgIGx1Y2s6IDEsXG4gICAgbHVja3k6IDEsXG4gICAgbHVjeTogMSxcbiAgICBsdWdnYWdlOiAxLFxuICAgIGx1aXM6IDEsXG4gICAgbHVrZTogMSxcbiAgICBsdW5jaDogMSxcbiAgICBsdW5nOiAxLFxuICAgIGx1dGhlcjogMSxcbiAgICBsdXhlbWJvdXJnOiAxLFxuICAgIGx1eHVyeTogMSxcbiAgICBseWNvczogMSxcbiAgICBseWluZzogMSxcbiAgICBseW5uOiAxLFxuICAgIGx5cmljOiAxLFxuICAgIGx5cmljczogMSxcbiAgICBtOiAxLFxuICAgIG1hOiAxLFxuICAgIG1hYzogMSxcbiAgICBtYWNlZG9uaWE6IDEsXG4gICAgbWFjaGluZTogMSxcbiAgICBtYWNoaW5lcnk6IDEsXG4gICAgbWFjaGluZXM6IDEsXG4gICAgbWFjaW50b3NoOiAxLFxuICAgIG1hY3JvOiAxLFxuICAgIG1hY3JvbWVkaWE6IDEsXG4gICAgbWFkOiAxLFxuICAgIG1hZGFnYXNjYXI6IDEsXG4gICAgbWFkZTogMSxcbiAgICBtYWRpc29uOiAxLFxuICAgIG1hZG5lc3M6IDEsXG4gICAgbWFkb25uYTogMSxcbiAgICBtYWRyaWQ6IDEsXG4gICAgbWFlOiAxLFxuICAgIG1hZzogMSxcbiAgICBtYWdhemluZTogMSxcbiAgICBtYWdhemluZXM6IDEsXG4gICAgbWFnaWM6IDEsXG4gICAgbWFnaWNhbDogMSxcbiAgICBtYWduZXQ6IDEsXG4gICAgbWFnbmV0aWM6IDEsXG4gICAgbWFnbmlmaWNlbnQ6IDEsXG4gICAgbWFnbml0dWRlOiAxLFxuICAgIG1haTogMSxcbiAgICBtYWlkZW46IDEsXG4gICAgbWFpbDogMSxcbiAgICBtYWlsZWQ6IDEsXG4gICAgbWFpbGluZzogMSxcbiAgICBtYWlsbWFuOiAxLFxuICAgIG1haWxzOiAxLFxuICAgIG1haWx0bzogMSxcbiAgICBtYWluOiAxLFxuICAgIG1haW5lOiAxLFxuICAgIG1haW5sYW5kOiAxLFxuICAgIG1haW5seTogMSxcbiAgICBtYWluc3RyZWFtOiAxLFxuICAgIG1haW50YWluOiAxLFxuICAgIG1haW50YWluZWQ6IDEsXG4gICAgbWFpbnRhaW5pbmc6IDEsXG4gICAgbWFpbnRhaW5zOiAxLFxuICAgIG1haW50ZW5hbmNlOiAxLFxuICAgIG1ham9yOiAxLFxuICAgIG1ham9yaXR5OiAxLFxuICAgIG1ha2U6IDEsXG4gICAgbWFrZXI6IDEsXG4gICAgbWFrZXJzOiAxLFxuICAgIG1ha2VzOiAxLFxuICAgIG1ha2V1cDogMSxcbiAgICBtYWtpbmc6IDEsXG4gICAgbWFsYXdpOiAxLFxuICAgIG1hbGF5c2lhOiAxLFxuICAgIG1hbGRpdmVzOiAxLFxuICAgIG1hbGU6IDEsXG4gICAgbWFsZXM6IDEsXG4gICAgbWFsaTogMSxcbiAgICBtYWxsOiAxLFxuICAgIG1hbHByYWN0aWNlOiAxLFxuICAgIG1hbHRhOiAxLFxuICAgIG1hbWJvOiAxLFxuICAgIG1hbjogMSxcbiAgICBtYW5hZ2U6IDEsXG4gICAgbWFuYWdlZDogMSxcbiAgICBtYW5hZ2VtZW50OiAxLFxuICAgIG1hbmFnZXI6IDEsXG4gICAgbWFuYWdlcnM6IDEsXG4gICAgbWFuYWdpbmc6IDEsXG4gICAgbWFuY2hlc3RlcjogMSxcbiAgICBtYW5kYXRlOiAxLFxuICAgIG1hbmRhdG9yeTogMSxcbiAgICBtYW5nYTogMSxcbiAgICBtYW5oYXR0YW46IDEsXG4gICAgbWFuaXRvYmE6IDEsXG4gICAgbWFubmVyOiAxLFxuICAgIG1hbm9yOiAxLFxuICAgIG1hbnVhbDogMSxcbiAgICBtYW51YWxseTogMSxcbiAgICBtYW51YWxzOiAxLFxuICAgIG1hbnVmYWN0dXJlOiAxLFxuICAgIG1hbnVmYWN0dXJlZDogMSxcbiAgICBtYW51ZmFjdHVyZXI6IDEsXG4gICAgbWFudWZhY3R1cmVyczogMSxcbiAgICBtYW51ZmFjdHVyaW5nOiAxLFxuICAgIG1hbnk6IDEsXG4gICAgbWFwOiAxLFxuICAgIG1hcGxlOiAxLFxuICAgIG1hcHBpbmc6IDEsXG4gICAgbWFwczogMSxcbiAgICBtYXI6IDEsXG4gICAgbWFyYXRob246IDEsXG4gICAgbWFyYmxlOiAxLFxuICAgIG1hcmM6IDEsXG4gICAgbWFyY2g6IDEsXG4gICAgbWFyY286IDEsXG4gICAgbWFyY3VzOiAxLFxuICAgIG1hcmRpOiAxLFxuICAgIG1hcmdhcmV0OiAxLFxuICAgIG1hcmdpbjogMSxcbiAgICBtYXJpYTogMSxcbiAgICBtYXJpYWg6IDEsXG4gICAgbWFyaWU6IDEsXG4gICAgbWFyaWp1YW5hOiAxLFxuICAgIG1hcmlseW46IDEsXG4gICAgbWFyaW5hOiAxLFxuICAgIG1hcmluZTogMSxcbiAgICBtYXJpbzogMSxcbiAgICBtYXJpb246IDEsXG4gICAgbWFyaXRpbWU6IDEsXG4gICAgbWFyazogMSxcbiAgICBtYXJrZWQ6IDEsXG4gICAgbWFya2VyOiAxLFxuICAgIG1hcmtlcnM6IDEsXG4gICAgbWFya2V0OiAxLFxuICAgIG1hcmtldGluZzogMSxcbiAgICBtYXJrZXRwbGFjZTogMSxcbiAgICBtYXJrZXRzOiAxLFxuICAgIG1hcmtpbmc6IDEsXG4gICAgbWFya3M6IDEsXG4gICAgbWFycmlhZ2U6IDEsXG4gICAgbWFycmllZDogMSxcbiAgICBtYXJyaW90dDogMSxcbiAgICBtYXJzOiAxLFxuICAgIG1hcnNoOiAxLFxuICAgIG1hcnNoYWxsOiAxLFxuICAgIG1hcnQ6IDEsXG4gICAgbWFydGhhOiAxLFxuICAgIG1hcnRpYWw6IDEsXG4gICAgbWFydGluOiAxLFxuICAgIG1hcnZlbDogMSxcbiAgICBtYXJ5OiAxLFxuICAgIG1hcnlsYW5kOiAxLFxuICAgIG1hczogMSxcbiAgICBtYXNrOiAxLFxuICAgIG1hc29uOiAxLFxuICAgIG1hc3M6IDEsXG4gICAgbWFzc2FjaHVzZXR0czogMSxcbiAgICBtYXNzYWdlOiAxLFxuICAgIG1hc3NpdmU6IDEsXG4gICAgbWFzdGVyOiAxLFxuICAgIG1hc3RlcmNhcmQ6IDEsXG4gICAgbWFzdGVyczogMSxcbiAgICBtYXN0dXJiYXRpbmc6IDEsXG4gICAgbWFzdHVyYmF0aW9uOiAxLFxuICAgIG1hdDogMSxcbiAgICBtYXRjaDogMSxcbiAgICBtYXRjaGVkOiAxLFxuICAgIG1hdGNoZXM6IDEsXG4gICAgbWF0Y2hpbmc6IDEsXG4gICAgbWF0ZTogMSxcbiAgICBtYXRlcmlhbDogMSxcbiAgICBtYXRlcmlhbHM6IDEsXG4gICAgbWF0ZXJuaXR5OiAxLFxuICAgIG1hdGg6IDEsXG4gICAgbWF0aGVtYXRpY2FsOiAxLFxuICAgIG1hdGhlbWF0aWNzOiAxLFxuICAgIG1hdGluZzogMSxcbiAgICBtYXRyaXg6IDEsXG4gICAgbWF0czogMSxcbiAgICBtYXR0OiAxLFxuICAgIG1hdHRlcjogMSxcbiAgICBtYXR0ZXJzOiAxLFxuICAgIG1hdHRoZXc6IDEsXG4gICAgbWF0dHJlc3M6IDEsXG4gICAgbWF0dXJlOiAxLFxuICAgIG1hdWk6IDEsXG4gICAgbWF1cml0aXVzOiAxLFxuICAgIG1heDogMSxcbiAgICBtYXhpbWl6ZTogMSxcbiAgICBtYXhpbXVtOiAxLFxuICAgIG1heTogMSxcbiAgICBtYXliZTogMSxcbiAgICBtYXlvcjogMSxcbiAgICBtYXpkYTogMSxcbiAgICBtYjogMSxcbiAgICBtYmE6IDEsXG4gICAgbWM6IDEsXG4gICAgbWNkb25hbGQ6IDEsXG4gICAgbWQ6IDEsXG4gICAgbWU6IDEsXG4gICAgbWVhbDogMSxcbiAgICBtZWFsczogMSxcbiAgICBtZWFuOiAxLFxuICAgIG1lYW5pbmc6IDEsXG4gICAgbWVhbmluZ2Z1bDogMSxcbiAgICBtZWFuczogMSxcbiAgICBtZWFudDogMSxcbiAgICBtZWFud2hpbGU6IDEsXG4gICAgbWVhc3VyZTogMSxcbiAgICBtZWFzdXJlZDogMSxcbiAgICBtZWFzdXJlbWVudDogMSxcbiAgICBtZWFzdXJlbWVudHM6IDEsXG4gICAgbWVhc3VyZXM6IDEsXG4gICAgbWVhc3VyaW5nOiAxLFxuICAgIG1lYXQ6IDEsXG4gICAgbWVjaGFuaWNhbDogMSxcbiAgICBtZWNoYW5pY3M6IDEsXG4gICAgbWVjaGFuaXNtOiAxLFxuICAgIG1lY2hhbmlzbXM6IDEsXG4gICAgbWVkOiAxLFxuICAgIG1lZGFsOiAxLFxuICAgIG1lZGlhOiAxLFxuICAgIG1lZGlhbjogMSxcbiAgICBtZWRpYXdpa2k6IDEsXG4gICAgbWVkaWNhaWQ6IDEsXG4gICAgbWVkaWNhbDogMSxcbiAgICBtZWRpY2FyZTogMSxcbiAgICBtZWRpY2F0aW9uOiAxLFxuICAgIG1lZGljYXRpb25zOiAxLFxuICAgIG1lZGljaW5lOiAxLFxuICAgIG1lZGljaW5lczogMSxcbiAgICBtZWRpZXZhbDogMSxcbiAgICBtZWRpdGF0aW9uOiAxLFxuICAgIG1lZGl0ZXJyYW5lYW46IDEsXG4gICAgbWVkaXVtOiAxLFxuICAgIG1lZGxpbmU6IDEsXG4gICAgbWVldDogMSxcbiAgICBtZWV0aW5nOiAxLFxuICAgIG1lZXRpbmdzOiAxLFxuICAgIG1lZXRzOiAxLFxuICAgIG1lZXR1cDogMSxcbiAgICBtZWdhOiAxLFxuICAgIG1lbDogMSxcbiAgICBtZWxib3VybmU6IDEsXG4gICAgbWVsaXNzYTogMSxcbiAgICBtZW06IDEsXG4gICAgbWVtYmVyOiAxLFxuICAgIG1lbWJlcnM6IDEsXG4gICAgbWVtYmVyc2hpcDogMSxcbiAgICBtZW1icmFuZTogMSxcbiAgICBtZW1vOiAxLFxuICAgIG1lbW9yYWJpbGlhOiAxLFxuICAgIG1lbW9yaWFsOiAxLFxuICAgIG1lbW9yaWVzOiAxLFxuICAgIG1lbW9yeTogMSxcbiAgICBtZW1waGlzOiAxLFxuICAgIG1lbjogMSxcbiAgICBtZW5zOiAxLFxuICAgIG1lbnQ6IDEsXG4gICAgbWVudGFsOiAxLFxuICAgIG1lbnRpb246IDEsXG4gICAgbWVudGlvbmVkOiAxLFxuICAgIG1lbnRvcjogMSxcbiAgICBtZW51OiAxLFxuICAgIG1lbnVzOiAxLFxuICAgIG1lcmNlZGVzOiAxLFxuICAgIG1lcmNoYW5kaXNlOiAxLFxuICAgIG1lcmNoYW50OiAxLFxuICAgIG1lcmNoYW50czogMSxcbiAgICBtZXJjdXJ5OiAxLFxuICAgIG1lcmN5OiAxLFxuICAgIG1lcmU6IDEsXG4gICAgbWVyZWx5OiAxLFxuICAgIG1lcmdlOiAxLFxuICAgIG1lcmdlcjogMSxcbiAgICBtZXJpdDogMSxcbiAgICBtZXJyeTogMSxcbiAgICBtZXNhOiAxLFxuICAgIG1lc2g6IDEsXG4gICAgbWVzczogMSxcbiAgICBtZXNzYWdlOiAxLFxuICAgIG1lc3NhZ2VzOiAxLFxuICAgIG1lc3NhZ2luZzogMSxcbiAgICBtZXNzZW5nZXI6IDEsXG4gICAgbWV0OiAxLFxuICAgIG1ldGE6IDEsXG4gICAgbWV0YWJvbGlzbTogMSxcbiAgICBtZXRhZGF0YTogMSxcbiAgICBtZXRhbDogMSxcbiAgICBtZXRhbGxpYzogMSxcbiAgICBtZXRhbGxpY2E6IDEsXG4gICAgbWV0YWxzOiAxLFxuICAgIG1ldGVyOiAxLFxuICAgIG1ldGVyczogMSxcbiAgICBtZXRob2Q6IDEsXG4gICAgbWV0aG9kb2xvZ3k6IDEsXG4gICAgbWV0aG9kczogMSxcbiAgICBtZXRyZXM6IDEsXG4gICAgbWV0cmljOiAxLFxuICAgIG1ldHJvOiAxLFxuICAgIG1ldHJvcG9saXRhbjogMSxcbiAgICBtZXhpY2FuOiAxLFxuICAgIG1leGljbzogMSxcbiAgICBtZXllcjogMSxcbiAgICBtZjogMSxcbiAgICBtZzogMSxcbiAgICBtaDogMSxcbiAgICBtaHo6IDEsXG4gICAgbWk6IDEsXG4gICAgbWlhOiAxLFxuICAgIG1pYW1pOiAxLFxuICAgIG1pYzogMSxcbiAgICBtaWNlOiAxLFxuICAgIG1pY2hhZWw6IDEsXG4gICAgbWljaGVsOiAxLFxuICAgIG1pY2hlbGxlOiAxLFxuICAgIG1pY2hpZ2FuOiAxLFxuICAgIG1pY3JvOiAxLFxuICAgIG1pY3JvcGhvbmU6IDEsXG4gICAgbWljcm9zb2Z0OiAxLFxuICAgIG1pY3Jvd2F2ZTogMSxcbiAgICBtaWQ6IDEsXG4gICAgbWlkZGxlOiAxLFxuICAgIG1pZGk6IDEsXG4gICAgbWlkbGFuZHM6IDEsXG4gICAgbWlkbmlnaHQ6IDEsXG4gICAgbWlkd2VzdDogMSxcbiAgICBtaWdodDogMSxcbiAgICBtaWdodHk6IDEsXG4gICAgbWlncmF0aW9uOiAxLFxuICAgIG1pa2U6IDEsXG4gICAgbWlsOiAxLFxuICAgIG1pbGFuOiAxLFxuICAgIG1pbGQ6IDEsXG4gICAgbWlsZTogMSxcbiAgICBtaWxlYWdlOiAxLFxuICAgIG1pbGVzOiAxLFxuICAgIG1pbGY6IDEsXG4gICAgbWlsZmh1bnRlcjogMSxcbiAgICBtaWxmczogMSxcbiAgICBtaWxpdGFyeTogMSxcbiAgICBtaWxrOiAxLFxuICAgIG1pbGw6IDEsXG4gICAgbWlsbGVubml1bTogMSxcbiAgICBtaWxsZXI6IDEsXG4gICAgbWlsbGlvbjogMSxcbiAgICBtaWxsaW9uczogMSxcbiAgICBtaWxsczogMSxcbiAgICBtaWx0b246IDEsXG4gICAgbWlsd2F1a2VlOiAxLFxuICAgIG1pbWU6IDEsXG4gICAgbWluOiAxLFxuICAgIG1pbmQ6IDEsXG4gICAgbWluZHM6IDEsXG4gICAgbWluZTogMSxcbiAgICBtaW5lcmFsOiAxLFxuICAgIG1pbmVyYWxzOiAxLFxuICAgIG1pbmVzOiAxLFxuICAgIG1pbmk6IDEsXG4gICAgbWluaWF0dXJlOiAxLFxuICAgIG1pbmltYWw6IDEsXG4gICAgbWluaW1pemU6IDEsXG4gICAgbWluaW11bTogMSxcbiAgICBtaW5pbmc6IDEsXG4gICAgbWluaXN0ZXI6IDEsXG4gICAgbWluaXN0ZXJzOiAxLFxuICAgIG1pbmlzdHJpZXM6IDEsXG4gICAgbWluaXN0cnk6IDEsXG4gICAgbWlubmVhcG9saXM6IDEsXG4gICAgbWlubmVzb3RhOiAxLFxuICAgIG1pbm9sdGE6IDEsXG4gICAgbWlub3I6IDEsXG4gICAgbWlub3JpdHk6IDEsXG4gICAgbWluczogMSxcbiAgICBtaW50OiAxLFxuICAgIG1pbnVzOiAxLFxuICAgIG1pbnV0ZTogMSxcbiAgICBtaW51dGVzOiAxLFxuICAgIG1pcmFjbGU6IDEsXG4gICAgbWlycm9yOiAxLFxuICAgIG1pcnJvcnM6IDEsXG4gICAgbWlzYzogMSxcbiAgICBtaXNjZWxsYW5lb3VzOiAxLFxuICAgIG1pc3M6IDEsXG4gICAgbWlzc2VkOiAxLFxuICAgIG1pc3NpbGU6IDEsXG4gICAgbWlzc2luZzogMSxcbiAgICBtaXNzaW9uOiAxLFxuICAgIG1pc3Npb25zOiAxLFxuICAgIG1pc3Npc3NpcHBpOiAxLFxuICAgIG1pc3NvdXJpOiAxLFxuICAgIG1pc3Rha2U6IDEsXG4gICAgbWlzdGFrZXM6IDEsXG4gICAgbWlzdHJlc3M6IDEsXG4gICAgbWl0OiAxLFxuICAgIG1pdGNoZWxsOiAxLFxuICAgIG1pdHN1YmlzaGk6IDEsXG4gICAgbWl4OiAxLFxuICAgIG1peGVkOiAxLFxuICAgIG1peGVyOiAxLFxuICAgIG1peGluZzogMSxcbiAgICBtaXh0dXJlOiAxLFxuICAgIG1qOiAxLFxuICAgIG1sOiAxLFxuICAgIG1sYjogMSxcbiAgICBtbHM6IDEsXG4gICAgbW06IDEsXG4gICAgbW46IDEsXG4gICAgbW86IDEsXG4gICAgbW9iaWxlOiAxLFxuICAgIG1vYmlsZXM6IDEsXG4gICAgbW9iaWxpdHk6IDEsXG4gICAgbW9kOiAxLFxuICAgIG1vZGU6IDEsXG4gICAgbW9kZWw6IDEsXG4gICAgbW9kZWxpbmc6IDEsXG4gICAgbW9kZWxsaW5nOiAxLFxuICAgIG1vZGVsczogMSxcbiAgICBtb2RlbTogMSxcbiAgICBtb2RlbXM6IDEsXG4gICAgbW9kZXJhdGU6IDEsXG4gICAgbW9kZXJhdG9yOiAxLFxuICAgIG1vZGVyYXRvcnM6IDEsXG4gICAgbW9kZXJuOiAxLFxuICAgIG1vZGVzOiAxLFxuICAgIG1vZGlmaWNhdGlvbjogMSxcbiAgICBtb2RpZmljYXRpb25zOiAxLFxuICAgIG1vZGlmaWVkOiAxLFxuICAgIG1vZGlmeTogMSxcbiAgICBtb2RzOiAxLFxuICAgIG1vZHVsYXI6IDEsXG4gICAgbW9kdWxlOiAxLFxuICAgIG1vZHVsZXM6IDEsXG4gICAgbW9pc3R1cmU6IDEsXG4gICAgbW9sZDogMSxcbiAgICBtb2xkb3ZhOiAxLFxuICAgIG1vbGVjdWxhcjogMSxcbiAgICBtb2xlY3VsZXM6IDEsXG4gICAgbW9tOiAxLFxuICAgIG1vbWVudDogMSxcbiAgICBtb21lbnRzOiAxLFxuICAgIG1vbWVudHVtOiAxLFxuICAgIG1vbXM6IDEsXG4gICAgbW9uOiAxLFxuICAgIG1vbmFjbzogMSxcbiAgICBtb25kYXk6IDEsXG4gICAgbW9uZXRhcnk6IDEsXG4gICAgbW9uZXk6IDEsXG4gICAgbW9uZ29saWE6IDEsXG4gICAgbW9uaWNhOiAxLFxuICAgIG1vbml0b3I6IDEsXG4gICAgbW9uaXRvcmVkOiAxLFxuICAgIG1vbml0b3Jpbmc6IDEsXG4gICAgbW9uaXRvcnM6IDEsXG4gICAgbW9ua2V5OiAxLFxuICAgIG1vbm86IDEsXG4gICAgbW9ucm9lOiAxLFxuICAgIG1vbnN0ZXI6IDEsXG4gICAgbW9uc3RlcnM6IDEsXG4gICAgbW9udGFuYTogMSxcbiAgICBtb250ZTogMSxcbiAgICBtb250Z29tZXJ5OiAxLFxuICAgIG1vbnRoOiAxLFxuICAgIG1vbnRobHk6IDEsXG4gICAgbW9udGhzOiAxLFxuICAgIG1vbnRyZWFsOiAxLFxuICAgIG1vb2Q6IDEsXG4gICAgbW9vbjogMSxcbiAgICBtb29yZTogMSxcbiAgICBtb3JhbDogMSxcbiAgICBtb3JlOiAxLFxuICAgIG1vcmVvdmVyOiAxLFxuICAgIG1vcmdhbjogMSxcbiAgICBtb3JuaW5nOiAxLFxuICAgIG1vcm9jY286IDEsXG4gICAgbW9ycmlzOiAxLFxuICAgIG1vcnJpc29uOiAxLFxuICAgIG1vcnRhbGl0eTogMSxcbiAgICBtb3J0Z2FnZTogMSxcbiAgICBtb3J0Z2FnZXM6IDEsXG4gICAgbW9zY293OiAxLFxuICAgIG1vc2VzOiAxLFxuICAgIG1vc3M6IDEsXG4gICAgbW9zdDogMSxcbiAgICBtb3N0bHk6IDEsXG4gICAgbW90ZWw6IDEsXG4gICAgbW90ZWxzOiAxLFxuICAgIG1vdGhlcjogMSxcbiAgICBtb3RoZXJib2FyZDogMSxcbiAgICBtb3RoZXJzOiAxLFxuICAgIG1vdGlvbjogMSxcbiAgICBtb3RpdmF0ZWQ6IDEsXG4gICAgbW90aXZhdGlvbjogMSxcbiAgICBtb3RvcjogMSxcbiAgICBtb3RvcmN5Y2xlOiAxLFxuICAgIG1vdG9yY3ljbGVzOiAxLFxuICAgIG1vdG9yb2xhOiAxLFxuICAgIG1vdG9yczogMSxcbiAgICBtb3VudDogMSxcbiAgICBtb3VudGFpbjogMSxcbiAgICBtb3VudGFpbnM6IDEsXG4gICAgbW91bnRlZDogMSxcbiAgICBtb3VudGluZzogMSxcbiAgICBtb3VudHM6IDEsXG4gICAgbW91c2U6IDEsXG4gICAgbW91dGg6IDEsXG4gICAgbW92ZTogMSxcbiAgICBtb3ZlZDogMSxcbiAgICBtb3ZlbWVudDogMSxcbiAgICBtb3ZlbWVudHM6IDEsXG4gICAgbW92ZXJzOiAxLFxuICAgIG1vdmVzOiAxLFxuICAgIG1vdmllOiAxLFxuICAgIG1vdmllczogMSxcbiAgICBtb3Zpbmc6IDEsXG4gICAgbW96YW1iaXF1ZTogMSxcbiAgICBtb3ppbGxhOiAxLFxuICAgIG1wOiAxLFxuICAgIG1wZWc6IDEsXG4gICAgbXBlZ3M6IDEsXG4gICAgbXBnOiAxLFxuICAgIG1waDogMSxcbiAgICBtcjogMSxcbiAgICBtcm5hOiAxLFxuICAgIG1yczogMSxcbiAgICBtczogMSxcbiAgICBtc2c6IDEsXG4gICAgbXNnaWQ6IDEsXG4gICAgbXNnc3RyOiAxLFxuICAgIG1zaWU6IDEsXG4gICAgbXNuOiAxLFxuICAgIG10OiAxLFxuICAgIG10djogMSxcbiAgICBtdTogMSxcbiAgICBtdWNoOiAxLFxuICAgIG11ZDogMSxcbiAgICBtdWc6IDEsXG4gICAgbXVsdGk6IDEsXG4gICAgbXVsdGltZWRpYTogMSxcbiAgICBtdWx0aXBsZTogMSxcbiAgICBtdW1iYWk6IDEsXG4gICAgbXVuaWNoOiAxLFxuICAgIG11bmljaXBhbDogMSxcbiAgICBtdW5pY2lwYWxpdHk6IDEsXG4gICAgbXVyZGVyOiAxLFxuICAgIG11cnBoeTogMSxcbiAgICBtdXJyYXk6IDEsXG4gICAgbXVzY2xlOiAxLFxuICAgIG11c2NsZXM6IDEsXG4gICAgbXVzZXVtOiAxLFxuICAgIG11c2V1bXM6IDEsXG4gICAgbXVzaWM6IDEsXG4gICAgbXVzaWNhbDogMSxcbiAgICBtdXNpY2lhbjogMSxcbiAgICBtdXNpY2lhbnM6IDEsXG4gICAgbXVzbGltOiAxLFxuICAgIG11c2xpbXM6IDEsXG4gICAgbXVzdDogMSxcbiAgICBtdXN0YW5nOiAxLFxuICAgIG11dHVhbDogMSxcbiAgICBtdXplOiAxLFxuICAgIG12OiAxLFxuICAgIG13OiAxLFxuICAgIG14OiAxLFxuICAgIG15OiAxLFxuICAgIG15YW5tYXI6IDEsXG4gICAgbXllcnM6IDEsXG4gICAgbXlydGxlOiAxLFxuICAgIG15c2VsZjogMSxcbiAgICBteXNpbW9uOiAxLFxuICAgIG15c3BhY2U6IDEsXG4gICAgbXlzcWw6IDEsXG4gICAgbXlzdGVyaW91czogMSxcbiAgICBteXN0ZXJ5OiAxLFxuICAgIG15dGg6IDEsXG4gICAgbjogMSxcbiAgICBuYTogMSxcbiAgICBuYWlsOiAxLFxuICAgIG5haWxzOiAxLFxuICAgIG5ha2VkOiAxLFxuICAgIG5hbTogMSxcbiAgICBuYW1lOiAxLFxuICAgIG5hbWVkOiAxLFxuICAgIG5hbWVseTogMSxcbiAgICBuYW1lczogMSxcbiAgICBuYW1lc3BhY2U6IDEsXG4gICAgbmFtaWJpYTogMSxcbiAgICBuYW5jeTogMSxcbiAgICBuYW5vOiAxLFxuICAgIG5hcGxlczogMSxcbiAgICBuYXJyYXRpdmU6IDEsXG4gICAgbmFycm93OiAxLFxuICAgIG5hc2E6IDEsXG4gICAgbmFzY2FyOiAxLFxuICAgIG5hc2RhcTogMSxcbiAgICBuYXNodmlsbGU6IDEsXG4gICAgbmFzdHk6IDEsXG4gICAgbmF0OiAxLFxuICAgIG5hdGhhbjogMSxcbiAgICBuYXRpb246IDEsXG4gICAgbmF0aW9uYWw6IDEsXG4gICAgbmF0aW9uYWxseTogMSxcbiAgICBuYXRpb25zOiAxLFxuICAgIG5hdGlvbndpZGU6IDEsXG4gICAgbmF0aXZlOiAxLFxuICAgIG5hdG86IDEsXG4gICAgbmF0dXJhbDogMSxcbiAgICBuYXR1cmFsbHk6IDEsXG4gICAgbmF0dXJhbHM6IDEsXG4gICAgbmF0dXJlOiAxLFxuICAgIG5hdWdodHk6IDEsXG4gICAgbmF2OiAxLFxuICAgIG5hdmFsOiAxLFxuICAgIG5hdmlnYXRlOiAxLFxuICAgIG5hdmlnYXRpb246IDEsXG4gICAgbmF2aWdhdG9yOiAxLFxuICAgIG5hdnk6IDEsXG4gICAgbmI6IDEsXG4gICAgbmJhOiAxLFxuICAgIG5iYzogMSxcbiAgICBuYzogMSxcbiAgICBuY2FhOiAxLFxuICAgIG5kOiAxLFxuICAgIG5lOiAxLFxuICAgIG5lYXI6IDEsXG4gICAgbmVhcmJ5OiAxLFxuICAgIG5lYXJlc3Q6IDEsXG4gICAgbmVhcmx5OiAxLFxuICAgIG5lYnJhc2thOiAxLFxuICAgIG5lYzogMSxcbiAgICBuZWNlc3NhcmlseTogMSxcbiAgICBuZWNlc3Nhcnk6IDEsXG4gICAgbmVjZXNzaXR5OiAxLFxuICAgIG5lY2s6IDEsXG4gICAgbmVja2xhY2U6IDEsXG4gICAgbmVlZDogMSxcbiAgICBuZWVkZWQ6IDEsXG4gICAgbmVlZGxlOiAxLFxuICAgIG5lZWRzOiAxLFxuICAgIG5lZ2F0aXZlOiAxLFxuICAgIG5lZ290aWF0aW9uOiAxLFxuICAgIG5lZ290aWF0aW9uczogMSxcbiAgICBuZWlnaGJvcjogMSxcbiAgICBuZWlnaGJvcmhvb2Q6IDEsXG4gICAgbmVpZ2hib3JzOiAxLFxuICAgIG5laWw6IDEsXG4gICAgbmVpdGhlcjogMSxcbiAgICBuZWxzb246IDEsXG4gICAgbmVvOiAxLFxuICAgIG5lb246IDEsXG4gICAgbmVwYWw6IDEsXG4gICAgbmVydmU6IDEsXG4gICAgbmVydm91czogMSxcbiAgICBuZXN0OiAxLFxuICAgIG5lc3RlZDogMSxcbiAgICBuZXQ6IDEsXG4gICAgbmV0aGVybGFuZHM6IDEsXG4gICAgbmV0c2NhcGU6IDEsXG4gICAgbmV0d29yazogMSxcbiAgICBuZXR3b3JraW5nOiAxLFxuICAgIG5ldHdvcmtzOiAxLFxuICAgIG5ldXJhbDogMSxcbiAgICBuZXV0cmFsOiAxLFxuICAgIG5ldmFkYTogMSxcbiAgICBuZXZlcjogMSxcbiAgICBuZXZlcnRoZWxlc3M6IDEsXG4gICAgbmV3OiAxLFxuICAgIG5ld2FyazogMSxcbiAgICBuZXdiaWU6IDEsXG4gICAgbmV3Y2FzdGxlOiAxLFxuICAgIG5ld2VyOiAxLFxuICAgIG5ld2VzdDogMSxcbiAgICBuZXdmb3VuZGxhbmQ6IDEsXG4gICAgbmV3bHk6IDEsXG4gICAgbmV3bWFuOiAxLFxuICAgIG5ld3BvcnQ6IDEsXG4gICAgbmV3czogMSxcbiAgICBuZXdzbGV0dGVyOiAxLFxuICAgIG5ld3NsZXR0ZXJzOiAxLFxuICAgIG5ld3NwYXBlcjogMSxcbiAgICBuZXdzcGFwZXJzOiAxLFxuICAgIG5ld3RvbjogMSxcbiAgICBuZXh0OiAxLFxuICAgIG5leHRlbDogMSxcbiAgICBuZmw6IDEsXG4gICAgbmc6IDEsXG4gICAgbmg6IDEsXG4gICAgbmhsOiAxLFxuICAgIG5oczogMSxcbiAgICBuaTogMSxcbiAgICBuaWFnYXJhOiAxLFxuICAgIG5pY2FyYWd1YTogMSxcbiAgICBuaWNlOiAxLFxuICAgIG5pY2hvbGFzOiAxLFxuICAgIG5pY2s6IDEsXG4gICAgbmlja2VsOiAxLFxuICAgIG5pY2tuYW1lOiAxLFxuICAgIG5pY29sZTogMSxcbiAgICBuaWdlcjogMSxcbiAgICBuaWdlcmlhOiAxLFxuICAgIG5pZ2h0OiAxLFxuICAgIG5pZ2h0bGlmZTogMSxcbiAgICBuaWdodG1hcmU6IDEsXG4gICAgbmlnaHRzOiAxLFxuICAgIG5pa2U6IDEsXG4gICAgbmlrb246IDEsXG4gICAgbmlsOiAxLFxuICAgIG5pbmU6IDEsXG4gICAgbmludGVuZG86IDEsXG4gICAgbmlwcGxlOiAxLFxuICAgIG5pcHBsZXM6IDEsXG4gICAgbmlydmFuYTogMSxcbiAgICBuaXNzYW46IDEsXG4gICAgbml0cm9nZW46IDEsXG4gICAgbmo6IDEsXG4gICAgbmw6IDEsXG4gICAgbm06IDEsXG4gICAgbm46IDEsXG4gICAgbm86IDEsXG4gICAgbm9ibGU6IDEsXG4gICAgbm9ib2R5OiAxLFxuICAgIG5vZGU6IDEsXG4gICAgbm9kZXM6IDEsXG4gICAgbm9pc2U6IDEsXG4gICAgbm9raWE6IDEsXG4gICAgbm9taW5hdGVkOiAxLFxuICAgIG5vbWluYXRpb246IDEsXG4gICAgbm9taW5hdGlvbnM6IDEsXG4gICAgbm9uOiAxLFxuICAgIG5vbmU6IDEsXG4gICAgbm9ucHJvZml0OiAxLFxuICAgIG5vb246IDEsXG4gICAgbm9yOiAxLFxuICAgIG5vcmZvbGs6IDEsXG4gICAgbm9ybTogMSxcbiAgICBub3JtYWw6IDEsXG4gICAgbm9ybWFsbHk6IDEsXG4gICAgbm9ybWFuOiAxLFxuICAgIG5vcnRoOiAxLFxuICAgIG5vcnRoZWFzdDogMSxcbiAgICBub3J0aGVybjogMSxcbiAgICBub3J0aHdlc3Q6IDEsXG4gICAgbm9ydG9uOiAxLFxuICAgIG5vcndheTogMSxcbiAgICBub3J3ZWdpYW46IDEsXG4gICAgbm9zZTogMSxcbiAgICBub3Q6IDEsXG4gICAgbm90ZTogMSxcbiAgICBub3RlYm9vazogMSxcbiAgICBub3RlYm9va3M6IDEsXG4gICAgbm90ZWQ6IDEsXG4gICAgbm90ZXM6IDEsXG4gICAgbm90aGluZzogMSxcbiAgICBub3RpY2U6IDEsXG4gICAgbm90aWNlZDogMSxcbiAgICBub3RpY2VzOiAxLFxuICAgIG5vdGlmaWNhdGlvbjogMSxcbiAgICBub3RpZmljYXRpb25zOiAxLFxuICAgIG5vdGlmaWVkOiAxLFxuICAgIG5vdGlmeTogMSxcbiAgICBub3Rpb246IDEsXG4gICAgbm90cmU6IDEsXG4gICAgbm90dGluZ2hhbTogMSxcbiAgICBub3Y6IDEsXG4gICAgbm92YTogMSxcbiAgICBub3ZlbDogMSxcbiAgICBub3ZlbHM6IDEsXG4gICAgbm92ZWx0eTogMSxcbiAgICBub3ZlbWJlcjogMSxcbiAgICBub3c6IDEsXG4gICAgbm93aGVyZTogMSxcbiAgICBucDogMSxcbiAgICBucjogMSxcbiAgICBuczogMSxcbiAgICBuc3c6IDEsXG4gICAgbnQ6IDEsXG4gICAgbnRzYzogMSxcbiAgICBudTogMSxcbiAgICBudWNsZWFyOiAxLFxuICAgIG51ZGU6IDEsXG4gICAgbnVkaXN0OiAxLFxuICAgIG51ZGl0eTogMSxcbiAgICBudWtlOiAxLFxuICAgIG51bGw6IDEsXG4gICAgbnVtYmVyOiAxLFxuICAgIG51bWJlcnM6IDEsXG4gICAgbnVtZXJpYzogMSxcbiAgICBudW1lcmljYWw6IDEsXG4gICAgbnVtZXJvdXM6IDEsXG4gICAgbnVyc2U6IDEsXG4gICAgbnVyc2VyeTogMSxcbiAgICBudXJzZXM6IDEsXG4gICAgbnVyc2luZzogMSxcbiAgICBudXQ6IDEsXG4gICAgbnV0cml0aW9uOiAxLFxuICAgIG51dHJpdGlvbmFsOiAxLFxuICAgIG51dHM6IDEsXG4gICAgbnV0dGVuOiAxLFxuICAgIG52OiAxLFxuICAgIG52aWRpYTogMSxcbiAgICBudzogMSxcbiAgICBueTogMSxcbiAgICBueWM6IDEsXG4gICAgbnlsb246IDEsXG4gICAgbno6IDEsXG4gICAgbzogMSxcbiAgICBvYWs6IDEsXG4gICAgb2FrbGFuZDogMSxcbiAgICBvYWtzOiAxLFxuICAgIG9hc2lzOiAxLFxuICAgIG9iOiAxLFxuICAgIG9iZXNpdHk6IDEsXG4gICAgb2JpdHVhcmllczogMSxcbiAgICBvYmo6IDEsXG4gICAgb2JqZWN0OiAxLFxuICAgIG9iamVjdGl2ZTogMSxcbiAgICBvYmplY3RpdmVzOiAxLFxuICAgIG9iamVjdHM6IDEsXG4gICAgb2JsaWdhdGlvbjogMSxcbiAgICBvYmxpZ2F0aW9uczogMSxcbiAgICBvYnNlcnZhdGlvbjogMSxcbiAgICBvYnNlcnZhdGlvbnM6IDEsXG4gICAgb2JzZXJ2ZTogMSxcbiAgICBvYnNlcnZlZDogMSxcbiAgICBvYnNlcnZlcjogMSxcbiAgICBvYnRhaW46IDEsXG4gICAgb2J0YWluZWQ6IDEsXG4gICAgb2J0YWluaW5nOiAxLFxuICAgIG9idmlvdXM6IDEsXG4gICAgb2J2aW91c2x5OiAxLFxuICAgIG9jOiAxLFxuICAgIG9jY2FzaW9uOiAxLFxuICAgIG9jY2FzaW9uYWw6IDEsXG4gICAgb2NjYXNpb25hbGx5OiAxLFxuICAgIG9jY2FzaW9uczogMSxcbiAgICBvY2N1cGF0aW9uOiAxLFxuICAgIG9jY3VwYXRpb25hbDogMSxcbiAgICBvY2N1cGF0aW9uczogMSxcbiAgICBvY2N1cGllZDogMSxcbiAgICBvY2N1cjogMSxcbiAgICBvY2N1cnJlZDogMSxcbiAgICBvY2N1cnJlbmNlOiAxLFxuICAgIG9jY3VycmluZzogMSxcbiAgICBvY2N1cnM6IDEsXG4gICAgb2NlYW46IDEsXG4gICAgb2NsYzogMSxcbiAgICBvY3Q6IDEsXG4gICAgb2N0b2JlcjogMSxcbiAgICBvZGQ6IDEsXG4gICAgb2RkczogMSxcbiAgICBvZTogMSxcbiAgICBvZWNkOiAxLFxuICAgIG9lbTogMSxcbiAgICBvZjogMSxcbiAgICBvZmY6IDEsXG4gICAgb2ZmZW5zZTogMSxcbiAgICBvZmZlbnNpdmU6IDEsXG4gICAgb2ZmZXI6IDEsXG4gICAgb2ZmZXJlZDogMSxcbiAgICBvZmZlcmluZzogMSxcbiAgICBvZmZlcmluZ3M6IDEsXG4gICAgb2ZmZXJzOiAxLFxuICAgIG9mZmljZTogMSxcbiAgICBvZmZpY2VyOiAxLFxuICAgIG9mZmljZXJzOiAxLFxuICAgIG9mZmljZXM6IDEsXG4gICAgb2ZmaWNpYWw6IDEsXG4gICAgb2ZmaWNpYWxseTogMSxcbiAgICBvZmZpY2lhbHM6IDEsXG4gICAgb2ZmbGluZTogMSxcbiAgICBvZmZzZXQ6IDEsXG4gICAgb2Zmc2hvcmU6IDEsXG4gICAgb2Z0ZW46IDEsXG4gICAgb2c6IDEsXG4gICAgb2g6IDEsXG4gICAgb2hpbzogMSxcbiAgICBvaWw6IDEsXG4gICAgb2lsczogMSxcbiAgICBvazogMSxcbiAgICBva2F5OiAxLFxuICAgIG9rbGFob21hOiAxLFxuICAgIG9sOiAxLFxuICAgIG9sZDogMSxcbiAgICBvbGRlcjogMSxcbiAgICBvbGRlc3Q6IDEsXG4gICAgb2xpdmU6IDEsXG4gICAgb2xpdmVyOiAxLFxuICAgIG9seW1waWM6IDEsXG4gICAgb2x5bXBpY3M6IDEsXG4gICAgb2x5bXB1czogMSxcbiAgICBvbTogMSxcbiAgICBvbWFoYTogMSxcbiAgICBvbWFuOiAxLFxuICAgIG9tZWdhOiAxLFxuICAgIG9taXNzaW9uczogMSxcbiAgICBvbjogMSxcbiAgICBvbmNlOiAxLFxuICAgIG9uZTogMSxcbiAgICBvbmVzOiAxLFxuICAgIG9uZ29pbmc6IDEsXG4gICAgb25pb246IDEsXG4gICAgb25saW5lOiAxLFxuICAgIG9ubHk6IDEsXG4gICAgb25zOiAxLFxuICAgIG9udGFyaW86IDEsXG4gICAgb250bzogMSxcbiAgICBvbzogMSxcbiAgICBvb286IDEsXG4gICAgb29wczogMSxcbiAgICBvcDogMSxcbiAgICBvcGVuOiAxLFxuICAgIG9wZW5lZDogMSxcbiAgICBvcGVuaW5nOiAxLFxuICAgIG9wZW5pbmdzOiAxLFxuICAgIG9wZW5zOiAxLFxuICAgIG9wZXJhOiAxLFxuICAgIG9wZXJhdGU6IDEsXG4gICAgb3BlcmF0ZWQ6IDEsXG4gICAgb3BlcmF0ZXM6IDEsXG4gICAgb3BlcmF0aW5nOiAxLFxuICAgIG9wZXJhdGlvbjogMSxcbiAgICBvcGVyYXRpb25hbDogMSxcbiAgICBvcGVyYXRpb25zOiAxLFxuICAgIG9wZXJhdG9yOiAxLFxuICAgIG9wZXJhdG9yczogMSxcbiAgICBvcGluaW9uOiAxLFxuICAgIG9waW5pb25zOiAxLFxuICAgIG9wcG9uZW50OiAxLFxuICAgIG9wcG9uZW50czogMSxcbiAgICBvcHBvcnR1bml0aWVzOiAxLFxuICAgIG9wcG9ydHVuaXR5OiAxLFxuICAgIG9wcG9zZWQ6IDEsXG4gICAgb3Bwb3NpdGU6IDEsXG4gICAgb3Bwb3NpdGlvbjogMSxcbiAgICBvcHQ6IDEsXG4gICAgb3B0aWNhbDogMSxcbiAgICBvcHRpY3M6IDEsXG4gICAgb3B0aW1hbDogMSxcbiAgICBvcHRpbWl6YXRpb246IDEsXG4gICAgb3B0aW1pemU6IDEsXG4gICAgb3B0aW11bTogMSxcbiAgICBvcHRpb246IDEsXG4gICAgb3B0aW9uYWw6IDEsXG4gICAgb3B0aW9uczogMSxcbiAgICBvcjogMSxcbiAgICBvcmFjbGU6IDEsXG4gICAgb3JhbDogMSxcbiAgICBvcmFuZ2U6IDEsXG4gICAgb3JiaXQ6IDEsXG4gICAgb3JjaGVzdHJhOiAxLFxuICAgIG9yZGVyOiAxLFxuICAgIG9yZGVyZWQ6IDEsXG4gICAgb3JkZXJpbmc6IDEsXG4gICAgb3JkZXJzOiAxLFxuICAgIG9yZGluYW5jZTogMSxcbiAgICBvcmRpbmFyeTogMSxcbiAgICBvcmVnb246IDEsXG4gICAgb3JnOiAxLFxuICAgIG9yZ2FuOiAxLFxuICAgIG9yZ2FuaWM6IDEsXG4gICAgb3JnYW5pc2F0aW9uOiAxLFxuICAgIG9yZ2FuaXNhdGlvbnM6IDEsXG4gICAgb3JnYW5pc2VkOiAxLFxuICAgIG9yZ2FuaXNtczogMSxcbiAgICBvcmdhbml6YXRpb246IDEsXG4gICAgb3JnYW5pemF0aW9uYWw6IDEsXG4gICAgb3JnYW5pemF0aW9uczogMSxcbiAgICBvcmdhbml6ZTogMSxcbiAgICBvcmdhbml6ZWQ6IDEsXG4gICAgb3JnYW5pemVyOiAxLFxuICAgIG9yZ2FuaXppbmc6IDEsXG4gICAgb3JnYXNtOiAxLFxuICAgIG9yZ3k6IDEsXG4gICAgb3JpZW50YWw6IDEsXG4gICAgb3JpZW50YXRpb246IDEsXG4gICAgb3JpZW50ZWQ6IDEsXG4gICAgb3JpZ2luOiAxLFxuICAgIG9yaWdpbmFsOiAxLFxuICAgIG9yaWdpbmFsbHk6IDEsXG4gICAgb3JpZ2luczogMSxcbiAgICBvcmxhbmRvOiAxLFxuICAgIG9ybGVhbnM6IDEsXG4gICAgb3M6IDEsXG4gICAgb3NjYXI6IDEsXG4gICAgb3Q6IDEsXG4gICAgb3RoZXI6IDEsXG4gICAgb3RoZXJzOiAxLFxuICAgIG90aGVyd2lzZTogMSxcbiAgICBvdHRhd2E6IDEsXG4gICAgb3U6IDEsXG4gICAgb3VnaHQ6IDEsXG4gICAgb3VyOiAxLFxuICAgIG91cnM6IDEsXG4gICAgb3Vyc2VsdmVzOiAxLFxuICAgIG91dDogMSxcbiAgICBvdXRjb21lOiAxLFxuICAgIG91dGNvbWVzOiAxLFxuICAgIG91dGRvb3I6IDEsXG4gICAgb3V0ZG9vcnM6IDEsXG4gICAgb3V0ZXI6IDEsXG4gICAgb3V0bGV0OiAxLFxuICAgIG91dGxldHM6IDEsXG4gICAgb3V0bGluZTogMSxcbiAgICBvdXRsaW5lZDogMSxcbiAgICBvdXRsb29rOiAxLFxuICAgIG91dHB1dDogMSxcbiAgICBvdXRwdXRzOiAxLFxuICAgIG91dHJlYWNoOiAxLFxuICAgIG91dHNpZGU6IDEsXG4gICAgb3V0c291cmNpbmc6IDEsXG4gICAgb3V0c3RhbmRpbmc6IDEsXG4gICAgb3ZhbDogMSxcbiAgICBvdmVuOiAxLFxuICAgIG92ZXI6IDEsXG4gICAgb3ZlcmFsbDogMSxcbiAgICBvdmVyY29tZTogMSxcbiAgICBvdmVyaGVhZDogMSxcbiAgICBvdmVybmlnaHQ6IDEsXG4gICAgb3ZlcnNlYXM6IDEsXG4gICAgb3ZlcnZpZXc6IDEsXG4gICAgb3dlbjogMSxcbiAgICBvd246IDEsXG4gICAgb3duZWQ6IDEsXG4gICAgb3duZXI6IDEsXG4gICAgb3duZXJzOiAxLFxuICAgIG93bmVyc2hpcDogMSxcbiAgICBvd25zOiAxLFxuICAgIG94Zm9yZDogMSxcbiAgICBveGlkZTogMSxcbiAgICBveHlnZW46IDEsXG4gICAgb3o6IDEsXG4gICAgb3pvbmU6IDEsXG59O1xuIiwiLy8gaHR0cHM6Ly9lbmdsaXNoZ3JhbW1hcmhlcmUuY29tL3ZvY2FidWxhcnkvMTAwMDAtbW9zdC1jb21tb24td29yZHMtaW4tZW5nbGlzaC1wYXJ0LTUvXG5leHBvcnQgY29uc3QgVGhlTW9zdENvbW1vbjEwMDAwID0ge1xuICAgIHA6IDEsXG4gICAgcGE6IDEsXG4gICAgcGFjOiAxLFxuICAgIHBhY2U6IDEsXG4gICAgcGFjaWZpYzogMSxcbiAgICBwYWNrOiAxLFxuICAgIHBhY2thZ2U6IDEsXG4gICAgcGFja2FnZXM6IDEsXG4gICAgcGFja2FnaW5nOiAxLFxuICAgIHBhY2thcmQ6IDEsXG4gICAgcGFja2VkOiAxLFxuICAgIHBhY2tldDogMSxcbiAgICBwYWNrZXRzOiAxLFxuICAgIHBhY2tpbmc6IDEsXG4gICAgcGFja3M6IDEsXG4gICAgcGFkOiAxLFxuICAgIHBhZHM6IDEsXG4gICAgcGFnZTogMSxcbiAgICBwYWdlczogMSxcbiAgICBwYWlkOiAxLFxuICAgIHBhaW46IDEsXG4gICAgcGFpbmZ1bDogMSxcbiAgICBwYWludDogMSxcbiAgICBwYWludGJhbGw6IDEsXG4gICAgcGFpbnRlZDogMSxcbiAgICBwYWludGluZzogMSxcbiAgICBwYWludGluZ3M6IDEsXG4gICAgcGFpcjogMSxcbiAgICBwYWlyczogMSxcbiAgICBwYWtpc3RhbjogMSxcbiAgICBwYWw6IDEsXG4gICAgcGFsYWNlOiAxLFxuICAgIHBhbGU6IDEsXG4gICAgcGFsZXN0aW5lOiAxLFxuICAgIHBhbGVzdGluaWFuOiAxLFxuXG5cblxuXG5cblxuXG4gICAgcGFsbTogMSxcbiAgICBwYWxtZXI6IDEsXG4gICAgcGFtOiAxLFxuICAgIHBhbWVsYTogMSxcbiAgICBwYW46IDEsXG4gICAgcGFuYW1hOiAxLFxuICAgIHBhbmFzb25pYzogMSxcbiAgICBwYW5lbDogMSxcbiAgICBwYW5lbHM6IDEsXG4gICAgcGFuaWM6IDEsXG4gICAgcGFudGllczogMSxcbiAgICBwYW50czogMSxcbiAgICBwYW50eWhvc2U6IDEsXG4gICAgcGFwZXI6IDEsXG4gICAgcGFwZXJiYWNrOiAxLFxuICAgIHBhcGVyYmFja3M6IDEsXG4gICAgcGFwZXJzOiAxLFxuICAgIHBhcHVhOiAxLFxuICAgIHBhcjogMSxcbiAgICBwYXJhOiAxLFxuICAgIHBhcmFkZTogMSxcbiAgICBwYXJhZGlzZTogMSxcbiAgICBwYXJhZ3JhcGg6IDEsXG4gICAgcGFyYWdyYXBoczogMSxcbiAgICBwYXJhZ3VheTogMSxcbiAgICBwYXJhbGxlbDogMSxcbiAgICBwYXJhbWV0ZXI6IDEsXG4gICAgcGFyYW1ldGVyczogMSxcbiAgICBwYXJjZWw6IDEsXG4gICAgcGFyZW50OiAxLFxuICAgIHBhcmVudGFsOiAxLFxuICAgIHBhcmVudGluZzogMSxcbiAgICBwYXJlbnRzOiAxLFxuICAgIHBhcmlzOiAxLFxuICAgIHBhcmlzaDogMSxcbiAgICBwYXJrOiAxLFxuICAgIHBhcmtlcjogMSxcbiAgICBwYXJraW5nOiAxLFxuICAgIHBhcmtzOiAxLFxuICAgIHBhcmxpYW1lbnQ6IDEsXG4gICAgcGFybGlhbWVudGFyeTogMSxcbiAgICBwYXJ0OiAxLFxuICAgIHBhcnRpYWw6IDEsXG4gICAgcGFydGlhbGx5OiAxLFxuICAgIHBhcnRpY2lwYW50OiAxLFxuICAgIHBhcnRpY2lwYW50czogMSxcbiAgICBwYXJ0aWNpcGF0ZTogMSxcbiAgICBwYXJ0aWNpcGF0ZWQ6IDEsXG4gICAgcGFydGljaXBhdGluZzogMSxcbiAgICBwYXJ0aWNpcGF0aW9uOiAxLFxuICAgIHBhcnRpY2xlOiAxLFxuICAgIHBhcnRpY2xlczogMSxcbiAgICBwYXJ0aWN1bGFyOiAxLFxuICAgIHBhcnRpY3VsYXJseTogMSxcbiAgICBwYXJ0aWVzOiAxLFxuICAgIHBhcnRpdGlvbjogMSxcbiAgICBwYXJ0bHk6IDEsXG4gICAgcGFydG5lcjogMSxcbiAgICBwYXJ0bmVyczogMSxcbiAgICBwYXJ0bmVyc2hpcDogMSxcbiAgICBwYXJ0bmVyc2hpcHM6IDEsXG4gICAgcGFydHM6IDEsXG4gICAgcGFydHk6IDEsXG4gICAgcGFzOiAxLFxuICAgIHBhc286IDEsXG4gICAgcGFzczogMSxcbiAgICBwYXNzYWdlOiAxLFxuICAgIHBhc3NlZDogMSxcbiAgICBwYXNzZW5nZXI6IDEsXG4gICAgcGFzc2VuZ2VyczogMSxcbiAgICBwYXNzZXM6IDEsXG4gICAgcGFzc2luZzogMSxcbiAgICBwYXNzaW9uOiAxLFxuICAgIHBhc3NpdmU6IDEsXG4gICAgcGFzc3BvcnQ6IDEsXG4gICAgcGFzc3dvcmQ6IDEsXG4gICAgcGFzc3dvcmRzOiAxLFxuICAgIHBhc3Q6IDEsXG4gICAgcGFzdGE6IDEsXG4gICAgcGFzdGU6IDEsXG4gICAgcGFzdG9yOiAxLFxuICAgIHBhdDogMSxcbiAgICBwYXRjaDogMSxcbiAgICBwYXRjaGVzOiAxLFxuICAgIHBhdGVudDogMSxcbiAgICBwYXRlbnRzOiAxLFxuICAgIHBhdGg6IDEsXG4gICAgcGF0aG9sb2d5OiAxLFxuICAgIHBhdGhzOiAxLFxuICAgIHBhdGllbnQ6IDEsXG4gICAgcGF0aWVudHM6IDEsXG4gICAgcGF0aW86IDEsXG4gICAgcGF0cmljaWE6IDEsXG4gICAgcGF0cmljazogMSxcbiAgICBwYXRyb2w6IDEsXG4gICAgcGF0dGVybjogMSxcbiAgICBwYXR0ZXJuczogMSxcbiAgICBwYXVsOiAxLFxuICAgIHBhdmlsaW9uOiAxLFxuICAgIHBheGlsOiAxLFxuICAgIHBheTogMSxcbiAgICBwYXlhYmxlOiAxLFxuICAgIHBheWRheTogMSxcbiAgICBwYXlpbmc6IDEsXG4gICAgcGF5bWVudDogMSxcbiAgICBwYXltZW50czogMSxcbiAgICBwYXlwYWw6IDEsXG4gICAgcGF5cm9sbDogMSxcbiAgICBwYXlzOiAxLFxuICAgIHBiOiAxLFxuICAgIHBjOiAxLFxuICAgIHBjaTogMSxcbiAgICBwY3M6IDEsXG4gICAgcGN0OiAxLFxuICAgIHBkOiAxLFxuICAgIHBkYTogMSxcbiAgICBwZGFzOiAxLFxuICAgIHBkZjogMSxcbiAgICBwZHQ6IDEsXG4gICAgcGU6IDEsXG4gICAgcGVhY2U6IDEsXG4gICAgcGVhY2VmdWw6IDEsXG4gICAgcGVhazogMSxcbiAgICBwZWFybDogMSxcbiAgICBwZWFzOiAxLFxuICAgIHBlZGlhdHJpYzogMSxcbiAgICBwZWU6IDEsXG4gICAgcGVlaW5nOiAxLFxuICAgIHBlZXI6IDEsXG4gICAgcGVlcnM6IDEsXG4gICAgcGVuOiAxLFxuICAgIHBlbmFsdGllczogMSxcbiAgICBwZW5hbHR5OiAxLFxuICAgIHBlbmNpbDogMSxcbiAgICBwZW5kYW50OiAxLFxuICAgIHBlbmRpbmc6IDEsXG4gICAgcGVuZXRyYXRpb246IDEsXG4gICAgcGVuZ3VpbjogMSxcbiAgICBwZW5pbnN1bGE6IDEsXG5cblxuXG5cblxuXG5cbiAgICBwZW5pczogMSxcbiAgICBwZW5uOiAxLFxuICAgIHBlbm5zeWx2YW5pYTogMSxcbiAgICBwZW5ueTogMSxcbiAgICBwZW5zOiAxLFxuICAgIHBlbnNpb246IDEsXG4gICAgcGVuc2lvbnM6IDEsXG4gICAgcGVudGl1bTogMSxcbiAgICBwZW9wbGU6IDEsXG4gICAgcGVvcGxlczogMSxcbiAgICBwZXBwZXI6IDEsXG4gICAgcGVyOiAxLFxuICAgIHBlcmNlaXZlZDogMSxcbiAgICBwZXJjZW50OiAxLFxuICAgIHBlcmNlbnRhZ2U6IDEsXG4gICAgcGVyY2VwdGlvbjogMSxcbiAgICBwZXJmZWN0OiAxLFxuICAgIHBlcmZlY3RseTogMSxcbiAgICBwZXJmb3JtOiAxLFxuICAgIHBlcmZvcm1hbmNlOiAxLFxuICAgIHBlcmZvcm1hbmNlczogMSxcbiAgICBwZXJmb3JtZWQ6IDEsXG4gICAgcGVyZm9ybWVyOiAxLFxuICAgIHBlcmZvcm1pbmc6IDEsXG4gICAgcGVyZm9ybXM6IDEsXG4gICAgcGVyZnVtZTogMSxcbiAgICBwZXJoYXBzOiAxLFxuICAgIHBlcmlvZDogMSxcbiAgICBwZXJpb2RpYzogMSxcbiAgICBwZXJpb2RpY2FsbHk6IDEsXG4gICAgcGVyaW9kczogMSxcbiAgICBwZXJpcGhlcmFsOiAxLFxuICAgIHBlcmlwaGVyYWxzOiAxLFxuICAgIHBlcmw6IDEsXG4gICAgcGVybWFsaW5rOiAxLFxuICAgIHBlcm1hbmVudDogMSxcbiAgICBwZXJtaXNzaW9uOiAxLFxuICAgIHBlcm1pc3Npb25zOiAxLFxuICAgIHBlcm1pdDogMSxcbiAgICBwZXJtaXRzOiAxLFxuICAgIHBlcm1pdHRlZDogMSxcbiAgICBwZXJyeTogMSxcbiAgICBwZXJzaWFuOiAxLFxuICAgIHBlcnNpc3RlbnQ6IDEsXG4gICAgcGVyc29uOiAxLFxuICAgIHBlcnNvbmFsOiAxLFxuICAgIHBlcnNvbmFsaXR5OiAxLFxuICAgIHBlcnNvbmFsaXplZDogMSxcbiAgICBwZXJzb25hbGx5OiAxLFxuICAgIHBlcnNvbmFsczogMSxcbiAgICBwZXJzb25uZWw6IDEsXG4gICAgcGVyc29uczogMSxcbiAgICBwZXJzcGVjdGl2ZTogMSxcbiAgICBwZXJzcGVjdGl2ZXM6IDEsXG4gICAgcGVydGg6IDEsXG4gICAgcGVydTogMSxcbiAgICBwZXN0OiAxLFxuICAgIHBldDogMSxcbiAgICBwZXRlOiAxLFxuICAgIHBldGVyOiAxLFxuICAgIHBldGVyc2J1cmc6IDEsXG4gICAgcGV0ZXJzb246IDEsXG4gICAgcGV0aXRlOiAxLFxuICAgIHBldGl0aW9uOiAxLFxuICAgIHBldHJvbGV1bTogMSxcbiAgICBwZXRzOiAxLFxuICAgIHBmOiAxLFxuICAgIHBnOiAxLFxuICAgIHBncDogMSxcbiAgICBwaDogMSxcbiAgICBwaGFudG9tOiAxLFxuICAgIHBoYXJtYWNldXRpY2FsOiAxLFxuICAgIHBoYXJtYWNldXRpY2FsczogMSxcbiAgICBwaGFybWFjaWVzOiAxLFxuICAgIHBoYXJtYWNvbG9neTogMSxcbiAgICBwaGFybWFjeTogMSxcbiAgICBwaGFzZTogMSxcbiAgICBwaGFzZXM6IDEsXG4gICAgcGhkOiAxLFxuICAgIHBoZW5vbWVub246IDEsXG4gICAgcGhlbnRlcm1pbmU6IDEsXG4gICAgcGhpOiAxLFxuICAgIHBoaWw6IDEsXG4gICAgcGhpbGFkZWxwaGlhOiAxLFxuICAgIHBoaWxpcDogMSxcbiAgICBwaGlsaXBwaW5lczogMSxcbiAgICBwaGlsaXBzOiAxLFxuICAgIHBoaWxsaXBzOiAxLFxuICAgIHBoaWxvc29waHk6IDEsXG4gICAgcGhvZW5peDogMSxcbiAgICBwaG9uZTogMSxcbiAgICBwaG9uZXM6IDEsXG4gICAgcGhvdG86IDEsXG4gICAgcGhvdG9ncmFwaDogMSxcbiAgICBwaG90b2dyYXBoZXI6IDEsXG4gICAgcGhvdG9ncmFwaGVyczogMSxcbiAgICBwaG90b2dyYXBoaWM6IDEsXG4gICAgcGhvdG9ncmFwaHM6IDEsXG4gICAgcGhvdG9ncmFwaHk6IDEsXG4gICAgcGhvdG9zOiAxLFxuICAgIHBob3Rvc2hvcDogMSxcbiAgICBwaHA6IDEsXG4gICAgcGhwYmI6IDEsXG4gICAgcGhyYXNlOiAxLFxuICAgIHBocmFzZXM6IDEsXG4gICAgcGh5czogMSxcbiAgICBwaHlzaWNhbDogMSxcbiAgICBwaHlzaWNhbGx5OiAxLFxuICAgIHBoeXNpY2lhbjogMSxcbiAgICBwaHlzaWNpYW5zOiAxLFxuICAgIHBoeXNpY3M6IDEsXG4gICAgcGh5c2lvbG9neTogMSxcbiAgICBwaTogMSxcbiAgICBwaWFubzogMSxcbiAgICBwaWM6IDEsXG4gICAgcGljaHVudGVyOiAxLFxuICAgIHBpY2s6IDEsXG4gICAgcGlja2VkOiAxLFxuICAgIHBpY2tpbmc6IDEsXG4gICAgcGlja3M6IDEsXG4gICAgcGlja3VwOiAxLFxuICAgIHBpY25pYzogMSxcbiAgICBwaWNzOiAxLFxuICAgIHBpY3R1cmU6IDEsXG4gICAgcGljdHVyZXM6IDEsXG4gICAgcGllOiAxLFxuICAgIHBpZWNlOiAxLFxuICAgIHBpZWNlczogMSxcbiAgICBwaWVyY2U6IDEsXG4gICAgcGllcnJlOiAxLFxuICAgIHBpZzogMSxcbiAgICBwaWtlOiAxLFxuICAgIHBpbGw6IDEsXG4gICAgcGlsbG93OiAxLFxuICAgIHBpbGxzOiAxLFxuICAgIHBpbG90OiAxLFxuICAgIHBpbjogMSxcbiAgICBwaW5lOiAxLFxuICAgIHBpbmc6IDEsXG4gICAgcGluazogMSxcbiAgICBwaW5zOiAxLFxuICAgIHBpb25lZXI6IDEsXG4gICAgcGlwZTogMSxcbiAgICBwaXBlbGluZTogMSxcbiAgICBwaXBlczogMSxcbiAgICBwaXJhdGVzOiAxLFxuICAgIHBpc3M6IDEsXG4gICAgcGlzc2luZzogMSxcbiAgICBwaXQ6IDEsXG4gICAgcGl0Y2g6IDEsXG4gICAgcGl0dHNidXJnaDogMSxcbiAgICBwaXg6IDEsXG4gICAgcGl4ZWw6IDEsXG4gICAgcGl4ZWxzOiAxLFxuICAgIHBpenphOiAxLFxuICAgIHBqOiAxLFxuICAgIHBrOiAxLFxuICAgIHBsOiAxLFxuICAgIHBsYWNlOiAxLFxuICAgIHBsYWNlZDogMSxcbiAgICBwbGFjZW1lbnQ6IDEsXG4gICAgcGxhY2VzOiAxLFxuICAgIHBsYWNpbmc6IDEsXG4gICAgcGxhaW46IDEsXG4gICAgcGxhaW5zOiAxLFxuICAgIHBsYWludGlmZjogMSxcbiAgICBwbGFuOiAxLFxuICAgIHBsYW5lOiAxLFxuICAgIHBsYW5lczogMSxcbiAgICBwbGFuZXQ6IDEsXG4gICAgcGxhbmV0czogMSxcbiAgICBwbGFubmVkOiAxLFxuICAgIHBsYW5uZXI6IDEsXG4gICAgcGxhbm5lcnM6IDEsXG4gICAgcGxhbm5pbmc6IDEsXG4gICAgcGxhbnM6IDEsXG4gICAgcGxhbnQ6IDEsXG4gICAgcGxhbnRzOiAxLFxuICAgIHBsYXNtYTogMSxcbiAgICBwbGFzdGljOiAxLFxuICAgIHBsYXN0aWNzOiAxLFxuICAgIHBsYXRlOiAxLFxuICAgIHBsYXRlczogMSxcbiAgICBwbGF0Zm9ybTogMSxcbiAgICBwbGF0Zm9ybXM6IDEsXG4gICAgcGxhdGludW06IDEsXG4gICAgcGxheTogMSxcbiAgICBwbGF5YmFjazogMSxcbiAgICBwbGF5Ym95OiAxLFxuICAgIHBsYXllZDogMSxcbiAgICBwbGF5ZXI6IDEsXG4gICAgcGxheWVyczogMSxcbiAgICBwbGF5aW5nOiAxLFxuICAgIHBsYXlsaXN0OiAxLFxuICAgIHBsYXlzOiAxLFxuICAgIHBsYXlzdGF0aW9uOiAxLFxuICAgIHBsYXphOiAxLFxuICAgIHBsYzogMSxcbiAgICBwbGVhc2FudDogMSxcbiAgICBwbGVhc2U6IDEsXG4gICAgcGxlYXNlZDogMSxcbiAgICBwbGVhc3VyZTogMSxcbiAgICBwbGVkZ2U6IDEsXG4gICAgcGxlbnR5OiAxLFxuICAgIHBsb3Q6IDEsXG4gICAgcGxvdHM6IDEsXG4gICAgcGx1ZzogMSxcbiAgICBwbHVnaW46IDEsXG4gICAgcGx1Z2luczogMSxcbiAgICBwbHVtYmluZzogMSxcbiAgICBwbHVzOiAxLFxuICAgIHBseW1vdXRoOiAxLFxuICAgIHBtOiAxLFxuICAgIHBtYzogMSxcbiAgICBwbWlkOiAxLFxuICAgIHBuOiAxLFxuICAgIHBvOiAxLFxuICAgIHBvY2tldDogMSxcbiAgICBwb2NrZXRzOiAxLFxuICAgIHBvZDogMSxcbiAgICBwb2RjYXN0OiAxLFxuICAgIHBvZGNhc3RzOiAxLFxuICAgIHBvZW06IDEsXG4gICAgcG9lbXM6IDEsXG4gICAgcG9ldDogMSxcbiAgICBwb2V0cnk6IDEsXG4gICAgcG9pbnQ6IDEsXG4gICAgcG9pbnRlZDogMSxcbiAgICBwb2ludGVyOiAxLFxuICAgIHBvaW50aW5nOiAxLFxuICAgIHBvaW50czogMSxcbiAgICBwb2lzb246IDEsXG4gICAgcG9rZW1vbjogMSxcbiAgICBwb2tlcjogMSxcbiAgICBwb2xhbmQ6IDEsXG4gICAgcG9sYXI6IDEsXG4gICAgcG9sZTogMSxcbiAgICBwb2xpY2U6IDEsXG4gICAgcG9saWNpZXM6IDEsXG4gICAgcG9saWN5OiAxLFxuICAgIHBvbGlzaDogMSxcbiAgICBwb2xpc2hlZDogMSxcbiAgICBwb2xpdGljYWw6IDEsXG4gICAgcG9saXRpY2lhbnM6IDEsXG4gICAgcG9saXRpY3M6IDEsXG4gICAgcG9sbDogMSxcbiAgICBwb2xsczogMSxcbiAgICBwb2xsdXRpb246IDEsXG5cblxuXG5cblxuXG5cbiAgICBwb2xvOiAxLFxuICAgIHBvbHk6IDEsXG4gICAgcG9seWVzdGVyOiAxLFxuICAgIHBvbHltZXI6IDEsXG4gICAgcG9seXBob25pYzogMSxcbiAgICBwb25kOiAxLFxuICAgIHBvbnRpYWM6IDEsXG4gICAgcG9vbDogMSxcbiAgICBwb29sczogMSxcbiAgICBwb29yOiAxLFxuICAgIHBvcDogMSxcbiAgICBwb3BlOiAxLFxuICAgIHBvcHVsYXI6IDEsXG4gICAgcG9wdWxhcml0eTogMSxcbiAgICBwb3B1bGF0aW9uOiAxLFxuICAgIHBvcHVsYXRpb25zOiAxLFxuICAgIHBvcjogMSxcbiAgICBwb3JjZWxhaW46IDEsXG4gICAgcG9yazogMSxcbiAgICBwb3JuOiAxLFxuICAgIHBvcm5vOiAxLFxuICAgIHBvcnNjaGU6IDEsXG4gICAgcG9ydDogMSxcbiAgICBwb3J0YWJsZTogMSxcbiAgICBwb3J0YWw6IDEsXG4gICAgcG9ydGVyOiAxLFxuICAgIHBvcnRmb2xpbzogMSxcbiAgICBwb3J0aW9uOiAxLFxuICAgIHBvcnRpb25zOiAxLFxuICAgIHBvcnRsYW5kOiAxLFxuICAgIHBvcnRyYWl0OiAxLFxuICAgIHBvcnRyYWl0czogMSxcbiAgICBwb3J0czogMSxcbiAgICBwb3J0c21vdXRoOiAxLFxuICAgIHBvcnR1Z2FsOiAxLFxuICAgIHBvcnR1Z3Vlc2U6IDEsXG4gICAgcG9zOiAxLFxuICAgIHBvc2U6IDEsXG4gICAgcG9zaW5nOiAxLFxuICAgIHBvc2l0aW9uOiAxLFxuICAgIHBvc2l0aW9uaW5nOiAxLFxuICAgIHBvc2l0aW9uczogMSxcbiAgICBwb3NpdGl2ZTogMSxcbiAgICBwb3NzZXNzOiAxLFxuICAgIHBvc3Nlc3Npb246IDEsXG4gICAgcG9zc2liaWxpdGllczogMSxcbiAgICBwb3NzaWJpbGl0eTogMSxcbiAgICBwb3NzaWJsZTogMSxcbiAgICBwb3NzaWJseTogMSxcbiAgICBwb3N0OiAxLFxuICAgIHBvc3RhZ2U6IDEsXG4gICAgcG9zdGFsOiAxLFxuICAgIHBvc3RjYXJkOiAxLFxuICAgIHBvc3RjYXJkczogMSxcbiAgICBwb3N0ZWQ6IDEsXG4gICAgcG9zdGVyOiAxLFxuICAgIHBvc3RlcnM6IDEsXG4gICAgcG9zdGluZzogMSxcbiAgICBwb3N0aW5nczogMSxcbiAgICBwb3N0cG9zdGVkOiAxLFxuICAgIHBvc3RzOiAxLFxuICAgIHBvdDogMSxcbiAgICBwb3RhdG86IDEsXG4gICAgcG90YXRvZXM6IDEsXG4gICAgcG90ZW50aWFsOiAxLFxuICAgIHBvdGVudGlhbGx5OiAxLFxuICAgIHBvdHRlcjogMSxcbiAgICBwb3R0ZXJ5OiAxLFxuICAgIHBvdWx0cnk6IDEsXG4gICAgcG91bmQ6IDEsXG4gICAgcG91bmRzOiAxLFxuICAgIHBvdXI6IDEsXG4gICAgcG92ZXJ0eTogMSxcbiAgICBwb3dkZXI6IDEsXG4gICAgcG93ZWxsOiAxLFxuICAgIHBvd2VyOiAxLFxuICAgIHBvd2VyZWQ6IDEsXG4gICAgcG93ZXJmdWw6IDEsXG4gICAgcG93ZXJwb2ludDogMSxcbiAgICBwb3dlcnM6IDEsXG4gICAgcG93ZXJzZWxsZXI6IDEsXG4gICAgcHA6IDEsXG4gICAgcHBjOiAxLFxuICAgIHBwbTogMSxcbiAgICBwcjogMSxcbiAgICBwcmFjdGljYWw6IDEsXG4gICAgcHJhY3RpY2U6IDEsXG4gICAgcHJhY3RpY2VzOiAxLFxuICAgIHByYWN0aXRpb25lcjogMSxcbiAgICBwcmFjdGl0aW9uZXJzOiAxLFxuICAgIHByYWd1ZTogMSxcbiAgICBwcmFpcmllOiAxLFxuICAgIHByYWlzZTogMSxcbiAgICBwcmF5OiAxLFxuICAgIHByYXllcjogMSxcbiAgICBwcmF5ZXJzOiAxLFxuICAgIHByZTogMSxcbiAgICBwcmVjZWRpbmc6IDEsXG4gICAgcHJlY2lvdXM6IDEsXG4gICAgcHJlY2lwaXRhdGlvbjogMSxcbiAgICBwcmVjaXNlOiAxLFxuICAgIHByZWNpc2VseTogMSxcbiAgICBwcmVjaXNpb246IDEsXG4gICAgcHJlZGljdDogMSxcbiAgICBwcmVkaWN0ZWQ6IDEsXG4gICAgcHJlZGljdGlvbjogMSxcbiAgICBwcmVkaWN0aW9uczogMSxcbiAgICBwcmVmZXI6IDEsXG4gICAgcHJlZmVyZW5jZTogMSxcbiAgICBwcmVmZXJlbmNlczogMSxcbiAgICBwcmVmZXJyZWQ6IDEsXG4gICAgcHJlZmVyczogMSxcbiAgICBwcmVmaXg6IDEsXG4gICAgcHJlZ25hbmN5OiAxLFxuICAgIHByZWduYW50OiAxLFxuICAgIHByZWxpbWluYXJ5OiAxLFxuICAgIHByZW1pZXI6IDEsXG4gICAgcHJlbWllcmU6IDEsXG4gICAgcHJlbWlzZXM6IDEsXG4gICAgcHJlbWl1bTogMSxcbiAgICBwcmVwOiAxLFxuICAgIHByZXBhaWQ6IDEsXG4gICAgcHJlcGFyYXRpb246IDEsXG4gICAgcHJlcGFyZTogMSxcbiAgICBwcmVwYXJlZDogMSxcbiAgICBwcmVwYXJpbmc6IDEsXG4gICAgcHJlcmVxdWlzaXRlOiAxLFxuICAgIHByZXNjcmliZWQ6IDEsXG4gICAgcHJlc2NyaXB0aW9uOiAxLFxuICAgIHByZXNlbmNlOiAxLFxuICAgIHByZXNlbnQ6IDEsXG4gICAgcHJlc2VudGF0aW9uOiAxLFxuICAgIHByZXNlbnRhdGlvbnM6IDEsXG4gICAgcHJlc2VudGVkOiAxLFxuICAgIHByZXNlbnRpbmc6IDEsXG4gICAgcHJlc2VudGx5OiAxLFxuICAgIHByZXNlbnRzOiAxLFxuICAgIHByZXNlcnZhdGlvbjogMSxcbiAgICBwcmVzZXJ2ZTogMSxcbiAgICBwcmVzaWRlbnQ6IDEsXG4gICAgcHJlc2lkZW50aWFsOiAxLFxuICAgIHByZXNzOiAxLFxuICAgIHByZXNzZWQ6IDEsXG4gICAgcHJlc3Npbmc6IDEsXG4gICAgcHJlc3N1cmU6IDEsXG4gICAgcHJlc3RvbjogMSxcbiAgICBwcmV0dHk6IDEsXG4gICAgcHJldjogMSxcbiAgICBwcmV2ZW50OiAxLFxuICAgIHByZXZlbnRpbmc6IDEsXG4gICAgcHJldmVudGlvbjogMSxcbiAgICBwcmV2aWV3OiAxLFxuICAgIHByZXZpZXdzOiAxLFxuICAgIHByZXZpb3VzOiAxLFxuICAgIHByZXZpb3VzbHk6IDEsXG4gICAgcHJpY2U6IDEsXG4gICAgcHJpY2VkOiAxLFxuICAgIHByaWNlczogMSxcbiAgICBwcmljaW5nOiAxLFxuICAgIHByaWRlOiAxLFxuICAgIHByaWVzdDogMSxcbiAgICBwcmltYXJpbHk6IDEsXG4gICAgcHJpbWFyeTogMSxcbiAgICBwcmltZTogMSxcbiAgICBwcmluY2U6IDEsXG4gICAgcHJpbmNlc3M6IDEsXG4gICAgcHJpbmNldG9uOiAxLFxuICAgIHByaW5jaXBhbDogMSxcbiAgICBwcmluY2lwbGU6IDEsXG4gICAgcHJpbmNpcGxlczogMSxcbiAgICBwcmludDogMSxcbiAgICBwcmludGFibGU6IDEsXG4gICAgcHJpbnRlZDogMSxcbiAgICBwcmludGVyOiAxLFxuICAgIHByaW50ZXJzOiAxLFxuICAgIHByaW50aW5nOiAxLFxuICAgIHByaW50czogMSxcbiAgICBwcmlvcjogMSxcbiAgICBwcmlvcml0aWVzOiAxLFxuICAgIHByaW9yaXR5OiAxLFxuICAgIHByaXNvbjogMSxcbiAgICBwcmlzb25lcjogMSxcbiAgICBwcmlzb25lcnM6IDEsXG4gICAgcHJpdmFjeTogMSxcbiAgICBwcml2YXRlOiAxLFxuICAgIHByaXZpbGVnZTogMSxcbiAgICBwcml2aWxlZ2VzOiAxLFxuICAgIHByaXg6IDEsXG4gICAgcHJpemU6IDEsXG4gICAgcHJpemVzOiAxLFxuICAgIHBybzogMSxcbiAgICBwcm9iYWJpbGl0eTogMSxcbiAgICBwcm9iYWJseTogMSxcbiAgICBwcm9iZTogMSxcbiAgICBwcm9ibGVtOiAxLFxuICAgIHByb2JsZW1zOiAxLFxuICAgIHByb2M6IDEsXG4gICAgcHJvY2VkdXJlOiAxLFxuICAgIHByb2NlZHVyZXM6IDEsXG4gICAgcHJvY2VlZDogMSxcbiAgICBwcm9jZWVkaW5nOiAxLFxuICAgIHByb2NlZWRpbmdzOiAxLFxuICAgIHByb2NlZWRzOiAxLFxuICAgIHByb2Nlc3M6IDEsXG4gICAgcHJvY2Vzc2VkOiAxLFxuICAgIHByb2Nlc3NlczogMSxcbiAgICBwcm9jZXNzaW5nOiAxLFxuICAgIHByb2Nlc3NvcjogMSxcbiAgICBwcm9jZXNzb3JzOiAxLFxuICAgIHByb2N1cmVtZW50OiAxLFxuICAgIHByb2R1Y2U6IDEsXG4gICAgcHJvZHVjZWQ6IDEsXG4gICAgcHJvZHVjZXI6IDEsXG4gICAgcHJvZHVjZXJzOiAxLFxuICAgIHByb2R1Y2VzOiAxLFxuICAgIHByb2R1Y2luZzogMSxcbiAgICBwcm9kdWN0OiAxLFxuICAgIHByb2R1Y3Rpb246IDEsXG4gICAgcHJvZHVjdGlvbnM6IDEsXG4gICAgcHJvZHVjdGl2ZTogMSxcbiAgICBwcm9kdWN0aXZpdHk6IDEsXG4gICAgcHJvZHVjdHM6IDEsXG4gICAgcHJvZmVzc2lvbjogMSxcbiAgICBwcm9mZXNzaW9uYWw6IDEsXG4gICAgcHJvZmVzc2lvbmFsczogMSxcbiAgICBwcm9mZXNzb3I6IDEsXG4gICAgcHJvZmlsZTogMSxcbiAgICBwcm9maWxlczogMSxcbiAgICBwcm9maXQ6IDEsXG4gICAgcHJvZml0czogMSxcbiAgICBwcm9ncmFtOiAxLFxuICAgIHByb2dyYW1tZTogMSxcbiAgICBwcm9ncmFtbWVyOiAxLFxuICAgIHByb2dyYW1tZXJzOiAxLFxuICAgIHByb2dyYW1tZXM6IDEsXG4gICAgcHJvZ3JhbW1pbmc6IDEsXG4gICAgcHJvZ3JhbXM6IDEsXG4gICAgcHJvZ3Jlc3M6IDEsXG4gICAgcHJvZ3Jlc3NpdmU6IDEsXG4gICAgcHJvaGliaXRlZDogMSxcbiAgICBwcm9qZWN0OiAxLFxuICAgIHByb2plY3RlZDogMSxcbiAgICBwcm9qZWN0aW9uOiAxLFxuICAgIHByb2plY3RvcjogMSxcbiAgICBwcm9qZWN0b3JzOiAxLFxuICAgIHByb2plY3RzOiAxLFxuICAgIHByb21pbmVudDogMSxcbiAgICBwcm9taXNlOiAxLFxuICAgIHByb21pc2VkOiAxLFxuICAgIHByb21pc2VzOiAxLFxuICAgIHByb21pc2luZzogMSxcbiAgICBwcm9tbzogMSxcbiAgICBwcm9tb3RlOiAxLFxuICAgIHByb21vdGVkOiAxLFxuICAgIHByb21vdGVzOiAxLFxuICAgIHByb21vdGluZzogMSxcbiAgICBwcm9tb3Rpb246IDEsXG4gICAgcHJvbW90aW9uYWw6IDEsXG4gICAgcHJvbW90aW9uczogMSxcbiAgICBwcm9tcHQ6IDEsXG4gICAgcHJvbXB0bHk6IDEsXG4gICAgcHJvb2Y6IDEsXG4gICAgcHJvcGVjaWE6IDEsXG4gICAgcHJvcGVyOiAxLFxuICAgIHByb3Blcmx5OiAxLFxuICAgIHByb3BlcnRpZXM6IDEsXG4gICAgcHJvcGVydHk6IDEsXG4gICAgcHJvcGhldDogMSxcbiAgICBwcm9wb3J0aW9uOiAxLFxuICAgIHByb3Bvc2FsOiAxLFxuICAgIHByb3Bvc2FsczogMSxcbiAgICBwcm9wb3NlOiAxLFxuICAgIHByb3Bvc2VkOiAxLFxuICAgIHByb3Bvc2l0aW9uOiAxLFxuICAgIHByb3ByaWV0YXJ5OiAxLFxuICAgIHByb3M6IDEsXG4gICAgcHJvc3BlY3Q6IDEsXG4gICAgcHJvc3BlY3RpdmU6IDEsXG4gICAgcHJvc3BlY3RzOiAxLFxuICAgIHByb3N0YXRlOiAxLFxuICAgIHByb3N0b3JlczogMSxcbiAgICBwcm90OiAxLFxuICAgIHByb3RlY3Q6IDEsXG4gICAgcHJvdGVjdGVkOiAxLFxuICAgIHByb3RlY3Rpbmc6IDEsXG4gICAgcHJvdGVjdGlvbjogMSxcbiAgICBwcm90ZWN0aXZlOiAxLFxuICAgIHByb3RlaW46IDEsXG4gICAgcHJvdGVpbnM6IDEsXG4gICAgcHJvdGVzdDogMSxcbiAgICBwcm90b2NvbDogMSxcbiAgICBwcm90b2NvbHM6IDEsXG4gICAgcHJvdG90eXBlOiAxLFxuICAgIHByb3VkOiAxLFxuICAgIHByb3VkbHk6IDEsXG4gICAgcHJvdmU6IDEsXG4gICAgcHJvdmVkOiAxLFxuICAgIHByb3ZlbjogMSxcbiAgICBwcm92aWRlOiAxLFxuICAgIHByb3ZpZGVkOiAxLFxuICAgIHByb3ZpZGVuY2U6IDEsXG4gICAgcHJvdmlkZXI6IDEsXG4gICAgcHJvdmlkZXJzOiAxLFxuICAgIHByb3ZpZGVzOiAxLFxuICAgIHByb3ZpZGluZzogMSxcbiAgICBwcm92aW5jZTogMSxcbiAgICBwcm92aW5jZXM6IDEsXG4gICAgcHJvdmluY2lhbDogMSxcbiAgICBwcm92aXNpb246IDEsXG4gICAgcHJvdmlzaW9uczogMSxcbiAgICBwcm94eTogMSxcbiAgICBwcm96YWM6IDEsXG4gICAgcHM6IDEsXG4gICAgcHNpOiAxLFxuICAgIHBzcDogMSxcbiAgICBwc3Q6IDEsXG4gICAgcHN5Y2hpYXRyeTogMSxcbiAgICBwc3ljaG9sb2dpY2FsOiAxLFxuICAgIHBzeWNob2xvZ3k6IDEsXG4gICAgcHQ6IDEsXG4gICAgcHRzOiAxLFxuICAgIHB0eTogMSxcbiAgICBwdWI6IDEsXG4gICAgcHVibGljOiAxLFxuICAgIHB1YmxpY2F0aW9uOiAxLFxuICAgIHB1YmxpY2F0aW9uczogMSxcbiAgICBwdWJsaWNpdHk6IDEsXG4gICAgcHVibGljbHk6IDEsXG4gICAgcHVibGlzaDogMSxcbiAgICBwdWJsaXNoZWQ6IDEsXG4gICAgcHVibGlzaGVyOiAxLFxuICAgIHB1Ymxpc2hlcnM6IDEsXG4gICAgcHVibGlzaGluZzogMSxcbiAgICBwdWJtZWQ6IDEsXG4gICAgcHViczogMSxcbiAgICBwdWVydG86IDEsXG4gICAgcHVsbDogMSxcbiAgICBwdWxsZWQ6IDEsXG4gICAgcHVsbGluZzogMSxcbiAgICBwdWxzZTogMSxcbiAgICBwdW1wOiAxLFxuICAgIHB1bXBzOiAxLFxuICAgIHB1bmNoOiAxLFxuICAgIHB1bmlzaG1lbnQ6IDEsXG4gICAgcHVuazogMSxcbiAgICBwdXBpbHM6IDEsXG4gICAgcHVwcHk6IDEsXG4gICAgcHVyY2hhc2U6IDEsXG4gICAgcHVyY2hhc2VkOiAxLFxuICAgIHB1cmNoYXNlczogMSxcbiAgICBwdXJjaGFzaW5nOiAxLFxuICAgIHB1cmU6IDEsXG4gICAgcHVycGxlOiAxLFxuICAgIHB1cnBvc2U6IDEsXG4gICAgcHVycG9zZXM6IDEsXG4gICAgcHVyc2U6IDEsXG4gICAgcHVyc3VhbnQ6IDEsXG4gICAgcHVyc3VlOiAxLFxuICAgIHB1cnN1aXQ6IDEsXG4gICAgcHVzaDogMSxcbiAgICBwdXNoZWQ6IDEsXG4gICAgcHVzaGluZzogMSxcbiAgICBwdXNzeTogMSxcbiAgICBwdXQ6IDEsXG4gICAgcHV0czogMSxcbiAgICBwdXR0aW5nOiAxLFxuICAgIHB1enpsZTogMSxcbiAgICBwdXp6bGVzOiAxLFxuICAgIHB2YzogMSxcbiAgICBweXRob246IDEsXG4gICAgcTogMSxcbiAgICBxYXRhcjogMSxcbiAgICBxYzogMSxcbiAgICBxbGQ6IDEsXG4gICAgcXQ6IDEsXG4gICAgcXR5OiAxLFxuICAgIHF1YWQ6IDEsXG4gICAgcXVhbGlmaWNhdGlvbjogMSxcbiAgICBxdWFsaWZpY2F0aW9uczogMSxcbiAgICBxdWFsaWZpZWQ6IDEsXG4gICAgcXVhbGlmeTogMSxcbiAgICBxdWFsaWZ5aW5nOiAxLFxuICAgIHF1YWxpdGllczogMSxcbiAgICBxdWFsaXR5OiAxLFxuICAgIHF1YW50aXRhdGl2ZTogMSxcbiAgICBxdWFudGl0aWVzOiAxLFxuICAgIHF1YW50aXR5OiAxLFxuICAgIHF1YW50dW06IDEsXG4gICAgcXVhcnRlcjogMSxcbiAgICBxdWFydGVybHk6IDEsXG4gICAgcXVhcnRlcnM6IDEsXG4gICAgcXVlOiAxLFxuICAgIHF1ZWJlYzogMSxcbiAgICBxdWVlbjogMSxcbiAgICBxdWVlbnM6IDEsXG4gICAgcXVlZW5zbGFuZDogMSxcbiAgICBxdWVyaWVzOiAxLFxuICAgIHF1ZXJ5OiAxLFxuICAgIHF1ZXN0OiAxLFxuICAgIHF1ZXN0aW9uOiAxLFxuICAgIHF1ZXN0aW9ubmFpcmU6IDEsXG4gICAgcXVlc3Rpb25zOiAxLFxuICAgIHF1ZXVlOiAxLFxuICAgIHF1aTogMSxcbiAgICBxdWljazogMSxcbiAgICBxdWlja2x5OiAxLFxuICAgIHF1aWV0OiAxLFxuICAgIHF1aWx0OiAxLFxuICAgIHF1aXQ6IDEsXG4gICAgcXVpdGU6IDEsXG4gICAgcXVpejogMSxcbiAgICBxdWl6emVzOiAxLFxuICAgIHF1b3RhdGlvbnM6IDEsXG4gICAgcXVvdGU6IDEsXG4gICAgcXVvdGVkOiAxLFxuICAgIHF1b3RlczogMSxcbiAgICByOiAxLFxuICAgIHJhOiAxLFxuICAgIHJhYmJpdDogMSxcbiAgICByYWNlOiAxLFxuICAgIHJhY2VzOiAxLFxuICAgIHJhY2hlbDogMSxcbiAgICByYWNpYWw6IDEsXG4gICAgcmFjaW5nOiAxLFxuICAgIHJhY2s6IDEsXG4gICAgcmFja3M6IDEsXG4gICAgcmFkYXI6IDEsXG4gICAgcmFkaWF0aW9uOiAxLFxuICAgIHJhZGljYWw6IDEsXG4gICAgcmFkaW86IDEsXG4gICAgcmFkaW9zOiAxLFxuICAgIHJhZGl1czogMSxcbiAgICByYWdlOiAxLFxuICAgIHJhaWQ6IDEsXG4gICAgcmFpbDogMSxcbiAgICByYWlscm9hZDogMSxcbiAgICByYWlsd2F5OiAxLFxuICAgIHJhaW46IDEsXG4gICAgcmFpbmJvdzogMSxcbiAgICByYWlzZTogMSxcbiAgICByYWlzZWQ6IDEsXG4gICAgcmFpc2VzOiAxLFxuICAgIHJhaXNpbmc6IDEsXG4gICAgcmFsZWlnaDogMSxcbiAgICByYWxseTogMSxcbiAgICByYWxwaDogMSxcbiAgICByYW06IDEsXG4gICAgcmFuOiAxLFxuICAgIHJhbmNoOiAxLFxuICAgIHJhbmQ6IDEsXG4gICAgcmFuZG9tOiAxLFxuICAgIHJhbmR5OiAxLFxuICAgIHJhbmdlOiAxLFxuICAgIHJhbmdlcjogMSxcbiAgICByYW5nZXJzOiAxLFxuICAgIHJhbmdlczogMSxcbiAgICByYW5naW5nOiAxLFxuICAgIHJhbms6IDEsXG4gICAgcmFua2VkOiAxLFxuICAgIHJhbmtpbmc6IDEsXG4gICAgcmFua2luZ3M6IDEsXG4gICAgcmFua3M6IDEsXG4gICAgcmFwOiAxLFxuICAgIHJhcGU6IDEsXG4gICAgcmFwaWQ6IDEsXG4gICAgcmFwaWRseTogMSxcbiAgICByYXBpZHM6IDEsXG4gICAgcmFyZTogMSxcbiAgICByYXJlbHk6IDEsXG4gICAgcmF0OiAxLFxuICAgIHJhdGU6IDEsXG4gICAgcmF0ZWQ6IDEsXG4gICAgcmF0ZXM6IDEsXG4gICAgcmF0aGVyOiAxLFxuICAgIHJhdGluZzogMSxcbiAgICByYXRpbmdzOiAxLFxuICAgIHJhdGlvOiAxLFxuICAgIHJhdGlvbmFsOiAxLFxuICAgIHJhdGlvczogMSxcbiAgICByYXRzOiAxLFxuICAgIHJhdzogMSxcbiAgICByYXk6IDEsXG4gICAgcmF5bW9uZDogMSxcbiAgICByYXlzOiAxLFxuICAgIHJiOiAxLFxuICAgIHJjOiAxLFxuICAgIHJjYTogMSxcbiAgICByZDogMSxcbiAgICByZTogMSxcbiAgICByZWFjaDogMSxcbiAgICByZWFjaGVkOiAxLFxuICAgIHJlYWNoZXM6IDEsXG4gICAgcmVhY2hpbmc6IDEsXG4gICAgcmVhY3Rpb246IDEsXG4gICAgcmVhY3Rpb25zOiAxLFxuICAgIHJlYWQ6IDEsXG4gICAgcmVhZGVyOiAxLFxuICAgIHJlYWRlcnM6IDEsXG4gICAgcmVhZGlseTogMSxcbiAgICByZWFkaW5nOiAxLFxuICAgIHJlYWRpbmdzOiAxLFxuICAgIHJlYWRzOiAxLFxuICAgIHJlYWR5OiAxLFxuICAgIHJlYWw6IDEsXG4gICAgcmVhbGlzdGljOiAxLFxuICAgIHJlYWxpdHk6IDEsXG4gICAgcmVhbGl6ZTogMSxcbiAgICByZWFsaXplZDogMSxcbiAgICByZWFsbHk6IDEsXG4gICAgcmVhbG06IDEsXG4gICAgcmVhbHRvcjogMSxcbiAgICByZWFsdG9yczogMSxcbiAgICByZWFsdHk6IDEsXG4gICAgcmVhcjogMSxcbiAgICByZWFzb246IDEsXG4gICAgcmVhc29uYWJsZTogMSxcbiAgICByZWFzb25hYmx5OiAxLFxuICAgIHJlYXNvbmluZzogMSxcbiAgICByZWFzb25zOiAxLFxuICAgIHJlYmF0ZTogMSxcbiAgICByZWJhdGVzOiAxLFxuICAgIHJlYmVjY2E6IDEsXG4gICAgcmViZWw6IDEsXG4gICAgcmVib3VuZDogMSxcbiAgICByZWM6IDEsXG4gICAgcmVjYWxsOiAxLFxuICAgIHJlY2VpcHQ6IDEsXG4gICAgcmVjZWl2ZTogMSxcbiAgICByZWNlaXZlZDogMSxcbiAgICByZWNlaXZlcjogMSxcbiAgICByZWNlaXZlcnM6IDEsXG4gICAgcmVjZWl2ZXM6IDEsXG4gICAgcmVjZWl2aW5nOiAxLFxuICAgIHJlY2VudDogMSxcbiAgICByZWNlbnRseTogMSxcbiAgICByZWNlcHRpb246IDEsXG4gICAgcmVjZXB0b3I6IDEsXG4gICAgcmVjZXB0b3JzOiAxLFxuICAgIHJlY2lwZTogMSxcbiAgICByZWNpcGVzOiAxLFxuICAgIHJlY2lwaWVudDogMSxcbiAgICByZWNpcGllbnRzOiAxLFxuICAgIHJlY29nbmlzZWQ6IDEsXG4gICAgcmVjb2duaXRpb246IDEsXG4gICAgcmVjb2duaXplOiAxLFxuICAgIHJlY29nbml6ZWQ6IDEsXG4gICAgcmVjb21tZW5kOiAxLFxuICAgIHJlY29tbWVuZGF0aW9uOiAxLFxuICAgIHJlY29tbWVuZGF0aW9uczogMSxcbiAgICByZWNvbW1lbmRlZDogMSxcbiAgICByZWNvbW1lbmRzOiAxLFxuICAgIHJlY29uc3RydWN0aW9uOiAxLFxuICAgIHJlY29yZDogMSxcbiAgICByZWNvcmRlZDogMSxcbiAgICByZWNvcmRlcjogMSxcbiAgICByZWNvcmRlcnM6IDEsXG4gICAgcmVjb3JkaW5nOiAxLFxuICAgIHJlY29yZGluZ3M6IDEsXG4gICAgcmVjb3JkczogMSxcbiAgICByZWNvdmVyOiAxLFxuICAgIHJlY292ZXJlZDogMSxcbiAgICByZWNvdmVyeTogMSxcbiAgICByZWNyZWF0aW9uOiAxLFxuICAgIHJlY3JlYXRpb25hbDogMSxcbiAgICByZWNydWl0aW5nOiAxLFxuICAgIHJlY3J1aXRtZW50OiAxLFxuICAgIHJlY3ljbGluZzogMSxcbiAgICByZWQ6IDEsXG4gICAgcmVkZWVtOiAxLFxuICAgIHJlZGhlYWQ6IDEsXG4gICAgcmVkdWNlOiAxLFxuICAgIHJlZHVjZWQ6IDEsXG4gICAgcmVkdWNlczogMSxcbiAgICByZWR1Y2luZzogMSxcbiAgICByZWR1Y3Rpb246IDEsXG4gICAgcmVkdWN0aW9uczogMSxcbiAgICByZWVkOiAxLFxuICAgIHJlZWY6IDEsXG4gICAgcmVlbDogMSxcbiAgICByZWY6IDEsXG4gICAgcmVmZXI6IDEsXG4gICAgcmVmZXJlbmNlOiAxLFxuICAgIHJlZmVyZW5jZWQ6IDEsXG4gICAgcmVmZXJlbmNlczogMSxcbiAgICByZWZlcnJhbDogMSxcbiAgICByZWZlcnJhbHM6IDEsXG4gICAgcmVmZXJyZWQ6IDEsXG4gICAgcmVmZXJyaW5nOiAxLFxuICAgIHJlZmVyczogMSxcbiAgICByZWZpbmFuY2U6IDEsXG4gICAgcmVmaW5lOiAxLFxuICAgIHJlZmluZWQ6IDEsXG4gICAgcmVmbGVjdDogMSxcbiAgICByZWZsZWN0ZWQ6IDEsXG4gICAgcmVmbGVjdGlvbjogMSxcbiAgICByZWZsZWN0aW9uczogMSxcbiAgICByZWZsZWN0czogMSxcbiAgICByZWZvcm06IDEsXG4gICAgcmVmb3JtczogMSxcbiAgICByZWZyZXNoOiAxLFxuICAgIHJlZnJpZ2VyYXRvcjogMSxcbiAgICByZWZ1Z2VlczogMSxcbiAgICByZWZ1bmQ6IDEsXG4gICAgcmVmdXJiaXNoZWQ6IDEsXG4gICAgcmVmdXNlOiAxLFxuICAgIHJlZnVzZWQ6IDEsXG4gICAgcmVnOiAxLFxuICAgIHJlZ2FyZDogMSxcbiAgICByZWdhcmRlZDogMSxcbiAgICByZWdhcmRpbmc6IDEsXG4gICAgcmVnYXJkbGVzczogMSxcbiAgICByZWdhcmRzOiAxLFxuICAgIHJlZ2dhZTogMSxcbiAgICByZWdpbWU6IDEsXG4gICAgcmVnaW9uOiAxLFxuICAgIHJlZ2lvbmFsOiAxLFxuICAgIHJlZ2lvbnM6IDEsXG4gICAgcmVnaXN0ZXI6IDEsXG4gICAgcmVnaXN0ZXJlZDogMSxcbiAgICByZWdpc3RyYXI6IDEsXG4gICAgcmVnaXN0cmF0aW9uOiAxLFxuICAgIHJlZ2lzdHJ5OiAxLFxuICAgIHJlZ3Jlc3Npb246IDEsXG4gICAgcmVndWxhcjogMSxcbiAgICByZWd1bGFybHk6IDEsXG4gICAgcmVndWxhdGVkOiAxLFxuICAgIHJlZ3VsYXRpb246IDEsXG4gICAgcmVndWxhdGlvbnM6IDEsXG4gICAgcmVndWxhdG9yeTogMSxcbiAgICByZWhhYjogMSxcbiAgICByZWhhYmlsaXRhdGlvbjogMSxcbiAgICByZWlkOiAxLFxuICAgIHJlamVjdDogMSxcbiAgICByZWplY3RlZDogMSxcbiAgICByZWxhdGU6IDEsXG4gICAgcmVsYXRlZDogMSxcbiAgICByZWxhdGVzOiAxLFxuICAgIHJlbGF0aW5nOiAxLFxuICAgIHJlbGF0aW9uOiAxLFxuICAgIHJlbGF0aW9uczogMSxcbiAgICByZWxhdGlvbnNoaXA6IDEsXG4gICAgcmVsYXRpb25zaGlwczogMSxcbiAgICByZWxhdGl2ZTogMSxcbiAgICByZWxhdGl2ZWx5OiAxLFxuICAgIHJlbGF0aXZlczogMSxcbiAgICByZWxheDogMSxcbiAgICByZWxheGF0aW9uOiAxLFxuICAgIHJlbGF5OiAxLFxuICAgIHJlbGVhc2U6IDEsXG4gICAgcmVsZWFzZWQ6IDEsXG4gICAgcmVsZWFzZXM6IDEsXG4gICAgcmVsZXZhbmNlOiAxLFxuICAgIHJlbGV2YW50OiAxLFxuICAgIHJlbGlhYmlsaXR5OiAxLFxuICAgIHJlbGlhYmxlOiAxLFxuICAgIHJlbGlhbmNlOiAxLFxuICAgIHJlbGllZjogMSxcbiAgICByZWxpZ2lvbjogMSxcbiAgICByZWxpZ2lvbnM6IDEsXG4gICAgcmVsaWdpb3VzOiAxLFxuICAgIHJlbG9hZDogMSxcbiAgICByZWxvY2F0aW9uOiAxLFxuICAgIHJlbHk6IDEsXG4gICAgcmVseWluZzogMSxcbiAgICByZW1haW46IDEsXG4gICAgcmVtYWluZGVyOiAxLFxuICAgIHJlbWFpbmVkOiAxLFxuICAgIHJlbWFpbmluZzogMSxcbiAgICByZW1haW5zOiAxLFxuICAgIHJlbWFyazogMSxcbiAgICByZW1hcmthYmxlOiAxLFxuICAgIHJlbWFya3M6IDEsXG4gICAgcmVtZWRpZXM6IDEsXG4gICAgcmVtZWR5OiAxLFxuICAgIHJlbWVtYmVyOiAxLFxuICAgIHJlbWVtYmVyZWQ6IDEsXG4gICAgcmVtaW5kOiAxLFxuICAgIHJlbWluZGVyOiAxLFxuICAgIHJlbWl4OiAxLFxuICAgIHJlbW90ZTogMSxcbiAgICByZW1vdmFibGU6IDEsXG4gICAgcmVtb3ZhbDogMSxcbiAgICByZW1vdmU6IDEsXG4gICAgcmVtb3ZlZDogMSxcbiAgICByZW1vdmluZzogMSxcbiAgICByZW5haXNzYW5jZTogMSxcbiAgICByZW5kZXI6IDEsXG4gICAgcmVuZGVyZWQ6IDEsXG4gICAgcmVuZGVyaW5nOiAxLFxuICAgIHJlbmV3OiAxLFxuICAgIHJlbmV3YWJsZTogMSxcbiAgICByZW5ld2FsOiAxLFxuICAgIHJlbm86IDEsXG4gICAgcmVudDogMSxcbiAgICByZW50YWw6IDEsXG4gICAgcmVudGFsczogMSxcbiAgICByZXA6IDEsXG4gICAgcmVwYWlyOiAxLFxuICAgIHJlcGFpcnM6IDEsXG4gICAgcmVwZWF0OiAxLFxuICAgIHJlcGVhdGVkOiAxLFxuICAgIHJlcGxhY2U6IDEsXG4gICAgcmVwbGFjZWQ6IDEsXG4gICAgcmVwbGFjZW1lbnQ6IDEsXG4gICAgcmVwbGFjaW5nOiAxLFxuICAgIHJlcGxpY2E6IDEsXG4gICAgcmVwbGljYXRpb246IDEsXG4gICAgcmVwbGllZDogMSxcbiAgICByZXBsaWVzOiAxLFxuICAgIHJlcGx5OiAxLFxuICAgIHJlcG9ydDogMSxcbiAgICByZXBvcnRlZDogMSxcbiAgICByZXBvcnRlcjogMSxcbiAgICByZXBvcnRlcnM6IDEsXG4gICAgcmVwb3J0aW5nOiAxLFxuICAgIHJlcG9ydHM6IDEsXG4gICAgcmVwb3NpdG9yeTogMSxcbiAgICByZXByZXNlbnQ6IDEsXG4gICAgcmVwcmVzZW50YXRpb246IDEsXG4gICAgcmVwcmVzZW50YXRpb25zOiAxLFxuICAgIHJlcHJlc2VudGF0aXZlOiAxLFxuICAgIHJlcHJlc2VudGF0aXZlczogMSxcbiAgICByZXByZXNlbnRlZDogMSxcbiAgICByZXByZXNlbnRpbmc6IDEsXG4gICAgcmVwcmVzZW50czogMSxcbiAgICByZXByaW50OiAxLFxuICAgIHJlcHJpbnRzOiAxLFxuICAgIHJlcHJvZHVjZTogMSxcbiAgICByZXByb2R1Y2VkOiAxLFxuICAgIHJlcHJvZHVjdGlvbjogMSxcbiAgICByZXByb2R1Y3RpdmU6IDEsXG4gICAgcmVwdWJsaWM6IDEsXG4gICAgcmVwdWJsaWNhbjogMSxcbiAgICByZXB1YmxpY2FuczogMSxcbiAgICByZXB1dGF0aW9uOiAxLFxuICAgIHJlcXVlc3Q6IDEsXG4gICAgcmVxdWVzdGVkOiAxLFxuICAgIHJlcXVlc3Rpbmc6IDEsXG4gICAgcmVxdWVzdHM6IDEsXG4gICAgcmVxdWlyZTogMSxcbiAgICByZXF1aXJlZDogMSxcbiAgICByZXF1aXJlbWVudDogMSxcbiAgICByZXF1aXJlbWVudHM6IDEsXG4gICAgcmVxdWlyZXM6IDEsXG4gICAgcmVxdWlyaW5nOiAxLFxuICAgIHJlczogMSxcbiAgICByZXNjdWU6IDEsXG4gICAgcmVzZWFyY2g6IDEsXG4gICAgcmVzZWFyY2hlcjogMSxcbiAgICByZXNlYXJjaGVyczogMSxcbiAgICByZXNlbGxlcjogMSxcbiAgICByZXNlcnZhdGlvbjogMSxcbiAgICByZXNlcnZhdGlvbnM6IDEsXG4gICAgcmVzZXJ2ZTogMSxcbiAgICByZXNlcnZlZDogMSxcbiAgICByZXNlcnZlczogMSxcbiAgICByZXNlcnZvaXI6IDEsXG4gICAgcmVzZXQ6IDEsXG4gICAgcmVzaWRlbmNlOiAxLFxuICAgIHJlc2lkZW50OiAxLFxuICAgIHJlc2lkZW50aWFsOiAxLFxuICAgIHJlc2lkZW50czogMSxcbiAgICByZXNpc3Q6IDEsXG4gICAgcmVzaXN0YW5jZTogMSxcbiAgICByZXNpc3RhbnQ6IDEsXG4gICAgcmVzb2x1dGlvbjogMSxcbiAgICByZXNvbHV0aW9uczogMSxcbiAgICByZXNvbHZlOiAxLFxuICAgIHJlc29sdmVkOiAxLFxuICAgIHJlc29ydDogMSxcbiAgICByZXNvcnRzOiAxLFxuICAgIHJlc291cmNlOiAxLFxuICAgIHJlc291cmNlczogMSxcbiAgICByZXNwZWN0OiAxLFxuICAgIHJlc3BlY3RlZDogMSxcbiAgICByZXNwZWN0aXZlOiAxLFxuICAgIHJlc3BlY3RpdmVseTogMSxcbiAgICByZXNwaXJhdG9yeTogMSxcbiAgICByZXNwb25kOiAxLFxuICAgIHJlc3BvbmRlZDogMSxcbiAgICByZXNwb25kZW50OiAxLFxuICAgIHJlc3BvbmRlbnRzOiAxLFxuICAgIHJlc3BvbmRpbmc6IDEsXG4gICAgcmVzcG9uc2U6IDEsXG4gICAgcmVzcG9uc2VzOiAxLFxuICAgIHJlc3BvbnNpYmlsaXRpZXM6IDEsXG4gICAgcmVzcG9uc2liaWxpdHk6IDEsXG4gICAgcmVzcG9uc2libGU6IDEsXG4gICAgcmVzdDogMSxcbiAgICByZXN0YXVyYW50OiAxLFxuICAgIHJlc3RhdXJhbnRzOiAxLFxuICAgIHJlc3RvcmF0aW9uOiAxLFxuICAgIHJlc3RvcmU6IDEsXG4gICAgcmVzdG9yZWQ6IDEsXG4gICAgcmVzdHJpY3Q6IDEsXG4gICAgcmVzdHJpY3RlZDogMSxcbiAgICByZXN0cmljdGlvbjogMSxcbiAgICByZXN0cmljdGlvbnM6IDEsXG4gICAgcmVzdHJ1Y3R1cmluZzogMSxcbiAgICByZXN1bHQ6IDEsXG4gICAgcmVzdWx0ZWQ6IDEsXG4gICAgcmVzdWx0aW5nOiAxLFxuICAgIHJlc3VsdHM6IDEsXG4gICAgcmVzdW1lOiAxLFxuICAgIHJlc3VtZXM6IDEsXG4gICAgcmV0YWlsOiAxLFxuICAgIHJldGFpbGVyOiAxLFxuICAgIHJldGFpbGVyczogMSxcbiAgICByZXRhaW46IDEsXG4gICAgcmV0YWluZWQ6IDEsXG4gICAgcmV0ZW50aW9uOiAxLFxuICAgIHJldGlyZWQ6IDEsXG4gICAgcmV0aXJlbWVudDogMSxcbiAgICByZXRyZWF0OiAxLFxuICAgIHJldHJpZXZhbDogMSxcbiAgICByZXRyaWV2ZTogMSxcbiAgICByZXRyaWV2ZWQ6IDEsXG4gICAgcmV0cm86IDEsXG4gICAgcmV0dXJuOiAxLFxuICAgIHJldHVybmVkOiAxLFxuICAgIHJldHVybmluZzogMSxcbiAgICByZXR1cm5zOiAxLFxuICAgIHJldW5pb246IDEsXG4gICAgcmV1dGVyczogMSxcbiAgICByZXY6IDEsXG4gICAgcmV2ZWFsOiAxLFxuICAgIHJldmVhbGVkOiAxLFxuICAgIHJldmVhbHM6IDEsXG4gICAgcmV2ZWxhdGlvbjogMSxcbiAgICByZXZlbmdlOiAxLFxuICAgIHJldmVudWU6IDEsXG4gICAgcmV2ZW51ZXM6IDEsXG4gICAgcmV2ZXJzZTogMSxcbiAgICByZXZpZXc6IDEsXG4gICAgcmV2aWV3ZWQ6IDEsXG4gICAgcmV2aWV3ZXI6IDEsXG4gICAgcmV2aWV3aW5nOiAxLFxuICAgIHJldmlld3M6IDEsXG4gICAgcmV2aXNlZDogMSxcbiAgICByZXZpc2lvbjogMSxcbiAgICByZXZpc2lvbnM6IDEsXG4gICAgcmV2b2x1dGlvbjogMSxcbiAgICByZXZvbHV0aW9uYXJ5OiAxLFxuICAgIHJld2FyZDogMSxcbiAgICByZXdhcmRzOiAxLFxuICAgIHJleW5vbGRzOiAxLFxuICAgIHJmOiAxLFxuICAgIHJmYzogMSxcbiAgICByZzogMSxcbiAgICByaDogMSxcbiAgICByaG9kZTogMSxcbiAgICByaHl0aG06IDEsXG4gICAgcmk6IDEsXG4gICAgcmliYm9uOiAxLFxuICAgIHJpY2E6IDEsXG4gICAgcmljZTogMSxcbiAgICByaWNoOiAxLFxuICAgIHJpY2hhcmQ6IDEsXG4gICAgcmljaGFyZHM6IDEsXG4gICAgcmljaGFyZHNvbjogMSxcbiAgICByaWNobW9uZDogMSxcbiAgICByaWNrOiAxLFxuICAgIHJpY2t5OiAxLFxuICAgIHJpY286IDEsXG4gICAgcmlkOiAxLFxuICAgIHJpZGU6IDEsXG4gICAgcmlkZXI6IDEsXG4gICAgcmlkZXJzOiAxLFxuICAgIHJpZGVzOiAxLFxuICAgIHJpZGdlOiAxLFxuICAgIHJpZGluZzogMSxcbiAgICByaWdodDogMSxcbiAgICByaWdodHM6IDEsXG4gICAgcmltOiAxLFxuICAgIHJpbmc6IDEsXG4gICAgcmluZ3M6IDEsXG4gICAgcmluZ3RvbmU6IDEsXG4gICAgcmluZ3RvbmVzOiAxLFxuICAgIHJpbzogMSxcbiAgICByaXA6IDEsXG4gICAgcmlwZTogMSxcbiAgICByaXNlOiAxLFxuICAgIHJpc2luZzogMSxcbiAgICByaXNrOiAxLFxuICAgIHJpc2tzOiAxLFxuICAgIHJpdmVyOiAxLFxuICAgIHJpdmVyczogMSxcbiAgICByaXZlcnNpZGU6IDEsXG4gICAgcmo6IDEsXG4gICAgcmw6IDEsXG4gICAgcm06IDEsXG4gICAgcm46IDEsXG4gICAgcm5hOiAxLFxuICAgIHJvOiAxLFxuICAgIHJvYWQ6IDEsXG4gICAgcm9hZHM6IDEsXG4gICAgcm9iOiAxLFxuICAgIHJvYmJpZTogMSxcbiAgICByb2JlcnQ6IDEsXG4gICAgcm9iZXJ0czogMSxcbiAgICByb2JlcnRzb246IDEsXG4gICAgcm9iaW46IDEsXG4gICAgcm9iaW5zb246IDEsXG4gICAgcm9ib3Q6IDEsXG4gICAgcm9ib3RzOiAxLFxuICAgIHJvYnVzdDogMSxcbiAgICByb2NoZXN0ZXI6IDEsXG4gICAgcm9jazogMSxcbiAgICByb2NrZXQ6IDEsXG4gICAgcm9ja3M6IDEsXG4gICAgcm9ja3k6IDEsXG4gICAgcm9kOiAxLFxuICAgIHJvZ2VyOiAxLFxuICAgIHJvZ2VyczogMSxcbiAgICByb2xhbmQ6IDEsXG4gICAgcm9sZTogMSxcbiAgICByb2xlczogMSxcbiAgICByb2xsOiAxLFxuICAgIHJvbGxlZDogMSxcbiAgICByb2xsZXI6IDEsXG4gICAgcm9sbGluZzogMSxcbiAgICByb2xsczogMSxcbiAgICByb206IDEsXG4gICAgcm9tYW46IDEsXG4gICAgcm9tYW5jZTogMSxcbiAgICByb21hbmlhOiAxLFxuICAgIHJvbWFudGljOiAxLFxuICAgIHJvbWU6IDEsXG4gICAgcm9uOiAxLFxuICAgIHJvbmFsZDogMSxcbiAgICByb29mOiAxLFxuICAgIHJvb206IDEsXG4gICAgcm9vbW1hdGU6IDEsXG4gICAgcm9vbW1hdGVzOiAxLFxuICAgIHJvb21zOiAxLFxuICAgIHJvb3Q6IDEsXG4gICAgcm9vdHM6IDEsXG4gICAgcm9wZTogMSxcbiAgICByb3NhOiAxLFxuICAgIHJvc2U6IDEsXG4gICAgcm9zZXM6IDEsXG4gICAgcm9zczogMSxcbiAgICByb3N0ZXI6IDEsXG4gICAgcm90YXJ5OiAxLFxuICAgIHJvdGF0aW9uOiAxLFxuICAgIHJvdWdlOiAxLFxuICAgIHJvdWdoOiAxLFxuICAgIHJvdWdobHk6IDEsXG4gICAgcm91bGV0dGU6IDEsXG4gICAgcm91bmQ6IDEsXG4gICAgcm91bmRzOiAxLFxuICAgIHJvdXRlOiAxLFxuICAgIHJvdXRlcjogMSxcbiAgICByb3V0ZXJzOiAxLFxuICAgIHJvdXRlczogMSxcbiAgICByb3V0aW5lOiAxLFxuICAgIHJvdXRpbmVzOiAxLFxuICAgIHJvdXRpbmc6IDEsXG4gICAgcm92ZXI6IDEsXG4gICAgcm93OiAxLFxuICAgIHJvd3M6IDEsXG4gICAgcm95OiAxLFxuICAgIHJveWFsOiAxLFxuICAgIHJveWFsdHk6IDEsXG4gICAgcnA6IDEsXG4gICAgcnBnOiAxLFxuICAgIHJwbTogMSxcbiAgICBycjogMSxcbiAgICBycnA6IDEsXG4gICAgcnM6IDEsXG4gICAgcnNzOiAxLFxuICAgIHJ0OiAxLFxuICAgIHJ1OiAxLFxuICAgIHJ1YmJlcjogMSxcbiAgICBydWJ5OiAxLFxuICAgIHJ1ZzogMSxcbiAgICBydWdieTogMSxcbiAgICBydWdzOiAxLFxuICAgIHJ1bGU6IDEsXG4gICAgcnVsZWQ6IDEsXG4gICAgcnVsZXM6IDEsXG4gICAgcnVsaW5nOiAxLFxuICAgIHJ1bjogMSxcbiAgICBydW5uZXI6IDEsXG4gICAgcnVubmluZzogMSxcbiAgICBydW5zOiAxLFxuICAgIHJ1bnRpbWU6IDEsXG4gICAgcnVyYWw6IDEsXG4gICAgcnVzaDogMSxcbiAgICBydXNzZWxsOiAxLFxuICAgIHJ1c3NpYTogMSxcbiAgICBydXNzaWFuOiAxLFxuICAgIHJ1dGg6IDEsXG4gICAgcnY6IDEsXG4gICAgcnc6IDEsXG4gICAgcndhbmRhOiAxLFxuICAgIHJ4OiAxLFxuICAgIHJ5YW46IDEsXG5cbn07XG4iLCIvLyBodHRwczovL2VuZ2xpc2hncmFtbWFyaGVyZS5jb20vdm9jYWJ1bGFyeS8xMDAwMC1tb3N0LWNvbW1vbi13b3Jkcy1pbi1lbmdsaXNoLXBhcnQtNS9cbmV4cG9ydCBjb25zdCBUaGVNb3N0Q29tbW9uMTAwMDAgPSB7XG4gICAgczogMSxcbiAgICBzYTogMSxcbiAgICBzYWNyYW1lbnRvOiAxLFxuICAgIHNhY3JlZDogMSxcbiAgICBzYWNyaWZpY2U6IDEsXG4gICAgc2FkOiAxLFxuICAgIHNhZGRhbTogMSxcbiAgICBzYWZhcmk6IDEsXG4gICAgc2FmZTogMSxcbiAgICBzYWZlbHk6IDEsXG4gICAgc2FmZXI6IDEsXG4gICAgc2FmZXR5OiAxLFxuICAgIHNhZ2U6IDEsXG4gICAgc2FnZW06IDEsXG4gICAgc2FpZDogMSxcbiAgICBzYWlsOiAxLFxuICAgIHNhaWxpbmc6IDEsXG4gICAgc2FpbnQ6IDEsXG4gICAgc2FpbnRzOiAxLFxuICAgIHNha2U6IDEsXG4gICAgc2FsYWQ6IDEsXG4gICAgc2FsYXJpZXM6IDEsXG4gICAgc2FsYXJ5OiAxLFxuICAgIHNhbGU6IDEsXG4gICAgc2FsZW06IDEsXG4gICAgc2FsZXM6IDEsXG4gICAgc2FsbHk6IDEsXG4gICAgc2FsbW9uOiAxLFxuICAgIHNhbG9uOiAxLFxuICAgIHNhbHQ6IDEsXG4gICAgc2FsdmFkb3I6IDEsXG4gICAgc2FsdmF0aW9uOiAxLFxuICAgIHNhbTogMSxcbiAgICBzYW1iYTogMSxcbiAgICBzYW1lOiAxLFxuICAgIHNhbW9hOiAxLFxuICAgIHNhbXBsZTogMSxcbiAgICBzYW1wbGVzOiAxLFxuICAgIHNhbXBsaW5nOiAxLFxuICAgIHNhbXN1bmc6IDEsXG4gICAgc2FtdWVsOiAxLFxuICAgIHNhbjogMSxcbiAgICBzYW5kOiAxLFxuICAgIHNhbmRyYTogMSxcbiAgICBzYW5kd2ljaDogMSxcbiAgICBzYW5keTogMSxcbiAgICBzYW5zOiAxLFxuICAgIHNhbnRhOiAxLFxuICAgIHNhbnlvOiAxLFxuICAgIHNhbzogMSxcbiAgICBzYXA6IDEsXG4gICAgc2FwcGhpcmU6IDEsXG4gICAgc2FyYTogMSxcbiAgICBzYXJhaDogMSxcbiAgICBzYXM6IDEsXG4gICAgc2Fza2F0Y2hld2FuOiAxLFxuICAgIHNhdDogMSxcblxuXG5cblxuXG5cblxuICAgIHNhdGVsbGl0ZTogMSxcbiAgICBzYXRpbjogMSxcbiAgICBzYXRpc2ZhY3Rpb246IDEsXG4gICAgc2F0aXNmYWN0b3J5OiAxLFxuICAgIHNhdGlzZmllZDogMSxcbiAgICBzYXRpc2Z5OiAxLFxuICAgIHNhdHVyZGF5OiAxLFxuICAgIHNhdHVybjogMSxcbiAgICBzYXVjZTogMSxcbiAgICBzYXVkaTogMSxcbiAgICBzYXZhZ2U6IDEsXG4gICAgc2F2YW5uYWg6IDEsXG4gICAgc2F2ZTogMSxcbiAgICBzYXZlZDogMSxcbiAgICBzYXZlcjogMSxcbiAgICBzYXZlczogMSxcbiAgICBzYXZpbmc6IDEsXG4gICAgc2F2aW5nczogMSxcbiAgICBzYXc6IDEsXG4gICAgc2F5OiAxLFxuICAgIHNheWluZzogMSxcbiAgICBzYXlzOiAxLFxuICAgIHNiOiAxLFxuICAgIHNiamN0OiAxLFxuICAgIHNjOiAxLFxuICAgIHNjYWxlOiAxLFxuICAgIHNjYWxlczogMSxcbiAgICBzY2FuOiAxLFxuICAgIHNjYW5uZWQ6IDEsXG4gICAgc2Nhbm5lcjogMSxcbiAgICBzY2FubmVyczogMSxcbiAgICBzY2FubmluZzogMSxcbiAgICBzY2FyZWQ6IDEsXG4gICAgc2Nhcnk6IDEsXG4gICAgc2NlbmFyaW86IDEsXG4gICAgc2NlbmFyaW9zOiAxLFxuICAgIHNjZW5lOiAxLFxuICAgIHNjZW5lczogMSxcbiAgICBzY2VuaWM6IDEsXG4gICAgc2NoZWR1bGU6IDEsXG4gICAgc2NoZWR1bGVkOiAxLFxuICAgIHNjaGVkdWxlczogMSxcbiAgICBzY2hlZHVsaW5nOiAxLFxuICAgIHNjaGVtYTogMSxcbiAgICBzY2hlbWU6IDEsXG4gICAgc2NoZW1lczogMSxcbiAgICBzY2hvbGFyOiAxLFxuICAgIHNjaG9sYXJzOiAxLFxuICAgIHNjaG9sYXJzaGlwOiAxLFxuICAgIHNjaG9sYXJzaGlwczogMSxcbiAgICBzY2hvb2w6IDEsXG4gICAgc2Nob29sczogMSxcbiAgICBzY2k6IDEsXG4gICAgc2NpZW5jZTogMSxcbiAgICBzY2llbmNlczogMSxcbiAgICBzY2llbnRpZmljOiAxLFxuICAgIHNjaWVudGlzdDogMSxcbiAgICBzY2llbnRpc3RzOiAxLFxuICAgIHNjb29wOiAxLFxuICAgIHNjb3BlOiAxLFxuICAgIHNjb3JlOiAxLFxuICAgIHNjb3JlZDogMSxcbiAgICBzY29yZXM6IDEsXG4gICAgc2NvcmluZzogMSxcbiAgICBzY290aWE6IDEsXG4gICAgc2NvdGxhbmQ6IDEsXG4gICAgc2NvdHQ6IDEsXG4gICAgc2NvdHRpc2g6IDEsXG4gICAgc2NvdXQ6IDEsXG4gICAgc2NyYXRjaDogMSxcbiAgICBzY3JlZW46IDEsXG4gICAgc2NyZWVuaW5nOiAxLFxuICAgIHNjcmVlbnM6IDEsXG4gICAgc2NyZWVuc2F2ZXI6IDEsXG4gICAgc2NyZWVuc2F2ZXJzOiAxLFxuICAgIHNjcmVlbnNob3Q6IDEsXG4gICAgc2NyZWVuc2hvdHM6IDEsXG4gICAgc2NyZXc6IDEsXG4gICAgc2NyaXB0OiAxLFxuICAgIHNjcmlwdGluZzogMSxcbiAgICBzY3JpcHRzOiAxLFxuICAgIHNjcm9sbDogMSxcbiAgICBzY3NpOiAxLFxuICAgIHNjdWJhOiAxLFxuICAgIHNjdWxwdHVyZTogMSxcbiAgICBzZDogMSxcbiAgICBzZTogMSxcbiAgICBzZWE6IDEsXG4gICAgc2VhZm9vZDogMSxcbiAgICBzZWFsOiAxLFxuICAgIHNlYWxlZDogMSxcbiAgICBzZWFuOiAxLFxuICAgIHNlYXJjaDogMSxcbiAgICBzZWFyY2hlZDogMSxcbiAgICBzZWFyY2hlczogMSxcbiAgICBzZWFyY2hpbmc6IDEsXG4gICAgc2VhczogMSxcbiAgICBzZWFzb246IDEsXG4gICAgc2Vhc29uYWw6IDEsXG4gICAgc2Vhc29uczogMSxcbiAgICBzZWF0OiAxLFxuICAgIHNlYXRpbmc6IDEsXG4gICAgc2VhdHM6IDEsXG4gICAgc2VhdHRsZTogMSxcbiAgICBzZWM6IDEsXG4gICAgc2Vjb25kOiAxLFxuICAgIHNlY29uZGFyeTogMSxcbiAgICBzZWNvbmRzOiAxLFxuICAgIHNlY3JldDogMSxcbiAgICBzZWNyZXRhcmlhdDogMSxcbiAgICBzZWNyZXRhcnk6IDEsXG4gICAgc2VjcmV0czogMSxcbiAgICBzZWN0aW9uOiAxLFxuICAgIHNlY3Rpb25zOiAxLFxuICAgIHNlY3RvcjogMSxcbiAgICBzZWN0b3JzOiAxLFxuICAgIHNlY3VyZTogMSxcbiAgICBzZWN1cmVkOiAxLFxuICAgIHNlY3VyZWx5OiAxLFxuICAgIHNlY3VyaXRpZXM6IDEsXG4gICAgc2VjdXJpdHk6IDEsXG4gICAgc2VlOiAxLFxuICAgIHNlZWQ6IDEsXG4gICAgc2VlZHM6IDEsXG4gICAgc2VlaW5nOiAxLFxuICAgIHNlZWs6IDEsXG4gICAgc2Vla2VyOiAxLFxuICAgIHNlZWtlcnM6IDEsXG4gICAgc2Vla2luZzogMSxcbiAgICBzZWVrczogMSxcbiAgICBzZWVtOiAxLFxuICAgIHNlZW1lZDogMSxcbiAgICBzZWVtczogMSxcbiAgICBzZWVuOiAxLFxuICAgIHNlZXM6IDEsXG4gICAgc2VnYTogMSxcbiAgICBzZWdtZW50OiAxLFxuICAgIHNlZ21lbnRzOiAxLFxuICAgIHNlbGVjdDogMSxcbiAgICBzZWxlY3RlZDogMSxcbiAgICBzZWxlY3Rpbmc6IDEsXG4gICAgc2VsZWN0aW9uOiAxLFxuICAgIHNlbGVjdGlvbnM6IDEsXG4gICAgc2VsZWN0aXZlOiAxLFxuICAgIHNlbGY6IDEsXG4gICAgc2VsbDogMSxcbiAgICBzZWxsZXI6IDEsXG4gICAgc2VsbGVyczogMSxcbiAgICBzZWxsaW5nOiAxLFxuICAgIHNlbGxzOiAxLFxuICAgIHNlbWVzdGVyOiAxLFxuICAgIHNlbWk6IDEsXG4gICAgc2VtaWNvbmR1Y3RvcjogMSxcbiAgICBzZW1pbmFyOiAxLFxuICAgIHNlbWluYXJzOiAxLFxuICAgIHNlbjogMSxcbiAgICBzZW5hdGU6IDEsXG4gICAgc2VuYXRvcjogMSxcbiAgICBzZW5hdG9yczogMSxcbiAgICBzZW5kOiAxLFxuICAgIHNlbmRlcjogMSxcbiAgICBzZW5kaW5nOiAxLFxuICAgIHNlbmRzOiAxLFxuICAgIHNlbmVnYWw6IDEsXG4gICAgc2VuaW9yOiAxLFxuICAgIHNlbmlvcnM6IDEsXG4gICAgc2Vuc2U6IDEsXG4gICAgc2Vuc2l0aXZlOiAxLFxuICAgIHNlbnNpdGl2aXR5OiAxLFxuICAgIHNlbnNvcjogMSxcbiAgICBzZW5zb3JzOiAxLFxuICAgIHNlbnQ6IDEsXG4gICAgc2VudGVuY2U6IDEsXG4gICAgc2VudGVuY2VzOiAxLFxuICAgIHNlbzogMSxcbiAgICBzZXA6IDEsXG4gICAgc2VwYXJhdGU6IDEsXG4gICAgc2VwYXJhdGVkOiAxLFxuICAgIHNlcGFyYXRlbHk6IDEsXG4gICAgc2VwYXJhdGlvbjogMSxcbiAgICBzZXB0OiAxLFxuICAgIHNlcHRlbWJlcjogMSxcbiAgICBzZXE6IDEsXG4gICAgc2VxdWVuY2U6IDEsXG4gICAgc2VxdWVuY2VzOiAxLFxuICAgIHNlcjogMSxcbiAgICBzZXJiaWE6IDEsXG4gICAgc2VyaWFsOiAxLFxuICAgIHNlcmllczogMSxcbiAgICBzZXJpb3VzOiAxLFxuICAgIHNlcmlvdXNseTogMSxcbiAgICBzZXJ1bTogMSxcbiAgICBzZXJ2ZTogMSxcbiAgICBzZXJ2ZWQ6IDEsXG4gICAgc2VydmVyOiAxLFxuICAgIHNlcnZlcnM6IDEsXG4gICAgc2VydmVzOiAxLFxuICAgIHNlcnZpY2U6IDEsXG4gICAgc2VydmljZXM6IDEsXG4gICAgc2VydmluZzogMSxcbiAgICBzZXNzaW9uOiAxLFxuICAgIHNlc3Npb25zOiAxLFxuICAgIHNldDogMSxcbiAgICBzZXRzOiAxLFxuICAgIHNldHRpbmc6IDEsXG4gICAgc2V0dGluZ3M6IDEsXG4gICAgc2V0dGxlOiAxLFxuICAgIHNldHRsZWQ6IDEsXG4gICAgc2V0dGxlbWVudDogMSxcbiAgICBzZXR1cDogMSxcbiAgICBzZXZlbjogMSxcbiAgICBzZXZlbnRoOiAxLFxuICAgIHNldmVyYWw6IDEsXG4gICAgc2V2ZXJlOiAxLFxuICAgIHNld2luZzogMSxcbiAgICBzZXg6IDEsXG4gICAgc2V4Y2FtOiAxLFxuICAgIHNleG86IDEsXG4gICAgc2V4dWFsOiAxLFxuICAgIHNleHVhbGl0eTogMSxcbiAgICBzZXh1YWxseTogMSxcbiAgICBzZXh5OiAxLFxuICAgIHNmOiAxLFxuICAgIHNnOiAxLFxuICAgIHNoOiAxLFxuICAgIHNoYWRlOiAxLFxuICAgIHNoYWRlczogMSxcbiAgICBzaGFkb3c6IDEsXG4gICAgc2hhZG93czogMSxcblxuXG5cblxuXG5cblxuICAgIHNoYWZ0OiAxLFxuICAgIHNoYWtlOiAxLFxuICAgIHNoYWtlc3BlYXJlOiAxLFxuICAgIHNoYWtpcmE6IDEsXG4gICAgc2hhbGw6IDEsXG4gICAgc2hhbWU6IDEsXG4gICAgc2hhbmdoYWk6IDEsXG4gICAgc2hhbm5vbjogMSxcbiAgICBzaGFwZTogMSxcbiAgICBzaGFwZWQ6IDEsXG4gICAgc2hhcGVzOiAxLFxuICAgIHNoYXJlOiAxLFxuICAgIHNoYXJlZDogMSxcbiAgICBzaGFyZWhvbGRlcnM6IDEsXG4gICAgc2hhcmVzOiAxLFxuICAgIHNoYXJld2FyZTogMSxcbiAgICBzaGFyaW5nOiAxLFxuICAgIHNoYXJrOiAxLFxuICAgIHNoYXJvbjogMSxcbiAgICBzaGFycDogMSxcbiAgICBzaGF2ZWQ6IDEsXG4gICAgc2hhdzogMSxcbiAgICBzaGU6IDEsXG4gICAgc2hlZDogMSxcbiAgICBzaGVlcDogMSxcbiAgICBzaGVlcjogMSxcbiAgICBzaGVldDogMSxcbiAgICBzaGVldHM6IDEsXG4gICAgc2hlZmZpZWxkOiAxLFxuICAgIHNoZWxmOiAxLFxuICAgIHNoZWxsOiAxLFxuICAgIHNoZWx0ZXI6IDEsXG4gICAgc2hlbWFsZTogMSxcbiAgICBzaGVtYWxlczogMSxcbiAgICBzaGVwaGVyZDogMSxcbiAgICBzaGVyaWZmOiAxLFxuICAgIHNoZXJtYW46IDEsXG4gICAgc2hpZWxkOiAxLFxuICAgIHNoaWZ0OiAxLFxuICAgIHNoaW5lOiAxLFxuICAgIHNoaXA6IDEsXG4gICAgc2hpcG1lbnQ6IDEsXG4gICAgc2hpcG1lbnRzOiAxLFxuICAgIHNoaXBwZWQ6IDEsXG4gICAgc2hpcHBpbmc6IDEsXG4gICAgc2hpcHM6IDEsXG4gICAgc2hpcnQ6IDEsXG4gICAgc2hpcnRzOiAxLFxuICAgIHNoaXQ6IDEsXG4gICAgc2hvY2s6IDEsXG4gICAgc2hvZTogMSxcbiAgICBzaG9lczogMSxcbiAgICBzaG9vdDogMSxcbiAgICBzaG9vdGluZzogMSxcbiAgICBzaG9wOiAxLFxuICAgIHNob3BwZXI6IDEsXG4gICAgc2hvcHBlcnM6IDEsXG4gICAgc2hvcHBpbmc6IDEsXG4gICAgc2hvcHM6IDEsXG4gICAgc2hvcHppbGxhOiAxLFxuICAgIHNob3JlOiAxLFxuICAgIHNob3J0OiAxLFxuICAgIHNob3J0Y3V0czogMSxcbiAgICBzaG9ydGVyOiAxLFxuICAgIHNob3J0bHk6IDEsXG4gICAgc2hvcnRzOiAxLFxuICAgIHNob3Q6IDEsXG4gICAgc2hvdHM6IDEsXG4gICAgc2hvdWxkOiAxLFxuICAgIHNob3VsZGVyOiAxLFxuICAgIHNob3c6IDEsXG4gICAgc2hvd2Nhc2U6IDEsXG4gICAgc2hvd2VkOiAxLFxuICAgIHNob3dlcjogMSxcbiAgICBzaG93ZXJzOiAxLFxuICAgIHNob3dpbmc6IDEsXG4gICAgc2hvd246IDEsXG4gICAgc2hvd3M6IDEsXG4gICAgc2hvd3RpbWVzOiAxLFxuICAgIHNodXQ6IDEsXG4gICAgc2h1dHRsZTogMSxcbiAgICBzaTogMSxcbiAgICBzaWM6IDEsXG4gICAgc2ljazogMSxcbiAgICBzaWRlOiAxLFxuICAgIHNpZGVzOiAxLFxuICAgIHNpZTogMSxcbiAgICBzaWVtZW5zOiAxLFxuICAgIHNpZXJyYTogMSxcbiAgICBzaWc6IDEsXG4gICAgc2lnaHQ6IDEsXG4gICAgc2lnbWE6IDEsXG4gICAgc2lnbjogMSxcbiAgICBzaWduYWw6IDEsXG4gICAgc2lnbmFsczogMSxcbiAgICBzaWduYXR1cmU6IDEsXG4gICAgc2lnbmF0dXJlczogMSxcbiAgICBzaWduZWQ6IDEsXG4gICAgc2lnbmlmaWNhbmNlOiAxLFxuICAgIHNpZ25pZmljYW50OiAxLFxuICAgIHNpZ25pZmljYW50bHk6IDEsXG4gICAgc2lnbmluZzogMSxcbiAgICBzaWduczogMSxcbiAgICBzaWdudXA6IDEsXG4gICAgc2lsZW5jZTogMSxcbiAgICBzaWxlbnQ6IDEsXG4gICAgc2lsaWNvbjogMSxcbiAgICBzaWxrOiAxLFxuICAgIHNpbGx5OiAxLFxuICAgIHNpbHZlcjogMSxcbiAgICBzaW06IDEsXG4gICAgc2ltaWxhcjogMSxcbiAgICBzaW1pbGFybHk6IDEsXG4gICAgc2ltb246IDEsXG4gICAgc2ltcGxlOiAxLFxuICAgIHNpbXBsaWZpZWQ6IDEsXG4gICAgc2ltcGx5OiAxLFxuICAgIHNpbXBzb246IDEsXG4gICAgc2ltcHNvbnM6IDEsXG4gICAgc2ltczogMSxcbiAgICBzaW11bGF0aW9uOiAxLFxuICAgIHNpbXVsYXRpb25zOiAxLFxuICAgIHNpbXVsdGFuZW91c2x5OiAxLFxuICAgIHNpbjogMSxcbiAgICBzaW5jZTogMSxcbiAgICBzaW5nOiAxLFxuICAgIHNpbmdhcG9yZTogMSxcbiAgICBzaW5nZXI6IDEsXG4gICAgc2luZ2g6IDEsXG4gICAgc2luZ2luZzogMSxcbiAgICBzaW5nbGU6IDEsXG4gICAgc2luZ2xlczogMSxcbiAgICBzaW5rOiAxLFxuICAgIHNpcDogMSxcbiAgICBzaXI6IDEsXG4gICAgc2lzdGVyOiAxLFxuICAgIHNpc3RlcnM6IDEsXG4gICAgc2l0OiAxLFxuICAgIHNpdGU6IDEsXG4gICAgc2l0ZW1hcDogMSxcbiAgICBzaXRlczogMSxcbiAgICBzaXR0aW5nOiAxLFxuICAgIHNpdHVhdGVkOiAxLFxuICAgIHNpdHVhdGlvbjogMSxcbiAgICBzaXR1YXRpb25zOiAxLFxuICAgIHNpeDogMSxcbiAgICBzaXh0aDogMSxcbiAgICBzaXplOiAxLFxuICAgIHNpemVkOiAxLFxuICAgIHNpemVzOiAxLFxuICAgIHNrOiAxLFxuICAgIHNrYXRpbmc6IDEsXG4gICAgc2tpOiAxLFxuICAgIHNraWluZzogMSxcbiAgICBza2lsbDogMSxcbiAgICBza2lsbGVkOiAxLFxuICAgIHNraWxsczogMSxcbiAgICBza2luOiAxLFxuICAgIHNraW5zOiAxLFxuICAgIHNraXA6IDEsXG4gICAgc2tpcnQ6IDEsXG4gICAgc2tpcnRzOiAxLFxuICAgIHNrdTogMSxcbiAgICBza3k6IDEsXG4gICAgc2t5cGU6IDEsXG4gICAgc2w6IDEsXG4gICAgc2xhdmU6IDEsXG4gICAgc2xlZXA6IDEsXG4gICAgc2xlZXBpbmc6IDEsXG4gICAgc2xlZXBzOiAxLFxuICAgIHNsZWV2ZTogMSxcbiAgICBzbGlkZTogMSxcbiAgICBzbGlkZXM6IDEsXG4gICAgc2xpZGVzaG93OiAxLFxuICAgIHNsaWdodDogMSxcbiAgICBzbGlnaHRseTogMSxcbiAgICBzbGltOiAxLFxuICAgIHNsaXA6IDEsXG4gICAgc2xvcGU6IDEsXG4gICAgc2xvdDogMSxcbiAgICBzbG90czogMSxcbiAgICBzbG92YWs6IDEsXG5cblxuXG5cblxuXG5cbiAgICBzbG92YWtpYTogMSxcbiAgICBzbG92ZW5pYTogMSxcbiAgICBzbG93OiAxLFxuICAgIHNsb3dseTogMSxcbiAgICBzbHV0OiAxLFxuICAgIHNsdXRzOiAxLFxuICAgIHNtOiAxLFxuICAgIHNtYWxsOiAxLFxuICAgIHNtYWxsZXI6IDEsXG4gICAgc21hbGxlc3Q6IDEsXG4gICAgc21hcnQ6IDEsXG4gICAgc21lbGw6IDEsXG4gICAgc21pbGU6IDEsXG4gICAgc21pbGllczogMSxcbiAgICBzbWl0aDogMSxcbiAgICBzbWl0aHNvbmlhbjogMSxcbiAgICBzbW9rZTogMSxcbiAgICBzbW9raW5nOiAxLFxuICAgIHNtb290aDogMSxcbiAgICBzbXM6IDEsXG4gICAgc210cDogMSxcbiAgICBzbjogMSxcbiAgICBzbmFrZTogMSxcbiAgICBzbmFwOiAxLFxuICAgIHNuYXBzaG90OiAxLFxuICAgIHNub3c6IDEsXG4gICAgc25vd2JvYXJkOiAxLFxuICAgIHNvOiAxLFxuICAgIHNvYTogMSxcbiAgICBzb2FwOiAxLFxuICAgIHNvYzogMSxcbiAgICBzb2NjZXI6IDEsXG4gICAgc29jaWFsOiAxLFxuICAgIHNvY2lldGllczogMSxcbiAgICBzb2NpZXR5OiAxLFxuICAgIHNvY2lvbG9neTogMSxcbiAgICBzb2NrZXQ6IDEsXG4gICAgc29ja3M6IDEsXG4gICAgc29kaXVtOiAxLFxuICAgIHNvZmE6IDEsXG4gICAgc29mdDogMSxcbiAgICBzb2Z0YmFsbDogMSxcbiAgICBzb2Z0d2FyZTogMSxcbiAgICBzb2lsOiAxLFxuICAgIHNvbDogMSxcbiAgICBzb2xhcjogMSxcbiAgICBzb2xhcmlzOiAxLFxuICAgIHNvbGQ6IDEsXG4gICAgc29sZGllcjogMSxcbiAgICBzb2xkaWVyczogMSxcbiAgICBzb2xlOiAxLFxuICAgIHNvbGVseTogMSxcbiAgICBzb2xpZDogMSxcbiAgICBzb2xvOiAxLFxuICAgIHNvbG9tb246IDEsXG4gICAgc29sdXRpb246IDEsXG4gICAgc29sdXRpb25zOiAxLFxuICAgIHNvbHZlOiAxLFxuICAgIHNvbHZlZDogMSxcbiAgICBzb2x2aW5nOiAxLFxuICAgIHNvbWE6IDEsXG4gICAgc29tYWxpYTogMSxcbiAgICBzb21lOiAxLFxuICAgIHNvbWVib2R5OiAxLFxuICAgIHNvbWVob3c6IDEsXG4gICAgc29tZW9uZTogMSxcbiAgICBzb21lcnNldDogMSxcbiAgICBzb21ldGhpbmc6IDEsXG4gICAgc29tZXRpbWVzOiAxLFxuICAgIHNvbWV3aGF0OiAxLFxuICAgIHNvbWV3aGVyZTogMSxcbiAgICBzb246IDEsXG4gICAgc29uZzogMSxcbiAgICBzb25nczogMSxcbiAgICBzb25pYzogMSxcbiAgICBzb25zOiAxLFxuICAgIHNvbnk6IDEsXG4gICAgc29vbjogMSxcbiAgICBzb29uZXN0OiAxLFxuICAgIHNvcGhpc3RpY2F0ZWQ6IDEsXG4gICAgc29ycnk6IDEsXG4gICAgc29ydDogMSxcbiAgICBzb3J0ZWQ6IDEsXG4gICAgc29ydHM6IDEsXG4gICAgc291Z2h0OiAxLFxuICAgIHNvdWw6IDEsXG4gICAgc291bHM6IDEsXG4gICAgc291bmQ6IDEsXG4gICAgc291bmRzOiAxLFxuICAgIHNvdW5kdHJhY2s6IDEsXG4gICAgc291cDogMSxcbiAgICBzb3VyY2U6IDEsXG4gICAgc291cmNlczogMSxcbiAgICBzb3V0aDogMSxcbiAgICBzb3V0aGFtcHRvbjogMSxcbiAgICBzb3V0aGVhc3Q6IDEsXG4gICAgc291dGhlcm46IDEsXG4gICAgc291dGh3ZXN0OiAxLFxuICAgIHNvdmlldDogMSxcbiAgICBzb3g6IDEsXG4gICAgc3A6IDEsXG4gICAgc3BhOiAxLFxuICAgIHNwYWNlOiAxLFxuICAgIHNwYWNlczogMSxcbiAgICBzcGFpbjogMSxcbiAgICBzcGFtOiAxLFxuICAgIHNwYW46IDEsXG4gICAgc3BhbmlzaDogMSxcbiAgICBzcGFuazogMSxcbiAgICBzcGFua2luZzogMSxcbiAgICBzcGFyYzogMSxcbiAgICBzcGFyZTogMSxcbiAgICBzcGFzOiAxLFxuICAgIHNwYXRpYWw6IDEsXG4gICAgc3BlYWs6IDEsXG4gICAgc3BlYWtlcjogMSxcbiAgICBzcGVha2VyczogMSxcbiAgICBzcGVha2luZzogMSxcbiAgICBzcGVha3M6IDEsXG4gICAgc3BlYXJzOiAxLFxuICAgIHNwZWM6IDEsXG4gICAgc3BlY2lhbDogMSxcbiAgICBzcGVjaWFsaXN0OiAxLFxuICAgIHNwZWNpYWxpc3RzOiAxLFxuICAgIHNwZWNpYWxpemVkOiAxLFxuICAgIHNwZWNpYWxpemluZzogMSxcbiAgICBzcGVjaWFsbHk6IDEsXG4gICAgc3BlY2lhbHM6IDEsXG4gICAgc3BlY2lhbHRpZXM6IDEsXG4gICAgc3BlY2lhbHR5OiAxLFxuICAgIHNwZWNpZXM6IDEsXG4gICAgc3BlY2lmaWM6IDEsXG4gICAgc3BlY2lmaWNhbGx5OiAxLFxuICAgIHNwZWNpZmljYXRpb246IDEsXG4gICAgc3BlY2lmaWNhdGlvbnM6IDEsXG4gICAgc3BlY2lmaWNzOiAxLFxuICAgIHNwZWNpZmllZDogMSxcbiAgICBzcGVjaWZpZXM6IDEsXG4gICAgc3BlY2lmeTogMSxcbiAgICBzcGVjczogMSxcbiAgICBzcGVjdGFjdWxhcjogMSxcbiAgICBzcGVjdHJ1bTogMSxcbiAgICBzcGVlY2g6IDEsXG4gICAgc3BlZWNoZXM6IDEsXG4gICAgc3BlZWQ6IDEsXG4gICAgc3BlZWRzOiAxLFxuICAgIHNwZWxsOiAxLFxuICAgIHNwZWxsaW5nOiAxLFxuICAgIHNwZW5jZXI6IDEsXG4gICAgc3BlbmQ6IDEsXG4gICAgc3BlbmRpbmc6IDEsXG4gICAgc3BlbnQ6IDEsXG4gICAgc3Blcm06IDEsXG4gICAgc3BoZXJlOiAxLFxuICAgIHNwaWNlOiAxLFxuICAgIHNwaWRlcjogMSxcbiAgICBzcGllczogMSxcbiAgICBzcGluOiAxLFxuICAgIHNwaW5lOiAxLFxuICAgIHNwaXJpdDogMSxcbiAgICBzcGlyaXRzOiAxLFxuICAgIHNwaXJpdHVhbDogMSxcbiAgICBzcGlyaXR1YWxpdHk6IDEsXG4gICAgc3BsaXQ6IDEsXG4gICAgc3Bva2U6IDEsXG4gICAgc3Bva2VuOiAxLFxuICAgIHNwb2tlc21hbjogMSxcbiAgICBzcG9uc29yOiAxLFxuICAgIHNwb25zb3JlZDogMSxcbiAgICBzcG9uc29yczogMSxcbiAgICBzcG9uc29yc2hpcDogMSxcbiAgICBzcG9ydDogMSxcbiAgICBzcG9ydGluZzogMSxcbiAgICBzcG9ydHM6IDEsXG4gICAgc3BvdDogMSxcbiAgICBzcG90bGlnaHQ6IDEsXG4gICAgc3BvdHM6IDEsXG4gICAgc3BvdXNlOiAxLFxuICAgIHNwcmF5OiAxLFxuICAgIHNwcmVhZDogMSxcbiAgICBzcHJlYWRpbmc6IDEsXG4gICAgc3ByaW5nOiAxLFxuICAgIHNwcmluZ2VyOiAxLFxuICAgIHNwcmluZ2ZpZWxkOiAxLFxuICAgIHNwcmluZ3M6IDEsXG4gICAgc3ByaW50OiAxLFxuICAgIHNweTogMSxcbiAgICBzcHl3YXJlOiAxLFxuICAgIHNxOiAxLFxuICAgIHNxbDogMSxcbiAgICBzcXVhZDogMSxcbiAgICBzcXVhcmU6IDEsXG4gICAgc3F1aXJ0OiAxLFxuICAgIHNxdWlydGluZzogMSxcbiAgICBzcjogMSxcbiAgICBzcmM6IDEsXG4gICAgc3JpOiAxLFxuICAgIHNzOiAxLFxuICAgIHNzbDogMSxcbiAgICBzdDogMSxcbiAgICBzdGFiaWxpdHk6IDEsXG4gICAgc3RhYmxlOiAxLFxuICAgIHN0YWNrOiAxLFxuICAgIHN0YWRpdW06IDEsXG4gICAgc3RhZmY6IDEsXG4gICAgc3RhZmZpbmc6IDEsXG4gICAgc3RhZ2U6IDEsXG4gICAgc3RhZ2VzOiAxLFxuICAgIHN0YWlubGVzczogMSxcbiAgICBzdGFrZTogMSxcbiAgICBzdGFrZWhvbGRlcnM6IDEsXG4gICAgc3RhbXA6IDEsXG4gICAgc3RhbXBzOiAxLFxuICAgIHN0YW46IDEsXG4gICAgc3RhbmQ6IDEsXG4gICAgc3RhbmRhcmQ6IDEsXG4gICAgc3RhbmRhcmRzOiAxLFxuICAgIHN0YW5kaW5nOiAxLFxuICAgIHN0YW5kaW5nczogMSxcbiAgICBzdGFuZHM6IDEsXG4gICAgc3RhbmZvcmQ6IDEsXG4gICAgc3RhbmxleTogMSxcbiAgICBzdGFyOiAxLFxuICAgIHN0YXJyaW5nOiAxLFxuICAgIHN0YXJzOiAxLFxuICAgIHN0YXJzbWVyY2hhbnQ6IDEsXG4gICAgc3RhcnQ6IDEsXG4gICAgc3RhcnRlZDogMSxcbiAgICBzdGFydGVyOiAxLFxuICAgIHN0YXJ0aW5nOiAxLFxuICAgIHN0YXJ0czogMSxcbiAgICBzdGFydHVwOiAxLFxuICAgIHN0YXQ6IDEsXG4gICAgc3RhdGU6IDEsXG4gICAgc3RhdGVkOiAxLFxuICAgIHN0YXRlbWVudDogMSxcbiAgICBzdGF0ZW1lbnRzOiAxLFxuICAgIHN0YXRlczogMSxcbiAgICBzdGF0ZXdpZGU6IDEsXG4gICAgc3RhdGljOiAxLFxuICAgIHN0YXRpbmc6IDEsXG4gICAgc3RhdGlvbjogMSxcbiAgICBzdGF0aW9uZXJ5OiAxLFxuICAgIHN0YXRpb25zOiAxLFxuICAgIHN0YXRpc3RpY2FsOiAxLFxuICAgIHN0YXRpc3RpY3M6IDEsXG4gICAgc3RhdHM6IDEsXG4gICAgc3RhdHVzOiAxLFxuICAgIHN0YXR1dGU6IDEsXG4gICAgc3RhdHV0ZXM6IDEsXG4gICAgc3RhdHV0b3J5OiAxLFxuICAgIHN0YXk6IDEsXG4gICAgc3RheWVkOiAxLFxuICAgIHN0YXlpbmc6IDEsXG4gICAgc3RheXM6IDEsXG4gICAgc3RkOiAxLFxuICAgIHN0ZTogMSxcbiAgICBzdGVhZHk6IDEsXG4gICAgc3RlYWw6IDEsXG4gICAgc3RlYW06IDEsXG4gICAgc3RlZWw6IDEsXG4gICAgc3RlZXJpbmc6IDEsXG4gICAgc3RlbTogMSxcbiAgICBzdGVwOiAxLFxuICAgIHN0ZXBoYW5pZTogMSxcbiAgICBzdGVwaGVuOiAxLFxuICAgIHN0ZXBzOiAxLFxuICAgIHN0ZXJlbzogMSxcbiAgICBzdGVybGluZzogMSxcbiAgICBzdGV2ZTogMSxcbiAgICBzdGV2ZW46IDEsXG4gICAgc3RldmVuczogMSxcbiAgICBzdGV3YXJ0OiAxLFxuICAgIHN0aWNrOiAxLFxuICAgIHN0aWNrZXI6IDEsXG4gICAgc3RpY2tlcnM6IDEsXG4gICAgc3RpY2tzOiAxLFxuICAgIHN0aWNreTogMSxcbiAgICBzdGlsbDogMSxcbiAgICBzdG9jazogMSxcbiAgICBzdG9ja2hvbG06IDEsXG4gICAgc3RvY2tpbmdzOiAxLFxuICAgIHN0b2NrczogMSxcbiAgICBzdG9sZW46IDEsXG4gICAgc3RvbWFjaDogMSxcbiAgICBzdG9uZTogMSxcbiAgICBzdG9uZXM6IDEsXG4gICAgc3Rvb2Q6IDEsXG4gICAgc3RvcDogMSxcbiAgICBzdG9wcGVkOiAxLFxuICAgIHN0b3BwaW5nOiAxLFxuICAgIHN0b3BzOiAxLFxuICAgIHN0b3JhZ2U6IDEsXG4gICAgc3RvcmU6IDEsXG4gICAgc3RvcmVkOiAxLFxuICAgIHN0b3JlczogMSxcbiAgICBzdG9yaWVzOiAxLFxuICAgIHN0b3JtOiAxLFxuICAgIHN0b3J5OiAxLFxuICAgIHN0cjogMSxcbiAgICBzdHJhaWdodDogMSxcbiAgICBzdHJhaW46IDEsXG4gICAgc3RyYW5kOiAxLFxuICAgIHN0cmFuZ2U6IDEsXG4gICAgc3RyYW5nZXI6IDEsXG4gICAgc3RyYXA6IDEsXG4gICAgc3RyYXRlZ2ljOiAxLFxuICAgIHN0cmF0ZWdpZXM6IDEsXG4gICAgc3RyYXRlZ3k6IDEsXG4gICAgc3RyZWFtOiAxLFxuICAgIHN0cmVhbWluZzogMSxcbiAgICBzdHJlYW1zOiAxLFxuICAgIHN0cmVldDogMSxcbiAgICBzdHJlZXRzOiAxLFxuICAgIHN0cmVuZ3RoOiAxLFxuICAgIHN0cmVuZ3RoZW46IDEsXG4gICAgc3RyZW5ndGhlbmluZzogMSxcbiAgICBzdHJlbmd0aHM6IDEsXG4gICAgc3RyZXNzOiAxLFxuICAgIHN0cmV0Y2g6IDEsXG4gICAgc3RyaWN0OiAxLFxuICAgIHN0cmljdGx5OiAxLFxuICAgIHN0cmlrZTogMSxcbiAgICBzdHJpa2VzOiAxLFxuICAgIHN0cmlraW5nOiAxLFxuICAgIHN0cmluZzogMSxcbiAgICBzdHJpbmdzOiAxLFxuICAgIHN0cmlwOiAxLFxuICAgIHN0cmlwZXM6IDEsXG4gICAgc3RyaXBzOiAxLFxuICAgIHN0cm9rZTogMSxcbiAgICBzdHJvbmc6IDEsXG4gICAgc3Ryb25nZXI6IDEsXG4gICAgc3Ryb25nbHk6IDEsXG4gICAgc3RydWNrOiAxLFxuICAgIHN0cnVjdDogMSxcbiAgICBzdHJ1Y3R1cmFsOiAxLFxuICAgIHN0cnVjdHVyZTogMSxcbiAgICBzdHJ1Y3R1cmVkOiAxLFxuICAgIHN0cnVjdHVyZXM6IDEsXG4gICAgc3RydWdnbGU6IDEsXG4gICAgc3R1YXJ0OiAxLFxuICAgIHN0dWNrOiAxLFxuICAgIHN0dWQ6IDEsXG4gICAgc3R1ZGVudDogMSxcbiAgICBzdHVkZW50czogMSxcbiAgICBzdHVkaWVkOiAxLFxuICAgIHN0dWRpZXM6IDEsXG4gICAgc3R1ZGlvOiAxLFxuICAgIHN0dWRpb3M6IDEsXG4gICAgc3R1ZHk6IDEsXG4gICAgc3R1ZHlpbmc6IDEsXG4gICAgc3R1ZmY6IDEsXG4gICAgc3R1ZmZlZDogMSxcbiAgICBzdHVubmluZzogMSxcbiAgICBzdHVwaWQ6IDEsXG4gICAgc3R5bGU6IDEsXG4gICAgc3R5bGVzOiAxLFxuICAgIHN0eWxpc2g6IDEsXG4gICAgc3R5bHVzOiAxLFxuICAgIHN1OiAxLFxuICAgIHN1YjogMSxcbiAgICBzdWJhcnU6IDEsXG4gICAgc3ViY29tbWl0dGVlOiAxLFxuICAgIHN1YmRpdmlzaW9uOiAxLFxuICAgIHN1YmplY3Q6IDEsXG4gICAgc3ViamVjdGl2ZTogMSxcbiAgICBzdWJqZWN0czogMSxcbiAgICBzdWJsaW1lOiAxLFxuICAgIHN1YmxpbWVkaXJlY3Rvcnk6IDEsXG4gICAgc3VibWlzc2lvbjogMSxcbiAgICBzdWJtaXNzaW9uczogMSxcbiAgICBzdWJtaXQ6IDEsXG4gICAgc3VibWl0dGVkOiAxLFxuICAgIHN1Ym1pdHRpbmc6IDEsXG4gICAgc3Vic2NyaWJlOiAxLFxuICAgIHN1YnNjcmliZXI6IDEsXG4gICAgc3Vic2NyaWJlcnM6IDEsXG4gICAgc3Vic2NyaXB0aW9uOiAxLFxuICAgIHN1YnNjcmlwdGlvbnM6IDEsXG4gICAgc3Vic2VjdGlvbjogMSxcbiAgICBzdWJzZXF1ZW50OiAxLFxuICAgIHN1YnNlcXVlbnRseTogMSxcbiAgICBzdWJzaWRpYXJpZXM6IDEsXG4gICAgc3Vic2lkaWFyeTogMSxcbiAgICBzdWJzdGFuY2U6IDEsXG4gICAgc3Vic3RhbmNlczogMSxcbiAgICBzdWJzdGFudGlhbDogMSxcbiAgICBzdWJzdGFudGlhbGx5OiAxLFxuICAgIHN1YnN0aXR1dGU6IDEsXG4gICAgc3VidGxlOiAxLFxuICAgIHN1YnVyYmFuOiAxLFxuICAgIHN1Y2NlZWQ6IDEsXG4gICAgc3VjY2VzczogMSxcbiAgICBzdWNjZXNzZnVsOiAxLFxuICAgIHN1Y2Nlc3NmdWxseTogMSxcbiAgICBzdWNoOiAxLFxuICAgIHN1Y2s6IDEsXG4gICAgc3Vja2luZzogMSxcbiAgICBzdWNrczogMSxcbiAgICBzdWRhbjogMSxcbiAgICBzdWRkZW46IDEsXG4gICAgc3VkZGVubHk6IDEsXG4gICAgc3VlOiAxLFxuICAgIHN1ZmZlcjogMSxcbiAgICBzdWZmZXJlZDogMSxcbiAgICBzdWZmZXJpbmc6IDEsXG4gICAgc3VmZmljaWVudDogMSxcbiAgICBzdWZmaWNpZW50bHk6IDEsXG4gICAgc3VnYXI6IDEsXG4gICAgc3VnZ2VzdDogMSxcbiAgICBzdWdnZXN0ZWQ6IDEsXG4gICAgc3VnZ2VzdGluZzogMSxcbiAgICBzdWdnZXN0aW9uOiAxLFxuICAgIHN1Z2dlc3Rpb25zOiAxLFxuICAgIHN1Z2dlc3RzOiAxLFxuICAgIHN1aWNpZGU6IDEsXG4gICAgc3VpdDogMSxcbiAgICBzdWl0YWJsZTogMSxcbiAgICBzdWl0ZTogMSxcbiAgICBzdWl0ZWQ6IDEsXG4gICAgc3VpdGVzOiAxLFxuICAgIHN1aXRzOiAxLFxuICAgIHN1bGxpdmFuOiAxLFxuICAgIHN1bTogMSxcbiAgICBzdW1tYXJpZXM6IDEsXG4gICAgc3VtbWFyeTogMSxcbiAgICBzdW1tZXI6IDEsXG4gICAgc3VtbWl0OiAxLFxuICAgIHN1bjogMSxcbiAgICBzdW5kYXk6IDEsXG4gICAgc3VuZ2xhc3NlczogMSxcbiAgICBzdW5ueTogMSxcbiAgICBzdW5yaXNlOiAxLFxuICAgIHN1bnNldDogMSxcbiAgICBzdW5zaGluZTogMSxcbiAgICBzdXBlcjogMSxcbiAgICBzdXBlcmI6IDEsXG4gICAgc3VwZXJpbnRlbmRlbnQ6IDEsXG4gICAgc3VwZXJpb3I6IDEsXG4gICAgc3VwZXJ2aXNpb246IDEsXG4gICAgc3VwZXJ2aXNvcjogMSxcbiAgICBzdXBlcnZpc29yczogMSxcbiAgICBzdXBwbGVtZW50OiAxLFxuICAgIHN1cHBsZW1lbnRhbDogMSxcbiAgICBzdXBwbGVtZW50czogMSxcbiAgICBzdXBwbGllZDogMSxcbiAgICBzdXBwbGllcjogMSxcbiAgICBzdXBwbGllcnM6IDEsXG4gICAgc3VwcGxpZXM6IDEsXG4gICAgc3VwcGx5OiAxLFxuICAgIHN1cHBvcnQ6IDEsXG4gICAgc3VwcG9ydGVkOiAxLFxuICAgIHN1cHBvcnRlcnM6IDEsXG4gICAgc3VwcG9ydGluZzogMSxcbiAgICBzdXBwb3J0czogMSxcbiAgICBzdXBwb3NlOiAxLFxuICAgIHN1cHBvc2VkOiAxLFxuICAgIHN1cHJlbWU6IDEsXG4gICAgc3VyOiAxLFxuICAgIHN1cmU6IDEsXG4gICAgc3VyZWx5OiAxLFxuICAgIHN1cmY6IDEsXG4gICAgc3VyZmFjZTogMSxcbiAgICBzdXJmYWNlczogMSxcbiAgICBzdXJmaW5nOiAxLFxuICAgIHN1cmdlOiAxLFxuICAgIHN1cmdlb246IDEsXG4gICAgc3VyZ2VvbnM6IDEsXG4gICAgc3VyZ2VyeTogMSxcbiAgICBzdXJnaWNhbDogMSxcbiAgICBzdXJuYW1lOiAxLFxuICAgIHN1cnBsdXM6IDEsXG4gICAgc3VycHJpc2U6IDEsXG4gICAgc3VycHJpc2VkOiAxLFxuICAgIHN1cnByaXNpbmc6IDEsXG4gICAgc3VycmV5OiAxLFxuICAgIHN1cnJvdW5kOiAxLFxuICAgIHN1cnJvdW5kZWQ6IDEsXG4gICAgc3Vycm91bmRpbmc6IDEsXG4gICAgc3VydmVpbGxhbmNlOiAxLFxuICAgIHN1cnZleTogMSxcbiAgICBzdXJ2ZXlzOiAxLFxuICAgIHN1cnZpdmFsOiAxLFxuICAgIHN1cnZpdmU6IDEsXG4gICAgc3Vydml2b3I6IDEsXG4gICAgc3Vydml2b3JzOiAxLFxuICAgIHN1c2FuOiAxLFxuICAgIHN1c2U6IDEsXG4gICAgc3VzcGVjdDogMSxcbiAgICBzdXNwZWN0ZWQ6IDEsXG4gICAgc3VzcGVuZGVkOiAxLFxuICAgIHN1c3BlbnNpb246IDEsXG4gICAgc3Vzc2V4OiAxLFxuICAgIHN1c3RhaW5hYmlsaXR5OiAxLFxuICAgIHN1c3RhaW5hYmxlOiAxLFxuICAgIHN1c3RhaW5lZDogMSxcbiAgICBzdXp1a2k6IDEsXG4gICAgc3Y6IDEsXG4gICAgc3c6IDEsXG4gICAgc3dhcDogMSxcbiAgICBzd2F6aWxhbmQ6IDEsXG4gICAgc3dlZGVuOiAxLFxuICAgIHN3ZWRpc2g6IDEsXG4gICAgc3dlZXQ6IDEsXG4gICAgc3dpZnQ6IDEsXG4gICAgc3dpbTogMSxcbiAgICBzd2ltbWluZzogMSxcbiAgICBzd2luZzogMSxcbiAgICBzd2luZ2VyczogMSxcbiAgICBzd2lzczogMSxcbiAgICBzd2l0Y2g6IDEsXG4gICAgc3dpdGNoZWQ6IDEsXG4gICAgc3dpdGNoZXM6IDEsXG4gICAgc3dpdGNoaW5nOiAxLFxuICAgIHN3aXR6ZXJsYW5kOiAxLFxuICAgIHN3b3JkOiAxLFxuICAgIHN5ZG5leTogMSxcbiAgICBzeW1hbnRlYzogMSxcbiAgICBzeW1ib2w6IDEsXG4gICAgc3ltYm9sczogMSxcbiAgICBzeW1wYXRoeTogMSxcbiAgICBzeW1waG9ueTogMSxcbiAgICBzeW1wb3NpdW06IDEsXG4gICAgc3ltcHRvbXM6IDEsXG4gICAgc3luYzogMSxcbiAgICBzeW5kaWNhdGU6IDEsXG4gICAgc3luZGljYXRpb246IDEsXG4gICAgc3luZHJvbWU6IDEsXG4gICAgc3lub3BzaXM6IDEsXG4gICAgc3ludGF4OiAxLFxuICAgIHN5bnRoZXNpczogMSxcbiAgICBzeW50aGV0aWM6IDEsXG4gICAgc3lyYWN1c2U6IDEsXG4gICAgc3lyaWE6IDEsXG4gICAgc3lzOiAxLFxuICAgIHN5c3RlbTogMSxcbiAgICBzeXN0ZW1hdGljOiAxLFxuICAgIHN5c3RlbXM6IDEsXG4gICAgdDogMSxcbiAgICB0YTogMSxcbiAgICB0YWI6IDEsXG4gICAgdGFibGU6IDEsXG4gICAgdGFibGVzOiAxLFxuICAgIHRhYmxldDogMSxcbiAgICB0YWJsZXRzOiAxLFxuICAgIHRhYnM6IDEsXG4gICAgdGFja2xlOiAxLFxuICAgIHRhY3RpY3M6IDEsXG4gICAgdGFnOiAxLFxuICAgIHRhZ2dlZDogMSxcbiAgICB0YWdzOiAxLFxuICAgIHRhaG9lOiAxLFxuICAgIHRhaWw6IDEsXG4gICAgdGFpd2FuOiAxLFxuICAgIHRha2U6IDEsXG4gICAgdGFrZW46IDEsXG4gICAgdGFrZXM6IDEsXG4gICAgdGFraW5nOiAxLFxuICAgIHRhbGU6IDEsXG4gICAgdGFsZW50OiAxLFxuICAgIHRhbGVudGVkOiAxLFxuICAgIHRhbGVzOiAxLFxuICAgIHRhbGs6IDEsXG4gICAgdGFsa2VkOiAxLFxuICAgIHRhbGtpbmc6IDEsXG4gICAgdGFsa3M6IDEsXG4gICAgdGFsbDogMSxcbiAgICB0YW1pbDogMSxcbiAgICB0YW1wYTogMSxcbiAgICB0YW46IDEsXG4gICAgdGFuazogMSxcbiAgICB0YW5rczogMSxcbiAgICB0YW56YW5pYTogMSxcbiAgICB0YXA6IDEsXG4gICAgdGFwZTogMSxcbiAgICB0YXBlczogMSxcbiAgICB0YXI6IDEsXG4gICAgdGFyZ2V0OiAxLFxuICAgIHRhcmdldGVkOiAxLFxuICAgIHRhcmdldHM6IDEsXG4gICAgdGFyaWZmOiAxLFxuICAgIHRhc2s6IDEsXG4gICAgdGFza3M6IDEsXG4gICAgdGFzdGU6IDEsXG4gICAgdGF0dG9vOiAxLFxuICAgIHRhdWdodDogMSxcbiAgICB0YXg6IDEsXG4gICAgdGF4YXRpb246IDEsXG4gICAgdGF4ZXM6IDEsXG4gICAgdGF4aTogMSxcbiAgICB0YXlsb3I6IDEsXG4gICAgdGI6IDEsXG4gICAgdGJhOiAxLFxuICAgIHRjOiAxLFxuICAgIHRjcDogMSxcbiAgICB0ZDogMSxcbiAgICB0ZTogMSxcbiAgICB0ZWE6IDEsXG4gICAgdGVhY2g6IDEsXG4gICAgdGVhY2hlcjogMSxcbiAgICB0ZWFjaGVyczogMSxcbiAgICB0ZWFjaGVzOiAxLFxuICAgIHRlYWNoaW5nOiAxLFxuICAgIHRlYW06IDEsXG4gICAgdGVhbXM6IDEsXG4gICAgdGVhcjogMSxcbiAgICB0ZWFyczogMSxcbiAgICB0ZWNoOiAxLFxuICAgIHRlY2huaWNhbDogMSxcbiAgICB0ZWNobmljaWFuOiAxLFxuICAgIHRlY2huaXF1ZTogMSxcbiAgICB0ZWNobmlxdWVzOiAxLFxuICAgIHRlY2hubzogMSxcbiAgICB0ZWNobm9sb2dpY2FsOiAxLFxuICAgIHRlY2hub2xvZ2llczogMSxcbiAgICB0ZWNobm9sb2d5OiAxLFxuICAgIHRlY2hyZXB1YmxpYzogMSxcbiAgICB0ZWQ6IDEsXG4gICAgdGVkZHk6IDEsXG4gICAgdGVlOiAxLFxuICAgIHRlZW46IDEsXG4gICAgdGVlbmFnZTogMSxcbiAgICB0ZWVuczogMSxcbiAgICB0ZWV0aDogMSxcbiAgICB0ZWw6IDEsXG4gICAgdGVsZWNoYXJnZXI6IDEsXG4gICAgdGVsZWNvbTogMSxcbiAgICB0ZWxlY29tbXVuaWNhdGlvbnM6IDEsXG4gICAgdGVsZXBob25lOiAxLFxuICAgIHRlbGVwaG9ueTogMSxcbiAgICB0ZWxlc2NvcGU6IDEsXG4gICAgdGVsZXZpc2lvbjogMSxcbiAgICB0ZWxldmlzaW9uczogMSxcbiAgICB0ZWxsOiAxLFxuICAgIHRlbGxpbmc6IDEsXG4gICAgdGVsbHM6IDEsXG4gICAgdGVtcDogMSxcbiAgICB0ZW1wZXJhdHVyZTogMSxcbiAgICB0ZW1wZXJhdHVyZXM6IDEsXG4gICAgdGVtcGxhdGU6IDEsXG4gICAgdGVtcGxhdGVzOiAxLFxuICAgIHRlbXBsZTogMSxcbiAgICB0ZW1wb3JhbDogMSxcbiAgICB0ZW1wb3JhcmlseTogMSxcbiAgICB0ZW1wb3Jhcnk6IDEsXG4gICAgdGVuOiAxLFxuICAgIHRlbmFudDogMSxcbiAgICB0ZW5kOiAxLFxuICAgIHRlbmRlcjogMSxcbiAgICB0ZW5uZXNzZWU6IDEsXG4gICAgdGVubmlzOiAxLFxuICAgIHRlbnNpb246IDEsXG4gICAgdGVudDogMSxcbiAgICB0ZXJtOiAxLFxuICAgIHRlcm1pbmFsOiAxLFxuICAgIHRlcm1pbmFsczogMSxcbiAgICB0ZXJtaW5hdGlvbjogMSxcbiAgICB0ZXJtaW5vbG9neTogMSxcbiAgICB0ZXJtczogMSxcbiAgICB0ZXJyYWNlOiAxLFxuICAgIHRlcnJhaW46IDEsXG4gICAgdGVycmlibGU6IDEsXG4gICAgdGVycml0b3JpZXM6IDEsXG4gICAgdGVycml0b3J5OiAxLFxuICAgIHRlcnJvcjogMSxcbiAgICB0ZXJyb3Jpc206IDEsXG4gICAgdGVycm9yaXN0OiAxLFxuICAgIHRlcnJvcmlzdHM6IDEsXG4gICAgdGVycnk6IDEsXG4gICAgdGVzdDogMSxcbiAgICB0ZXN0YW1lbnQ6IDEsXG4gICAgdGVzdGVkOiAxLFxuICAgIHRlc3RpbW9uaWFsczogMSxcbiAgICB0ZXN0aW1vbnk6IDEsXG4gICAgdGVzdGluZzogMSxcbiAgICB0ZXN0czogMSxcbiAgICB0ZXg6IDEsXG4gICAgdGV4YXM6IDEsXG4gICAgdGV4dDogMSxcbiAgICB0ZXh0Ym9vazogMSxcbiAgICB0ZXh0Ym9va3M6IDEsXG4gICAgdGV4dGlsZTogMSxcbiAgICB0ZXh0aWxlczogMSxcbiAgICB0ZXh0czogMSxcbiAgICB0ZXh0dXJlOiAxLFxuICAgIHRmOiAxLFxuICAgIHRmdDogMSxcbiAgICB0Z3A6IDEsXG4gICAgdGg6IDEsXG4gICAgdGhhaTogMSxcbiAgICB0aGFpbGFuZDogMSxcbiAgICB0aGFuOiAxLFxuICAgIHRoYW5rOiAxLFxuICAgIHRoYW5rczogMSxcbiAgICB0aGFua3NnaXZpbmc6IDEsXG4gICAgdGhhdDogMSxcbiAgICB0aGF0czogMSxcbiAgICB0aGU6IDEsXG4gICAgdGhlYXRlcjogMSxcbiAgICB0aGVhdGVyczogMSxcbiAgICB0aGVhdHJlOiAxLFxuICAgIHRoZWU6IDEsXG4gICAgdGhlZnQ6IDEsXG4gICAgdGhlaHVuOiAxLFxuICAgIHRoZWlyOiAxLFxuICAgIHRoZW06IDEsXG4gICAgdGhlbWU6IDEsXG4gICAgdGhlbWVzOiAxLFxuICAgIHRoZW1zZWx2ZXM6IDEsXG4gICAgdGhlbjogMSxcbiAgICB0aGVvbG9neTogMSxcbiAgICB0aGVvcmVtOiAxLFxuICAgIHRoZW9yZXRpY2FsOiAxLFxuICAgIHRoZW9yaWVzOiAxLFxuICAgIHRoZW9yeTogMSxcbiAgICB0aGVyYXBldXRpYzogMSxcbiAgICB0aGVyYXBpc3Q6IDEsXG4gICAgdGhlcmFweTogMSxcbiAgICB0aGVyZTogMSxcbiAgICB0aGVyZWFmdGVyOiAxLFxuICAgIHRoZXJlYnk6IDEsXG4gICAgdGhlcmVmb3JlOiAxLFxuICAgIHRoZXJlb2Y6IDEsXG4gICAgdGhlcm1hbDogMSxcbiAgICB0aGVzYXVydXM6IDEsXG4gICAgdGhlc2U6IDEsXG4gICAgdGhlc2lzOiAxLFxuICAgIHRoZXRhOiAxLFxuICAgIHRoZXk6IDEsXG4gICAgdGhpY2s6IDEsXG4gICAgdGhpY2tuZXNzOiAxLFxuICAgIHRoaW46IDEsXG4gICAgdGhpbmc6IDEsXG4gICAgdGhpbmdzOiAxLFxuICAgIHRoaW5rOiAxLFxuICAgIHRoaW5raW5nOiAxLFxuICAgIHRoaW5rcGFkOiAxLFxuICAgIHRoaW5rczogMSxcbiAgICB0aGlyZDogMSxcbiAgICB0aGlydHk6IDEsXG4gICAgdGhpczogMSxcbiAgICB0aG9tYXM6IDEsXG4gICAgdGhvbXBzb246IDEsXG4gICAgdGhvbXNvbjogMSxcbiAgICB0aG9uZzogMSxcbiAgICB0aG9uZ3M6IDEsXG4gICAgdGhvcm91Z2g6IDEsXG4gICAgdGhvcm91Z2hseTogMSxcbiAgICB0aG9zZTogMSxcbiAgICB0aG91OiAxLFxuICAgIHRob3VnaDogMSxcbiAgICB0aG91Z2h0OiAxLFxuICAgIHRob3VnaHRzOiAxLFxuICAgIHRob3VzYW5kOiAxLFxuICAgIHRob3VzYW5kczogMSxcbiAgICB0aHJlYWQ6IDEsXG4gICAgdGhyZWFkZWQ6IDEsXG4gICAgdGhyZWFkczogMSxcbiAgICB0aHJlYXQ6IDEsXG4gICAgdGhyZWF0ZW5lZDogMSxcbiAgICB0aHJlYXRlbmluZzogMSxcbiAgICB0aHJlYXRzOiAxLFxuICAgIHRocmVlOiAxLFxuICAgIHRocmVlc29tZTogMSxcbiAgICB0aHJlc2hvbGQ6IDEsXG4gICAgdGhyaWxsZXI6IDEsXG4gICAgdGhyb2F0OiAxLFxuICAgIHRocm91Z2g6IDEsXG4gICAgdGhyb3VnaG91dDogMSxcbiAgICB0aHJvdzogMSxcbiAgICB0aHJvd2luZzogMSxcbiAgICB0aHJvd246IDEsXG4gICAgdGhyb3dzOiAxLFxuICAgIHRocnU6IDEsXG4gICAgdGh1OiAxLFxuICAgIHRodW1iOiAxLFxuICAgIHRodW1ibmFpbDogMSxcbiAgICB0aHVtYm5haWxzOiAxLFxuICAgIHRodW1iczogMSxcbiAgICB0aHVtYnppbGxhOiAxLFxuICAgIHRodW5kZXI6IDEsXG4gICAgdGh1cnNkYXk6IDEsXG4gICAgdGh1czogMSxcbiAgICB0aHk6IDEsXG4gICAgdGk6IDEsXG4gICAgdGlja2V0OiAxLFxuICAgIHRpY2tldHM6IDEsXG4gICAgdGlkZTogMSxcbiAgICB0aWU6IDEsXG4gICAgdGllZDogMSxcbiAgICB0aWVyOiAxLFxuICAgIHRpZXM6IDEsXG4gICAgdGlmZmFueTogMSxcbiAgICB0aWdlcjogMSxcbiAgICB0aWdlcnM6IDEsXG4gICAgdGlnaHQ6IDEsXG4gICAgdGlsOiAxLFxuICAgIHRpbGU6IDEsXG4gICAgdGlsZXM6IDEsXG4gICAgdGlsbDogMSxcbiAgICB0aW06IDEsXG4gICAgdGltYmVyOiAxLFxuICAgIHRpbWU6IDEsXG4gICAgdGltZWxpbmU6IDEsXG4gICAgdGltZWx5OiAxLFxuICAgIHRpbWVyOiAxLFxuICAgIHRpbWVzOiAxLFxuICAgIHRpbWluZzogMSxcbiAgICB0aW1vdGh5OiAxLFxuICAgIHRpbjogMSxcbiAgICB0aW55OiAxLFxuICAgIHRpb246IDEsXG4gICAgdGlvbnM6IDEsXG4gICAgdGlwOiAxLFxuICAgIHRpcHM6IDEsXG4gICAgdGlyZTogMSxcbiAgICB0aXJlZDogMSxcbiAgICB0aXJlczogMSxcbiAgICB0aXNzdWU6IDEsXG4gICAgdGl0OiAxLFxuICAgIHRpdGFuaXVtOiAxLFxuICAgIHRpdGFuczogMSxcbiAgICB0aXRsZTogMSxcbiAgICB0aXRsZWQ6IDEsXG4gICAgdGl0bGVzOiAxLFxuICAgIHRpdHM6IDEsXG4gICAgdGl0dGVuOiAxLFxuICAgIHRtOiAxLFxuICAgIHRtcDogMSxcbiAgICB0bjogMSxcbiAgICB0bzogMSxcbiAgICB0b2JhY2NvOiAxLFxuICAgIHRvYmFnbzogMSxcbiAgICB0b2RheTogMSxcbiAgICB0b2RkOiAxLFxuICAgIHRvZGRsZXI6IDEsXG4gICAgdG9lOiAxLFxuICAgIHRvZ2V0aGVyOiAxLFxuICAgIHRvaWxldDogMSxcbiAgICB0b2tlbjogMSxcbiAgICB0b2t5bzogMSxcbiAgICB0b2xkOiAxLFxuICAgIHRvbGVyYW5jZTogMSxcbiAgICB0b2xsOiAxLFxuICAgIHRvbTogMSxcbiAgICB0b21hdG86IDEsXG4gICAgdG9tYXRvZXM6IDEsXG4gICAgdG9tbXk6IDEsXG4gICAgdG9tb3Jyb3c6IDEsXG4gICAgdG9uOiAxLFxuICAgIHRvbmU6IDEsXG4gICAgdG9uZXI6IDEsXG4gICAgdG9uZXM6IDEsXG4gICAgdG9uZ3VlOiAxLFxuICAgIHRvbmlnaHQ6IDEsXG4gICAgdG9uczogMSxcbiAgICB0b255OiAxLFxuICAgIHRvbzogMSxcbiAgICB0b29rOiAxLFxuICAgIHRvb2w6IDEsXG4gICAgdG9vbGJhcjogMSxcbiAgICB0b29sYm94OiAxLFxuICAgIHRvb2xraXQ6IDEsXG4gICAgdG9vbHM6IDEsXG4gICAgdG9vdGg6IDEsXG4gICAgdG9wOiAxLFxuICAgIHRvcGljOiAxLFxuICAgIHRvcGljczogMSxcbiAgICB0b3BsZXNzOiAxLFxuICAgIHRvcHM6IDEsXG4gICAgdG9yb250bzogMSxcbiAgICB0b3J0dXJlOiAxLFxuICAgIHRvc2hpYmE6IDEsXG4gICAgdG90YWw6IDEsXG4gICAgdG90YWxseTogMSxcbiAgICB0b3RhbHM6IDEsXG4gICAgdG91Y2g6IDEsXG4gICAgdG91Y2hlZDogMSxcbiAgICB0b3VnaDogMSxcbiAgICB0b3VyOiAxLFxuICAgIHRvdXJpbmc6IDEsXG4gICAgdG91cmlzbTogMSxcbiAgICB0b3VyaXN0OiAxLFxuICAgIHRvdXJuYW1lbnQ6IDEsXG4gICAgdG91cm5hbWVudHM6IDEsXG4gICAgdG91cnM6IDEsXG4gICAgdG93YXJkOiAxLFxuICAgIHRvd2FyZHM6IDEsXG4gICAgdG93ZXI6IDEsXG4gICAgdG93ZXJzOiAxLFxuICAgIHRvd246IDEsXG4gICAgdG93bnM6IDEsXG4gICAgdG93bnNoaXA6IDEsXG4gICAgdG94aWM6IDEsXG4gICAgdG95OiAxLFxuICAgIHRveW90YTogMSxcbiAgICB0b3lzOiAxLFxuICAgIHRwOiAxLFxuICAgIHRyOiAxLFxuICAgIHRyYWNlOiAxLFxuICAgIHRyYWNrOiAxLFxuICAgIHRyYWNrYmFjazogMSxcbiAgICB0cmFja2JhY2tzOiAxLFxuICAgIHRyYWNrZWQ6IDEsXG4gICAgdHJhY2tlcjogMSxcbiAgICB0cmFja2luZzogMSxcbiAgICB0cmFja3M6IDEsXG4gICAgdHJhY3Q6IDEsXG4gICAgdHJhY3RvcjogMSxcbiAgICB0cmFjeTogMSxcbiAgICB0cmFkZTogMSxcbiAgICB0cmFkZW1hcms6IDEsXG4gICAgdHJhZGVtYXJrczogMSxcbiAgICB0cmFkZXI6IDEsXG4gICAgdHJhZGVzOiAxLFxuICAgIHRyYWRpbmc6IDEsXG4gICAgdHJhZGl0aW9uOiAxLFxuICAgIHRyYWRpdGlvbmFsOiAxLFxuICAgIHRyYWRpdGlvbnM6IDEsXG4gICAgdHJhZmZpYzogMSxcbiAgICB0cmFnZWR5OiAxLFxuICAgIHRyYWlsOiAxLFxuICAgIHRyYWlsZXI6IDEsXG4gICAgdHJhaWxlcnM6IDEsXG4gICAgdHJhaWxzOiAxLFxuICAgIHRyYWluOiAxLFxuICAgIHRyYWluZWQ6IDEsXG4gICAgdHJhaW5lcjogMSxcbiAgICB0cmFpbmVyczogMSxcbiAgICB0cmFpbmluZzogMSxcbiAgICB0cmFpbnM6IDEsXG4gICAgdHJhbWFkb2w6IDEsXG4gICAgdHJhbmNlOiAxLFxuICAgIHRyYW5ueTogMSxcbiAgICB0cmFuczogMSxcbiAgICB0cmFuc2FjdGlvbjogMSxcbiAgICB0cmFuc2FjdGlvbnM6IDEsXG4gICAgdHJhbnNjcmlwdDogMSxcbiAgICB0cmFuc2NyaXB0aW9uOiAxLFxuICAgIHRyYW5zY3JpcHRzOiAxLFxuICAgIHRyYW5zZXh1YWw6IDEsXG4gICAgdHJhbnNleHVhbGVzOiAxLFxuICAgIHRyYW5zZmVyOiAxLFxuICAgIHRyYW5zZmVycmVkOiAxLFxuICAgIHRyYW5zZmVyczogMSxcbiAgICB0cmFuc2Zvcm06IDEsXG4gICAgdHJhbnNmb3JtYXRpb246IDEsXG4gICAgdHJhbnNpdDogMSxcbiAgICB0cmFuc2l0aW9uOiAxLFxuICAgIHRyYW5zbGF0ZTogMSxcbiAgICB0cmFuc2xhdGVkOiAxLFxuICAgIHRyYW5zbGF0aW9uOiAxLFxuICAgIHRyYW5zbGF0aW9uczogMSxcbiAgICB0cmFuc2xhdG9yOiAxLFxuICAgIHRyYW5zbWlzc2lvbjogMSxcbiAgICB0cmFuc21pdDogMSxcbiAgICB0cmFuc21pdHRlZDogMSxcbiAgICB0cmFuc3BhcmVuY3k6IDEsXG4gICAgdHJhbnNwYXJlbnQ6IDEsXG4gICAgdHJhbnNwb3J0OiAxLFxuICAgIHRyYW5zcG9ydGF0aW9uOiAxLFxuICAgIHRyYW5zc2V4dWFsOiAxLFxuICAgIHRyYXA6IDEsXG4gICAgdHJhc2g6IDEsXG4gICAgdHJhdW1hOiAxLFxuICAgIHRyYXZlbDogMSxcbiAgICB0cmF2ZWxlcjogMSxcbiAgICB0cmF2ZWxlcnM6IDEsXG4gICAgdHJhdmVsaW5nOiAxLFxuICAgIHRyYXZlbGxlcjogMSxcbiAgICB0cmF2ZWxsaW5nOiAxLFxuICAgIHRyYXZlbHM6IDEsXG4gICAgdHJhdmVzdGk6IDEsXG4gICAgdHJhdmlzOiAxLFxuICAgIHRyYXk6IDEsXG4gICAgdHJlYXN1cmU6IDEsXG4gICAgdHJlYXN1cmVyOiAxLFxuICAgIHRyZWFzdXJlczogMSxcbiAgICB0cmVhc3VyeTogMSxcbiAgICB0cmVhdDogMSxcbiAgICB0cmVhdGVkOiAxLFxuICAgIHRyZWF0aW5nOiAxLFxuICAgIHRyZWF0bWVudDogMSxcbiAgICB0cmVhdG1lbnRzOiAxLFxuICAgIHRyZWF0eTogMSxcbiAgICB0cmVlOiAxLFxuICAgIHRyZWVzOiAxLFxuICAgIHRyZWs6IDEsXG4gICAgdHJlbWJsOiAxLFxuICAgIHRyZW1lbmRvdXM6IDEsXG4gICAgdHJlbmQ6IDEsXG4gICAgdHJlbmRzOiAxLFxuICAgIHRyZW86IDEsXG4gICAgdHJpOiAxLFxuICAgIHRyaWFsOiAxLFxuICAgIHRyaWFsczogMSxcbiAgICB0cmlhbmdsZTogMSxcbiAgICB0cmliYWw6IDEsXG4gICAgdHJpYmU6IDEsXG4gICAgdHJpYmVzOiAxLFxuICAgIHRyaWJ1bmFsOiAxLFxuICAgIHRyaWJ1bmU6IDEsXG4gICAgdHJpYnV0ZTogMSxcbiAgICB0cmljazogMSxcbiAgICB0cmlja3M6IDEsXG4gICAgdHJpZWQ6IDEsXG4gICAgdHJpZXM6IDEsXG4gICAgdHJpZ2dlcjogMSxcbiAgICB0cmltOiAxLFxuICAgIHRyaW5pZGFkOiAxLFxuICAgIHRyaW5pdHk6IDEsXG4gICAgdHJpbzogMSxcbiAgICB0cmlwOiAxLFxuICAgIHRyaXBhZHZpc29yOiAxLFxuICAgIHRyaXBsZTogMSxcbiAgICB0cmlwczogMSxcbiAgICB0cml1bXBoOiAxLFxuICAgIHRyaXZpYTogMSxcbiAgICB0cm9vcHM6IDEsXG4gICAgdHJvcGljYWw6IDEsXG4gICAgdHJvdWJsZTogMSxcbiAgICB0cm91Ymxlc2hvb3Rpbmc6IDEsXG4gICAgdHJvdXQ6IDEsXG4gICAgdHJveTogMSxcbiAgICB0cnVjazogMSxcbiAgICB0cnVja3M6IDEsXG4gICAgdHJ1ZTogMSxcbiAgICB0cnVseTogMSxcbiAgICB0cnVuazogMSxcbiAgICB0cnVzdDogMSxcbiAgICB0cnVzdGVkOiAxLFxuICAgIHRydXN0ZWU6IDEsXG4gICAgdHJ1c3RlZXM6IDEsXG4gICAgdHJ1c3RzOiAxLFxuICAgIHRydXRoOiAxLFxuICAgIHRyeTogMSxcbiAgICB0cnlpbmc6IDEsXG4gICAgdHM6IDEsXG4gICAgdHN1bmFtaTogMSxcbiAgICB0dDogMSxcbiAgICB0dTogMSxcbiAgICB0dWI6IDEsXG4gICAgdHViZTogMSxcbiAgICB0dWJlczogMSxcbiAgICB0dWNzb246IDEsXG4gICAgdHVlOiAxLFxuICAgIHR1ZXNkYXk6IDEsXG4gICAgdHVpdGlvbjogMSxcbiAgICB0dWxzYTogMSxcbiAgICB0dW1vcjogMSxcbiAgICB0dW5lOiAxLFxuICAgIHR1bmVyOiAxLFxuICAgIHR1bmVzOiAxLFxuICAgIHR1bmluZzogMSxcbiAgICB0dW5pc2lhOiAxLFxuICAgIHR1bm5lbDogMSxcbiAgICB0dXJibzogMSxcbiAgICB0dXJrZXk6IDEsXG4gICAgdHVya2lzaDogMSxcbiAgICB0dXJuOiAxLFxuICAgIHR1cm5lZDogMSxcbiAgICB0dXJuZXI6IDEsXG4gICAgdHVybmluZzogMSxcbiAgICB0dXJuczogMSxcbiAgICB0dXJ0bGU6IDEsXG4gICAgdHV0b3JpYWw6IDEsXG4gICAgdHV0b3JpYWxzOiAxLFxuICAgIHR2OiAxLFxuICAgIHR2czogMSxcbiAgICB0d2VsdmU6IDEsXG4gICAgdHdlbnR5OiAxLFxuICAgIHR3aWNlOiAxLFxuICAgIHR3aWtpOiAxLFxuICAgIHR3aW46IDEsXG4gICAgdHdpbmtzOiAxLFxuICAgIHR3aW5zOiAxLFxuICAgIHR3aXN0OiAxLFxuICAgIHR3aXN0ZWQ6IDEsXG4gICAgdHdvOiAxLFxuICAgIHR4OiAxLFxuICAgIHR5OiAxLFxuICAgIHR5bGVyOiAxLFxuICAgIHR5cGU6IDEsXG4gICAgdHlwZXM6IDEsXG4gICAgdHlwaWNhbDogMSxcbiAgICB0eXBpY2FsbHk6IDEsXG4gICAgdHlwaW5nOiAxLFxuICAgIHU6IDEsXG4gICAgdWM6IDEsXG4gICAgdWdhbmRhOiAxLFxuICAgIHVnbHk6IDEsXG4gICAgdWg6IDEsXG4gICAgdWk6IDEsXG4gICAgdWs6IDEsXG4gICAgdWtyYWluZTogMSxcbiAgICB1bDogMSxcbiAgICB1bHRpbWF0ZTogMSxcbiAgICB1bHRpbWF0ZWx5OiAxLFxuICAgIHVsdHJhOiAxLFxuICAgIHVsdHJhbTogMSxcbiAgICB1bTogMSxcbiAgICB1bjogMSxcbiAgICB1bmE6IDEsXG4gICAgdW5hYmxlOiAxLFxuICAgIHVuYXV0aG9yaXplZDogMSxcbiAgICB1bmF2YWlsYWJsZTogMSxcbiAgICB1bmNlcnRhaW50eTogMSxcbiAgICB1bmNsZTogMSxcbiAgICB1bmQ6IDEsXG4gICAgdW5kZWZpbmVkOiAxLFxuICAgIHVuZGVyOiAxLFxuICAgIHVuZGVyZ3JhZHVhdGU6IDEsXG4gICAgdW5kZXJncm91bmQ6IDEsXG4gICAgdW5kZXJseWluZzogMSxcbiAgICB1bmRlcnN0YW5kOiAxLFxuICAgIHVuZGVyc3RhbmRpbmc6IDEsXG4gICAgdW5kZXJzdG9vZDogMSxcbiAgICB1bmRlcnRha2U6IDEsXG4gICAgdW5kZXJ0YWtlbjogMSxcbiAgICB1bmRlcndlYXI6IDEsXG4gICAgdW5kbzogMSxcbiAgICB1bmU6IDEsXG4gICAgdW5lbXBsb3ltZW50OiAxLFxuICAgIHVuZXhwZWN0ZWQ6IDEsXG4gICAgdW5mb3J0dW5hdGVseTogMSxcbiAgICB1bmk6IDEsXG4gICAgdW5pZmllZDogMSxcbiAgICB1bmlmb3JtOiAxLFxuICAgIHVuaW9uOiAxLFxuICAgIHVuaW9uczogMSxcbiAgICB1bmlwcm90a2I6IDEsXG4gICAgdW5pcXVlOiAxLFxuICAgIHVuaXQ6IDEsXG4gICAgdW5pdGVkOiAxLFxuICAgIHVuaXRzOiAxLFxuICAgIHVuaXR5OiAxLFxuICAgIHVuaXY6IDEsXG4gICAgdW5pdmVyc2FsOiAxLFxuICAgIHVuaXZlcnNlOiAxLFxuICAgIHVuaXZlcnNpdGllczogMSxcbiAgICB1bml2ZXJzaXR5OiAxLFxuICAgIHVuaXg6IDEsXG4gICAgdW5rbm93bjogMSxcbiAgICB1bmxlc3M6IDEsXG4gICAgdW5saWtlOiAxLFxuICAgIHVubGlrZWx5OiAxLFxuICAgIHVubGltaXRlZDogMSxcbiAgICB1bmxvY2s6IDEsXG4gICAgdW5uZWNlc3Nhcnk6IDEsXG4gICAgdW5zaWduZWQ6IDEsXG4gICAgdW5zdWJzY3JpYmU6IDEsXG4gICAgdW50aWw6IDEsXG4gICAgdW50aXRsZWQ6IDEsXG4gICAgdW50bzogMSxcbiAgICB1bnVzdWFsOiAxLFxuICAgIHVud3JhcDogMSxcbiAgICB1cDogMSxcbiAgICB1cGM6IDEsXG4gICAgdXBjb21pbmc6IDEsXG4gICAgdXBkYXRlOiAxLFxuICAgIHVwZGF0ZWQ6IDEsXG4gICAgdXBkYXRlczogMSxcbiAgICB1cGRhdGluZzogMSxcbiAgICB1cGdyYWRlOiAxLFxuICAgIHVwZ3JhZGVzOiAxLFxuICAgIHVwZ3JhZGluZzogMSxcbiAgICB1cGxvYWQ6IDEsXG4gICAgdXBsb2FkZWQ6IDEsXG4gICAgdXBvbjogMSxcbiAgICB1cHBlcjogMSxcbiAgICB1cHM6IDEsXG4gICAgdXBzZXQ6IDEsXG4gICAgdXBza2lydDogMSxcbiAgICB1cHNraXJ0czogMSxcbiAgICB1cjogMSxcbiAgICB1cmJhbjogMSxcbiAgICB1cmdlOiAxLFxuICAgIHVyZ2VudDogMSxcbiAgICB1cmk6IDEsXG4gICAgdXJsOiAxLFxuICAgIHVybHM6IDEsXG4gICAgdXJ1Z3VheTogMSxcbiAgICB1cnc6IDEsXG4gICAgdXM6IDEsXG4gICAgdXNhOiAxLFxuICAgIHVzYWdlOiAxLFxuICAgIHVzYjogMSxcbiAgICB1c2M6IDEsXG4gICAgdXNkOiAxLFxuICAgIHVzZGE6IDEsXG4gICAgdXNlOiAxLFxuICAgIHVzZWQ6IDEsXG4gICAgdXNlZnVsOiAxLFxuICAgIHVzZXI6IDEsXG4gICAgdXNlcm5hbWU6IDEsXG4gICAgdXNlcnM6IDEsXG4gICAgdXNlczogMSxcbiAgICB1c2dzOiAxLFxuICAgIHVzaW5nOiAxLFxuICAgIHVzcHM6IDEsXG4gICAgdXNyOiAxLFxuICAgIHVzdWFsOiAxLFxuICAgIHVzdWFsbHk6IDEsXG4gICAgdXQ6IDEsXG4gICAgdXRhaDogMSxcbiAgICB1dGM6IDEsXG4gICAgdXRpbGl0aWVzOiAxLFxuICAgIHV0aWxpdHk6IDEsXG4gICAgdXRpbGl6YXRpb246IDEsXG4gICAgdXRpbGl6ZTogMSxcbiAgICB1dGlsczogMSxcbiAgICB1djogMSxcbiAgICB1dzogMSxcbiAgICB1emJla2lzdGFuOiAxLFxuICAgIHY6IDEsXG4gICAgdmE6IDEsXG4gICAgdmFjYW5jaWVzOiAxLFxuICAgIHZhY2F0aW9uOiAxLFxuICAgIHZhY2F0aW9uczogMSxcbiAgICB2YWNjaW5lOiAxLFxuICAgIHZhY3V1bTogMSxcbiAgICB2YWdpbmE6IDEsXG4gICAgdmFsOiAxLFxuICAgIHZhbGVudGluZTogMSxcbiAgICB2YWxpZDogMSxcbiAgICB2YWxpZGF0aW9uOiAxLFxuICAgIHZhbGlkaXR5OiAxLFxuICAgIHZhbGl1bTogMSxcbiAgICB2YWxsZXk6IDEsXG4gICAgdmFsdWFibGU6IDEsXG4gICAgdmFsdWF0aW9uOiAxLFxuICAgIHZhbHVlOiAxLFxuICAgIHZhbHVlZDogMSxcbiAgICB2YWx1ZXM6IDEsXG4gICAgdmFsdmU6IDEsXG4gICAgdmFsdmVzOiAxLFxuICAgIHZhbXBpcmU6IDEsXG4gICAgdmFuOiAxLFxuICAgIHZhbmNvdXZlcjogMSxcbiAgICB2YW5pbGxhOiAxLFxuICAgIHZhcjogMSxcbiAgICB2YXJpYWJsZTogMSxcbiAgICB2YXJpYWJsZXM6IDEsXG4gICAgdmFyaWFuY2U6IDEsXG4gICAgdmFyaWF0aW9uOiAxLFxuICAgIHZhcmlhdGlvbnM6IDEsXG4gICAgdmFyaWVkOiAxLFxuICAgIHZhcmllczogMSxcbiAgICB2YXJpZXRpZXM6IDEsXG4gICAgdmFyaWV0eTogMSxcbiAgICB2YXJpb3VzOiAxLFxuICAgIHZhcnk6IDEsXG4gICAgdmFyeWluZzogMSxcbiAgICB2YXN0OiAxLFxuICAgIHZhdDogMSxcbiAgICB2YXRpY2FuOiAxLFxuICAgIHZhdWx0OiAxLFxuICAgIHZiOiAxLFxuICAgIHZidWxsZXRpbjogMSxcbiAgICB2YzogMSxcbiAgICB2Y3I6IDEsXG4gICAgdmU6IDEsXG4gICAgdmVjdG9yOiAxLFxuICAgIHZlZ2FzOiAxLFxuICAgIHZlZ2V0YWJsZTogMSxcbiAgICB2ZWdldGFibGVzOiAxLFxuICAgIHZlZ2V0YXJpYW46IDEsXG4gICAgdmVnZXRhdGlvbjogMSxcbiAgICB2ZWhpY2xlOiAxLFxuICAgIHZlaGljbGVzOiAxLFxuICAgIHZlbG9jaXR5OiAxLFxuICAgIHZlbHZldDogMSxcbiAgICB2ZW5kb3I6IDEsXG4gICAgdmVuZG9yczogMSxcbiAgICB2ZW5lenVlbGE6IDEsXG4gICAgdmVuaWNlOiAxLFxuICAgIHZlbnR1cmU6IDEsXG4gICAgdmVudHVyZXM6IDEsXG4gICAgdmVudWU6IDEsXG4gICAgdmVudWVzOiAxLFxuICAgIHZlcjogMSxcbiAgICB2ZXJiYWw6IDEsXG4gICAgdmVyZGU6IDEsXG4gICAgdmVyaWZpY2F0aW9uOiAxLFxuICAgIHZlcmlmaWVkOiAxLFxuICAgIHZlcmlmeTogMSxcbiAgICB2ZXJpem9uOiAxLFxuICAgIHZlcm1vbnQ6IDEsXG4gICAgdmVybm9uOiAxLFxuICAgIHZlcnNlOiAxLFxuICAgIHZlcnNpb246IDEsXG4gICAgdmVyc2lvbnM6IDEsXG4gICAgdmVyc3VzOiAxLFxuICAgIHZlcnRleDogMSxcbiAgICB2ZXJ0aWNhbDogMSxcbiAgICB2ZXJ5OiAxLFxuICAgIHZlcnplaWNobmlzOiAxLFxuICAgIHZlc3NlbDogMSxcbiAgICB2ZXNzZWxzOiAxLFxuICAgIHZldGVyYW46IDEsXG4gICAgdmV0ZXJhbnM6IDEsXG4gICAgdmV0ZXJpbmFyeTogMSxcbiAgICB2ZzogMSxcbiAgICB2aHM6IDEsXG4gICAgdmk6IDEsXG4gICAgdmlhOiAxLFxuICAgIHZpYWdyYTogMSxcbiAgICB2aWJyYXRvcjogMSxcbiAgICB2aWJyYXRvcnM6IDEsXG4gICAgdmljOiAxLFxuICAgIHZpY2U6IDEsXG4gICAgdmljdGltOiAxLFxuICAgIHZpY3RpbXM6IDEsXG4gICAgdmljdG9yOiAxLFxuICAgIHZpY3RvcmlhOiAxLFxuICAgIHZpY3RvcmlhbjogMSxcbiAgICB2aWN0b3J5OiAxLFxuICAgIHZpZDogMSxcbiAgICB2aWRlbzogMSxcbiAgICB2aWRlb3M6IDEsXG4gICAgdmlkczogMSxcbiAgICB2aWVubmE6IDEsXG4gICAgdmlldG5hbTogMSxcbiAgICB2aWV0bmFtZXNlOiAxLFxuICAgIHZpZXc6IDEsXG4gICAgdmlld2VkOiAxLFxuICAgIHZpZXdlcjogMSxcbiAgICB2aWV3ZXJzOiAxLFxuICAgIHZpZXdpbmc6IDEsXG4gICAgdmlld3BpY3R1cmU6IDEsXG4gICAgdmlld3M6IDEsXG4gICAgdmlpOiAxLFxuICAgIHZpaWk6IDEsXG4gICAgdmlraW5nOiAxLFxuICAgIHZpbGxhOiAxLFxuICAgIHZpbGxhZ2U6IDEsXG4gICAgdmlsbGFnZXM6IDEsXG4gICAgdmlsbGFzOiAxLFxuICAgIHZpbmNlbnQ6IDEsXG4gICAgdmludGFnZTogMSxcbiAgICB2aW55bDogMSxcbiAgICB2aW9sYXRpb246IDEsXG4gICAgdmlvbGF0aW9uczogMSxcbiAgICB2aW9sZW5jZTogMSxcbiAgICB2aW9sZW50OiAxLFxuICAgIHZpb2xpbjogMSxcbiAgICB2aXA6IDEsXG4gICAgdmlyYWw6IDEsXG4gICAgdmlyZ2luOiAxLFxuICAgIHZpcmdpbmlhOiAxLFxuICAgIHZpcnR1YWw6IDEsXG4gICAgdmlydHVhbGx5OiAxLFxuICAgIHZpcnR1ZTogMSxcbiAgICB2aXJ1czogMSxcbiAgICB2aXJ1c2VzOiAxLFxuICAgIHZpc2E6IDEsXG4gICAgdmlzaWJpbGl0eTogMSxcbiAgICB2aXNpYmxlOiAxLFxuICAgIHZpc2lvbjogMSxcbiAgICB2aXNpdDogMSxcbiAgICB2aXNpdGVkOiAxLFxuICAgIHZpc2l0aW5nOiAxLFxuICAgIHZpc2l0b3I6IDEsXG4gICAgdmlzaXRvcnM6IDEsXG4gICAgdmlzaXRzOiAxLFxuICAgIHZpc3RhOiAxLFxuICAgIHZpc3VhbDogMSxcbiAgICB2aXRhbDogMSxcbiAgICB2aXRhbWluOiAxLFxuICAgIHZpdGFtaW5zOiAxLFxuICAgIHZvY2FidWxhcnk6IDEsXG4gICAgdm9jYWw6IDEsXG4gICAgdm9jYWxzOiAxLFxuICAgIHZvY2F0aW9uYWw6IDEsXG4gICAgdm9pY2U6IDEsXG4gICAgdm9pY2VzOiAxLFxuICAgIHZvaWQ6IDEsXG4gICAgdm9pcDogMSxcbiAgICB2b2w6IDEsXG4gICAgdm9sa3N3YWdlbjogMSxcbiAgICB2b2xsZXliYWxsOiAxLFxuICAgIHZvbHQ6IDEsXG4gICAgdm9sdGFnZTogMSxcbiAgICB2b2x1bWU6IDEsXG4gICAgdm9sdW1lczogMSxcbiAgICB2b2x1bnRhcnk6IDEsXG4gICAgdm9sdW50ZWVyOiAxLFxuICAgIHZvbHVudGVlcnM6IDEsXG4gICAgdm9sdm86IDEsXG4gICAgdm9uOiAxLFxuICAgIHZvdGU6IDEsXG4gICAgdm90ZWQ6IDEsXG4gICAgdm90ZXJzOiAxLFxuICAgIHZvdGVzOiAxLFxuICAgIHZvdGluZzogMSxcbiAgICB2b3lldXI6IDEsXG4gICAgdm95ZXVyd2ViOiAxLFxuICAgIHZveXVlcjogMSxcbiAgICB2cDogMSxcbiAgICB2cG46IDEsXG4gICAgdnM6IDEsXG4gICAgdnNuZXQ6IDEsXG4gICAgdnQ6IDEsXG4gICAgdnVsbmVyYWJpbGl0eTogMSxcbiAgICB2dWxuZXJhYmxlOiAxLFxuICAgIHc6IDEsXG4gICAgd2E6IDEsXG4gICAgd2FnZTogMSxcbiAgICB3YWdlczogMSxcbiAgICB3YWduZXI6IDEsXG4gICAgd2Fnb246IDEsXG4gICAgd2FpdDogMSxcbiAgICB3YWl0aW5nOiAxLFxuICAgIHdhaXZlcjogMSxcbiAgICB3YWtlOiAxLFxuICAgIHdhbDogMSxcbiAgICB3YWxlczogMSxcbiAgICB3YWxrOiAxLFxuICAgIHdhbGtlZDogMSxcbiAgICB3YWxrZXI6IDEsXG4gICAgd2Fsa2luZzogMSxcbiAgICB3YWxrczogMSxcbiAgICB3YWxsOiAxLFxuICAgIHdhbGxhY2U6IDEsXG4gICAgd2FsbGV0OiAxLFxuICAgIHdhbGxwYXBlcjogMSxcbiAgICB3YWxscGFwZXJzOiAxLFxuICAgIHdhbGxzOiAxLFxuICAgIHdhbG51dDogMSxcbiAgICB3YWx0OiAxLFxuICAgIHdhbHRlcjogMSxcbiAgICB3YW46IDEsXG4gICAgd2FuZzogMSxcbiAgICB3YW5uYTogMSxcbiAgICB3YW50OiAxLFxuICAgIHdhbnRlZDogMSxcbiAgICB3YW50aW5nOiAxLFxuICAgIHdhbnRzOiAxLFxuICAgIHdhcjogMSxcbiAgICB3YXJjcmFmdDogMSxcbiAgICB3YXJkOiAxLFxuICAgIHdhcmU6IDEsXG4gICAgd2FyZWhvdXNlOiAxLFxuICAgIHdhcm06IDEsXG4gICAgd2FybWluZzogMSxcbiAgICB3YXJuZWQ6IDEsXG4gICAgd2FybmVyOiAxLFxuICAgIHdhcm5pbmc6IDEsXG4gICAgd2FybmluZ3M6IDEsXG4gICAgd2FycmFudDogMSxcbiAgICB3YXJyYW50aWVzOiAxLFxuICAgIHdhcnJhbnR5OiAxLFxuICAgIHdhcnJlbjogMSxcbiAgICB3YXJyaW9yOiAxLFxuICAgIHdhcnJpb3JzOiAxLFxuICAgIHdhcnM6IDEsXG4gICAgd2FzOiAxLFxuICAgIHdhc2g6IDEsXG4gICAgd2FzaGVyOiAxLFxuICAgIHdhc2hpbmc6IDEsXG4gICAgd2FzaGluZ3RvbjogMSxcbiAgICB3YXN0ZTogMSxcbiAgICB3YXRjaDogMSxcbiAgICB3YXRjaGVkOiAxLFxuICAgIHdhdGNoZXM6IDEsXG4gICAgd2F0Y2hpbmc6IDEsXG4gICAgd2F0ZXI6IDEsXG4gICAgd2F0ZXJwcm9vZjogMSxcbiAgICB3YXRlcnM6IDEsXG4gICAgd2F0ZXJzaGVkOiAxLFxuICAgIHdhdHNvbjogMSxcbiAgICB3YXR0OiAxLFxuICAgIHdhdHRzOiAxLFxuICAgIHdhdjogMSxcbiAgICB3YXZlOiAxLFxuICAgIHdhdmVzOiAxLFxuICAgIHdheDogMSxcbiAgICB3YXk6IDEsXG4gICAgd2F5bmU6IDEsXG4gICAgd2F5czogMSxcbiAgICB3YjogMSxcbiAgICB3YzogMSxcbiAgICB3ZTogMSxcbiAgICB3ZWFrOiAxLFxuICAgIHdlYWx0aDogMSxcbiAgICB3ZWFwb246IDEsXG4gICAgd2VhcG9uczogMSxcbiAgICB3ZWFyOiAxLFxuICAgIHdlYXJpbmc6IDEsXG4gICAgd2VhdGhlcjogMSxcbiAgICB3ZWI6IDEsXG4gICAgd2ViY2FtOiAxLFxuICAgIHdlYmNhbXM6IDEsXG4gICAgd2ViY2FzdDogMSxcbiAgICB3ZWJsb2c6IDEsXG4gICAgd2VibG9nczogMSxcbiAgICB3ZWJtYXN0ZXI6IDEsXG4gICAgd2VibWFzdGVyczogMSxcbiAgICB3ZWJwYWdlOiAxLFxuICAgIHdlYnNob3RzOiAxLFxuICAgIHdlYnNpdGU6IDEsXG4gICAgd2Vic2l0ZXM6IDEsXG4gICAgd2Vic3RlcjogMSxcbiAgICB3ZWQ6IDEsXG4gICAgd2VkZGluZzogMSxcbiAgICB3ZWRkaW5nczogMSxcbiAgICB3ZWRuZXNkYXk6IDEsXG4gICAgd2VlZDogMSxcbiAgICB3ZWVrOiAxLFxuICAgIHdlZWtlbmQ6IDEsXG4gICAgd2Vla2VuZHM6IDEsXG4gICAgd2Vla2x5OiAxLFxuICAgIHdlZWtzOiAxLFxuICAgIHdlaWdodDogMSxcbiAgICB3ZWlnaHRlZDogMSxcbiAgICB3ZWlnaHRzOiAxLFxuICAgIHdlaXJkOiAxLFxuICAgIHdlbGNvbWU6IDEsXG4gICAgd2VsZGluZzogMSxcbiAgICB3ZWxmYXJlOiAxLFxuICAgIHdlbGw6IDEsXG4gICAgd2VsbGluZ3RvbjogMSxcbiAgICB3ZWxsbmVzczogMSxcbiAgICB3ZWxsczogMSxcbiAgICB3ZWxzaDogMSxcbiAgICB3ZW5keTogMSxcbiAgICB3ZW50OiAxLFxuICAgIHdlcmU6IDEsXG4gICAgd2VzbGV5OiAxLFxuICAgIHdlc3Q6IDEsXG4gICAgd2VzdGVybjogMSxcbiAgICB3ZXN0bWluc3RlcjogMSxcbiAgICB3ZXQ6IDEsXG4gICAgd2hhbGU6IDEsXG4gICAgd2hhdDogMSxcbiAgICB3aGF0ZXZlcjogMSxcbiAgICB3aGF0czogMSxcbiAgICB3aGVhdDogMSxcbiAgICB3aGVlbDogMSxcbiAgICB3aGVlbHM6IDEsXG4gICAgd2hlbjogMSxcbiAgICB3aGVuZXZlcjogMSxcbiAgICB3aGVyZTogMSxcbiAgICB3aGVyZWFzOiAxLFxuICAgIHdoZXJldmVyOiAxLFxuICAgIHdoZXRoZXI6IDEsXG4gICAgd2hpY2g6IDEsXG4gICAgd2hpbGU6IDEsXG4gICAgd2hpbHN0OiAxLFxuICAgIHdoaXRlOiAxLFxuICAgIHdobzogMSxcbiAgICB3aG9sZTogMSxcbiAgICB3aG9sZXNhbGU6IDEsXG4gICAgd2hvbTogMSxcbiAgICB3aG9yZTogMSxcbiAgICB3aG9zZTogMSxcbiAgICB3aHk6IDEsXG4gICAgd2k6IDEsXG4gICAgd2ljaGl0YTogMSxcbiAgICB3aWNrZWQ6IDEsXG4gICAgd2lkZTogMSxcbiAgICB3aWRlbHk6IDEsXG4gICAgd2lkZXI6IDEsXG4gICAgd2lkZXNjcmVlbjogMSxcbiAgICB3aWRlc3ByZWFkOiAxLFxuICAgIHdpZHRoOiAxLFxuICAgIHdpZmU6IDEsXG4gICAgd2lmaTogMSxcbiAgICB3aWtpOiAxLFxuICAgIHdpa2lwZWRpYTogMSxcbiAgICB3aWxkOiAxLFxuICAgIHdpbGRlcm5lc3M6IDEsXG4gICAgd2lsZGxpZmU6IDEsXG4gICAgd2lsZXk6IDEsXG4gICAgd2lsbDogMSxcbiAgICB3aWxsaWFtOiAxLFxuICAgIHdpbGxpYW1zOiAxLFxuICAgIHdpbGxpbmc6IDEsXG4gICAgd2lsbG93OiAxLFxuICAgIHdpbHNvbjogMSxcbiAgICB3aW46IDEsXG4gICAgd2luZDogMSxcbiAgICB3aW5kb3c6IDEsXG4gICAgd2luZG93czogMSxcbiAgICB3aW5kczogMSxcbiAgICB3aW5kc29yOiAxLFxuICAgIHdpbmU6IDEsXG4gICAgd2luZXM6IDEsXG4gICAgd2luZzogMSxcbiAgICB3aW5nczogMSxcbiAgICB3aW5uZXI6IDEsXG4gICAgd2lubmVyczogMSxcbiAgICB3aW5uaW5nOiAxLFxuICAgIHdpbnM6IDEsXG4gICAgd2luc3RvbjogMSxcbiAgICB3aW50ZXI6IDEsXG4gICAgd2lyZTogMSxcbiAgICB3aXJlZDogMSxcbiAgICB3aXJlbGVzczogMSxcbiAgICB3aXJlczogMSxcbiAgICB3aXJpbmc6IDEsXG4gICAgd2lzY29uc2luOiAxLFxuICAgIHdpc2RvbTogMSxcbiAgICB3aXNlOiAxLFxuICAgIHdpc2g6IDEsXG4gICAgd2lzaGVzOiAxLFxuICAgIHdpc2hpbmc6IDEsXG4gICAgd2lzaGxpc3Q6IDEsXG4gICAgd2l0OiAxLFxuICAgIHdpdGNoOiAxLFxuICAgIHdpdGg6IDEsXG4gICAgd2l0aGRyYXdhbDogMSxcbiAgICB3aXRoaW46IDEsXG4gICAgd2l0aG91dDogMSxcbiAgICB3aXRuZXNzOiAxLFxuICAgIHdpdG5lc3NlczogMSxcbiAgICB3aXZlczogMSxcbiAgICB3aXphcmQ6IDEsXG4gICAgd206IDEsXG4gICAgd21hOiAxLFxuICAgIHduOiAxLFxuICAgIHdvbGY6IDEsXG4gICAgd29tYW46IDEsXG4gICAgd29tZW46IDEsXG4gICAgd29tZW5zOiAxLFxuICAgIHdvbjogMSxcbiAgICB3b25kZXI6IDEsXG4gICAgd29uZGVyZnVsOiAxLFxuICAgIHdvbmRlcmluZzogMSxcbiAgICB3b29kOiAxLFxuICAgIHdvb2RlbjogMSxcbiAgICB3b29kczogMSxcbiAgICB3b29sOiAxLFxuICAgIHdvcmNlc3RlcjogMSxcbiAgICB3b3JkOiAxLFxuICAgIHdvcmRwcmVzczogMSxcbiAgICB3b3JkczogMSxcbiAgICB3b3JrOiAxLFxuICAgIHdvcmtlZDogMSxcbiAgICB3b3JrZXI6IDEsXG4gICAgd29ya2VyczogMSxcbiAgICB3b3JrZmxvdzogMSxcbiAgICB3b3JrZm9yY2U6IDEsXG4gICAgd29ya2luZzogMSxcbiAgICB3b3Jrb3V0OiAxLFxuICAgIHdvcmtwbGFjZTogMSxcbiAgICB3b3JrczogMSxcbiAgICB3b3Jrc2hvcDogMSxcbiAgICB3b3Jrc2hvcHM6IDEsXG4gICAgd29ya3N0YXRpb246IDEsXG4gICAgd29ybGQ6IDEsXG4gICAgd29ybGRjYXQ6IDEsXG4gICAgd29ybGRzOiAxLFxuICAgIHdvcmxkc2V4OiAxLFxuICAgIHdvcmxkd2lkZTogMSxcbiAgICB3b3JtOiAxLFxuICAgIHdvcm46IDEsXG4gICAgd29ycmllZDogMSxcbiAgICB3b3JyeTogMSxcbiAgICB3b3JzZTogMSxcbiAgICB3b3JzaGlwOiAxLFxuICAgIHdvcnN0OiAxLFxuICAgIHdvcnRoOiAxLFxuICAgIHdvcnRoeTogMSxcbiAgICB3b3VsZDogMSxcbiAgICB3b3VuZDogMSxcbiAgICB3b3c6IDEsXG4gICAgd3A6IDEsXG4gICAgd3I6IDEsXG4gICAgd3JhcDogMSxcbiAgICB3cmFwcGVkOiAxLFxuICAgIHdyYXBwaW5nOiAxLFxuICAgIHdyZXN0bGluZzogMSxcbiAgICB3cmlnaHQ6IDEsXG4gICAgd3Jpc3Q6IDEsXG4gICAgd3JpdGU6IDEsXG4gICAgd3JpdGVyOiAxLFxuICAgIHdyaXRlcnM6IDEsXG4gICAgd3JpdGVzOiAxLFxuICAgIHdyaXRpbmc6IDEsXG4gICAgd3JpdGluZ3M6IDEsXG4gICAgd3JpdHRlbjogMSxcbiAgICB3cm9uZzogMSxcbiAgICB3cm90ZTogMSxcbiAgICB3czogMSxcbiAgICB3dDogMSxcbiAgICB3dG86IDEsXG4gICAgd3U6IDEsXG4gICAgd3Y6IDEsXG4gICAgd3c6IDEsXG4gICAgd3d3OiAxLFxuICAgIHd4OiAxLFxuICAgIHd5OiAxLFxuICAgIHd5b21pbmc6IDEsXG4gICAgeDogMSxcbiAgICB4YW5heDogMSxcbiAgICB4Ym94OiAxLFxuICAgIHhlcm94OiAxLFxuICAgIHhodG1sOiAxLFxuICAgIHhpOiAxLFxuICAgIHhsOiAxLFxuICAgIHhtbDogMSxcbiAgICB4bnh4OiAxLFxuICAgIHhwOiAxLFxuICAgIHh4OiAxLFxuICAgIHh4eDogMSxcbiAgICB5OiAxLFxuICAgIHlhOiAxLFxuICAgIHlhY2h0OiAxLFxuICAgIHlhaG9vOiAxLFxuICAgIHlhbGU6IDEsXG4gICAgeWFtYWhhOiAxLFxuICAgIHlhbmc6IDEsXG4gICAgeWFyZDogMSxcbiAgICB5YXJkczogMSxcbiAgICB5YXJuOiAxLFxuICAgIHllOiAxLFxuICAgIHllYTogMSxcbiAgICB5ZWFoOiAxLFxuICAgIHllYXI6IDEsXG4gICAgeWVhcmx5OiAxLFxuICAgIHllYXJzOiAxLFxuICAgIHllYXN0OiAxLFxuICAgIHllbGxvdzogMSxcbiAgICB5ZW1lbjogMSxcbiAgICB5ZW46IDEsXG4gICAgeWVzOiAxLFxuICAgIHllc3RlcmRheTogMSxcbiAgICB5ZXQ6IDEsXG4gICAgeWllbGQ6IDEsXG4gICAgeWllbGRzOiAxLFxuICAgIHluOiAxLFxuICAgIHlvOiAxLFxuICAgIHlvZ2E6IDEsXG4gICAgeW9yazogMSxcbiAgICB5b3Jrc2hpcmU6IDEsXG4gICAgeW91OiAxLFxuICAgIHlvdW5nOiAxLFxuICAgIHlvdW5nZXI6IDEsXG4gICAgeW91cjogMSxcbiAgICB5b3VyczogMSxcbiAgICB5b3Vyc2VsZjogMSxcbiAgICB5b3V0aDogMSxcbiAgICB5cjogMSxcbiAgICB5cnM6IDEsXG4gICAgeXU6IDEsXG4gICAgeXVnb3NsYXZpYTogMSxcbiAgICB5dWtvbjogMSxcbiAgICB6OiAxLFxuICAgIHphOiAxLFxuICAgIHphbWJpYTogMSxcbiAgICB6ZG5ldDogMSxcbiAgICB6ZWFsYW5kOiAxLFxuICAgIHplbjogMSxcbiAgICB6ZXJvOiAxLFxuICAgIHppbWJhYndlOiAxLFxuICAgIHppbmM6IDEsXG4gICAgemlwOiAxLFxuICAgIHpvbG9mdDogMSxcbiAgICB6b25lOiAxLFxuICAgIHpvbmVzOiAxLFxuICAgIHpvbmluZzogMSxcbiAgICB6b286IDEsXG4gICAgem9vbTogMSxcbiAgICB6b29waGlsaWE6IDEsXG4gICAgem9wZTogMSxcbiAgICB6c2hvcHM6IDEsXG4gICAgenU6IDEsXG4gICAgenVtOiAxLFxuICAgIHp1czogMSxcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwc1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLlVSTCA9IHJlcXVpcmUoXCIuL1VSTFwiKS5pbnRlcmZhY2U7XG5leHBvcnRzLnNlcmlhbGl6ZVVSTCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNlcmlhbGl6ZVVSTDtcbmV4cG9ydHMuc2VyaWFsaXplVVJMT3JpZ2luID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuc2VyaWFsaXplVVJMT3JpZ2luO1xuZXhwb3J0cy5iYXNpY1VSTFBhcnNlID0gcmVxdWlyZShcIi4vdXJsLXN0YXRlLW1hY2hpbmVcIikuYmFzaWNVUkxQYXJzZTtcbmV4cG9ydHMuc2V0VGhlVXNlcm5hbWUgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXRUaGVVc2VybmFtZTtcbmV4cG9ydHMuc2V0VGhlUGFzc3dvcmQgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXRUaGVQYXNzd29yZDtcbmV4cG9ydHMuc2VyaWFsaXplSG9zdCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnNlcmlhbGl6ZUhvc3Q7XG5leHBvcnRzLnNlcmlhbGl6ZUludGVnZXIgPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKS5zZXJpYWxpemVJbnRlZ2VyO1xuZXhwb3J0cy5wYXJzZVVSTCA9IHJlcXVpcmUoXCIuL3VybC1zdGF0ZS1tYWNoaW5lXCIpLnBhcnNlVVJMO1xuIiwiY29uc3QgLy8gVmVyc2lvbnNcbiAgICBWMSA9ICd2MScsXG4gICAgVjIgPSAndjInLFxuXG4gICAgU1VQUE9SVEVEX1ZFUlNJT05TID0gbmV3IFNldChbXG4gICAgICAgIFYxLCBcbiAgICAgICAgVjJcbiAgICBdKSxcblxuICAgIFNVUFBPUlRFRF9MQU5HVUFHRVMgPSBuZXcgU2V0KFtcbiAgICAgICAgJ2hpJywgXHQgLy8gSGluZGlcbiAgICAgICAgJ2VuJywgICAgLy8gRW5nbGlzaCAoVVMpXG4gICAgICAgICdlbi11aycsIC8vIEVuZ2xpc2ggKFVLKVxuICAgICAgICAnZXMnLCBcdCAvLyBTcGFuaXNoXG4gICAgICAgICdmcicsXHQgLy8gRnJlbmNoXG4gICAgICAgICdqYScsICAgIC8vIEphcGFuZXNlXG4gICAgICAgICdodScsXG4gICAgICAgICdjcycsICAgIC8vIEN6ZWNoXG4gICAgICAgICdubCcsICAgIC8vIER1dGNoXG4gICAgICAgICdzaycsICAgIC8vIFNsb3Zha1xuICAgICAgICAncnUnLFx0IC8vIFJ1c3NpYW5cbiAgICAgICAgJ2RlJywgXHQgLy8gR2VybWFuXG4gICAgICAgICdpdCcsIFx0IC8vIEl0YWxpYW5cbiAgICAgICAgJ2tvJyxcdCAvLyBLb3JlYW5cbiAgICAgICAgJ3B0LUJSJywgLy8gQnJhemlsaWFuIFBvcnR1Z3Vlc2VcbiAgICAgICAgJ2FyJywgICAgLy8gQXJhYmljXG4gICAgICAgICd0cicgICAgIC8vIFR1cmtpc2hcbiAgICBdKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgbG9nRXZlbnQgKHdvcmQsIGxhbmd1YWdlLCBtZXNzYWdlLCBhZGRpdGlvbmFsSW5mbyA9IHt9KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHtcbiAgICAgICAgICAgICdXb3JkJzogd29yZCxcbiAgICAgICAgICAgICdMYW5ndWFnZSc6IGxhbmd1YWdlLFxuICAgICAgICAgICAgJ01lc3NhZ2UnOiBtZXNzYWdlLFxuICAgICAgICAgICAgJ0FkZGl0aW9uYWxJbmZvJzogSlNPTi5zdHJpbmdpZnkoYWRkaXRpb25hbEluZm8pXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBpc0xhbmd1YWdlU3VwcG9ydGVkIChsYW5ndWFnZSkge1xuICAgICAgICByZXR1cm4gU1VQUE9SVEVEX0xBTkdVQUdFUy5oYXMobGFuZ3VhZ2UpO1xuICAgIH0sXG5cbiAgICBpc1ZlcnNpb25TdXBwb3J0ZWQgKHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIFNVUFBPUlRFRF9WRVJTSU9OUy5oYXModmVyc2lvbik7XG4gICAgfVxufSIsImNvbnN0IGZldGNoID0gcmVxdWlyZSgnbm9kZS1mZXRjaCcpO1xuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuY29uc3QgaHR0cHNBZ2VudCA9IG5ldyBodHRwcy5BZ2VudCh7IGtlZXBBbGl2ZTogdHJ1ZSB9KTtcbmNvbnN0IGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzLmpzJyk7XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZldGNoSnNvbih1cmwsIGhlYWRlcnMsIGluZm8pIHtcblxuICAgIGxldCBmID0gYXdhaXQgZmV0Y2g7XG4gICAgZiA9IGYuZGVmYXVsdDtcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCBmKHVybCwge1xuICAgICAgICBhZ2VudDogaHR0cHNBZ2VudCxcbiAgICAgICAgaGVhZGVyczogbmV3IGZldGNoLkhlYWRlcnMoaGVhZGVycylcbiAgICB9KTtcblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgeyB0aHJvdyBuZXcgZXJyb3JzLk5vRGVmaW5pdGlvbnNGb3VuZCh7IGluZm8sIHJlYXNvbjogJ1dlYnNpdGUgcmV0dXJuZWQgNDA0LicgfSk7IH1cblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQyOSkgeyB0aHJvdyBuZXcgZXJyb3JzLlJhdGVMaW1pdEVycm9yKCk7IH1cblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgeyB0aHJvdyBuZXcgZXJyb3JzLk5vRGVmaW5pdGlvbnNGb3VuZCh7IGluZm8sIHJlYXNvbjogJ1RocmV3IG5vbiAyMDAgc3RhdHVzIGNvZGUuJyB9KTsgfVxuXG4gICAgbGV0IGJvZHkgPSBhd2FpdCByZXNwb25zZS50ZXh0KCksXG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGJvZHkpO1xuICAgICAgICAvL2RhdGEgPSBKU09OLnBhcnNlKGJvZHkuc3Vic3RyaW5nKDQpKTtcblxuICAgIHJldHVybiBkYXRhO1xuXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJwdW55Y29kZVwiKTsiLCJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IGZpbmRlciA9IHJlcXVpcmUoJy4vZmluZGVyLmpzJyk7XG5cbmNvbnN0IEFQSV9MSU1JVF9FWENFUFRJT04gPSB7XG4gIGFwaUxpbWl0RXhjZXB0aW9uOjFcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBhQ3Jhd2xlcigpIHtcblxuICBjb25zdCBUVVJOSU5HX1RJTUVfR01UID0gWzIwLDU1XTtcbiAgY29uc3QgTUFYX1BBUkFMTEVMID0gMjA7XG4gIGxldCBBUEk7XG4gIGxldCBDQUNIRV9ESVI7XG4gIGxldCBBUElfREFJTFlfTElNSVQ7XG4gIGxldCBNQVhfV09SRFM7XG4gIGxldCBNQVhfTk9ERV9GUkVRVUVOQ1k7XG4gIGxldCBUUkFWRVJTRV9BTEw7XG4gIGxldCBkb3dubG9hZCwgY3VydGltZSwgdHVybnRpbWU7XG4gIGxldCBUV0VMVkU7XG5cbiAgbGV0IGNhY2hlSW5pdGlhbGl6ZXJDb21tb247XG4gIGxldCBjYWNoZUlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IHBlbmRpbmdQYXJhbGxlbFJlcXVlc3RzID0gMDtcbiAgbGV0IGFkbWl0dGVkUGFyYWxsZWxSZXF1ZXN0cyA9IDA7XG4gIGxldCB0b3RhbFdvcmRzTGFzdERheSA9IDA7XG4gIGxldCBjYWNoZUluaXRJc0Vycm9yID0gZmFsc2U7XG5cbiAgbGV0IHBlbmRpbmdPYmplY3RzID0ge1xuXG4gIH07XG5cbiAgZnVuY3Rpb24gdGltZW91dEFzUHJvbWlzZShtaWxsaXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKGEscik9PntcbiAgICAgIHNldFRpbWVvdXQoYSwgbWlsbGlzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHBhcmFsbGVsQm90dGxlbmVjaygpIHtcbiAgICBwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cysrO1xuICAgIGlmICghKHBlbmRpbmdQYXJhbGxlbFJlcXVlc3RzJTEwMDApKSB7XG4gICAgICBjb25zb2xlLmxvZyhBUEksIFwiKytwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0czpcIitwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cytcIiBhZG1pdHRlZFBhcmFsbGVsUmVxdWVzdHM6XCIrYWRtaXR0ZWRQYXJhbGxlbFJlcXVlc3RzKTtcbiAgICB9XG4gICAgd2hpbGUgKGFkbWl0dGVkUGFyYWxsZWxSZXF1ZXN0cyA+PSBNQVhfUEFSQUxMRUwpIHtcbiAgICAgIGF3YWl0IHRpbWVvdXRBc1Byb21pc2UoMjApO1xuICAgIH1cbiAgICBhZG1pdHRlZFBhcmFsbGVsUmVxdWVzdHMrKztcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHJlbW90ZUluaXRCb3R0bGVuZWNrKCkge1xuXG4gICAgYXdhaXQgcGFyYWxsZWxCb3R0bGVuZWNrKCk7XG5cbiAgICBpZiAoIWNhY2hlSXNJbml0aWFsaXplZCkge1xuICAgICAgaWYgKCFjYWNoZUluaXRpYWxpemVyQ29tbW9uKSB7XG4gICAgICAgIGNhY2hlSW5pdGlhbGl6ZXJDb21tb24gPSBmaW5kZXIuZmluZEZpbGVzKGAke0NBQ0hFX0RJUn0vd29yZHNgLCB0dXJudGltZSk7XG4gICAgICAgIHRvdGFsV29yZHNMYXN0RGF5ID0gYXdhaXQgY2FjaGVJbml0aWFsaXplckNvbW1vbjtcbiAgICAgICAgY2FjaGVJc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5sb2coQVBJLCBcInJlbW90ZUluaXRCb3R0bGVuZWNrICB0dXJudGltZTpcIit0dXJudGltZS50b1VUQ1N0cmluZygpK1wiICB0b3RhbFdvcmRzTGFzdERheTpcIit0b3RhbFdvcmRzTGFzdERheStcIiBlcnJvcnM6XCIrZmluZGVyLmVycm9ycytcIiBwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0czpcIitwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cytcIiBhZG1pdHRlZFBhcmFsbGVsUmVxdWVzdHM6XCIrYWRtaXR0ZWRQYXJhbGxlbFJlcXVlc3RzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IGNhY2hlSW5pdGlhbGl6ZXJDb21tb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzQXBpTGltaXRSZWFjaGVkKCkpIHtcbiAgICAgIGlmICghY2FjaGVJbml0SXNFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKEFQSSwgXCJDb3VsZCBub3QgcHJveHkgbW9yZSByZXF1ZXN0IHRvIEFQSSBmaWxlL3NpbmdsZSAgdG90YWxXb3Jkc0xhc3REYXkrXCIrcGVuZGluZ1BhcmFsbGVsUmVxdWVzdHMrXCIgPj0gQVBJX0RBSUxZX0xJTUlUIDogIFwiKyh0b3RhbFdvcmRzTGFzdERheStwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cykrXCIgPj0gXCIrQVBJX0RBSUxZX0xJTUlUK1wiXFxuXCIpO1xuICAgICAgfVxuICAgICAgY2FjaGVJbml0SXNFcnJvciA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvdGFsV29yZHNMYXN0RGF5Kys7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc0FwaUxpbWl0UmVhY2hlZChwZW5kaW5nQmVmb3JlUmVxdWVzdD0wKSB7XG4gICAgaWYgKGNhY2hlSXNJbml0aWFsaXplZCkge1xuICAgICAgaWYgKGNhY2hlSW5pdGlhbGl6ZXJDb21tb24pIHtcbiAgICAgICAgcmV0dXJuICh0b3RhbFdvcmRzTGFzdERheStwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cytwZW5kaW5nQmVmb3JlUmVxdWVzdCkgPj0gQVBJX0RBSUxZX0xJTUlUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKHBlbmRpbmdQYXJhbGxlbFJlcXVlc3RzK3BlbmRpbmdCZWZvcmVSZXF1ZXN0KSA+PSBBUElfREFJTFlfTElNSVQ7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gaW5pdENyYXdsZXIoXG4gICAgX0FQSSxcbiAgICBfQVBJX0RBSUxZX0xJTUlULFxuICAgIF9NQVhfV09SRFMsXG4gICAgX01BWF9OT0RFX0ZSRVFVRU5DWSxcbiAgICBfVFJBVkVSU0VfQUxMXG4gICAgKSB7XG5cbiAgICBBUEkgPSBfQVBJO1xuICAgIENBQ0hFX0RJUiA9IFwiY2FjaGUvXCIrX0FQSTtcbiAgICBBUElfREFJTFlfTElNSVQgPSBfQVBJX0RBSUxZX0xJTUlUO1xuICAgIE1BWF9XT1JEUyA9IF9NQVhfV09SRFM7XG4gICAgTUFYX05PREVfRlJFUVVFTkNZID0gX01BWF9OT0RFX0ZSRVFVRU5DWTtcbiAgICBUUkFWRVJTRV9BTEwgPSBfVFJBVkVSU0VfQUxMO1xuICAgIFRXRUxWRSA9IChDQUNIRV9ESVIrXCIvd29yZHMvXCIpLmxlbmd0aDtcblxuICAgIHN3aXRjaCAoX0FQSSkge1xuICAgICAgY2FzZSBcImdvb2dsZVwiOlxuICAgICAgICBkb3dubG9hZCA9IHJlcXVpcmUoJy4vZ29vZ2xldHJhbnNhcGkvZ29vZ2xlX2RpY3QnKS5nb29nbGVEaWN0aW9uYXJ5O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ3b3Jkc2FwaVwiOlxuICAgICAgICBkb3dubG9hZCA9IHJlcXVpcmUoJy4vd29yZHNhcGkvd29yZGFwaV9kaWN0Jykud29yZHNBcGlEaWN0aW9uYXJ5O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IFwiQVBJIGlzIG5vdCBzdXBwb3J0ZWQgOiBcIitfQVBJO1xuICAgIH1cbiAgICBcbiAgICBcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoYCR7Q0FDSEVfRElSfS93b3Jkc2ApKXtcbiAgICAgIGZzLm1rZGlyU3luYyhgJHtDQUNIRV9ESVJ9L3dvcmRzYCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgfVxuICAgIGlmICghZnMuZXhpc3RzU3luYyhgJHtDQUNIRV9ESVJ9L2NsdXN0ZXJzYCkpe1xuICAgICAgZnMubWtkaXJTeW5jKGAke0NBQ0hFX0RJUn0vY2x1c3RlcnNgKTtcbiAgICB9XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGBjYWNoZS9pbmRleGApKXtcbiAgICAgIGZzLm1rZGlyU3luYyhgY2FjaGUvaW5kZXhgKTtcbiAgICB9XG5cbiAgICBjdXJ0aW1lID0gbmV3IERhdGUoKTtcbiAgICB0dXJudGltZSA9IERhdGUuVVRDKGN1cnRpbWUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgICAgICAgIGN1cnRpbWUuZ2V0VVRDTW9udGgoKSxjdXJ0aW1lLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgIFRVUk5JTkdfVElNRV9HTVRbMF0sVFVSTklOR19USU1FX0dNVFsxXSk7XG4gICAgLy8gODY0MDAwMDAgbWlsbGlzZWNvbmRzICgyNCBob3VycylcbiAgICBpZiAoY3VydGltZSA8IHR1cm50aW1lKSB7XG4gICAgICB0dXJudGltZSA9IG5ldyBEYXRlKHR1cm50aW1lIC0gODY0MDAwMDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0dXJudGltZSA9IG5ldyBEYXRlKHR1cm50aW1lKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhBUEksIFwiaW5pdENyYXdsZXIgIGN1cnRpbWU6XCIrY3VydGltZS50b1VUQ1N0cmluZygpK1wiICB0dXJudGltZTpcIit0dXJudGltZS50b1VUQ1N0cmluZygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbmdsZVdvcmRUb0Rpc3BsYXkoZGF0YSkge1xuXG4gICAgLy8gY3JlYXRlIG5ldyBhcnJheSB0byBwdXNoIGRhdGEgdG9cbiAgICBsZXQgcmVzdWx0cyA9IFtdO1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICB3b3JkOmRhdGEud29yZCxcbiAgICAgIGZyZXF1ZW5jeTpkYXRhLmZyZXF1ZW5jeSxcbiAgICAgIHByb251bmNpYXRpb246ZGF0YS5wcm9udW5jaWF0aW9uLFxuICAgICAgcmVzdWx0cywgZXRjOlwiXCJcbiAgICB9O1xuXG4gICAgaWYgKGRhdGEucmVzdWx0cykgZGF0YS5yZXN1bHRzLm1hcChkZWYgPT4ge1xuICAgICAgbGV0IGRlZmluaXRpb25BcnJheSA9IFtdO1xuICAgICAgbGV0IGRlZmluaXRpb24gPSB7XG4gICAgICAgIHBhcnRPZlNwZWVjaDpkZWYucGFydE9mU3BlZWNoLFxuICAgICAgICBwcm9wZXJ0aWVzOmRlZmluaXRpb25BcnJheVxuICAgICAgfTtcblxuICAgICAgLy8gY3JlYXRlcyBhcnJheSBvZiBrZXlzIGluIG9iamVjdFxuICAgICAgY29uc3Qgc2tleXMgPSBbXTtcbiAgICAgIGNvbnN0IHRoZXJlc3QgPSBPYmplY3QuYXNzaWduKHt9LCBkZWYpO1xuICAgICAgZnVuY3Rpb24gYWRkaWYoc2tleXMsIGtleSkge1xuICAgICAgICBpZiAoZGVmW2tleV0pIHNrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgZGVsZXRlIHRoZXJlc3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGFkZGlmKHNrZXlzLCBcIndvcmRcIik7XG4gICAgICBhZGRpZihza2V5cywgXCJwcm9udW5jaWF0aW9uXCIpO1xuICAgICAgYWRkaWYoc2tleXMsIFwicGFydE9mU3BlZWNoXCIpO1xuICAgICAgYWRkaWYoc2tleXMsIFwiZGVmaW5pdGlvblwiKTtcbiAgICAgIGFkZGlmKHNrZXlzLCBcInN5bm9ueW1zXCIpO1xuICAgICAgYWRkaWYoc2tleXMsIFwic2ltaWxhclRvXCIpO1xuICAgICAgYWRkaWYoc2tleXMsIFwiYW50b255bXNcIik7XG5cbiAgICAgIGRlbGV0ZSB0aGVyZXN0W1wiZXhhbXBsZXNcIl07XG5cbiAgICAgIGNvbnN0IG1vcmUgPSBPYmplY3Qua2V5cyh0aGVyZXN0KTtcbiAgICAgIG1vcmUuc29ydCgpO1xuICAgICAgc2tleXMucHVzaC5hcHBseShza2V5cywgbW9yZSk7XG5cbiAgICAgIGNvbnN0IHNrZXlzMiA9IFtdO1xuICAgICAgYWRkaWYoc2tleXMyLCBcImV4YW1wbGVzXCIpO1xuICAgICAgc2tleXMucHVzaC5hcHBseShza2V5cywgc2tleXMyKTtcblxuXG4gICAgICBza2V5cy5tYXAoa2V5ID0+IHtcblxuICAgICAgICAvLyBidWlsZHMgcmVnZXggdGhhdCBsb29rcyBmb3IgY2FwaXRhbCBsZXR0ZXJzXG4gICAgICAgIC8vIFRoZSByZXNwb25zZSBwYXJhbWV0ZXJzIGFyZSBpbiBjYW1lbENhc2UsIHNvIHdlIG5lZWQgdG8gSURcbiAgICAgICAgLy8gdGhlIGNhcGl0YWwgbGV0dGVycyBhbmQgYWRkIHNwYWNlcyBpbnN0ZWFkIHNvIHRoZSBcbiAgICAgICAgLy8gZnJvbnQgZW5kIGNhbiBlYXNpbHkgZGlzcGxheSB0aGUgcGFyYW1ldGVyIGxhYmVsc1xuICAgICAgICBjb25zdCByZWdleCA9IC8oPz1bQS1aXSkvO1xuXG4gICAgICAgIC8vIGNyZWF0ZXMgcHJlc2VudGFibGUgbGFiZWxcbiAgICAgICAgY29uc3QgbGFiZWwgPSBrZXkuc3BsaXQocmVnZXgpLmpvaW4oJyAnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIC8vIGdyYWJzIHRoZSB2YWx1ZSBmb3IgdGhlIHBhcmFtZXRlciBmcm9tIHRoZVxuICAgICAgICAvLyBkZWZpbml0aW9uIG9iamVjdCBpbiByZXNwb25zZVxuICAgICAgICBjb25zdCB2YWx1ZSA9IGRlZltrZXldO1xuXG4gICAgICAgIC8vIGNvbnN0cnVjdHMgbmV3IG9iamVjdCB0byBzZW5kIHRvIGZyb250ZW5kXG4gICAgICAgIGxldCBuZXdPYmogPSB7XG4gICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgaXNTdHJpbmc6IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgfTtcblxuICAgICAgICBkZWZpbml0aW9uQXJyYXkucHVzaChuZXdPYmopO1xuICAgICAgfSlcblxuICAgICAgcmVzdWx0cy5wdXNoKGRlZmluaXRpb24pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRTaW5nbGVXb3JkKHdvcmQsIGFzb2JqZWN0LCBjYWNoZWRvbmx5PWZhbHNlKSB7XG5cbiAgICBsZXQgZmlsZXdvcmQgPSB3b3JkLnJlcGxhY2UoL1suLC8nXS9nLCBcIiRcIikudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCB3ZnBhdGggPSBgJHtDQUNIRV9ESVJ9L3dvcmRzLyR7ZmlsZXdvcmR9YDtcblxuICAgIGxldCBkYXRhO1xuXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMod2ZwYXRoKSkge1xuICAgIFxuICAgICAgLy9jb25zb2xlLmxvZyhBUEksIFwiRnJvbSBjYWNoZSBmaWxlL3NpbmdsZSBcIit3ZnBhdGgrXCIgIGFzb2JqZWN0OlwiK2Fzb2JqZWN0K1wiLi4uXFxuXCIpO1xuICAgICAgbGV0IGlqc29uID0gZnMucmVhZEZpbGVTeW5jKHdmcGF0aCkudG9TdHJpbmcoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGlqc29uKTtcblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRGVsZXRlIGludmFsaWQgZmlsZSA6IFwiK3dmcGF0aCwgZSk7XG4gICAgICAgIGZzLnVubGlua1N5bmMod2ZwYXRoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YSkge1xuICAgICAgaWYgKGRhdGEuZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiRmlsZSBpcyBvZiBhbiBlcnJvciBlbnRyeSA6IFwiK3dmcGF0aCwgXCIgXCIsIChkYXRhLmVycm9yP2RhdGEuZXJyb3IubWVzc2FnZT9kYXRhLmVycm9yLm1lc3NhZ2U6ZGF0YS5lcnJvcjpcInVua25vd24gZXJyb3JcIikpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChhc29iamVjdCkge1xuICAgICAgICBkYXRhLmZyb21DYWNoZSA9IHRydWU7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHNpbmdsZVdvcmRUb0Rpc3BsYXkoZGF0YSk7XG4gICAgICAgIGNvbnN0IG9qc29uID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTsgICAgICAgICAvLyBtb2RpZmllZFxuICAgICAgICByZXR1cm4gb2pzb247XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB0cnkge1xuICAgICAgaWYgKHBlbmRpbmdPYmplY3RzW3dvcmRdKSB7XG4gICAgICAgIGlmIChhc29iamVjdCkge1xuICAgICAgICAgIHJldHVybiBwZW5kaW5nT2JqZWN0c1t3b3JkXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gc2luZ2xlV29yZFRvRGlzcGxheShwZW5kaW5nT2JqZWN0c1t3b3JkXSk7XG4gICAgICAgICAgY29uc3Qgb2pzb24gPSBKU09OLnN0cmluZ2lmeShyZXN1bHQpOyAgICAgICAgIC8vIG1vZGlmaWVkXG4gICAgICAgICAgcmV0dXJuIG9qc29uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS53YXJuKEFQSSwgXCJFcnJvciAoXCIsd29yZCwgXCIpIFwiLCBlJiZlLm1lc3NhZ2U/ZS5tZXNzYWdlOlwiP1wiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChjYWNoZWRvbmx5KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgZGpzb247XG4gICAgdHJ5IHtcbiAgICAgIGxldCBzdWNjZXNzID0gYXdhaXQgcmVtb3RlSW5pdEJvdHRsZW5lY2soKTtcbiAgICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5lcnJvcihgRU5URVIgaHR0cCBkb3dubG9hZCAgICAgICR7QVBJfSAke3dvcmR9ICAgcGVuZGluZzoke3BlbmRpbmdQYXJhbGxlbFJlcXVlc3RzfSBhZG1pdHRlZDoke2FkbWl0dGVkUGFyYWxsZWxSZXF1ZXN0c31gKTtcblxuICAgICAgZGF0YSA9IGF3YWl0IGRvd25sb2FkKHdvcmQpO1xuXG4gICAgICBjb25zb2xlLmVycm9yKGBET05FICBodHRwIGRvd25sb2FkICAgICAgJHtBUEl9ICR7d29yZH0gICBwZW5kaW5nOiR7cGVuZGluZ1BhcmFsbGVsUmVxdWVzdHN9IGFkbWl0dGVkOiR7YWRtaXR0ZWRQYXJhbGxlbFJlcXVlc3RzfWApO1xuXG4gICAgICB2YXIgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpO1xuICAgICAgY29weS5mcm9tQ2FjaGUgPSBmYWxzZTtcbiAgICAgIHBlbmRpbmdPYmplY3RzW3dvcmRdID0gY29weTtcblxuICAgICAgZGpzb24gPSBKU09OLnN0cmluZ2lmeShkYXRhKTsgIC8vIG9yaWdpbmFsXG5cbiAgICAgIGlmIChhc29iamVjdCkge1xuICAgICAgICBkYXRhLmZyb21DYWNoZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBzaW5nbGVXb3JkVG9EaXNwbGF5KGRhdGEpO1xuICAgICAgICBjb25zdCBvanNvbiA9IEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7ICAgICAgICAgLy8gbW9kaWZpZWRcbiAgICAgICAgcmV0dXJuIG9qc29uO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkFQSSBlcnJvciAoXCIsQVBJLHdvcmQsIFwiKSBcIiwgZSYmZS5tZXNzYWdlP2UubWVzc2FnZTpcIj9cIik7XG4gICAgICBkanNvbiA9IEpTT04uc3RyaW5naWZ5KHtlcnJvcjplLm1lc3NhZ2V9KTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZmluYWxseSB7XG5cbiAgICAgIGZzLndyaXRlRmlsZSh3ZnBhdGgsIGRqc29uLCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2FjaGUgZmlsZS9zaW5nbGUgXCIrd2ZwYXRoK1wiICBhc29iamVjdDpcIithc29iamVjdCtcIiBwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0czpcIitwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cytcIiBhZG1pdHRlZFBhcmFsbGVsUmVxdWVzdHM6XCIrYWRtaXR0ZWRQYXJhbGxlbFJlcXVlc3RzK1wiIHdyaXRlIGZhaWx1cmUgOiBcIitlcnIrXCJcXG5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJDYWNoZSBmaWxlL3NpbmdsZSBcIit3ZnBhdGgrXCIgIGFzb2JqZWN0OlwiK2Fzb2JqZWN0K1wiIHBlbmRpbmdQYXJhbGxlbFJlcXVlc3RzOlwiK3BlbmRpbmdQYXJhbGxlbFJlcXVlc3RzK1wiIGFkbWl0dGVkUGFyYWxsZWxSZXF1ZXN0czpcIithZG1pdHRlZFBhcmFsbGVsUmVxdWVzdHMrXCIgd3JpdHRlbiBzdWNjZXNzZnVsbHlcXG5cIik7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHBlbmRpbmdPYmplY3RzW3dvcmRdO1xuICAgICAgfSk7XG5cbiAgICAgIHBlbmRpbmdQYXJhbGxlbFJlcXVlc3RzLS07XG4gICAgICBhZG1pdHRlZFBhcmFsbGVsUmVxdWVzdHMtLTtcbiAgICAgIGlmIChwZW5kaW5nUGFyYWxsZWxSZXF1ZXN0cyAmJiAhKHBlbmRpbmdQYXJhbGxlbFJlcXVlc3RzJTEwMDApKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKEFQSSxcIi0tcGVuZGluZ1BhcmFsbGVsUmVxdWVzdHM6XCIrcGVuZGluZ1BhcmFsbGVsUmVxdWVzdHMrXCIgYWRtaXR0ZWRQYXJhbGxlbFJlcXVlc3RzOlwiK2FkbWl0dGVkUGFyYWxsZWxSZXF1ZXN0cyk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgfVxuXG4gIGNsYXNzIERlZmluaXRpb25Ob2RlIHtcblxuICAgIGVudHJ5O3ZhbDtwYXJ0T2ZTcGVlY2g7XG4gICAgZGVmaW5pdGlvbjtzeW5vbnltcztzaW1pbGFyO3dvcmQ7ZXhhbXBsZXM7ZXhhbXBsZXNUbXA7XG4gICAga2V5O1xuXG4gICAgY29uc3RydWN0b3IoZW50cnksIHZhbCkge1xuICAgICAgdGhpcy5lbnRyeT1lbnRyeTt0aGlzLnZhbD12YWw7XG5cbiAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IHZhbC5kZWZpbml0aW9uOyBcbiAgICAgIHRoaXMuc3lub255bXMgPSBbXTtcbiAgICAgIHRoaXMuc2ltaWxhciA9IFtdO1xuICAgICAgdGhpcy5leGFtcGxlc1RtcCA9IHt9O1xuXG4gICAgICB0aGlzLndvcmQgPSB0aGlzLmVudHJ5LndvcmQ7XG4gICAgICB0aGlzLnBhcnRPZlNwZWVjaCA9IHRoaXMudmFsLnBhcnRPZlNwZWVjaDtcbiAgICAgIHRoaXMuc3lub255bXMucHVzaC5hcHBseSh0aGlzLnN5bm9ueW1zLCB0aGlzLnZhbC5zeW5vbnltcyk7XG4gICAgICB0aGlzLnN5bm9ueW1zLnB1c2godGhpcy53b3JkKTtcbiAgICAgIHRoaXMuc3lub255bXMuc29ydCgpO1xuICAgIFxuICAgICAgdGhpcy5zaW1pbGFyLnB1c2guYXBwbHkodGhpcy5zaW1pbGFyLCB0aGlzLnZhbC5zaW1pbGFyVG8pO1xuICAgICAgdGhpcy5zaW1pbGFyLnNvcnQoKTtcbiAgICBcbiAgICAgIHRoaXMuYWRkRXhhbXBsZXModGhpcy52YWwuZXhhbXBsZXMpO1xuXG4gICAgICB0aGlzLmtleSA9IHRoaXMud29yZCtcIjo6Ojo6OjpcIit0aGlzLnN5bm9ueW1zLmxlbmd0aCtcIjo6Ojo6OjpcIit0aGlzLnN5bm9ueW1zLmpvaW4oXCIsIFwiKTtcbiAgICB9XG5cbiAgICBhZGRFeGFtcGxlcyhleGFtcGxlcykge1xuICAgICAgaWYgKGV4YW1wbGVzKSBmb3IgKGxldCB4IG9mIGV4YW1wbGVzKSB7XG4gICAgICAgIHRoaXMuZXhhbXBsZXNUbXBbeF0gPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXByZXNzKCkge1xuICAgICAgZGVsZXRlIHRoaXMuZW50cnk7XG4gICAgICBkZWxldGUgdGhpcy52YWw7XG4gICAgICBkZWxldGUgdGhpcy5rZXk7XG4gICAgICB0aGlzLmV4YW1wbGVzID0gW107XG4gICAgICBmb3IgKGxldCB4IG9mIE9iamVjdC5rZXlzKHRoaXMuZXhhbXBsZXNUbXApKSB7XG4gICAgICAgIHRoaXMuZXhhbXBsZXMucHVzaCh4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZXhhbXBsZXMuc29ydCgpO1xuICAgICAgZGVsZXRlIHRoaXMuZXhhbXBsZXNUbXA7XG4gICAgfVxuXG4gIH1cblxuICBjbGFzcyBDbHVzdGVyRGVmaW5pdGlvbk5vZGUgZXh0ZW5kcyBEZWZpbml0aW9uTm9kZSB7XG5cbiAgICBsZXZlbDtkZWZrZXk7XG4gICAgd29yZHM7XG5cbiAgICBjb25zdHJ1Y3RvcihieV9kZWYsIGVudHJ5LCB2YWwsIGxldmVsKSB7XG4gICAgICBzdXBlcihlbnRyeSwgdmFsKTtcbiAgICAgIHRoaXMubGV2ZWw9bGV2ZWw7XG4gICAgICBcbiAgICAgIHRoaXMud29yZHMgPSBbXTtcblxuICAgICAgaWYgKFRSQVZFUlNFX0FMTCkge1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuc3lub255bXMpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuc2ltaWxhclRvKTtcbiAgICAgICAgYXBwZW5kVG8odGhpcy53b3JkcywgdmFsLmFudG9ueW1zKTtcbiAgICAgICAgYXBwZW5kVG8odGhpcy53b3JkcywgdmFsLnR5cGVPZik7XG4gICAgICAgIGFwcGVuZFRvKHRoaXMud29yZHMsIHZhbC5oYXNUeXBlcyk7XG4gICAgICAgIGFwcGVuZFRvKHRoaXMud29yZHMsIHZhbC5wYXJ0T2YpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuaGFzUGFydHMpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuaW5zdGFuY2VPZik7XG4gICAgICAgIGFwcGVuZFRvKHRoaXMud29yZHMsIHZhbC5oYXNJbnN0YW5jZXMpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuYWxzbyk7XG4gICAgICAgIGFwcGVuZFRvKHRoaXMud29yZHMsIHZhbC5lbnRhaWxzKTtcbiAgICAgICAgYXBwZW5kVG8odGhpcy53b3JkcywgdmFsLm1lbWJlck9mKTtcbiAgICAgICAgYXBwZW5kVG8odGhpcy53b3JkcywgdmFsLmhhc01lbWJlcnMpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuc3Vic3RhbmNlT2YpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuaGFzU3Vic3RhbmNlcyk7XG4gICAgICAgIGFwcGVuZFRvKHRoaXMud29yZHMsIHZhbC5pbkNhdGVnb3J5KTtcbiAgICAgICAgYXBwZW5kVG8odGhpcy53b3JkcywgdmFsLmhhc0NhdGVnb3JpZXMpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwudXNhZ2VPZik7XG4gICAgICAgIGFwcGVuZFRvKHRoaXMud29yZHMsIHZhbC5oYXNVc2FnZXMpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuaW5SZWdpb24pO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwucmVnaW9uT2YpO1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwucGVydGFpbnNUbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBlbmRUbyh0aGlzLndvcmRzLCB2YWwuc3lub255bXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRlZmtleSA9IHRoaXMuc3lub255bXMubGVuZ3RoK1wiOjo6Ojo6XCIrdGhpcy5zeW5vbnltcy5qb2luKFwiLCBcIik7XG4gICAgICB0aGlzLmtleSA9IHRoaXMubGV2ZWwrXCI6Ojo6Ojo6XCIrdGhpcy5kZWZrZXk7XG5cbiAgICAgIGlmICghYnlfZGVmW3RoaXMuZGVma2V5XSkge1xuXG4gICAgICAgIGJ5X2RlZlt0aGlzLmRlZmtleV0gPSB0aGlzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXByZXNzKCkge1xuICAgICAgc3VwZXIuY29tcHJlc3MoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLndvcmRzO1xuICAgICAgZGVsZXRlIHRoaXMuZGVma2V5O1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBhcHBlbmRUbyhhcnJheSwgaXRlbU9yQXJyYXkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtT3JBcnJheSkpIHtcbiAgICAgIGFycmF5LnB1c2guYXBwbHkoYXJyYXksIGl0ZW1PckFycmF5KTtcbiAgICB9IGVsc2UgaWYgKGl0ZW1PckFycmF5KSB7XG4gICAgICBhcnJheS5wdXNoKGl0ZW1PckFycmF5KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBjaGVja0FQSWxpbWl0QW5kRmluaXNoKHByb21pc2VzKSB7XG4gICAgbGV0IHJlbWFpbmluZ0FwaUxpbWl0ID0gQVBJX0RBSUxZX0xJTUlUIC0gKHRvdGFsV29yZHNMYXN0RGF5ICsgcGVuZGluZ1BhcmFsbGVsUmVxdWVzdHMpO1xuICAgIGlmIChwcm9taXNlcy5sZW5ndGggPCByZW1haW5pbmdBcGlMaW1pdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgIHJlbWFpbmluZ0FwaUxpbWl0ID0gQVBJX0RBSUxZX0xJTUlUIC0gKHRvdGFsV29yZHNMYXN0RGF5ICsgcGVuZGluZ1BhcmFsbGVsUmVxdWVzdHMpO1xuICAgICAgcHJvbWlzZXMgPSBbXTtcbiAgICAgIHJldHVybiByZW1haW5pbmdBcGlMaW1pdCA+IDA7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZERpY3Rpb25hcnlBbmRDaGlsZHJlbih0cmVzdWx0LCB3b3JkLCB0cmF2ZXJzaW9uLCBwYXJlbnROb2RlLCBsb2FkQ2hpbGRyZW4pIHtcblxuICAgIGlmICghcGFyZW50Tm9kZSAmJiAgIWxvYWRDaGlsZHJlbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgYnlfZGVmID0gdHJlc3VsdC5ieV9kZWY7XG4gICAgY29uc3QgZW50cnkgPSBhd2FpdCBsb2FkU2luZ2xlV29yZCh3b3JkLCB0cnVlKTtcblxuICAgIGlmIChlbnRyeSAmJiAhZW50cnkuZnJvbUNhY2hlKSB7XG4gICAgICB0cmVzdWx0Lm5ld1dvcmRzKys7XG4gICAgfVxuICAgIGlmICghZW50cnkgfHxcbiAgICAgICAgKHRyYXZlcnNpb24ubGV2ZWwgPiAxICYmIFxuICAgICAgICBlbnRyeS5mcmVxdWVuY3kgJiYgZW50cnkuZnJlcXVlbmN5Pj1NQVhfTk9ERV9GUkVRVUVOQ1kpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuICAgIGZvciAobGV0IGtleSBpbiBlbnRyeS5yZXN1bHRzKSB7XG4gICAgICBjb25zdCB2YWwgPSBlbnRyeS5yZXN1bHRzW2tleV07IFxuICAgICAgaWYgKHBhcmVudE5vZGUgJiYgdmFsLmRlZmluaXRpb24gPT0gcGFyZW50Tm9kZS5kZWZpbml0aW9uKSB7XG4gICAgICAgIHBhcmVudE5vZGUuYWRkRXhhbXBsZXModmFsLmV4YW1wbGVzKTtcbiAgICAgICAgaWYgKCFsb2FkQ2hpbGRyZW4pIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9hZENoaWxkcmVuKSB7XG4gICAgICAgIGxldCBub2RlID0gbmV3IENsdXN0ZXJEZWZpbml0aW9uTm9kZShieV9kZWYsIGVudHJ5LCB2YWwsIHRyYXZlcnNpb24ubGV2ZWwpO1xuICAgICAgICBmb3IgKGxldCB3b3JkIG9mIG5vZGUud29yZHMpIHtcbiAgICAgICAgICBsZXQgcGFpciA9IHtwYXJlbnQ6bm9kZSwgd29yZH07XG4gICAgICAgICAgdHJhdmVyc2lvbi53b3Jkc2JyZWFkdGhmaXJzdC5wdXNoKHBhaXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiB0cmF2ZXJzZUNsdXN0ZXIodHJlc3VsdCwgd29yZCwgdGhlbWFpbmFic3RyYWN0aW9uPXRydWUsIHN0b3B3aGVuYWxsbG9hZGVkPWZhbHNlKSB7XG5cbiAgICBsZXQgdHJhdmVyc2lvbiA9IHtcbiAgICAgIGxldmVsIDogMSxcbiAgICAgIHdvcmRzYnJlYWR0aGZpcnN0IDogW3t3b3JkfV1cbiAgICB9O1xuICAgIGlmICh0aGVtYWluYWJzdHJhY3Rpb24pIHtcbiAgICAgIHRyZXN1bHQubm9Xb3JkcyA9IDA7XG4gICAgICB0cmVzdWx0Lm5ld1dvcmRzID0gMDtcbiAgICB9XG5cbiAgICB0cmVzdWx0Lm1hc3RlciA9IGF3YWl0IGxvYWRTaW5nbGVXb3JkKHdvcmQsIHRydWUpO1xuICAgIGlmICghdHJlc3VsdC5tYXN0ZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB2YXIgcHJldmlvdXNsZXZlbGNoaWxkd29yZHMgPSB0cmF2ZXJzaW9uLndvcmRzYnJlYWR0aGZpcnN0LmNvbmNhdChbXSk7XG4gICAgICB0cmF2ZXJzaW9uLndvcmRzYnJlYWR0aGZpcnN0ID0gW107XG5cbiAgICAgIGxldCBwcm9taXNlcyA9IFtdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChsZXQgcGFpciBvZiBwcmV2aW91c2xldmVsY2hpbGR3b3Jkcykge1xuICAgICAgICAgIGxldCB3ID0gcGFpci53b3JkO1xuICAgICAgICAgIGxldCBsb2FkQ2hpbGRyZW47XG5cbiAgICAgICAgICBpZiAodHJlc3VsdC5ieV93W3ddKSB7XG4gICAgICAgICAgICBsb2FkQ2hpbGRyZW4gPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJlc3VsdC5ub1dvcmRzKys7XG4gICAgICAgICAgICB0cmVzdWx0LmJ5X3dbd10gPSAxO1xuICAgICAgICAgICAgbG9hZENoaWxkcmVuID0gdHJlc3VsdC5ub1dvcmRzIDwgTUFYX1dPUkRTO1xuXG4gICAgICAgICAgICBpZiAoISh0cmVzdWx0Lm5vV29yZHMlMTAwMCkpIGNvbnNvbGUubG9nKEFQSSwgdHJlc3VsdC5ub1dvcmRzICsgXCIvXCIgKyBNQVhfV09SRFMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBub2RlcHJvbWlzZSA9IGxvYWREaWN0aW9uYXJ5QW5kQ2hpbGRyZW4odHJlc3VsdCwgdywgdHJhdmVyc2lvbiwgcGFpci5wYXJlbnQsIGxvYWRDaGlsZHJlbik7XG4gICAgICAgICAgcHJvbWlzZXMucHVzaChub2RlcHJvbWlzZSk7XG5cbiAgICAgICAgICBpZiAoc3RvcHdoZW5hbGxsb2FkZWQgJiYgIWF3YWl0IGNoZWNrQVBJbGltaXRBbmRGaW5pc2gocHJvbWlzZXMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhBUEksIHdvcmQrXCIgTGV2ZWwgXCIrdHJhdmVyc2lvbi5sZXZlbCtcIiBmaW5pc2hlZC4gU3RvcCBzZWFyY2hpbmcuIEFQSSBMaW1pdCByZWFjaGVkLlwiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRyZXN1bHQubm9Xb3JkcyA+PSBNQVhfV09SRFMpIHtcbiAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgICAgIGlmICh0aGVtYWluYWJzdHJhY3Rpb24pIGNvbnNvbGUubG9nKEFQSSx3b3JkK1wiIExldmVsIFwiK3RyYXZlcnNpb24ubGV2ZWwrXCIgZmluaXNoZWQuIFNlYXJjaCBsaW1pdCByZWFjaGVkLlwiKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZSA9PT0gQVBJX0xJTUlUX0VYQ0VQVElPTikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKEFQSSx3b3JkK1wiIExldmVsIFwiK3RyYXZlcnNpb24ubGV2ZWwrXCIgZmluaXNoZWQuIEFQSSBMaW1pdCByZWFjaGVkIChieSBleGNlcHRpb24pLlwiKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICBpZiAodGhlbWFpbmFic3RyYWN0aW9uKSBjb25zb2xlLmxvZyhBUEksd29yZCtcIiBMZXZlbCBcIit0cmF2ZXJzaW9uLmxldmVsK1wiIGZpbmlzaGVkLlwiKTtcblxuICAgICAgdHJhdmVyc2lvbi5sZXZlbCsrO1xuICAgIH0gd2hpbGUgKHRyYXZlcnNpb24ud29yZHNicmVhZHRoZmlyc3QubGVuZ3RoKTtcblxuICAgIGlmICh0aGVtYWluYWJzdHJhY3Rpb24pIHtcbiAgICAgIGNvbnNvbGUubG9nKEFQSSx3b3JkK1wiIENvbXBsZXRlZCAgVHJhdmVzcmVkOlwiK3RyZXN1bHQubm9Xb3JkcytcIiB3cml0dGVuOlwiK3RyZXN1bHQubmV3V29yZHMpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRDbHVzdGVyKHdvcmQsIGFzb2JqZWN0KSB7XG5cbiAgICBjb25zdCBieV9kZWYgPSB7fTtcbiAgICBjb25zdCBieV93ID0ge307XG4gICAgY29uc3QgYnlfa2V5ID0gW107XG4gICAgbGV0IHRyZXN1bHQgPSB7XG4gICAgICBieV9kZWYsXG4gICAgICBieV93ICAgIH07XG4gICAgXG4gICAgYXdhaXQgdHJhdmVyc2VDbHVzdGVyKHRyZXN1bHQsIHdvcmQpO1xuXG4gICAgYnlfa2V5LnB1c2guYXBwbHkoYnlfa2V5LCBPYmplY3QudmFsdWVzKGJ5X2RlZikpO1xuICAgIGNvbnN0IGNtcCA9IChmaXJzdEVsLCBzZWNvbmRFbCkgPT4ge1xuICAgICAgcmV0dXJuIGZpcnN0RWwua2V5LmxvY2FsZUNvbXBhcmUoc2Vjb25kRWwua2V5KTtcbiAgICB9O1xuICAgIGJ5X2tleS5zb3J0KGNtcCk7XG4gICAgZm9yIChsZXQgbm9kZSBvZiBieV9rZXkpIHtcbiAgICAgIG5vZGUuY29tcHJlc3MoKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIHdvcmQsXG4gICAgICBub0NsdXN0ZXJFbnRyaWVzOmJ5X2tleS5sZW5ndGgsXG4gICAgICByZXN1bHRzOmJ5X2tleVxuICAgIH07XG4gICAgaWYgKHRyZXN1bHQubWFzdGVyKSB7XG4gICAgICByZXN1bHQuZnJlcXVlbmN5ID0gdHJlc3VsdC5tYXN0ZXIuZnJlcXVlbmN5O1xuICAgICAgcmVzdWx0LnByb251bmNpYXRpb24gPSB0cmVzdWx0Lm1hc3Rlci5wcm9udW5jaWF0aW9uO1xuICAgIH1cblxuICAgIGxldCBjanNvbjtcbiAgICBpZiAoYXNvYmplY3QpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNqc29uID0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KTtcbiAgICAgIHJldHVybiBjanNvbjtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZChyZXN1bHQsIHdvcmQsIG5vV29yZHMpIHtcblxuICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgbG9hZFNpbmdsZVdvcmQod29yZCwgdHJ1ZSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmICghZW50cnkuZnJvbUNhY2hlKSB7XG4gICAgICAgIHJlc3VsdC5uZXdXb3JkcysrO1xuICAgICAgfVxuICAgICAgXG4gICAgICByZXN1bHQubm9Xb3JkcysrO1xuICAgICAgaWYgKCEocmVzdWx0Lm5vV29yZHMlMTAwMCkpIGNvbnNvbGUubG9nKEFQSSxyZXN1bHQubm9Xb3JkcyArIFwiL1wiICsgbm9Xb3Jkcyk7XG5cbiAgICAgIGZvciAobGV0IGtleSBpbiBlbnRyeS5yZXN1bHRzKSB7XG4gICAgICAgIGNvbnN0IHZhbCA9IGVudHJ5LnJlc3VsdHNba2V5XTsgXG5cbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbk5vZGUgPSBuZXcgRGVmaW5pdGlvbk5vZGUoZW50cnksIHZhbCk7XG5cbiAgICAgICAgbGV0IHByb21pc2VzID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZm9yIChsZXQgc3luIG9mICh2YWwuc3lub255bXM/dmFsLnN5bm9ueW1zOltdKSkge1xuICAgICAgICAgICAgbGV0IG5vZGVwcm9taXNlID0gbG9hZERpY3Rpb25hcnlBbmRDaGlsZHJlbihyZXN1bHQsIHN5biwge2xldmVsOjB9LCBkZWZpbml0aW9uTm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaChub2RlcHJvbWlzZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChlID09PSBBUElfTElNSVRfRVhDRVBUSU9OKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhBUEksd29yZCtcIiBMZXZlbCBcIit0cmF2ZXJzaW9uLmxldmVsK1wiIGZpbmlzaGVkLiBBUEkgTGltaXQgcmVhY2hlZCAoYnkgZXhjZXB0aW9uKS5cIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0Lm5vRGVmaW5pdGlvbnMrKztcbiAgICAgICAgcmVzdWx0LnJlc3VsdHMucHVzaChkZWZpbml0aW9uTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZENvbW1vbldvcmRzKHdvcmRzLCB3b3JkLCBhc29iamVjdCkge1xuXG4gICAgLy8gY3JlYXRlIG5ldyBhcnJheSB0byBwdXNoIGRhdGEgdG9cbiAgICBsZXQgcmVzdWx0cyA9IFtdO1xuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICB3b3JkLFxuICAgICAgbm9Xb3JkczowLFxuICAgICAgbmV3V29yZHM6MCxcbiAgICAgIG5vRGVmaW5pdGlvbnM6MCxcbiAgICAgIHJlc3VsdHNcbiAgICB9O1xuXG4gICAgbGV0IHByb21pc2VzID0gW107XG4gICAgbGV0IG5vV29yZHMgPSBPYmplY3Qua2V5cyh3b3JkcykubGVuZ3RoO1xuICAgIGZvciAobGV0IGNvbW1vbldvcmQgaW4gd29yZHMpIHtcbiAgICAgIGxldCBjd3Byb21pc2UgPSBsb2FkQ29tbW9uV29yZChyZXN1bHQsIGNvbW1vbldvcmQsIG5vV29yZHMpO1xuICAgICAgcHJvbWlzZXMucHVzaChjd3Byb21pc2UpO1xuICAgIH1cbiAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG5cbiAgICBjb25zdCBjbXAgPSAoZmlyc3RFbCwgc2Vjb25kRWwpID0+IHtcbiAgICAgIHJldHVybiBmaXJzdEVsLmtleS5sb2NhbGVDb21wYXJlKHNlY29uZEVsLmtleSk7XG4gICAgfTtcbiAgICByZXN1bHQucmVzdWx0cy5zb3J0KGNtcCk7XG4gICAgbGV0IHByZXZub2RlO1xuICAgIGxldCBmaWx0ZXJlZCA9IFtdO1xuICAgIGZvciAobGV0IG5vZGUgb2YgcmVzdWx0LnJlc3VsdHMpIHtcbiAgICAgIGlmICghcHJldm5vZGUgfHwgcHJldm5vZGUuZGVmaW5pdGlvbiE9bm9kZS5kZWZpbml0aW9uKSB7XG4gICAgICAgIGZpbHRlcmVkLnB1c2gobm9kZSk7XG4gICAgICAgIG5vZGUuY29tcHJlc3MoKTtcbiAgICAgICAgcHJldm5vZGUgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQucmVzdWx0cyA9IGZpbHRlcmVkO1xuICAgIHJlc3VsdC5ub0RlZmluaXRpb25zID0gZmlsdGVyZWQubGVuZ3RoO1xuXG4gICAgY29uc29sZS5sb2coQVBJLFwiIENvbW1vbiB3b3JkcyBxdWVyeSBwcm9jZXNzZWQgIFRyYXZlc3JlZDpcIityZXN1bHQubm9Xb3JkcytcIiB3cml0dGVuOlwiK3Jlc3VsdC5uZXdXb3Jkcyk7XG5cbiAgICBsZXQgY2pzb247XG4gICAgaWYgKGFzb2JqZWN0KSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjanNvbiA9IEpTT04uc3RyaW5naWZ5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gY2pzb247XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHNMZXR0ZXIod29yZHMsIHdvcmQsIGxldHRlciwgYXNvYmplY3QpIHtcbiAgICBsZXQgb2ZMZXR0ZXIgPSB7fTtcbiAgICBsZXQgbGMgPSBsZXR0ZXIudG9Mb3dlckNhc2UoKTtcbiAgICBmb3IgKGxldCB3IG9mIE9iamVjdC5rZXlzKHdvcmRzKSkge1xuICAgICAgaWYgKHdbMF0udG9Mb3dlckNhc2UoKT09bGMpIHtcbiAgICAgICAgb2ZMZXR0ZXJbd10gPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9hZENvbW1vbldvcmRzKG9mTGV0dGVyLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMzMDAwX2FfZSh3b3JkLCBhc29iamVjdCkge1xuICAgIGNvbnN0IGN3ID0gcmVxdWlyZSgnLi9jb21tb24td29yZHMtMzAwMC1hLWUuanMnKTtcbiAgICByZXR1cm4gbG9hZENvbW1vbldvcmRzKGN3LlRoZU1vc3RDb21tb24zMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMzMDAwX2ZfcCh3b3JkLCBhc29iamVjdCkge1xuICAgIGNvbnN0IGN3ID0gcmVxdWlyZSgnLi9jb21tb24td29yZHMtMzAwMC1mLXAuanMnKTtcbiAgICByZXR1cm4gbG9hZENvbW1vbldvcmRzKGN3LlRoZU1vc3RDb21tb24zMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMzMDAwX3Ffeih3b3JkLCBhc29iamVjdCkge1xuICAgIGNvbnN0IGN3ID0gcmVxdWlyZSgnLi9jb21tb24td29yZHMtMzAwMC1xLXouanMnKTtcbiAgICByZXR1cm4gbG9hZENvbW1vbldvcmRzKGN3LlRoZU1vc3RDb21tb24zMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMxMDAwMF9hX2Mod29yZCwgYXNvYmplY3QpIHtcbiAgICBjb25zdCBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLWEtYy5qcycpO1xuICAgIHJldHVybiBsb2FkQ29tbW9uV29yZHMoY3cuVGhlTW9zdENvbW1vbjEwMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMxMDAwMF9kX2god29yZCwgYXNvYmplY3QpIHtcbiAgICBjb25zdCBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLWQtaC5qcycpO1xuICAgIHJldHVybiBsb2FkQ29tbW9uV29yZHMoY3cuVGhlTW9zdENvbW1vbjEwMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMxMDAwMF9pX28od29yZCwgYXNvYmplY3QpIHtcbiAgICBjb25zdCBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLWktby5qcycpO1xuICAgIHJldHVybiBsb2FkQ29tbW9uV29yZHMoY3cuVGhlTW9zdENvbW1vbjEwMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMxMDAwMF9wX3Iod29yZCwgYXNvYmplY3QpIHtcbiAgICBjb25zdCBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLXAtci5qcycpO1xuICAgIHJldHVybiBsb2FkQ29tbW9uV29yZHMoY3cuVGhlTW9zdENvbW1vbjEwMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ29tbW9uV29yZHMxMDAwMF9zX3ood29yZCwgYXNvYmplY3QpIHtcbiAgICBjb25zdCBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLXMtei5qcycpO1xuICAgIHJldHVybiBsb2FkQ29tbW9uV29yZHMoY3cuVGhlTW9zdENvbW1vbjEwMDAwLCB3b3JkLCBhc29iamVjdCk7XG4gIH1cblxuXG5cbiAgZnVuY3Rpb24gbG9hZENvbW1vbldvcmRzMzAwMCh3b3JkLCBsZXR0ZXIsIGFzb2JqZWN0KSB7XG4gICAgbGV0IGxjID0gbGV0dGVyLnRvTG93ZXJDYXNlKCksY3c7XG4gICAgaWYgKCdhJzw9bGMgJiYgbGM8PSdlJykge1xuICAgICAgY3cgPSByZXF1aXJlKCcuL2NvbW1vbi13b3Jkcy0zMDAwLWEtZS5qcycpO1xuICAgIH0gZWxzZSBpZiAoJ2YnPD1sYyAmJiBsYzw9J3AnKSB7XG4gICAgICBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTMwMDAtZi1wLmpzJyk7XG4gICAgfSBlbHNlIGlmICgncSc8PWxjICYmIGxjPD0neicpIHtcbiAgICAgIGN3ID0gcmVxdWlyZSgnLi9jb21tb24td29yZHMtMzAwMC1xLXouanMnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3cgPSB7VGhlTW9zdENvbW1vbjMwMDA6e319O1xuICAgIH1cbiAgICByZXR1cm4gbG9hZENvbW1vbldvcmRzTGV0dGVyKGN3LlRoZU1vc3RDb21tb24zMDAwLCB3b3JkLCBsZXR0ZXIsIGFzb2JqZWN0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRDb21tb25Xb3JkczEwMDAwKHdvcmQsIGxldHRlciwgYXNvYmplY3QpIHtcbiAgICBsZXQgbGMgPSBsZXR0ZXIudG9Mb3dlckNhc2UoKSxjdztcbiAgICBpZiAoJ2EnPD1sYyAmJiBsYzw9J2MnKSB7XG4gICAgICBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLWEtYy5qcycpO1xuICAgIH0gZWxzZSBpZiAoJ2QnPD1sYyAmJiBsYzw9J2gnKSB7XG4gICAgICBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLWQtaC5qcycpO1xuICAgIH0gZWxzZSBpZiAoJ2knPD1sYyAmJiBsYzw9J28nKSB7XG4gICAgICBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLWktby5qcycpO1xuICAgIH0gZWxzZSBpZiAoJ3AnPD1sYyAmJiBsYzw9J3InKSB7XG4gICAgICBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLXAtci5qcycpO1xuICAgIH0gZWxzZSBpZiAoJ3MnPD1sYyAmJiBsYzw9J3onKSB7XG4gICAgICBjdyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLXMtei5qcycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdyA9IHtUaGVNb3N0Q29tbW9uMTAwMDA6e319O1xuICAgIH1cbiAgICByZXR1cm4gbG9hZENvbW1vbldvcmRzTGV0dGVyKGN3LlRoZU1vc3RDb21tb24xMDAwMCwgd29yZCwgbGV0dGVyLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkV29yZHNPbmx5KHdvcmRzMCwgd29yZCwgYXNvYmplY3QpIHtcbiAgICBsZXQgd29yZHM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkod29yZHMwKSkge1xuICAgICAgd29yZHMgPSB3b3JkczA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdvcmRzID0gW10uY29uY2F0KE9iamVjdC5rZXlzKHdvcmRzMCkpO1xuICAgIH1cbiAgICB3b3Jkcy5zb3J0KCk7XG5cbiAgICBsZXQgcmVzdWx0ID0ge1xuICAgICAgd29yZCxcbiAgICAgIG5vV29yZHM6d29yZHMubGVuZ3RoLFxuICAgICAgcmVzdWx0czp3b3Jkc1xuICAgIH07XG4gICAgbGV0IGNqc29uO1xuICAgIGlmIChhc29iamVjdCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2pzb24gPSBKU09OLnN0cmluZ2lmeShyZXN1bHQpO1xuICAgICAgcmV0dXJuIGNqc29uO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRDb21tb24zMDAwX3dvcmRzKHdvcmQsIGFzb2JqZWN0KSB7XG4gICAgbGV0IGN3MSA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTMwMDAtYS1lLmpzJyk7XG4gICAgbGV0IGN3MiA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTMwMDAtZi1wLmpzJyk7XG4gICAgbGV0IGN3MyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTMwMDAtcS16LmpzJyk7XG4gICAgbGV0IFRoZU1vc3RDb21tb24zMDAwID0gT2JqZWN0LmFzc2lnbih7fSwgY3cxLlRoZU1vc3RDb21tb24zMDAwLCBjdzIuVGhlTW9zdENvbW1vbjMwMDAsIGN3My5UaGVNb3N0Q29tbW9uMzAwMCk7XG4gICAgcmV0dXJuIGxvYWRXb3Jkc09ubHkoVGhlTW9zdENvbW1vbjMwMDAsIHdvcmQsIGFzb2JqZWN0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRDb21tb24xMDAwMF93b3Jkcyh3b3JkLCBhc29iamVjdCkge1xuICAgIGxldCBjdzEgPSByZXF1aXJlKCcuL2NvbW1vbi13b3Jkcy0xMDAwMC1hLWMuanMnKTtcbiAgICBsZXQgY3cyID0gcmVxdWlyZSgnLi9jb21tb24td29yZHMtMTAwMDAtZC1oLmpzJyk7XG4gICAgbGV0IGN3MyA9IHJlcXVpcmUoJy4vY29tbW9uLXdvcmRzLTEwMDAwLWktby5qcycpO1xuICAgIGxldCBjdzQgPSByZXF1aXJlKCcuL2NvbW1vbi13b3Jkcy0xMDAwMC1wLXIuanMnKTtcbiAgICBsZXQgY3c1ID0gcmVxdWlyZSgnLi9jb21tb24td29yZHMtMTAwMDAtcy16LmpzJyk7XG4gICAgbGV0IFRoZU1vc3RDb21tb24xMDAwMCA9IE9iamVjdC5hc3NpZ24oe30sIGN3MS5UaGVNb3N0Q29tbW9uMTAwMDAsIGN3Mi5UaGVNb3N0Q29tbW9uMTAwMDAsIGN3My5UaGVNb3N0Q29tbW9uMTAwMDAsIGN3NC5UaGVNb3N0Q29tbW9uMTAwMDAsIGN3NS5UaGVNb3N0Q29tbW9uMTAwMDApO1xuICAgIHJldHVybiBsb2FkV29yZHNPbmx5KFRoZU1vc3RDb21tb24xMDAwMCwgd29yZCwgYXNvYmplY3QpO1xuICB9XG5cblxuICBhc3luYyBmdW5jdGlvbiBsb2FkQWxsX3dvcmRzKHdvcmQwLCBhc29iamVjdCkge1xuICAgIGxldCBhbGx3b3JkczAgPSBbXTtcbiAgICBmdW5jdGlvbiBvbkZpbGUoc3RyUGF0aCwgc3RhdCkge1xuICAgICAgbGV0IHdvcmQgPSBzdHJQYXRoLnN1YnN0cmluZyhUV0VMVkUpO1xuICAgICAgYWxsd29yZHMwLnB1c2god29yZCk7XG4gICAgfVxuICAgIGF3YWl0IGZpbmRlci5maW5kRmlsZXMoYCR7Q0FDSEVfRElSfS93b3Jkc2AsIDAsIG9uRmlsZSk7XG5cbiAgICByZXR1cm4gbG9hZFdvcmRzT25seShhbGx3b3JkczAsIHdvcmQwLCBhc29iamVjdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkTXlXb3Jkcyh3b3JkLCBhc29iamVjdCkge1xuICAgIGxldCBjdzEgPSByZXF1aXJlKCcuL215LXdvcmRzLmpzJyk7XG4gICAgcmV0dXJuIGxvYWRXb3Jkc09ubHkoY3cxLk15V29yZHMsIHdvcmQsIGFzb2JqZWN0KTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHdvcmRzQnlGcmVxdWVuY3kod29yZDAsIGZmcm9tLCBmdG89MTAwMDAwMCwgYXNvYmplY3QpIHtcbiAgICBsZXQgZmlsZXMgPSBbXTtcbiAgICBjb25zdCBpbmRwYXRoID0gYGNhY2hlL2luZGV4L2ZyZXF1ZW5jeWA7XG5cbiAgICBsZXQgaWpzb24gPSBmcy5yZWFkRmlsZVN5bmMoaW5kcGF0aCk7XG4gICAgbGV0IGZpbmQgPSBKU09OLnBhcnNlKGlqc29uKTtcblxuICAgIGxldCB3b3JkczAgPSBbXTtcbiAgICBsZXQgbm90Zj0wLGZpdD0wO1xuXG4gICAgZm9yIChsZXQgZGYgaW4gZmluZCkge1xuICAgICAgbGV0IGEgPSBmaW5kW2RmXTtcbiAgICAgIGlmIChmZnJvbSA8PSBkZiAmJiBkZiA8PSBmdG8pIHtcbiAgICAgICAgd29yZHMwLnB1c2guYXBwbHkod29yZHMwLCBhKTtcbiAgICAgICAgZml0Kz1hLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vdGYrPWEubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKEFQSSwgXCJJdGVtcyBmaXQ6XCIrZml0K1wiIG5vbmZpdDpcIitub3RmK1wiIHRvdDpcIisoZml0K25vdGYpKTtcblxuICAgIHJldHVybiBsb2FkV29yZHNPbmx5KHdvcmRzMCwgd29yZDAsIGFzb2JqZWN0KTtcbiAgfVxuXG5cbiAgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVJbmRleGVzKCkge1xuICAgIGxldCBmaWxlcyA9IFtdO1xuICAgIGFzeW5jIGZ1bmN0aW9uIG9uRmlsZShzdHJQYXRoLCBzdGF0KSB7XG4gICAgICBsZXQgd29yZCA9IHN0clBhdGguc3Vic3RyaW5nKFRXRUxWRSk7XG4gICAgICBmaWxlcy5wdXNoKHdvcmQpO1xuICAgIH1cbiAgICBsZXQgbm93b3JkcyA9IGF3YWl0IGZpbmRlci5maW5kRmlsZXMoYCR7Q0FDSEVfRElSfS93b3Jkc2AsIDAsIG9uRmlsZSk7XG5cblxuICAgIGxldCBjbnRmID0gMDtcbiAgICBsZXQgYnlmID0ge307XG4gICAgZnVuY3Rpb24gZW50cnkoZikge1xuICAgICAgbGV0IGVzID0gYnlmW2ZdO1xuICAgICAgaWYgKCFlcykge1xuICAgICAgICBieWZbZl0gPSBlcyA9IFtdO1xuICAgICAgICBjbnRmKys7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXM7XG4gICAgfVxuICAgIGxldCBjaGtGaWxlID0gYXN5bmMgZnVuY3Rpb24od29yZCkge1xuICAgICAgbGV0IGRhdGEgPSBhd2FpdCBsb2FkU2luZ2xlV29yZCh3b3JkLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGxldCBkZiA9IGRhdGEuZnJlcXVlbmN5ID8gZGF0YS5mcmVxdWVuY3kgOiAwO1xuICAgICAgICBlbnRyeShkZikucHVzaCh3b3JkKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IHByb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgZmlsZSBvZiBmaWxlcykge1xuICAgICAgcHJvbWlzZXMucHVzaChjaGtGaWxlKGZpbGUpKTtcbiAgICB9XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgdmFyIGZrZXlzID0gW10uY29uY2F0KE9iamVjdC5rZXlzKGJ5ZikpO1xuICAgIGZrZXlzLnNvcnQoKGEsYik9Pk51bWJlcihhKS1OdW1iZXIoYikpO1xuICAgIHZhciBieWZzID0ge307XG4gICAgZm9yIChsZXQgZiBvZiBma2V5cykge1xuICAgICAgbGV0IGVzID0gYnlmW2ZdO1xuICAgICAgYnlmc1tmXSA9IGVzO1xuICAgICAgZXMuc29ydCgpO1xuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKEFQSSwgXCJGcmVxdWVuY3kgaW5kZXhlczpcIitjbnRmK1wiICBvZiBuby53b3JkczpcIitub3dvcmRzKTtcbiAgICBmdW5jdGlvbiBxdWFudGlsaXplKHNpemUpIHtcbiAgICAgIGxldCBsc3QgPSAwO1xuICAgICAgbGV0IGJ1Y2tldHMgPSBbMF07XG4gICAgICBmb3IgKGxldCBmIG9mIGZrZXlzKSB7XG4gICAgICAgIGYgPSBOdW1iZXIoZik7XG4gICAgICAgIGlmIChmKSB7XG4gICAgICAgICAgbGV0IGVzID0gYnlmc1tmXTtcbiAgICAgICAgICBsc3QgKz0gZXM/ZXMubGVuZ3RoOjA7XG4gICAgICAgICAgaWYgKGxzdCA+PSBzaXplKSB7XG4gICAgICAgICAgICBsZXQgZnBsID0gZiswLjAwNTtcbiAgICAgICAgICAgIGxldCBmZiA9IGZwbC50b0ZpeGVkKDMpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coQVBJLCBcIkZyZXF1ZW5jeTouLlwiK2YrXCIgXCIrZmYrXCIgIGNudDpcIitsc3QpO1xuICAgICAgICAgICAgbHN0ID0gMDtcbiAgICAgICAgICAgIGJ1Y2tldHMucHVzaChmZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhBUEksIFwiRnJlcXVlbmN5Oi4uICBjbnQ6XCIrbHN0KTtcbiAgICAgIGNvbnNvbGUubG9nKEFQSSwgXCJ2YXIgZnJxbnRsc1wiK3NpemUrXCI9W1wiK2J1Y2tldHMuam9pbihcIiwgXCIpK1wiLDEwMF07XFxuXCIpO1xuICAgIH1cbiAgICBxdWFudGlsaXplKDgwMCk7XG4gICAgcXVhbnRpbGl6ZSgzMDAwKTtcbiAgICBxdWFudGlsaXplKDEwMDAwKTtcblxuICAgIGNvbnN0IGluZHBhdGggPSBgY2FjaGUvaW5kZXgvZnJlcXVlbmN5YDtcbiAgICBjb25zdCBkanNvbiA9IEpTT04uc3RyaW5naWZ5KGJ5ZnMpO1xuXG4gICAgY29uc29sZS5sb2coQVBJLCBcIlNhdmluZyBjYWNoZSBmaWxlL2luZGV4IFwiK2luZHBhdGgpO1xuICAgIGZzLndyaXRlRmlsZVN5bmMoaW5kcGF0aCwgZGpzb24pO1xuXG4gIH1cblxuICByZXR1cm4ge2lzQXBpTGltaXRSZWFjaGVkLCBpbml0Q3Jhd2xlciwgc2luZ2xlV29yZFRvRGlzcGxheSwgbG9hZFNpbmdsZVdvcmQsIHRyYXZlcnNlQ2x1c3RlciwgbG9hZENsdXN0ZXIsIGxvYWRDb21tb25Xb3JkcywgbG9hZENvbW1vbldvcmRzTGV0dGVyLFxuICAgIGxvYWRDb21tb25Xb3JkczMwMDBfYV9lLCBsb2FkQ29tbW9uV29yZHMzMDAwX2ZfcCwgbG9hZENvbW1vbldvcmRzMzAwMF9xX3osIGxvYWRDb21tb25Xb3JkczEwMDAwX2FfYyxcbiAgICBsb2FkQ29tbW9uV29yZHMxMDAwMF9kX2gsIGxvYWRDb21tb25Xb3JkczEwMDAwX2lfbywgbG9hZENvbW1vbldvcmRzMTAwMDBfcF9yLFxuICAgIGxvYWRDb21tb25Xb3JkczEwMDAwX3NfeiwgbG9hZENvbW1vbldvcmRzMzAwMCwgbG9hZENvbW1vbldvcmRzMTAwMDAsIGxvYWRDb21tb24zMDAwX3dvcmRzLFxuICAgIGxvYWRDb21tb24xMDAwMF93b3JkcywgbG9hZEFsbF93b3JkcywgbG9hZE15V29yZHMsIHdvcmRzQnlGcmVxdWVuY3ksIGdlbmVyYXRlSW5kZXhlc1xuICB9O1xufVxuIiwiY29uc3QgRmluZEZpbGVzID0gcmVxdWlyZShcIm5vZGUtZmluZC1maWxlc1wiKTtcblxuZXhwb3J0IGxldCBjbnQ9MCxlcnJvcnM9MDtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRGaWxlcyhyb290Rm9sZGVyLCBmaWxlTW9kaWZpZWREYXRlLCBvbkZpbGUpIHtcbiAgICB2YXIgZmluZGVyID0gbmV3IEZpbmRGaWxlcyh7XG4gICAgICAgIHJvb3RGb2xkZXIsXG4gICAgICAgIGZpbGVNb2RpZmllZERhdGVcbiAgICB9KTtcbiAgICB2YXIgcmVzdWx0LHJlc29sdmUscmVqZWN0O1xuICAgIGNudD0wOyBlcnJvcnM9MDtcblxuICAgIGZpbmRlci5vbihcIm1hdGNoXCIsIGZ1bmN0aW9uKHN0clBhdGgsIHN0YXQpIHtcbiAgICAgICAgaWYgKG9uRmlsZSkgb25GaWxlKHN0clBhdGgsIHN0YXQpO1xuICAgICAgICBjbnQrKztcbiAgICB9KTtcbiAgICBmaW5kZXIub24oXCJjb21wbGV0ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZShjbnQpO1xuICAgIH0pO1xuICAgIGZpbmRlci5vbihcInBhdGhlcnJvclwiLCBmdW5jdGlvbihlcnIsIHN0clBhdGgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBmb3IgUGF0aCBcIiArIHN0clBhdGggKyBcIiBcIiArIGVycik7ICAvLyBOb3RlIHRoYXQgYW4gZXJyb3IgaW4gYWNjZXNzaW5nIGEgcGFydGljdWxhciBmaWxlIGRvZXMgbm90IHN0b3AgdGhlIHdob2xlIHNob3dcbiAgICAgICAgZXJyb3JzKys7XG4gICAgfSk7XG4gICAgZmluZGVyLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiR2xvYmFsIEVycm9yIFwiICsgZXJyKTtcbiAgICAgICAgZXJyb3JzKys7XG4gICAgfSk7XG5cbiAgICByZXN1bHQgPSBuZXcgUHJvbWlzZSgoX3Jlc29sdmUsX3JlamVjdCk9PntcbiAgICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xuICAgICAgICByZWplY3QgPSBfcmVqZWN0O1xuICAgICAgICBmaW5kZXIuc3RhcnRTZWFyY2goKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5jb25zdCBmc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJmc1wiKSk7XG5jb25zdCBhc3luY18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJhc3luY1wiKSk7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3QgZXZlbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImV2ZW50c1wiKSk7XG52YXIgRXZlbnRFbWl0dGVyID0gZXZlbnRzXzEuZGVmYXVsdC5FdmVudEVtaXR0ZXI7XG4vKioqXG4gKiBUaGlzIGNsYXNzIHJlY3Vyc2l2ZWx5IGZpbmRzIGZpbGVzIHRoYXQgbWF0Y2ggdGhlIGZpbHRlciBmdW5jdGlvbiBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yXG4gKiBBbiBhbHRlcm5hdGl2ZSBjb25zdHJ1Y3RvciB0YWtlcyBhIGZpbGVNb2RpZmllZERhdGUgYW5kIHJldHVybnMgYWxsIGZpbGVzIHRoYXQgaGF2ZSBiZWVuIG1vZGlmaWVkIHNpbmNlIHRoYXQgZGF0ZVxuICogdGhpcyBjbGFzcyBlbWl0cyBhIG51bWJlciBvZiBldmVudHNcbiAqIG9uIFwibWF0Y2hcIiBpcyBlbWl0dGVkIGZvciBldmVyeSBwYXRoIHRoYXQgbWF0Y2hlc1xuICovXG5jbGFzcyBmaW5kZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZmlsZU1vZGlmaWVkRGF0ZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXJGdW5jdGlvbiA9IChzdHJQYXRoLCBmc1N0YXQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGZzU3RhdC5tdGltZSA+IG9wdGlvbnMuZmlsZU1vZGlmaWVkRGF0ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5maWx0ZXJGdW5jdGlvbikge1xuICAgICAgICAgICAgb3B0aW9ucy5maWx0ZXJGdW5jdGlvbiA9ICgpID0+IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgc3RhcnRTZWFyY2goKSB7XG4gICAgICAgIHRoaXMucmVjdXJzZUZvbGRlcih0aGlzLm9wdGlvbnMucm9vdEZvbGRlciwgKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlRoaXMgU2hvdWxkIENhbGwgd2hlbiBldmVyeXRoaW5nIGlzIGZpbmlzaGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiY29tcGxldGVcIik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZWN1cnNlRm9sZGVyKHN0ckZvbGRlck5hbWUsIGZvbGRlckNvbXBsZXRlQ2FsbGJhY2spIHtcbiAgICAgICAgZnNfMS5kZWZhdWx0LnJlYWRkaXIoc3RyRm9sZGVyTmFtZSwgKGVyciwgZmlsZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uUGF0aEVycm9yKGVyciwgc3RyRm9sZGVyTmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbGRlckNvbXBsZXRlQ2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZmlsZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9sZGVyQ29tcGxldGVDYWxsYmFjayhudWxsKTsgLy8gVGhpcyBpcyBqdXN0IGFuIGVtcHR5IGZvbGRlclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXN5bmNfMS5kZWZhdWx0LmVhY2goZmlsZXMsIChmaWxlLCBjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHJQYXRoID0gcGF0aF8xLmRlZmF1bHQuam9pbihzdHJGb2xkZXJOYW1lLCBmaWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblBhdGhFcnJvcihlLCBzdHJQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpOyAvLyBEb24ndCByZXR1cm4gZXJyb3IgdG8gY2FsbGJhY2sgb3Igd2Ugd2lsbCBtaXNzIG90aGVyIGZpbGVzIGluIGRpcmVjdG9yeVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm9uRmlsZUZvdW5kKHN0clBhdGgsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25QYXRoRXJyb3IoZXJyLCBzdHJGb2xkZXJOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIGlmKHN0ckZvbGRlck5hbWUubGVuZ3RoIDwgMjApXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImZpbmlzaGVkIFwiICsgc3RyRm9sZGVyTmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvbGRlckNvbXBsZXRlQ2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25GaWxlRm91bmQoc3RyUGF0aCwgY2FsbGJhY2spIHtcbiAgICAgICAgZnNfMS5kZWZhdWx0LmxzdGF0KHN0clBhdGgsIChlcnIsIHN0YXQpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uUGF0aEVycm9yKGVyciwgc3RyUGF0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpOyAvLyBEb24ndCByZXR1cm4gZXJyb3IgdG8gY2FsbGJhY2sgb3Igd2Ugd2lsbCBtaXNzIG90aGVyIGZpbGVzIGluIGRpcmVjdG9yeVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdGF0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblBhdGhFcnJvcihuZXcgRXJyb3IoXCJDb3VsZCBub3QgZ2V0IHN0YXQgZm9yIGZpbGUgXCIgKyBzdHJQYXRoKSwgc3RyUGF0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpOyAvLyBEb24ndCByZXR1cm4gZXJyb3IgdG8gY2FsbGJhY2sgb3Igd2Ugd2lsbCBtaXNzIG90aGVyIGZpbGVzIGluIGRpcmVjdG9yeVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXQuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tNYXRjaChzdHJQYXRoLCBzdGF0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2VGb2xkZXIoc3RyUGF0aCwgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uUGF0aEVycm9yKGVyciwgc3RyUGF0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja01hdGNoKHN0clBhdGgsIHN0YXQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNoZWNrTWF0Y2goc3RyUGF0aCwgc3RhdCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maWx0ZXJGdW5jdGlvbihzdHJQYXRoLCBzdGF0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChcIm1hdGNoXCIsIHN0clBhdGgsIHN0YXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aGlzLm9uUGF0aEVycm9yKGUsIHN0clBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uUGF0aEVycm9yKGVyciwgc3RyUGF0aCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwicGF0aGVycm9yXCIsIGVyciwgc3RyUGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vQWxyZWFkeSBlbWl0dGVkIGEgcGF0aCBlcnJvciBhbmQgdGhlIGhhbmRsZXIgZmFpbGVkIG11c3Qgbm90IHRocm93IGVycm9yIG9yIG90aGVyIGZpbGVzIHdpbGwgZmFpbCB0byBwcm9jZXNzIHRvb1xuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgbmV3IEVycm9yKFwiRXJyb3IgaW4gcGF0aCBFcnJvciBIYW5kbGVyXCIgKyBlKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZpbmRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtZmluZC1maWxlcy5qcy5tYXAiLCIvKmdsb2JhbCBzZXRJbW1lZGlhdGU6IGZhbHNlLCBzZXRUaW1lb3V0OiBmYWxzZSwgY29uc29sZTogZmFsc2UgKi9cbihmdW5jdGlvbiAoKSB7XG5cbiAgICB2YXIgYXN5bmMgPSB7fTtcblxuICAgIC8vIGdsb2JhbCBvbiB0aGUgc2VydmVyLCB3aW5kb3cgaW4gdGhlIGJyb3dzZXJcbiAgICB2YXIgcm9vdCwgcHJldmlvdXNfYXN5bmM7XG5cbiAgICByb290ID0gdGhpcztcbiAgICBpZiAocm9vdCAhPSBudWxsKSB7XG4gICAgICBwcmV2aW91c19hc3luYyA9IHJvb3QuYXN5bmM7XG4gICAgfVxuXG4gICAgYXN5bmMubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcm9vdC5hc3luYyA9IHByZXZpb3VzX2FzeW5jO1xuICAgICAgICByZXR1cm4gYXN5bmM7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG9ubHlfb25jZShmbikge1xuICAgICAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjYWxsZWQpIHRocm93IG5ldyBFcnJvcihcIkNhbGxiYWNrIHdhcyBhbHJlYWR5IGNhbGxlZC5cIik7XG4gICAgICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgICAgICAgZm4uYXBwbHkocm9vdCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLy8gY3Jvc3MtYnJvd3NlciBjb21wYXRpYmxpdHkgZnVuY3Rpb25zIC8vLy9cblxuICAgIHZhciBfZWFjaCA9IGZ1bmN0aW9uIChhcnIsIGl0ZXJhdG9yKSB7XG4gICAgICAgIGlmIChhcnIuZm9yRWFjaCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyci5mb3JFYWNoKGl0ZXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaXRlcmF0b3IoYXJyW2ldLCBpLCBhcnIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBfbWFwID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IpIHtcbiAgICAgICAgaWYgKGFyci5tYXApIHtcbiAgICAgICAgICAgIHJldHVybiBhcnIubWFwKGl0ZXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICBfZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBpLCBhKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goaXRlcmF0b3IoeCwgaSwgYSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfTtcblxuICAgIHZhciBfcmVkdWNlID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIG1lbW8pIHtcbiAgICAgICAgaWYgKGFyci5yZWR1Y2UpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnIucmVkdWNlKGl0ZXJhdG9yLCBtZW1vKTtcbiAgICAgICAgfVxuICAgICAgICBfZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBpLCBhKSB7XG4gICAgICAgICAgICBtZW1vID0gaXRlcmF0b3IobWVtbywgeCwgaSwgYSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICB9O1xuXG4gICAgdmFyIF9rZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKGspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH07XG5cbiAgICAvLy8vIGV4cG9ydGVkIGFzeW5jIG1vZHVsZSBmdW5jdGlvbnMgLy8vL1xuXG4gICAgLy8vLyBuZXh0VGljayBpbXBsZW1lbnRhdGlvbiB3aXRoIGJyb3dzZXItY29tcGF0aWJsZSBmYWxsYmFjayAvLy8vXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCAhKHByb2Nlc3MubmV4dFRpY2spKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBhc3luYy5uZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShmbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXN5bmMubmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZuLCAwKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFzeW5jLm5leHRUaWNrID0gcHJvY2Vzcy5uZXh0VGljaztcbiAgICB9XG5cbiAgICBhc3luYy5lYWNoID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG4gICAgICAgIGlmICghYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IDA7XG4gICAgICAgIF9lYWNoKGFyciwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKHgsIG9ubHlfb25jZShmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQgPj0gYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgYXN5bmMuZm9yRWFjaCA9IGFzeW5jLmVhY2g7XG5cbiAgICBhc3luYy5lYWNoU2VyaWVzID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG4gICAgICAgIGlmICghYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IDA7XG4gICAgICAgIHZhciBpdGVyYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgICAgICAgICAgaXRlcmF0b3IoYXJyW2NvbXBsZXRlZF0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmMubmV4dFRpY2soaXRlcmF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN5bmMgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgaXRlcmF0ZSgpO1xuICAgIH07XG4gICAgYXN5bmMuZm9yRWFjaFNlcmllcyA9IGFzeW5jLmVhY2hTZXJpZXM7XG5cbiAgICBhc3luYy5lYWNoTGltaXQgPSBmdW5jdGlvbiAoYXJyLCBsaW1pdCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmbiA9IF9lYWNoTGltaXQobGltaXQpO1xuICAgICAgICBmbi5hcHBseShudWxsLCBbYXJyLCBpdGVyYXRvciwgY2FsbGJhY2tdKTtcbiAgICB9O1xuICAgIGFzeW5jLmZvckVhY2hMaW1pdCA9IGFzeW5jLmVhY2hMaW1pdDtcblxuICAgIHZhciBfZWFjaExpbWl0ID0gZnVuY3Rpb24gKGxpbWl0KSB7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICAgIGlmICghYXJyLmxlbmd0aCB8fCBsaW1pdCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY29tcGxldGVkID0gMDtcbiAgICAgICAgICAgIHZhciBzdGFydGVkID0gMDtcbiAgICAgICAgICAgIHZhciBydW5uaW5nID0gMDtcblxuICAgICAgICAgICAgKGZ1bmN0aW9uIHJlcGxlbmlzaCAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHdoaWxlIChydW5uaW5nIDwgbGltaXQgJiYgc3RhcnRlZCA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdG9yKGFycltzdGFydGVkIC0gMV0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsZW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH07XG4gICAgfTtcblxuXG4gICAgdmFyIGRvUGFyYWxsZWwgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbYXN5bmMuZWFjaF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBkb1BhcmFsbGVsTGltaXQgPSBmdW5jdGlvbihsaW1pdCwgZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbX2VhY2hMaW1pdChsaW1pdCldLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgZG9TZXJpZXMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShudWxsLCBbYXN5bmMuZWFjaFNlcmllc10uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG5cbiAgICB2YXIgX2FzeW5jTWFwID0gZnVuY3Rpb24gKGVhY2hmbiwgYXJyLCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgYXJyID0gX21hcChhcnIsIGZ1bmN0aW9uICh4LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4ge2luZGV4OiBpLCB2YWx1ZTogeH07XG4gICAgICAgIH0pO1xuICAgICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbiAoeCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yKHgudmFsdWUsIGZ1bmN0aW9uIChlcnIsIHYpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzW3guaW5kZXhdID0gdjtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgcmVzdWx0cyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgYXN5bmMubWFwID0gZG9QYXJhbGxlbChfYXN5bmNNYXApO1xuICAgIGFzeW5jLm1hcFNlcmllcyA9IGRvU2VyaWVzKF9hc3luY01hcCk7XG4gICAgYXN5bmMubWFwTGltaXQgPSBmdW5jdGlvbiAoYXJyLCBsaW1pdCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBfbWFwTGltaXQobGltaXQpKGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKTtcbiAgICB9O1xuXG4gICAgdmFyIF9tYXBMaW1pdCA9IGZ1bmN0aW9uKGxpbWl0KSB7XG4gICAgICAgIHJldHVybiBkb1BhcmFsbGVsTGltaXQobGltaXQsIF9hc3luY01hcCk7XG4gICAgfTtcblxuICAgIC8vIHJlZHVjZSBvbmx5IGhhcyBhIHNlcmllcyB2ZXJzaW9uLCBhcyBkb2luZyByZWR1Y2UgaW4gcGFyYWxsZWwgd29uJ3RcbiAgICAvLyB3b3JrIGluIG1hbnkgc2l0dWF0aW9ucy5cbiAgICBhc3luYy5yZWR1Y2UgPSBmdW5jdGlvbiAoYXJyLCBtZW1vLCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgYXN5bmMuZWFjaFNlcmllcyhhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IobWVtbywgeCwgZnVuY3Rpb24gKGVyciwgdikge1xuICAgICAgICAgICAgICAgIG1lbW8gPSB2O1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyLCBtZW1vKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBpbmplY3QgYWxpYXNcbiAgICBhc3luYy5pbmplY3QgPSBhc3luYy5yZWR1Y2U7XG4gICAgLy8gZm9sZGwgYWxpYXNcbiAgICBhc3luYy5mb2xkbCA9IGFzeW5jLnJlZHVjZTtcblxuICAgIGFzeW5jLnJlZHVjZVJpZ2h0ID0gZnVuY3Rpb24gKGFyciwgbWVtbywgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXZlcnNlZCA9IF9tYXAoYXJyLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0pLnJldmVyc2UoKTtcbiAgICAgICAgYXN5bmMucmVkdWNlKHJldmVyc2VkLCBtZW1vLCBpdGVyYXRvciwgY2FsbGJhY2spO1xuICAgIH07XG4gICAgLy8gZm9sZHIgYWxpYXNcbiAgICBhc3luYy5mb2xkciA9IGFzeW5jLnJlZHVjZVJpZ2h0O1xuXG4gICAgdmFyIF9maWx0ZXIgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgICBhcnIgPSBfbWFwKGFyciwgZnVuY3Rpb24gKHgsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiB7aW5kZXg6IGksIHZhbHVlOiB4fTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2hmbihhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeC52YWx1ZSwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2soX21hcChyZXN1bHRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgICAgICAgICB9KSwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC52YWx1ZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBhc3luYy5maWx0ZXIgPSBkb1BhcmFsbGVsKF9maWx0ZXIpO1xuICAgIGFzeW5jLmZpbHRlclNlcmllcyA9IGRvU2VyaWVzKF9maWx0ZXIpO1xuICAgIC8vIHNlbGVjdCBhbGlhc1xuICAgIGFzeW5jLnNlbGVjdCA9IGFzeW5jLmZpbHRlcjtcbiAgICBhc3luYy5zZWxlY3RTZXJpZXMgPSBhc3luYy5maWx0ZXJTZXJpZXM7XG5cbiAgICB2YXIgX3JlamVjdCA9IGZ1bmN0aW9uIChlYWNoZm4sIGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICAgIGFyciA9IF9tYXAoYXJyLCBmdW5jdGlvbiAoeCwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHtpbmRleDogaSwgdmFsdWU6IHh9O1xuICAgICAgICB9KTtcbiAgICAgICAgZWFjaGZuKGFyciwgZnVuY3Rpb24gKHgsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpdGVyYXRvcih4LnZhbHVlLCBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgIGlmICghdikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgY2FsbGJhY2soX21hcChyZXN1bHRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XG4gICAgICAgICAgICB9KSwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC52YWx1ZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBhc3luYy5yZWplY3QgPSBkb1BhcmFsbGVsKF9yZWplY3QpO1xuICAgIGFzeW5jLnJlamVjdFNlcmllcyA9IGRvU2VyaWVzKF9yZWplY3QpO1xuXG4gICAgdmFyIF9kZXRlY3QgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGl0ZXJhdG9yLCBtYWluX2NhbGxiYWNrKSB7XG4gICAgICAgIGVhY2hmbihhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbl9jYWxsYmFjayh4KTtcbiAgICAgICAgICAgICAgICAgICAgbWFpbl9jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgbWFpbl9jYWxsYmFjaygpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGFzeW5jLmRldGVjdCA9IGRvUGFyYWxsZWwoX2RldGVjdCk7XG4gICAgYXN5bmMuZGV0ZWN0U2VyaWVzID0gZG9TZXJpZXMoX2RldGVjdCk7XG5cbiAgICBhc3luYy5zb21lID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIG1haW5fY2FsbGJhY2spIHtcbiAgICAgICAgYXN5bmMuZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICBtYWluX2NhbGxiYWNrKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBtYWluX2NhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgbWFpbl9jYWxsYmFjayhmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gYW55IGFsaWFzXG4gICAgYXN5bmMuYW55ID0gYXN5bmMuc29tZTtcblxuICAgIGFzeW5jLmV2ZXJ5ID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIG1haW5fY2FsbGJhY2spIHtcbiAgICAgICAgYXN5bmMuZWFjaChhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXYpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbl9jYWxsYmFjayhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIG1haW5fY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBtYWluX2NhbGxiYWNrKHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8vIGFsbCBhbGlhc1xuICAgIGFzeW5jLmFsbCA9IGFzeW5jLmV2ZXJ5O1xuXG4gICAgYXN5bmMuc29ydEJ5ID0gZnVuY3Rpb24gKGFyciwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIGFzeW5jLm1hcChhcnIsIGZ1bmN0aW9uICh4LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgaXRlcmF0b3IoeCwgZnVuY3Rpb24gKGVyciwgY3JpdGVyaWEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7dmFsdWU6IHgsIGNyaXRlcmlhOiBjcml0ZXJpYX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgZm4gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhLCBiID0gcmlnaHQuY3JpdGVyaWE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIF9tYXAocmVzdWx0cy5zb3J0KGZuKSwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgudmFsdWU7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgYXN5bmMuYXV0byA9IGZ1bmN0aW9uICh0YXNrcywgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgdmFyIGtleXMgPSBfa2V5cyh0YXNrcyk7XG4gICAgICAgIGlmICgha2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHRzID0ge307XG5cbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgICAgICB2YXIgYWRkTGlzdGVuZXIgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy51bnNoaWZ0KGZuKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciB0YXNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfZWFjaChsaXN0ZW5lcnMuc2xpY2UoMCksIGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX2tleXMocmVzdWx0cykubGVuZ3RoID09PSBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge307XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF9lYWNoKGtleXMsIGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9ICh0YXNrc1trXSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSA/IFt0YXNrc1trXV06IHRhc2tzW2tdO1xuICAgICAgICAgICAgdmFyIHRhc2tDYWxsYmFjayA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNhZmVSZXN1bHRzID0ge307XG4gICAgICAgICAgICAgICAgICAgIF9lYWNoKF9rZXlzKHJlc3VsdHMpLCBmdW5jdGlvbihya2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlUmVzdWx0c1tya2V5XSA9IHJlc3VsdHNbcmtleV07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzYWZlUmVzdWx0c1trXSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgc2FmZVJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICAvLyBzdG9wIHN1YnNlcXVlbnQgZXJyb3JzIGhpdHRpbmcgY2FsbGJhY2sgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNba10gPSBhcmdzO1xuICAgICAgICAgICAgICAgICAgICBhc3luYy5uZXh0VGljayh0YXNrQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcmVxdWlyZXMgPSB0YXNrLnNsaWNlKDAsIE1hdGguYWJzKHRhc2subGVuZ3RoIC0gMSkpIHx8IFtdO1xuICAgICAgICAgICAgdmFyIHJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfcmVkdWNlKHJlcXVpcmVzLCBmdW5jdGlvbiAoYSwgeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEgJiYgcmVzdWx0cy5oYXNPd25Qcm9wZXJ0eSh4KSk7XG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSkgJiYgIXJlc3VsdHMuaGFzT3duUHJvcGVydHkoayk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHJlYWR5KCkpIHtcbiAgICAgICAgICAgICAgICB0YXNrW3Rhc2subGVuZ3RoIC0gMV0odGFza0NhbGxiYWNrLCByZXN1bHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlYWR5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tbdGFzay5sZW5ndGggLSAxXSh0YXNrQ2FsbGJhY2ssIHJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBhc3luYy53YXRlcmZhbGwgPSBmdW5jdGlvbiAodGFza3MsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG4gICAgICAgIGlmICghdGFza3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd3JhcEl0ZXJhdG9yID0gZnVuY3Rpb24gKGl0ZXJhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLnB1c2god3JhcEl0ZXJhdG9yKG5leHQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXN5bmMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHdyYXBJdGVyYXRvcihhc3luYy5pdGVyYXRvcih0YXNrcykpKCk7XG4gICAgfTtcblxuICAgIHZhciBfcGFyYWxsZWwgPSBmdW5jdGlvbihlYWNoZm4sIHRhc2tzLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICBpZiAodGFza3MuY29uc3RydWN0b3IgPT09IEFycmF5KSB7XG4gICAgICAgICAgICBlYWNoZm4ubWFwKHRhc2tzLCBmdW5jdGlvbiAoZm4sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIGVyciwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICAgICAgICBlYWNoZm4uZWFjaChfa2V5cyh0YXNrcyksIGZ1bmN0aW9uIChrLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRhc2tzW2tdKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1trXSA9IGFyZ3M7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyLCByZXN1bHRzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGFzeW5jLnBhcmFsbGVsID0gZnVuY3Rpb24gKHRhc2tzLCBjYWxsYmFjaykge1xuICAgICAgICBfcGFyYWxsZWwoeyBtYXA6IGFzeW5jLm1hcCwgZWFjaDogYXN5bmMuZWFjaCB9LCB0YXNrcywgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBhc3luYy5wYXJhbGxlbExpbWl0ID0gZnVuY3Rpb24odGFza3MsIGxpbWl0LCBjYWxsYmFjaykge1xuICAgICAgICBfcGFyYWxsZWwoeyBtYXA6IF9tYXBMaW1pdChsaW1pdCksIGVhY2g6IF9lYWNoTGltaXQobGltaXQpIH0sIHRhc2tzLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIGFzeW5jLnNlcmllcyA9IGZ1bmN0aW9uICh0YXNrcywgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgaWYgKHRhc2tzLmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgYXN5bmMubWFwU2VyaWVzKHRhc2tzLCBmdW5jdGlvbiAoZm4sIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgICAgIGZuKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncyA9IGFyZ3NbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIGVyciwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICAgICAgICBhc3luYy5lYWNoU2VyaWVzKF9rZXlzKHRhc2tzKSwgZnVuY3Rpb24gKGssIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGFza3Nba10oZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzID0gYXJnc1swXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzW2tdID0gYXJncztcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYXN5bmMuaXRlcmF0b3IgPSBmdW5jdGlvbiAodGFza3MpIHtcbiAgICAgICAgdmFyIG1ha2VDYWxsYmFjayA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh0YXNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza3NbaW5kZXhdLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmbi5uZXh0KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm4ubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGluZGV4IDwgdGFza3MubGVuZ3RoIC0gMSkgPyBtYWtlQ2FsbGJhY2soaW5kZXggKyAxKTogbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gZm47XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBtYWtlQ2FsbGJhY2soMCk7XG4gICAgfTtcblxuICAgIGFzeW5jLmFwcGx5ID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShcbiAgICAgICAgICAgICAgICBudWxsLCBhcmdzLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgdmFyIF9jb25jYXQgPSBmdW5jdGlvbiAoZWFjaGZuLCBhcnIsIGZuLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgciA9IFtdO1xuICAgICAgICBlYWNoZm4oYXJyLCBmdW5jdGlvbiAoeCwgY2IpIHtcbiAgICAgICAgICAgIGZuKHgsIGZ1bmN0aW9uIChlcnIsIHkpIHtcbiAgICAgICAgICAgICAgICByID0gci5jb25jYXQoeSB8fCBbXSk7XG4gICAgICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIsIHIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGFzeW5jLmNvbmNhdCA9IGRvUGFyYWxsZWwoX2NvbmNhdCk7XG4gICAgYXN5bmMuY29uY2F0U2VyaWVzID0gZG9TZXJpZXMoX2NvbmNhdCk7XG5cbiAgICBhc3luYy53aGlsc3QgPSBmdW5jdGlvbiAodGVzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0ZXN0KCkpIHtcbiAgICAgICAgICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgIGl0ZXJhdG9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3luYykge1xuICAgICAgICAgICAgICAgICAgICBhc3luYy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3luYy53aGlsc3QodGVzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhc3luYy53aGlsc3QodGVzdCwgaXRlcmF0b3IsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN5bmMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgYXN5bmMuZG9XaGlsc3QgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIHRlc3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICAgICAgaXRlcmF0b3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRlc3QoKSkge1xuICAgICAgICAgICAgICAgIGlmIChzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jLmRvV2hpbHN0KGl0ZXJhdG9yLCB0ZXN0LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMuZG9XaGlsc3QoaXRlcmF0b3IsIHRlc3QsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3luYyA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBhc3luYy51bnRpbCA9IGZ1bmN0aW9uICh0ZXN0LCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCF0ZXN0KCkpIHtcbiAgICAgICAgICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgIGl0ZXJhdG9yKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3luYykge1xuICAgICAgICAgICAgICAgICAgICBhc3luYy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3luYy51bnRpbCh0ZXN0LCBpdGVyYXRvciwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jLnVudGlsKHRlc3QsIGl0ZXJhdG9yLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzeW5jID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGFzeW5jLmRvVW50aWwgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIHRlc3QsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICAgICAgaXRlcmF0b3IoZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0ZXN0KCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3luYykge1xuICAgICAgICAgICAgICAgICAgICBhc3luYy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3luYy5kb1VudGlsKGl0ZXJhdG9yLCB0ZXN0LCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmMuZG9VbnRpbChpdGVyYXRvciwgdGVzdCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzeW5jID0gZmFsc2U7XG4gICAgfTtcblxuICAgIGFzeW5jLnF1ZXVlID0gZnVuY3Rpb24gKHdvcmtlciwgY29uY3VycmVuY3kpIHtcbiAgICAgICAgaWYgKGNvbmN1cnJlbmN5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbmN1cnJlbmN5ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBfaW5zZXJ0KHEsIGRhdGEsIHBvcywgY2FsbGJhY2spIHtcbiAgICAgICAgICBpZihkYXRhLmNvbnN0cnVjdG9yICE9PSBBcnJheSkge1xuICAgICAgICAgICAgICBkYXRhID0gW2RhdGFdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfZWFjaChkYXRhLCBmdW5jdGlvbih0YXNrKSB7XG4gICAgICAgICAgICAgIHZhciBpdGVtID0ge1xuICAgICAgICAgICAgICAgICAgZGF0YTogdGFzayxcbiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBjYWxsYmFjayA6IG51bGxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBpZiAocG9zKSB7XG4gICAgICAgICAgICAgICAgcS50YXNrcy51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHEudGFza3MucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChxLnNhdHVyYXRlZCAmJiBxLnRhc2tzLmxlbmd0aCA9PT0gY29uY3VycmVuY3kpIHtcbiAgICAgICAgICAgICAgICAgIHEuc2F0dXJhdGVkKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYXN5bmMubmV4dFRpY2socS5wcm9jZXNzKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3b3JrZXJzID0gMDtcbiAgICAgICAgdmFyIHEgPSB7XG4gICAgICAgICAgICB0YXNrczogW10sXG4gICAgICAgICAgICBjb25jdXJyZW5jeTogY29uY3VycmVuY3ksXG4gICAgICAgICAgICBzYXR1cmF0ZWQ6IG51bGwsXG4gICAgICAgICAgICBlbXB0eTogbnVsbCxcbiAgICAgICAgICAgIGRyYWluOiBudWxsLFxuICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIF9pbnNlcnQocSwgZGF0YSwgZmFsc2UsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1bnNoaWZ0OiBmdW5jdGlvbiAoZGF0YSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgX2luc2VydChxLCBkYXRhLCB0cnVlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvY2VzczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmICh3b3JrZXJzIDwgcS5jb25jdXJyZW5jeSAmJiBxLnRhc2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFzayA9IHEudGFza3Muc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHEuZW1wdHkgJiYgcS50YXNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHEuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB3b3JrZXJzICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3b3JrZXJzIC09IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFzay5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suY2FsbGJhY2suYXBwbHkodGFzaywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmRyYWluICYmIHEudGFza3MubGVuZ3RoICsgd29ya2VycyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEuZHJhaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHEucHJvY2VzcygpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2IgPSBvbmx5X29uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNiQXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN5bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQuYXBwbHkobnVsbCwgY2JBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyKHRhc2suZGF0YSwgY2IpO1xuICAgICAgICAgICAgICAgICAgICBzeW5jID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBxLnRhc2tzLmxlbmd0aDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBydW5uaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBxO1xuICAgIH07XG5cbiAgICBhc3luYy5jYXJnbyA9IGZ1bmN0aW9uICh3b3JrZXIsIHBheWxvYWQpIHtcbiAgICAgICAgdmFyIHdvcmtpbmcgICAgID0gZmFsc2UsXG4gICAgICAgICAgICB0YXNrcyAgICAgICA9IFtdO1xuXG4gICAgICAgIHZhciBjYXJnbyA9IHtcbiAgICAgICAgICAgIHRhc2tzOiB0YXNrcyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgICAgICAgICBzYXR1cmF0ZWQ6IG51bGwsXG4gICAgICAgICAgICBlbXB0eTogbnVsbCxcbiAgICAgICAgICAgIGRyYWluOiBudWxsLFxuICAgICAgICAgICAgcHVzaDogZnVuY3Rpb24gKGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYoZGF0YS5jb25zdHJ1Y3RvciAhPT0gQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IFtkYXRhXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX2VhY2goZGF0YSwgZnVuY3Rpb24odGFzaykge1xuICAgICAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHRhc2ssXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nID8gY2FsbGJhY2sgOiBudWxsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FyZ28uc2F0dXJhdGVkICYmIHRhc2tzLmxlbmd0aCA9PT0gcGF5bG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZ28uc2F0dXJhdGVkKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhc3luYy5uZXh0VGljayhjYXJnby5wcm9jZXNzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcm9jZXNzOiBmdW5jdGlvbiBwcm9jZXNzKCkge1xuICAgICAgICAgICAgICAgIGlmICh3b3JraW5nKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKHRhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZihjYXJnby5kcmFpbikgY2FyZ28uZHJhaW4oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0cyA9IHR5cGVvZiBwYXlsb2FkID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGFza3Muc3BsaWNlKDAsIHBheWxvYWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0YXNrcy5zcGxpY2UoMCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgZHMgPSBfbWFwKHRzLCBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFzay5kYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYoY2FyZ28uZW1wdHkpIGNhcmdvLmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgd29ya2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgd29ya2VyKGRzLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgICAgICAgICAgX2VhY2godHMsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY2FsbGJhY2suYXBwbHkobnVsbCwgYXJncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZW5ndGg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFza3MubGVuZ3RoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJ1bm5pbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd29ya2luZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGNhcmdvO1xuICAgIH07XG5cbiAgICB2YXIgX2NvbnNvbGVfZm4gPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzLmNvbmNhdChbZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNvbnNvbGVbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lYWNoKGFyZ3MsIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZVtuYW1lXSh4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfV0pKTtcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIGFzeW5jLmxvZyA9IF9jb25zb2xlX2ZuKCdsb2cnKTtcbiAgICBhc3luYy5kaXIgPSBfY29uc29sZV9mbignZGlyJyk7XG4gICAgLyphc3luYy5pbmZvID0gX2NvbnNvbGVfZm4oJ2luZm8nKTtcbiAgICBhc3luYy53YXJuID0gX2NvbnNvbGVfZm4oJ3dhcm4nKTtcbiAgICBhc3luYy5lcnJvciA9IF9jb25zb2xlX2ZuKCdlcnJvcicpOyovXG5cbiAgICBhc3luYy5tZW1vaXplID0gZnVuY3Rpb24gKGZuLCBoYXNoZXIpIHtcbiAgICAgICAgdmFyIG1lbW8gPSB7fTtcbiAgICAgICAgdmFyIHF1ZXVlcyA9IHt9O1xuICAgICAgICBoYXNoZXIgPSBoYXNoZXIgfHwgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9O1xuICAgICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzLnBvcCgpO1xuICAgICAgICAgICAgdmFyIGtleSA9IGhhc2hlci5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgICAgICAgIGlmIChrZXkgaW4gbWVtbykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIG1lbW9ba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgaW4gcXVldWVzKSB7XG4gICAgICAgICAgICAgICAgcXVldWVzW2tleV0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBxdWV1ZXNba2V5XSA9IFtjYWxsYmFja107XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkobnVsbCwgYXJncy5jb25jYXQoW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVtb1trZXldID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcSA9IHF1ZXVlc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcXVldWVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBxW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtZW1vaXplZC5tZW1vID0gbWVtbztcbiAgICAgICAgbWVtb2l6ZWQudW5tZW1vaXplZCA9IGZuO1xuICAgICAgICByZXR1cm4gbWVtb2l6ZWQ7XG4gICAgfTtcblxuICAgIGFzeW5jLnVubWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChmbi51bm1lbW9pemVkIHx8IGZuKS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9O1xuXG4gICAgYXN5bmMudGltZXMgPSBmdW5jdGlvbiAoY291bnQsIGl0ZXJhdG9yLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgY291bnRlciA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvdW50ZXIucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXN5bmMubWFwKGNvdW50ZXIsIGl0ZXJhdG9yLCBjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIGFzeW5jLnRpbWVzU2VyaWVzID0gZnVuY3Rpb24gKGNvdW50LCBpdGVyYXRvciwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb3VudGVyLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFzeW5jLm1hcFNlcmllcyhjb3VudGVyLCBpdGVyYXRvciwgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBhc3luYy5jb21wb3NlID0gZnVuY3Rpb24gKC8qIGZ1bmN0aW9ucy4uLiAqLykge1xuICAgICAgICB2YXIgZm5zID0gQXJyYXkucHJvdG90eXBlLnJldmVyc2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJncy5wb3AoKTtcbiAgICAgICAgICAgIGFzeW5jLnJlZHVjZShmbnMsIGFyZ3MsIGZ1bmN0aW9uIChuZXdhcmdzLCBmbiwgY2IpIHtcbiAgICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBuZXdhcmdzLmNvbmNhdChbZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgICAgICAgICBjYihlcnIsIG5leHRhcmdzKTtcbiAgICAgICAgICAgICAgICB9XSkpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoYXQsIFtlcnJdLmNvbmNhdChyZXN1bHRzKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgYXN5bmMuYXBwbHlFYWNoID0gZnVuY3Rpb24gKGZucyAvKmFyZ3MuLi4qLykge1xuICAgICAgICB2YXIgZ28gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmdzLnBvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGFzeW5jLmVhY2goZm5zLCBmdW5jdGlvbiAoZm4sIGNiKSB7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncy5jb25jYXQoW2NiXSkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgICAgICByZXR1cm4gZ28uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ287XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQU1EIC8gUmVxdWlyZUpTXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgIT09ICd1bmRlZmluZWQnICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFtdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gYXN5bmM7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBOb2RlLmpzXG4gICAgZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBhc3luYztcbiAgICB9XG4gICAgLy8gaW5jbHVkZWQgZGlyZWN0bHkgdmlhIDxzY3JpcHQ+IHRhZ1xuICAgIGVsc2Uge1xuICAgICAgICByb290LmFzeW5jID0gYXN5bmM7XG4gICAgfVxuXG59KCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJldmVudHNcIik7IiwiY29uc3QgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyk7XG5jb25zdCBlcnJvcnMgPSByZXF1aXJlKCcuLi9lcnJvcnMuanMnKTtcbmNvbnN0IGRpY3Rpb25hcnkgPSByZXF1aXJlKCcuL2RpY3Rpb25hcnkuanMnKTtcblxuICAgIC8vIFZlcnNpb25zXG5jb25zdCBWMSA9ICd2MSc7XG5jb25zdCBWMiA9ICd2Mic7XG5cblxuZnVuY3Rpb24gdHJhbnNmb3JtVG9Xb3Jkc0FwaUxpa2UoZGVmaW5pdGlvbnMpIHtcblxuICAgIGxldCByZXN1bHQgPSB7XG4gICAgICAgIHdvcmQ6XCJcIixcbiAgICAgICAgcmVzdWx0czpbXSxcbiAgICAgICAgcHJvbnVuY2lhdGlvbiA6IHt9LFxuICAgIH07XG4gICAgbGV0IGFudGlwcm9uID0ge307XG4gICAgbGV0IGlkeD0xO1xuICAgIGxldCBwaWQgPSAnYScuY2hhckNvZGVBdCgwKTtcbiAgICBmb3IgKGxldCBkYXRhIG9mIGRlZmluaXRpb25zKSB7XG4gICAgICAgIGxldCB3b3JkID0gZGF0YS53b3JkO1xuICAgICAgICBpZiAoIXJlc3VsdC53b3JkKSByZXN1bHQud29yZCA9IHdvcmQ7XG5cbiAgICAgICAgZm9yIChsZXQgbWVhbmluZyBvZiBkYXRhLm1lYW5pbmdzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBtZWFuaW5nZGVmIG9mIG1lYW5pbmcuZGVmaW5pdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5waG9uZXRpYyAmJiAhYW50aXByb25bZGF0YS5waG9uZXRpY10pIHtcbiAgICAgICAgICAgICAgICAgICAgYW50aXByb25bZGF0YS5waG9uZXRpY10gPSBbU3RyaW5nLmZyb21DaGFyQ29kZShwaWQrKyldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbnRpcHJvbltkYXRhLnBob25ldGljXS5wdXNoKGlkeCk7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRPZlNwZWVjaCA6IG1lYW5pbmcucGFydE9mU3BlZWNoLFxuICAgICAgICAgICAgICAgICAgICBwcm9udW5jaWF0aW9uIDogZGF0YS5waG9uZXRpYyxcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbjogIG1lYW5pbmdkZWYuZGVmaW5pdGlvbixcbiAgICAgICAgICAgICAgICAgICAgZXhhbXBsZXM6IG1lYW5pbmdkZWYuZXhhbXBsZXM/bWVhbmluZ2RlZi5leGFtcGxlczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWVhbmluZ2RlZi5leGFtcGxlP1ttZWFuaW5nZGVmLmV4YW1wbGVdOnVuZGVmaW5lZCksXG4gICAgICAgICAgICAgICAgICAgIHN5bm9ueW1zOiBtZWFuaW5nZGVmLnN5bm9ueW1zJiZtZWFuaW5nZGVmLnN5bm9ueW1zLmxlbmd0aD9tZWFuaW5nZGVmLnN5bm9ueW1zOnVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgYW50b255bXM6IG1lYW5pbmdkZWYuYW50b255bXMmJm1lYW5pbmdkZWYuYW50b255bXMubGVuZ3RoP21lYW5pbmdkZWYuYW50b255bXM6dW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICB3b3JkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXN1bHQucmVzdWx0cy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBhcHMgPSBbXTtcbiAgICBmb3IgKGxldCBhIGluIGFudGlwcm9uKSB7XG4gICAgICAgIGxldCBwID0gYW50aXByb25bYV07XG4gICAgICAgIGFwcy5wdXNoKHthLHB9KTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBwYWlyIG9mIGFwcykge1xuICAgICAgICByZXN1bHQucHJvbnVuY2lhdGlvbltwYWlyLnAuam9pbihcIixcIildID0gcGFpci5hO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ29vZ2xlRGljdGlvbmFyeSh3b3JkLCBsYW5ndWFnZT1cImVuXCIsIHZlcnNpb249XCJ2MlwiLCBpbmNsdWRlPVwiXCIpIHtcblxuICAgIGlmICghd29yZCB8fCAhbGFuZ3VhZ2UgfHwgIXZlcnNpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob0RlZmluaXRpb25zRm91bmQoKTsgXG4gICAgfVxuXG4gICAgLy8gQHRvZG86IEZpbmQgYmV0dGVyIGVycm9yLlxuICAgIGlmICghdXRpbHMuaXNWZXJzaW9uU3VwcG9ydGVkKHZlcnNpb24pKSB7IHJldHVybiBoYW5kbGVFcnJvci5jYWxsKHJlcywgbmV3IGVycm9ycy5Ob0RlZmluaXRpb25zRm91bmQoKSk7IH1cblxuICAgIC8vIFRvZG86IEZpZ3VyZSBvdXQgYmV0dGVyIHN0cmF0ZWd5LlxuICAgIGlmIChsYW5ndWFnZSA9PT0gJ2VuX1VTJyB8fCBsYW5ndWFnZSA9PT0gJ2VuX0dCJykgeyBsYW5ndWFnZSA9ICdlbic7IH1cblxuICAgIC8vIEJ5IGRlZmF1bHQgd2UgYXJlIGFzc3VtaW5nIHBlcnNvbiBtZWFucyBBbWVyaWNhbiBFbmdsaXNoXG4gICAgLy8gVGhpcyBpcyBuZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgLy8gQHRvZG86IEZpbmQgYmV0dGVyIGVycm9yLlxuICAgIGlmICghdXRpbHMuaXNMYW5ndWFnZVN1cHBvcnRlZChsYW5ndWFnZSkpIHsgcmV0dXJuIGhhbmRsZUVycm9yLmNhbGwocmVzLCBuZXcgZXJyb3JzLk5vRGVmaW5pdGlvbnNGb3VuZCgpKTsgfVxuXG4gICAgd29yZCA9IHdvcmQudHJpbSgpLnRvTG9jYWxlTG93ZXJDYXNlKGxhbmd1YWdlKTtcblxuICAgIGxldCBkZWZpbml0aW9ucyA9IGF3YWl0IGRpY3Rpb25hcnkuZmluZERlZmluaXRpb25zKHdvcmQsIGxhbmd1YWdlLCB7IGluY2x1ZGUgfSkgO1xuXG4gICAgLy9pZiAodmVyc2lvbiA9PT0gVjEpIHtcbiAgICAvLyAgICBkZWZpbml0aW9ucyA9IGRpY3Rpb25hcnkudHJhbnNmb3JtVjJ0b1YxKGRlZmluaXRpb25zKTtcbiAgICAvL31cbiAgICBkZWZpbml0aW9ucyA9IHRyYW5zZm9ybVRvV29yZHNBcGlMaWtlKGRlZmluaXRpb25zKTtcblxuICAgIHJldHVybiBkZWZpbml0aW9ucztcbn07XG5cblxuLy9tb2R1bGUuZXhwb3J0cyA9IHtcbi8vICAgIGdvb2dsZURpY3Rpb25hcnlcbi8vfSA7IiwiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpLFxuXHRfID0gcmVxdWlyZSgnbG9kYXNoJyksXG5cblx0dXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzLmpzJyksXG5cdGVycm9ycyA9IHJlcXVpcmUoJy4uL2Vycm9ycy5qcycpLFxuXHRmZXRjaCA9IHJlcXVpcmUoJy4uL2ZldGNoLmpzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1WMnRvVjEgKGRhdGEpIHtcblx0cmV0dXJuIGRhdGEubWFwKChlbnRyeSkgPT4ge1xuICAgIFx0bGV0IHtcbiAgICBcdFx0bWVhbmluZ3MsXG4gICAgXHRcdC4uLm90aGVyUHJvcHNcbiAgICBcdH0gPSBlbnRyeTtcbiAgICBcbiAgICBcdG1lYW5pbmdzID0gbWVhbmluZ3MucmVkdWNlKChtZWFuaW5ncywgbWVhbmluZykgPT4ge1xuICAgIFx0XHRsZXQgcGFydE9mU3BlZWNoLCBkZWZpbml0aW9ucztcbiAgICBcbiAgICBcdFx0KHtcbiAgICBcdFx0XHRwYXJ0T2ZTcGVlY2gsXG4gICAgXHRcdFx0ZGVmaW5pdGlvbnNcbiAgICBcdFx0fSA9IG1lYW5pbmcpO1xuICAgIFx0XHRtZWFuaW5nc1twYXJ0T2ZTcGVlY2hdID0gZGVmaW5pdGlvbnM7XG4gICAgXG4gICAgXHRcdHJldHVybiBtZWFuaW5ncztcbiAgICBcdH0sIHt9KTtcbiAgICBcbiAgICBcdHJldHVybiB7XG4gICAgXHRcdC4uLm90aGVyUHJvcHMsXG4gICAgXHRcdG1lYW5pbmc6IG1lYW5pbmdzXG4gICAgXHR9O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0gKHdvcmQsIGxhbmd1YWdlLCBkYXRhLCB7IGluY2x1ZGUgfSkge1xuXHRyZXR1cm4gZGF0YVxuXHQgICAgICAgIC5tYXAoZSA9PiBlLmVudHJ5KVxuXHQgICAgICAgIC5maWx0ZXIoZSA9PiBlKVxuXHRcdFx0LnJlZHVjZSgoYWNjdW11bGF0b3IsIGVudHJ5KSA9PiB7XG5cdFx0XHRcdGlmICghZW50cnkuc3ViZW50cmllcykgeyByZXR1cm4gYWNjdW11bGF0b3IucHVzaChlbnRyeSkgJiYgYWNjdW11bGF0b3I7IH1cblxuXHRcdFx0XHRsZXQgeyBzdWJlbnRyaWVzIH0gPSBlbnRyeSxcblx0XHRcdFx0XHRtYXBwZWRTdWJlbnRyaWVzO1xuXG5cdFx0XHRcdGlmIChzdWJlbnRyaWVzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHR1dGlscy5sb2dFdmVudCh3b3JkLCBsYW5ndWFnZSwgJ3N1YmVudHJpZXMgbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiAxJywgeyBkYXRhIH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGVudHJ5LnNlbnNlX2ZhbWlsaWVzKSB7XG5cdFx0XHRcdFx0dXRpbHMubG9nRXZlbnQod29yZCwgbGFuZ3VhZ2UsICdlbnRyeSBoYXMgc3ViZW50cmllcyBhbmQgc2Vuc2UgZmFtaWxpZXMnLCB7IGRhdGEgfSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZW50cnkuZXR5bW9sb2d5KSB7XG5cdFx0XHRcdFx0dXRpbHMubG9nRXZlbnQod29yZCwgbGFuZ3VhZ2UsICdlbnRyeSBoYXMgc3ViZW50cmllcyBhbmQgZXR5bW9sb2d5JywgeyBkYXRhIH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bWFwcGVkU3ViZW50cmllcyA9IHN1YmVudHJpZXNcblx0XHRcdFx0XHRcdC5tYXAoKHN1YmVudHJ5KSA9PiB7XG5cdFx0XHRcdFx0XHRcdGlmIChzdWJlbnRyeS5zZW5zZV9mYW1pbGllcykge1xuXHRcdFx0XHRcdFx0XHRcdHV0aWxzLmxvZ0V2ZW50KHdvcmQsIGxhbmd1YWdlLCAnc3ViZW50cnkgaGFzIHNlbnNlIGZhbWlsaWVzJywgeyBkYXRhIH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKHN1YmVudHJ5LnNlbnNlX2ZhbWlseSkge1xuXHRcdFx0XHRcdFx0XHRcdHN1YmVudHJ5LnNlbnNlX2ZhbWlsaWVzID0gW107XG5cdFx0XHRcdFx0XHRcdFx0c3ViZW50cnkuc2Vuc2VfZmFtaWxpZXMucHVzaChzdWJlbnRyeS5zZW5zZV9mYW1pbHkpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIF8uZGVmYXVsdHMoc3ViZW50cnksIF8ucGljayhlbnRyeSwgWydwaG9uZXRpY3MnLCAnZXR5bW9sb2d5J10pKVxuXHRcdFx0XHRcdFx0fSlcblxuXHRcdFx0XHRyZXR1cm4gYWNjdW11bGF0b3IuY29uY2F0KG1hcHBlZFN1YmVudHJpZXMpO1xuXHRcdFx0fSwgW10pXG5cdFx0XHQubWFwKChlbnRyeSkgPT4ge1xuXHRcdFx0XHRsZXQgeyBoZWFkd29yZCwgbGVtbWEsIHBob25ldGljcyA9IFtdLCBldHltb2xvZ3kgPSB7fSwgc2Vuc2VfZmFtaWxpZXMgPSBbXSB9ID0gZW50cnk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHdvcmQ6IGxlbW1hIHx8IGhlYWR3b3JkLFxuXHRcdFx0XHRcdHBob25ldGljOiBfLmdldChwaG9uZXRpY3MsICcwLnRleHQnKSxcblx0XHRcdFx0XHRwaG9uZXRpY3M6IHBob25ldGljcy5tYXAoKGUpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHRleHQ6IGUudGV4dCxcblx0XHRcdFx0XHRcdFx0YXVkaW86IGUub3hmb3JkX2F1ZGlvXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0pLFxuXHRcdFx0XHRcdG9yaWdpbjogXy5nZXQoZXR5bW9sb2d5LCAnZXR5bW9sb2d5LnRleHQnKSxcblx0XHRcdFx0XHRtZWFuaW5nczogc2Vuc2VfZmFtaWxpZXMubWFwKChzZW5zZV9mYW1pbHkpID0+IHtcblx0XHRcdFx0XHRcdGxldCB7IHBhcnRzX29mX3NwZWVjaCwgc2Vuc2VzID0gW119ID0gc2Vuc2VfZmFtaWx5O1xuXG5cdFx0XHRcdFx0XHQvLyBpZiBwYXJ0cyBvZiBzcGVlY2ggaXMgZW1wdHkgYXQgdGhpcyBsZXZlbC5cblx0XHRcdFx0XHRcdC8vIEN1cnJlbnQgaHlwb3RoZXNpcyB0ZWxscyB0aGF0IGl0IG1lYW5zIG9ubHkgb25lIHNlbnNlIGlzIHByZXNlbnRcblx0XHRcdFx0XHRcdC8vIFdlIG5lZWQgdG8gdGFrZSBvdXQgcGFydHNfb2Zfc3BlZWNoIGZyb20gaXQgYW5kIHVzZSBpdC5cblx0XHRcdFx0XHRcdGlmICghcGFydHNfb2Zfc3BlZWNoKSB7XG5cdFx0XHRcdFx0XHRcdHBhcnRzX29mX3NwZWVjaCA9IF8uZ2V0KHNlbnNlc1swXSwgJ3BhcnRzX29mX3NwZWVjaCcsIFtdKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoc2Vuc2VzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0XHR1dGlscy5sb2dFdmVudCh3b3JkLCBsYW5ndWFnZSwgJ3BhcnQgb2Ygc3BlZWNoIG1pc3NpbmcgYnV0IG1vcmUgdGhhbiBvbmUgc2Vuc2UgcHJlc2VudCcsIHsgZGF0YSB9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiAocGFydHNfb2Zfc3BlZWNoLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0dXRpbHMubG9nRXZlbnQod29yZCwgbGFuZ3VhZ2UsICdtb3JlIHRoYW4gb25lIHBhcnQgb2Ygc3BlZWNoIHByZXNlbnQnLCB7IGRhdGEgfSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHBhcnRPZlNwZWVjaDogXy5nZXQocGFydHNfb2Zfc3BlZWNoWzBdLCAndmFsdWUnKSxcblx0XHRcdFx0XHRcdFx0ZGVmaW5pdGlvbnM6IHNlbnNlcy5tYXAoKHNlbnNlKSA9PiB7XHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0XHRsZXQgeyBkZWZpbml0aW9uID0ge30sIGV4YW1wbGVfZ3JvdXBzID0gW10sIHRoZXNhdXJ1c19lbnRyaWVzID0gW10gfSA9IHNlbnNlLFxuXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0ID0ge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZpbml0aW9uOiBkZWZpbml0aW9uLnRleHQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGV4YW1wbGU6IF8uZ2V0KGV4YW1wbGVfZ3JvdXBzWzBdLCAnZXhhbXBsZXMuMCcpLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRzeW5vbnltczogXy5nZXQodGhlc2F1cnVzX2VudHJpZXNbMF0sICdzeW5vbnltcy4wLm55bXMnLCBbXSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQubWFwKGUgPT4gZS5ueW0pLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhbnRvbnltczogXy5nZXQodGhlc2F1cnVzX2VudHJpZXNbMF0sICdhbnRvbnltcy4wLm55bXMnLCBbXSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQubWFwKGUgPT4gZS5ueW0pXG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKGluY2x1ZGUuZXhhbXBsZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LmV4YW1wbGVzID0gIF8ucmVkdWNlKGV4YW1wbGVfZ3JvdXBzLCAoYWNjdW11bGF0b3IsIGV4YW1wbGVfZ3JvdXApID0+IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0bGV0IGV4YW1wbGUgPSBfLmdldChleGFtcGxlX2dyb3VwLCAnZXhhbXBsZXMnLCBbXSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0YWNjdW11bGF0b3IgPSBhY2N1bXVsYXRvci5jb25jYXQoZXhhbXBsZSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGFjY3VtdWxhdG9yO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSwgW10pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcXVlcnlJbnRlcm5ldCAod29yZCwgbGFuZ3VhZ2UpIHtcblx0bGV0IHVybCA9IG5ldyBVUkwoJ2h0dHBzOi8vd3d3Lmdvb2dsZS5jb20vYXN5bmMvY2FsbGJhY2s6NTQ5MycpO1xuXG5cdHVybC5zZWFyY2hQYXJhbXMuc2V0KCdmYycsICdFclVCQ25kQlRsVmZUbkZVTjI5TGRYZE5TbFEyVmxab1dVSXdXRTFIYUVsT2NsRk5VMjlUT0ZGNFpHeEdiVjl6YnpBM1ltUTJObkp5UVhsSE5WbHJiM2wzT1hndFJFcFJiWHBOWjBNMU5XWlBlRm80TmpReVZsQTNTMlpRT0hwWWEyOTJNRkJNYURRd2VHUk5RalI0ZVRsbGQxRTRiRGxDYlhGSk1CSVdVMkp6U2xsa0xWcEhjM0o1T1ZGUGIzUTJhVmxEWnhvaVFVOU5XVkozUW1VMmNIUmxialpFWm13NVUwbFhUMWxPUjNoc00yeEJXR0ZsZHcnKTtcblx0dXJsLnNlYXJjaFBhcmFtcy5zZXQoJ2ZjdicsICczJyk7XG5cdHVybC5zZWFyY2hQYXJhbXMuc2V0KCdhc3luYycsIGB0ZXJtOiR7ZW5jb2RlVVJJQ29tcG9uZW50KHdvcmQpfSxjb3JwdXM6JHtsYW5ndWFnZX0saGhkcjp0cnVlLGh3ZGd0OnRydWUsd2ZwOnRydWUsdHRsOix0c2w6LHB0bDpgKTtcblxuXHR1cmwgPSB1cmwudG9TdHJpbmcoKTtcblxuXHRsZXQgaW5mbyA9IFx0XHR7IHdvcmQsIGxhbmd1YWdlIH07XG5cblx0bGV0IGRhdGEgPSBhd2FpdCBmZXRjaC5mZXRjaEpzb24odXJsLCBcblx0XHR7XG5cdFx0XHRcImFjY2VwdFwiOiBcIiovKlwiLFxuXHRcdFx0XCJhY2NlcHQtZW5jb2RpbmdcIjogXCJnemlwLCBkZWZsYXRlLCBiclwiLFxuXHRcdFx0XCJhY2NlcHQtbGFuZ3VhZ2VcIjogXCJlbi1VUyxlbjtxPTAuOVwiLFxuXHRcdFx0XCJ1c2VyLWFnZW50XCI6IFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkyLjAuNDUxNS4xMDcgU2FmYXJpLzUzNy4zNlwiXG5cdFx0fSxcblx0XHRpbmZvXG5cdCk7XG5cblx0bGV0IHNpbmdsZV9yZXN1bHRzID0gXy5nZXQoZGF0YSwgJ2ZlYXR1cmUtY2FsbGJhY2sucGF5bG9hZC5zaW5nbGVfcmVzdWx0cycsIFtdKSxcblx0XHRcdGVycm9yID0gXy5jaGFpbihzaW5nbGVfcmVzdWx0cylcblx0XHRcdFx0XHQuZmluZCgnd2lkZ2V0Jylcblx0XHRcdFx0XHQuZ2V0KCd3aWRnZXQuZXJyb3InKVxuXHRcdFx0XHRcdC52YWx1ZSgpXG5cblx0aWYgKHNpbmdsZV9yZXN1bHRzLmxlbmd0aCA9PT0gMCkgeyB0aHJvdyBuZXcgZXJyb3JzLk5vRGVmaW5pdGlvbnNGb3VuZChpbmZvKTsgfVxuXG5cdGlmIChlcnJvciA9PT0gJ1RFUk1fTk9UX0ZPVU5EX0VSUk9SJykgeyB0aHJvdyBuZXcgZXJyb3JzLk5vRGVmaW5pdGlvbnNGb3VuZChpbmZvKTsgfVxuXG5cdGlmIChlcnJvcikgeyB0aHJvdyBuZXcgZXJyb3JzLlVuZXhwZWN0ZWRFcnJvcih7IGVycm9yIH0pOyB9XG5cblx0cmV0dXJuIHNpbmdsZV9yZXN1bHRzO1xufVxuXG5hc3luYyBmdW5jdGlvbiBmZXRjaEZyb21Tb3VyY2UgKHdvcmQsIGxhbmd1YWdlKSB7XG5cdGxldCBkaWN0aW9uYXJ5RGF0YSA9IGF3YWl0IHF1ZXJ5SW50ZXJuZXQod29yZCwgbGFuZ3VhZ2UpO1xuXG5cdHJldHVybiBkaWN0aW9uYXJ5RGF0YTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmREZWZpbml0aW9ucyAod29yZCwgbGFuZ3VhZ2UsIHsgaW5jbHVkZSB9KSB7XG5cdGxldCBkaWN0aW9uYXJ5RGF0YSA9IGF3YWl0IGZldGNoRnJvbVNvdXJjZSh3b3JkLCBsYW5ndWFnZSk7XG5cblx0aWYgKF8uaXNFbXB0eShkaWN0aW9uYXJ5RGF0YSkpIHsgdGhyb3cgbmV3IGVycm9ycy5VbmV4cGVjdGVkRXJyb3IoKTsgfVxuXG5cdHJldHVybiB0cmFuc2Zvcm0od29yZCwgbGFuZ3VhZ2UsIGRpY3Rpb25hcnlEYXRhLCB7IGluY2x1ZGUgfSk7XG59XG5cbi8vbW9kdWxlLmV4cG9ydHMgPSB7XG4vL1x0ZmluZERlZmluaXRpb25zLFxuLy9cdHRyYW5zZm9ybVYydG9WMVxuLy99O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4yMSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nLFxuICAgICAgSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCA9ICdJbnZhbGlkIGB2YXJpYWJsZWAgb3B0aW9uIHBhc3NlZCBpbnRvIGBfLnRlbXBsYXRlYCc7XG5cbiAgLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xuICB2YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xuICB2YXIgTUFYX01FTU9JWkVfU0laRSA9IDUwMDtcblxuICAvKiogVXNlZCBhcyB0aGUgaW50ZXJuYWwgYXJndW1lbnQgcGxhY2Vob2xkZXIuICovXG4gIHZhciBQTEFDRUhPTERFUiA9ICdfX2xvZGFzaF9wbGFjZWhvbGRlcl9fJztcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xuICB2YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICAgIENMT05FX0ZMQVRfRkxBRyA9IDIsXG4gICAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xuICB2YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gIHZhciBXUkFQX0JJTkRfRkxBRyA9IDEsXG4gICAgICBXUkFQX0JJTkRfS0VZX0ZMQUcgPSAyLFxuICAgICAgV1JBUF9DVVJSWV9CT1VORF9GTEFHID0gNCxcbiAgICAgIFdSQVBfQ1VSUllfRkxBRyA9IDgsXG4gICAgICBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcgPSAxNixcbiAgICAgIFdSQVBfUEFSVElBTF9GTEFHID0gMzIsXG4gICAgICBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA9IDY0LFxuICAgICAgV1JBUF9BUllfRkxBRyA9IDEyOCxcbiAgICAgIFdSQVBfUkVBUkdfRkxBRyA9IDI1NixcbiAgICAgIFdSQVBfRkxJUF9GTEFHID0gNTEyO1xuXG4gIC8qKiBVc2VkIGFzIGRlZmF1bHQgb3B0aW9ucyBmb3IgYF8udHJ1bmNhdGVgLiAqL1xuICB2YXIgREVGQVVMVF9UUlVOQ19MRU5HVEggPSAzMCxcbiAgICAgIERFRkFVTFRfVFJVTkNfT01JU1NJT04gPSAnLi4uJztcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG90IGZ1bmN0aW9ucyBieSBudW1iZXIgb2YgY2FsbHMgd2l0aGluIGEgc3BhbiBvZiBtaWxsaXNlY29uZHMuICovXG4gIHZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgICBIT1RfU1BBTiA9IDE2O1xuXG4gIC8qKiBVc2VkIHRvIGluZGljYXRlIHRoZSB0eXBlIG9mIGxhenkgaXRlcmF0ZWVzLiAqL1xuICB2YXIgTEFaWV9GSUxURVJfRkxBRyA9IDEsXG4gICAgICBMQVpZX01BUF9GTEFHID0gMixcbiAgICAgIExBWllfV0hJTEVfRkxBRyA9IDM7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG4gIHZhciBJTkZJTklUWSA9IDEgLyAwLFxuICAgICAgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTEsXG4gICAgICBNQVhfSU5URUdFUiA9IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4LFxuICAgICAgTkFOID0gMCAvIDA7XG5cbiAgLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdGhlIG1heGltdW0gbGVuZ3RoIGFuZCBpbmRleCBvZiBhbiBhcnJheS4gKi9cbiAgdmFyIE1BWF9BUlJBWV9MRU5HVEggPSA0Mjk0OTY3Mjk1LFxuICAgICAgTUFYX0FSUkFZX0lOREVYID0gTUFYX0FSUkFZX0xFTkdUSCAtIDEsXG4gICAgICBIQUxGX01BWF9BUlJBWV9MRU5HVEggPSBNQVhfQVJSQVlfTEVOR1RIID4+PiAxO1xuXG4gIC8qKiBVc2VkIHRvIGFzc29jaWF0ZSB3cmFwIG1ldGhvZHMgd2l0aCB0aGVpciBiaXQgZmxhZ3MuICovXG4gIHZhciB3cmFwRmxhZ3MgPSBbXG4gICAgWydhcnknLCBXUkFQX0FSWV9GTEFHXSxcbiAgICBbJ2JpbmQnLCBXUkFQX0JJTkRfRkxBR10sXG4gICAgWydiaW5kS2V5JywgV1JBUF9CSU5EX0tFWV9GTEFHXSxcbiAgICBbJ2N1cnJ5JywgV1JBUF9DVVJSWV9GTEFHXSxcbiAgICBbJ2N1cnJ5UmlnaHQnLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUddLFxuICAgIFsnZmxpcCcsIFdSQVBfRkxJUF9GTEFHXSxcbiAgICBbJ3BhcnRpYWwnLCBXUkFQX1BBUlRJQUxfRkxBR10sXG4gICAgWydwYXJ0aWFsUmlnaHQnLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBR10sXG4gICAgWydyZWFyZycsIFdSQVBfUkVBUkdfRkxBR11cbiAgXTtcblxuICAvKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG4gIHZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgICBhc3luY1RhZyA9ICdbb2JqZWN0IEFzeW5jRnVuY3Rpb25dJyxcbiAgICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgICAgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgICAgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICAgIHByb3h5VGFnID0gJ1tvYmplY3QgUHJveHldJyxcbiAgICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXScsXG4gICAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nLFxuICAgICAgd2Vha1NldFRhZyA9ICdbb2JqZWN0IFdlYWtTZXRdJztcblxuICB2YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGVtcHR5IHN0cmluZyBsaXRlcmFscyBpbiBjb21waWxlZCB0ZW1wbGF0ZSBzb3VyY2UuICovXG4gIHZhciByZUVtcHR5U3RyaW5nTGVhZGluZyA9IC9cXGJfX3AgXFwrPSAnJzsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICAgIHJlRW1wdHlTdHJpbmdUcmFpbGluZyA9IC8oX19lXFwoLio/XFwpfFxcYl9fdFxcKSkgXFwrXFxuJyc7L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggSFRNTCBlbnRpdGllcyBhbmQgSFRNTCBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVFc2NhcGVkSHRtbCA9IC8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyxcbiAgICAgIHJlVW5lc2NhcGVkSHRtbCA9IC9bJjw+XCInXS9nLFxuICAgICAgcmVIYXNFc2NhcGVkSHRtbCA9IFJlZ0V4cChyZUVzY2FwZWRIdG1sLnNvdXJjZSksXG4gICAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlID0gLzwlLShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUV2YWx1YXRlID0gLzwlKFtcXHNcXFNdKz8pJT4vZyxcbiAgICAgIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvLFxuICAgICAgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaCBgUmVnRXhwYFxuICAgKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAgICovXG4gIHZhciByZVJlZ0V4cENoYXIgPSAvW1xcXFxeJC4qKz8oKVtcXF17fXxdL2csXG4gICAgICByZUhhc1JlZ0V4cENoYXIgPSBSZWdFeHAocmVSZWdFeHBDaGFyLnNvdXJjZSk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyB3aGl0ZXNwYWNlLiAqL1xuICB2YXIgcmVUcmltU3RhcnQgPSAvXlxccysvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGEgc2luZ2xlIHdoaXRlc3BhY2UgY2hhcmFjdGVyLiAqL1xuICB2YXIgcmVXaGl0ZXNwYWNlID0gL1xccy87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKipcbiAgICogVXNlZCB0byB2YWxpZGF0ZSB0aGUgYHZhbGlkYXRlYCBvcHRpb24gaW4gYF8udGVtcGxhdGVgIHZhcmlhYmxlLlxuICAgKlxuICAgKiBGb3JiaWRzIGNoYXJhY3RlcnMgd2hpY2ggY291bGQgcG90ZW50aWFsbHkgY2hhbmdlIHRoZSBtZWFuaW5nIG9mIHRoZSBmdW5jdGlvbiBhcmd1bWVudCBkZWZpbml0aW9uOlxuICAgKiAtIFwiKCksXCIgKG1vZGlmaWNhdGlvbiBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiPVwiIChkZWZhdWx0IHZhbHVlKVxuICAgKiAtIFwiW117fVwiIChkZXN0cnVjdHVyaW5nIG9mIGZ1bmN0aW9uIHBhcmFtZXRlcnMpXG4gICAqIC0gXCIvXCIgKGJlZ2lubmluZyBvZiBhIGNvbW1lbnQpXG4gICAqIC0gd2hpdGVzcGFjZVxuICAgKi9cbiAgdmFyIHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzID0gL1soKT0se31cXFtcXF1cXC9cXHNdLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udHJpbWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byB0cmltLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VUcmltKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmdcbiAgICAgID8gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSkucmVwbGFjZShyZVRyaW1TdGFydCwgJycpXG4gICAgICA6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gICAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICAgKiBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBgY2FjaGVgIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWNoZSBUaGUgY2FjaGUgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gICAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1TdGFydGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgZmlyc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzU3RhcnRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RyaW5nIHN5bWJvbFxuICAgKiB0aGF0IGlzIG5vdCBmb3VuZCBpbiB0aGUgY2hhcmFjdGVyIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0clN5bWJvbHMgVGhlIHN0cmluZyBzeW1ib2xzIHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGNoclN5bWJvbHMgVGhlIGNoYXJhY3RlciBzeW1ib2xzIHRvIGZpbmQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHVubWF0Y2hlZCBzdHJpbmcgc3ltYm9sLlxuICAgKi9cbiAgZnVuY3Rpb24gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiBiYXNlSW5kZXhPZihjaHJTeW1ib2xzLCBzdHJTeW1ib2xzW2luZGV4XSwgMCkgPiAtMSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgbnVtYmVyIG9mIGBwbGFjZWhvbGRlcmAgb2NjdXJyZW5jZXMgaW4gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIGNvdW50LlxuICAgKi9cbiAgZnVuY3Rpb24gY291bnRIb2xkZXJzKGFycmF5LCBwbGFjZWhvbGRlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc3VsdCA9IDA7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChhcnJheVtsZW5ndGhdID09PSBwbGFjZWhvbGRlcikge1xuICAgICAgICArK3Jlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGV0dGVyIFRoZSBtYXRjaGVkIGxldHRlciB0byBkZWJ1cnIuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAgICovXG4gIHZhciBkZWJ1cnJMZXR0ZXIgPSBiYXNlUHJvcGVydHlPZihkZWJ1cnJlZExldHRlcnMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLmVzY2FwZWAgdG8gY29udmVydCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gICAqL1xuICB2YXIgZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sRXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udGVtcGxhdGVgIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlU3RyaW5nQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICAgIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gICAgdmFyIGRhdGEsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gICAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIGBwbGFjZWhvbGRlcmAgZWxlbWVudHMgaW4gYGFycmF5YCB3aXRoIGFuIGludGVybmFsIHBsYWNlaG9sZGVyXG4gICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZWlyIGluZGV4ZXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7Kn0gcGxhY2Vob2xkZXIgVGhlIHBsYWNlaG9sZGVyIHRvIHJlcGxhY2UuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZXBsYWNlSG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIgfHwgdmFsdWUgPT09IFBMQUNFSE9MREVSKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IFBMQUNFSE9MREVSO1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gICAqL1xuICBmdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc2V0YCB0byBpdHMgdmFsdWUtdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9QYWlycyhzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFt2YWx1ZSwgdmFsdWVdO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluZGV4T2ZgIHdoaWNoIHBlcmZvcm1zIHN0cmljdCBlcXVhbGl0eVxuICAgKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmxhc3RJbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RMYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgIHZhciBpbmRleCA9IGZyb21JbmRleCArIDE7XG4gICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBzeW1ib2xzIGluIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdTaXplKHN0cmluZykge1xuICAgIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gdW5pY29kZVNpemUoc3RyaW5nKVxuICAgICAgOiBhc2NpaVNpemUoc3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy50cmltYCBhbmQgYF8udHJpbUVuZGAgdG8gZ2V0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZVxuICAgKiBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gICAqL1xuICBmdW5jdGlvbiB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSB7XG4gICAgdmFyIGluZGV4ID0gc3RyaW5nLmxlbmd0aDtcblxuICAgIHdoaWxlIChpbmRleC0tICYmIHJlV2hpdGVzcGFjZS50ZXN0KHN0cmluZy5jaGFyQXQoaW5kZXgpKSkge31cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy51bmVzY2FwZWAgdG8gY29udmVydCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIHVuZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIHVuZXNjYXBlSHRtbENoYXIgPSBiYXNlUHJvcGVydHlPZihodG1sVW5lc2NhcGVzKTtcblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhIFVuaWNvZGUgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVTaXplKHN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSByZVVuaWNvZGUubGFzdEluZGV4ID0gMDtcbiAgICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICAgKytyZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZSkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGEgVW5pY29kZSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIHVuaWNvZGVXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xuICB9XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB1c2luZyB0aGUgYGNvbnRleHRgIG9iamVjdC5cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgX1xuICAgKiBAc2luY2UgMS4xLjBcbiAgICogQGNhdGVnb3J5IFV0aWxcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0PXJvb3RdIFRoZSBjb250ZXh0IG9iamVjdC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGEgbmV3IGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBfLm1peGluKHsgJ2Zvbyc6IF8uY29uc3RhbnQoJ2ZvbycpIH0pO1xuICAgKlxuICAgKiB2YXIgbG9kYXNoID0gXy5ydW5JbkNvbnRleHQoKTtcbiAgICogbG9kYXNoLm1peGluKHsgJ2Jhcic6IGxvZGFzaC5jb25zdGFudCgnYmFyJykgfSk7XG4gICAqXG4gICAqIF8uaXNGdW5jdGlvbihfLmZvbyk7XG4gICAqIC8vID0+IHRydWVcbiAgICogXy5pc0Z1bmN0aW9uKF8uYmFyKTtcbiAgICogLy8gPT4gZmFsc2VcbiAgICpcbiAgICogbG9kYXNoLmlzRnVuY3Rpb24obG9kYXNoLmZvbyk7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5iYXIpO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqXG4gICAqIC8vIENyZWF0ZSBhIHN1cGVkLXVwIGBkZWZlcmAgaW4gTm9kZS5qcy5cbiAgICogdmFyIGRlZmVyID0gXy5ydW5JbkNvbnRleHQoeyAnc2V0VGltZW91dCc6IHNldEltbWVkaWF0ZSB9KS5kZWZlcjtcbiAgICovXG4gIHZhciBydW5JbkNvbnRleHQgPSAoZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gY29udGV4dCA9PSBudWxsID8gcm9vdCA6IF8uZGVmYXVsdHMocm9vdC5PYmplY3QoKSwgY29udGV4dCwgXy5waWNrKHJvb3QsIGNvbnRleHRQcm9wcykpO1xuXG4gICAgLyoqIEJ1aWx0LWluIGNvbnN0cnVjdG9yIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEFycmF5ID0gY29udGV4dC5BcnJheSxcbiAgICAgICAgRGF0ZSA9IGNvbnRleHQuRGF0ZSxcbiAgICAgICAgRXJyb3IgPSBjb250ZXh0LkVycm9yLFxuICAgICAgICBGdW5jdGlvbiA9IGNvbnRleHQuRnVuY3Rpb24sXG4gICAgICAgIE1hdGggPSBjb250ZXh0Lk1hdGgsXG4gICAgICAgIE9iamVjdCA9IGNvbnRleHQuT2JqZWN0LFxuICAgICAgICBSZWdFeHAgPSBjb250ZXh0LlJlZ0V4cCxcbiAgICAgICAgU3RyaW5nID0gY29udGV4dC5TdHJpbmcsXG4gICAgICAgIFR5cGVFcnJvciA9IGNvbnRleHQuVHlwZUVycm9yO1xuXG4gICAgLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbiAgICB2YXIgY29yZUpzRGF0YSA9IGNvbnRleHRbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xuICAgIHZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAgIC8qKiBVc2VkIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRHMuICovXG4gICAgdmFyIGlkQ291bnRlciA9IDA7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xuICAgIHZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgICAgIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byByZXNvbHZlIHRoZVxuICAgICAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICAgICAqIG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICB2YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuICAgIC8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbiAgICB2YXIgb2JqZWN0Q3RvclN0cmluZyA9IGZ1bmNUb1N0cmluZy5jYWxsKE9iamVjdCk7XG5cbiAgICAvKiogVXNlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCBgX2AgcmVmZXJlbmNlIGluIGBfLm5vQ29uZmxpY3RgLiAqL1xuICAgIHZhciBvbGREYXNoID0gcm9vdC5fO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IGlmIGEgbWV0aG9kIGlzIG5hdGl2ZS4gKi9cbiAgICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgIC5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLCAnJDEuKj8nKSArICckJ1xuICAgICk7XG5cbiAgICAvKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgQnVmZmVyID0gbW9kdWxlRXhwb3J0cyA/IGNvbnRleHQuQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBTeW1ib2wgPSBjb250ZXh0LlN5bWJvbCxcbiAgICAgICAgVWludDhBcnJheSA9IGNvbnRleHQuVWludDhBcnJheSxcbiAgICAgICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQsXG4gICAgICAgIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpLFxuICAgICAgICBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlLFxuICAgICAgICBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICAgICAgICBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZSxcbiAgICAgICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQsXG4gICAgICAgIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBmdW5jID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2RlZmluZVByb3BlcnR5Jyk7XG4gICAgICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgICAgIHJldHVybiBmdW5jO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9KCkpO1xuXG4gICAgLyoqIE1vY2tlZCBidWlsdC1pbnMuICovXG4gICAgdmFyIGN0eENsZWFyVGltZW91dCA9IGNvbnRleHQuY2xlYXJUaW1lb3V0ICE9PSByb290LmNsZWFyVGltZW91dCAmJiBjb250ZXh0LmNsZWFyVGltZW91dCxcbiAgICAgICAgY3R4Tm93ID0gRGF0ZSAmJiBEYXRlLm5vdyAhPT0gcm9vdC5EYXRlLm5vdyAmJiBEYXRlLm5vdyxcbiAgICAgICAgY3R4U2V0VGltZW91dCA9IGNvbnRleHQuc2V0VGltZW91dCAhPT0gcm9vdC5zZXRUaW1lb3V0ICYmIGNvbnRleHQuc2V0VGltZW91dDtcblxuICAgIC8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbiAgICB2YXIgbmF0aXZlQ2VpbCA9IE1hdGguY2VpbCxcbiAgICAgICAgbmF0aXZlRmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgICBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICAgICAgbmF0aXZlSXNCdWZmZXIgPSBCdWZmZXIgPyBCdWZmZXIuaXNCdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIG5hdGl2ZUlzRmluaXRlID0gY29udGV4dC5pc0Zpbml0ZSxcbiAgICAgICAgbmF0aXZlSm9pbiA9IGFycmF5UHJvdG8uam9pbixcbiAgICAgICAgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCksXG4gICAgICAgIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgICAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbixcbiAgICAgICAgbmF0aXZlTm93ID0gRGF0ZS5ub3csXG4gICAgICAgIG5hdGl2ZVBhcnNlSW50ID0gY29udGV4dC5wYXJzZUludCxcbiAgICAgICAgbmF0aXZlUmFuZG9tID0gTWF0aC5yYW5kb20sXG4gICAgICAgIG5hdGl2ZVJldmVyc2UgPSBhcnJheVByb3RvLnJldmVyc2U7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG4gICAgdmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKGNvbnRleHQsICdEYXRhVmlldycpLFxuICAgICAgICBNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ01hcCcpLFxuICAgICAgICBQcm9taXNlID0gZ2V0TmF0aXZlKGNvbnRleHQsICdQcm9taXNlJyksXG4gICAgICAgIFNldCA9IGdldE5hdGl2ZShjb250ZXh0LCAnU2V0JyksXG4gICAgICAgIFdlYWtNYXAgPSBnZXROYXRpdmUoY29udGV4dCwgJ1dlYWtNYXAnKSxcbiAgICAgICAgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG4gICAgLyoqIFVzZWQgdG8gc3RvcmUgZnVuY3Rpb24gbWV0YWRhdGEuICovXG4gICAgdmFyIG1ldGFNYXAgPSBXZWFrTWFwICYmIG5ldyBXZWFrTWFwO1xuXG4gICAgLyoqIFVzZWQgdG8gbG9va3VwIHVubWluaWZpZWQgZnVuY3Rpb24gbmFtZXMuICovXG4gICAgdmFyIHJlYWxOYW1lcyA9IHt9O1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbiAgICB2YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgICAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICAgICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICAgICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbiAgICAvKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbiAgICB2YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGxvZGFzaGAgb2JqZWN0IHdoaWNoIHdyYXBzIGB2YWx1ZWAgdG8gZW5hYmxlIGltcGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcy4gTWV0aG9kcyB0aGF0IG9wZXJhdGUgb24gYW5kIHJldHVybiBhcnJheXMsIGNvbGxlY3Rpb25zLFxuICAgICAqIGFuZCBmdW5jdGlvbnMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuIE1ldGhvZHMgdGhhdCByZXRyaWV2ZSBhIHNpbmdsZSB2YWx1ZVxuICAgICAqIG9yIG1heSByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUgd2lsbCBhdXRvbWF0aWNhbGx5IGVuZCB0aGUgY2hhaW4gc2VxdWVuY2VcbiAgICAgKiBhbmQgcmV0dXJuIHRoZSB1bndyYXBwZWQgdmFsdWUuIE90aGVyd2lzZSwgdGhlIHZhbHVlIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBFeHBsaWNpdCBjaGFpbiBzZXF1ZW5jZXMsIHdoaWNoIG11c3QgYmUgdW53cmFwcGVkIHdpdGggYF8jdmFsdWVgLCBtYXkgYmVcbiAgICAgKiBlbmFibGVkIHVzaW5nIGBfLmNoYWluYC5cbiAgICAgKlxuICAgICAqIFRoZSBleGVjdXRpb24gb2YgY2hhaW5lZCBtZXRob2RzIGlzIGxhenksIHRoYXQgaXMsIGl0J3MgZGVmZXJyZWQgdW50aWxcbiAgICAgKiBgXyN2YWx1ZWAgaXMgaW1wbGljaXRseSBvciBleHBsaWNpdGx5IGNhbGxlZC5cbiAgICAgKlxuICAgICAqIExhenkgZXZhbHVhdGlvbiBhbGxvd3Mgc2V2ZXJhbCBtZXRob2RzIHRvIHN1cHBvcnQgc2hvcnRjdXQgZnVzaW9uLlxuICAgICAqIFNob3J0Y3V0IGZ1c2lvbiBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWVyZ2UgaXRlcmF0ZWUgY2FsbHM7IHRoaXMgYXZvaWRzXG4gICAgICogdGhlIGNyZWF0aW9uIG9mIGludGVybWVkaWF0ZSBhcnJheXMgYW5kIGNhbiBncmVhdGx5IHJlZHVjZSB0aGUgbnVtYmVyIG9mXG4gICAgICogaXRlcmF0ZWUgZXhlY3V0aW9ucy4gU2VjdGlvbnMgb2YgYSBjaGFpbiBzZXF1ZW5jZSBxdWFsaWZ5IGZvciBzaG9ydGN1dFxuICAgICAqIGZ1c2lvbiBpZiB0aGUgc2VjdGlvbiBpcyBhcHBsaWVkIHRvIGFuIGFycmF5IGFuZCBpdGVyYXRlZXMgYWNjZXB0IG9ubHlcbiAgICAgKiBvbmUgYXJndW1lbnQuIFRoZSBoZXVyaXN0aWMgZm9yIHdoZXRoZXIgYSBzZWN0aW9uIHF1YWxpZmllcyBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaXMgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICpcbiAgICAgKiBDaGFpbmluZyBpcyBzdXBwb3J0ZWQgaW4gY3VzdG9tIGJ1aWxkcyBhcyBsb25nIGFzIHRoZSBgXyN2YWx1ZWAgbWV0aG9kIGlzXG4gICAgICogZGlyZWN0bHkgb3IgaW5kaXJlY3RseSBpbmNsdWRlZCBpbiB0aGUgYnVpbGQuXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiB0byBsb2Rhc2ggbWV0aG9kcywgd3JhcHBlcnMgaGF2ZSBgQXJyYXlgIGFuZCBgU3RyaW5nYCBtZXRob2RzLlxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYEFycmF5YCBtZXRob2RzIGFyZTpcbiAgICAgKiBgY29uY2F0YCwgYGpvaW5gLCBgcG9wYCwgYHB1c2hgLCBgc2hpZnRgLCBgc29ydGAsIGBzcGxpY2VgLCBhbmQgYHVuc2hpZnRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBgU3RyaW5nYCBtZXRob2RzIGFyZTpcbiAgICAgKiBgcmVwbGFjZWAgYW5kIGBzcGxpdGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbiBhcmU6XG4gICAgICogYGF0YCwgYGNvbXBhY3RgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZHJvcFdoaWxlYCwgYGZpbHRlcmAsIGBmaW5kYCxcbiAgICAgKiBgZmluZExhc3RgLCBgaGVhZGAsIGBpbml0aWFsYCwgYGxhc3RgLCBgbWFwYCwgYHJlamVjdGAsIGByZXZlcnNlYCwgYHNsaWNlYCxcbiAgICAgKiBgdGFpbGAsIGB0YWtlYCwgYHRha2VSaWdodGAsIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBhbmQgYHRvQXJyYXlgXG4gICAgICpcbiAgICAgKiBUaGUgY2hhaW5hYmxlIHdyYXBwZXIgbWV0aG9kcyBhcmU6XG4gICAgICogYGFmdGVyYCwgYGFyeWAsIGBhc3NpZ25gLCBgYXNzaWduSW5gLCBgYXNzaWduSW5XaXRoYCwgYGFzc2lnbldpdGhgLCBgYXRgLFxuICAgICAqIGBiZWZvcmVgLCBgYmluZGAsIGBiaW5kQWxsYCwgYGJpbmRLZXlgLCBgY2FzdEFycmF5YCwgYGNoYWluYCwgYGNodW5rYCxcbiAgICAgKiBgY29tbWl0YCwgYGNvbXBhY3RgLCBgY29uY2F0YCwgYGNvbmZvcm1zYCwgYGNvbnN0YW50YCwgYGNvdW50QnlgLCBgY3JlYXRlYCxcbiAgICAgKiBgY3VycnlgLCBgZGVib3VuY2VgLCBgZGVmYXVsdHNgLCBgZGVmYXVsdHNEZWVwYCwgYGRlZmVyYCwgYGRlbGF5YCxcbiAgICAgKiBgZGlmZmVyZW5jZWAsIGBkaWZmZXJlbmNlQnlgLCBgZGlmZmVyZW5jZVdpdGhgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLFxuICAgICAqIGBkcm9wUmlnaHRXaGlsZWAsIGBkcm9wV2hpbGVgLCBgZXh0ZW5kYCwgYGV4dGVuZFdpdGhgLCBgZmlsbGAsIGBmaWx0ZXJgLFxuICAgICAqIGBmbGF0TWFwYCwgYGZsYXRNYXBEZWVwYCwgYGZsYXRNYXBEZXB0aGAsIGBmbGF0dGVuYCwgYGZsYXR0ZW5EZWVwYCxcbiAgICAgKiBgZmxhdHRlbkRlcHRoYCwgYGZsaXBgLCBgZmxvd2AsIGBmbG93UmlnaHRgLCBgZnJvbVBhaXJzYCwgYGZ1bmN0aW9uc2AsXG4gICAgICogYGZ1bmN0aW9uc0luYCwgYGdyb3VwQnlgLCBgaW5pdGlhbGAsIGBpbnRlcnNlY3Rpb25gLCBgaW50ZXJzZWN0aW9uQnlgLFxuICAgICAqIGBpbnRlcnNlY3Rpb25XaXRoYCwgYGludmVydGAsIGBpbnZlcnRCeWAsIGBpbnZva2VNYXBgLCBgaXRlcmF0ZWVgLCBga2V5QnlgLFxuICAgICAqIGBrZXlzYCwgYGtleXNJbmAsIGBtYXBgLCBgbWFwS2V5c2AsIGBtYXBWYWx1ZXNgLCBgbWF0Y2hlc2AsIGBtYXRjaGVzUHJvcGVydHlgLFxuICAgICAqIGBtZW1vaXplYCwgYG1lcmdlYCwgYG1lcmdlV2l0aGAsIGBtZXRob2RgLCBgbWV0aG9kT2ZgLCBgbWl4aW5gLCBgbmVnYXRlYCxcbiAgICAgKiBgbnRoQXJnYCwgYG9taXRgLCBgb21pdEJ5YCwgYG9uY2VgLCBgb3JkZXJCeWAsIGBvdmVyYCwgYG92ZXJBcmdzYCxcbiAgICAgKiBgb3ZlckV2ZXJ5YCwgYG92ZXJTb21lYCwgYHBhcnRpYWxgLCBgcGFydGlhbFJpZ2h0YCwgYHBhcnRpdGlvbmAsIGBwaWNrYCxcbiAgICAgKiBgcGlja0J5YCwgYHBsYW50YCwgYHByb3BlcnR5YCwgYHByb3BlcnR5T2ZgLCBgcHVsbGAsIGBwdWxsQWxsYCwgYHB1bGxBbGxCeWAsXG4gICAgICogYHB1bGxBbGxXaXRoYCwgYHB1bGxBdGAsIGBwdXNoYCwgYHJhbmdlYCwgYHJhbmdlUmlnaHRgLCBgcmVhcmdgLCBgcmVqZWN0YCxcbiAgICAgKiBgcmVtb3ZlYCwgYHJlc3RgLCBgcmV2ZXJzZWAsIGBzYW1wbGVTaXplYCwgYHNldGAsIGBzZXRXaXRoYCwgYHNodWZmbGVgLFxuICAgICAqIGBzbGljZWAsIGBzb3J0YCwgYHNvcnRCeWAsIGBzcGxpY2VgLCBgc3ByZWFkYCwgYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0YWtlUmlnaHRXaGlsZWAsIGB0YWtlV2hpbGVgLCBgdGFwYCwgYHRocm90dGxlYCwgYHRocnVgLCBgdG9BcnJheWAsXG4gICAgICogYHRvUGFpcnNgLCBgdG9QYWlyc0luYCwgYHRvUGF0aGAsIGB0b1BsYWluT2JqZWN0YCwgYHRyYW5zZm9ybWAsIGB1bmFyeWAsXG4gICAgICogYHVuaW9uYCwgYHVuaW9uQnlgLCBgdW5pb25XaXRoYCwgYHVuaXFgLCBgdW5pcUJ5YCwgYHVuaXFXaXRoYCwgYHVuc2V0YCxcbiAgICAgKiBgdW5zaGlmdGAsIGB1bnppcGAsIGB1bnppcFdpdGhgLCBgdXBkYXRlYCwgYHVwZGF0ZVdpdGhgLCBgdmFsdWVzYCxcbiAgICAgKiBgdmFsdWVzSW5gLCBgd2l0aG91dGAsIGB3cmFwYCwgYHhvcmAsIGB4b3JCeWAsIGB4b3JXaXRoYCwgYHppcGAsXG4gICAgICogYHppcE9iamVjdGAsIGB6aXBPYmplY3REZWVwYCwgYW5kIGB6aXBXaXRoYFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgbWV0aG9kcyB0aGF0IGFyZSAqKm5vdCoqIGNoYWluYWJsZSBieSBkZWZhdWx0IGFyZTpcbiAgICAgKiBgYWRkYCwgYGF0dGVtcHRgLCBgY2FtZWxDYXNlYCwgYGNhcGl0YWxpemVgLCBgY2VpbGAsIGBjbGFtcGAsIGBjbG9uZWAsXG4gICAgICogYGNsb25lRGVlcGAsIGBjbG9uZURlZXBXaXRoYCwgYGNsb25lV2l0aGAsIGBjb25mb3Jtc1RvYCwgYGRlYnVycmAsXG4gICAgICogYGRlZmF1bHRUb2AsIGBkaXZpZGVgLCBgZWFjaGAsIGBlYWNoUmlnaHRgLCBgZW5kc1dpdGhgLCBgZXFgLCBgZXNjYXBlYCxcbiAgICAgKiBgZXNjYXBlUmVnRXhwYCwgYGV2ZXJ5YCwgYGZpbmRgLCBgZmluZEluZGV4YCwgYGZpbmRLZXlgLCBgZmluZExhc3RgLFxuICAgICAqIGBmaW5kTGFzdEluZGV4YCwgYGZpbmRMYXN0S2V5YCwgYGZpcnN0YCwgYGZsb29yYCwgYGZvckVhY2hgLCBgZm9yRWFjaFJpZ2h0YCxcbiAgICAgKiBgZm9ySW5gLCBgZm9ySW5SaWdodGAsIGBmb3JPd25gLCBgZm9yT3duUmlnaHRgLCBgZ2V0YCwgYGd0YCwgYGd0ZWAsIGBoYXNgLFxuICAgICAqIGBoYXNJbmAsIGBoZWFkYCwgYGlkZW50aXR5YCwgYGluY2x1ZGVzYCwgYGluZGV4T2ZgLCBgaW5SYW5nZWAsIGBpbnZva2VgLFxuICAgICAqIGBpc0FyZ3VtZW50c2AsIGBpc0FycmF5YCwgYGlzQXJyYXlCdWZmZXJgLCBgaXNBcnJheUxpa2VgLCBgaXNBcnJheUxpa2VPYmplY3RgLFxuICAgICAqIGBpc0Jvb2xlYW5gLCBgaXNCdWZmZXJgLCBgaXNEYXRlYCwgYGlzRWxlbWVudGAsIGBpc0VtcHR5YCwgYGlzRXF1YWxgLFxuICAgICAqIGBpc0VxdWFsV2l0aGAsIGBpc0Vycm9yYCwgYGlzRmluaXRlYCwgYGlzRnVuY3Rpb25gLCBgaXNJbnRlZ2VyYCwgYGlzTGVuZ3RoYCxcbiAgICAgKiBgaXNNYXBgLCBgaXNNYXRjaGAsIGBpc01hdGNoV2l0aGAsIGBpc05hTmAsIGBpc05hdGl2ZWAsIGBpc05pbGAsIGBpc051bGxgLFxuICAgICAqIGBpc051bWJlcmAsIGBpc09iamVjdGAsIGBpc09iamVjdExpa2VgLCBgaXNQbGFpbk9iamVjdGAsIGBpc1JlZ0V4cGAsXG4gICAgICogYGlzU2FmZUludGVnZXJgLCBgaXNTZXRgLCBgaXNTdHJpbmdgLCBgaXNVbmRlZmluZWRgLCBgaXNUeXBlZEFycmF5YCxcbiAgICAgKiBgaXNXZWFrTWFwYCwgYGlzV2Vha1NldGAsIGBqb2luYCwgYGtlYmFiQ2FzZWAsIGBsYXN0YCwgYGxhc3RJbmRleE9mYCxcbiAgICAgKiBgbG93ZXJDYXNlYCwgYGxvd2VyRmlyc3RgLCBgbHRgLCBgbHRlYCwgYG1heGAsIGBtYXhCeWAsIGBtZWFuYCwgYG1lYW5CeWAsXG4gICAgICogYG1pbmAsIGBtaW5CeWAsIGBtdWx0aXBseWAsIGBub0NvbmZsaWN0YCwgYG5vb3BgLCBgbm93YCwgYG50aGAsIGBwYWRgLFxuICAgICAqIGBwYWRFbmRgLCBgcGFkU3RhcnRgLCBgcGFyc2VJbnRgLCBgcG9wYCwgYHJhbmRvbWAsIGByZWR1Y2VgLCBgcmVkdWNlUmlnaHRgLFxuICAgICAqIGByZXBlYXRgLCBgcmVzdWx0YCwgYHJvdW5kYCwgYHJ1bkluQ29udGV4dGAsIGBzYW1wbGVgLCBgc2hpZnRgLCBgc2l6ZWAsXG4gICAgICogYHNuYWtlQ2FzZWAsIGBzb21lYCwgYHNvcnRlZEluZGV4YCwgYHNvcnRlZEluZGV4QnlgLCBgc29ydGVkTGFzdEluZGV4YCxcbiAgICAgKiBgc29ydGVkTGFzdEluZGV4QnlgLCBgc3RhcnRDYXNlYCwgYHN0YXJ0c1dpdGhgLCBgc3R1YkFycmF5YCwgYHN0dWJGYWxzZWAsXG4gICAgICogYHN0dWJPYmplY3RgLCBgc3R1YlN0cmluZ2AsIGBzdHViVHJ1ZWAsIGBzdWJ0cmFjdGAsIGBzdW1gLCBgc3VtQnlgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0aW1lc2AsIGB0b0Zpbml0ZWAsIGB0b0ludGVnZXJgLCBgdG9KU09OYCwgYHRvTGVuZ3RoYCxcbiAgICAgKiBgdG9Mb3dlcmAsIGB0b051bWJlcmAsIGB0b1NhZmVJbnRlZ2VyYCwgYHRvU3RyaW5nYCwgYHRvVXBwZXJgLCBgdHJpbWAsXG4gICAgICogYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYHRydW5jYXRlYCwgYHVuZXNjYXBlYCwgYHVuaXF1ZUlkYCwgYHVwcGVyQ2FzZWAsXG4gICAgICogYHVwcGVyRmlyc3RgLCBgdmFsdWVgLCBhbmQgYHdvcmRzYFxuICAgICAqXG4gICAgICogQG5hbWUgX1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwIGluIGEgYGxvZGFzaGAgaW5zdGFuY2UuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyLCAzXSk7XG4gICAgICpcbiAgICAgKiAvLyBSZXR1cm5zIGFuIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiB3cmFwcGVkLnJlZHVjZShfLmFkZCk7XG4gICAgICogLy8gPT4gNlxuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhIHdyYXBwZWQgdmFsdWUuXG4gICAgICogdmFyIHNxdWFyZXMgPSB3cmFwcGVkLm1hcChzcXVhcmUpO1xuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoc3F1YXJlcy52YWx1ZSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbG9kYXNoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMb2Rhc2hXcmFwcGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnX193cmFwcGVkX18nKSkge1xuICAgICAgICAgIHJldHVybiB3cmFwcGVyQ2xvbmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAgICAgKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gICAgICBmdW5jdGlvbiBvYmplY3QoKSB7fVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0Q3JlYXRlKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgb2JqZWN0O1xuICAgICAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZ1bmN0aW9uIHdob3NlIHByb3RvdHlwZSBjaGFpbiBzZXF1ZW5jZSB3cmFwcGVycyBpbmhlcml0IGZyb20uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMb2Rhc2goKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGNvbnN0cnVjdG9yIGZvciBjcmVhdGluZyBgbG9kYXNoYCB3cmFwcGVyIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbY2hhaW5BbGxdIEVuYWJsZSBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExvZGFzaFdyYXBwZXIodmFsdWUsIGNoYWluQWxsKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fY2hhaW5fXyA9ICEhY2hhaW5BbGw7XG4gICAgICB0aGlzLl9faW5kZXhfXyA9IDA7XG4gICAgICB0aGlzLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCwgdGhlIHRlbXBsYXRlIGRlbGltaXRlcnMgdXNlZCBieSBsb2Rhc2ggYXJlIGxpa2UgdGhvc2UgaW5cbiAgICAgKiBlbWJlZGRlZCBSdWJ5IChFUkIpIGFzIHdlbGwgYXMgRVMyMDE1IHRlbXBsYXRlIHN0cmluZ3MuIENoYW5nZSB0aGVcbiAgICAgKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gYmUgSFRNTC1lc2NhcGVkLlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdlc2NhcGUnOiByZUVzY2FwZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXZhbHVhdGUnOiByZUV2YWx1YXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gZGV0ZWN0IGBkYXRhYCBwcm9wZXJ0eSB2YWx1ZXMgdG8gaW5qZWN0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtSZWdFeHB9XG4gICAgICAgKi9cbiAgICAgICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byByZWZlcmVuY2UgdGhlIGRhdGEgb2JqZWN0IGluIHRoZSB0ZW1wbGF0ZSB0ZXh0LlxuICAgICAgICpcbiAgICAgICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKi9cbiAgICAgICd2YXJpYWJsZSc6ICcnLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICovXG4gICAgICAnaW1wb3J0cyc6IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgJ18nOiBsb2Rhc2hcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRW5zdXJlIHdyYXBwZXJzIGFyZSBpbnN0YW5jZXMgb2YgYGJhc2VMb2Rhc2hgLlxuICAgIGxvZGFzaC5wcm90b3R5cGUgPSBiYXNlTG9kYXNoLnByb3RvdHlwZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbG9kYXNoO1xuXG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUgPSBiYXNlQ3JlYXRlKGJhc2VMb2Rhc2gucHJvdG90eXBlKTtcbiAgICBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvZGFzaFdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbGF6eSB3cmFwcGVyIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBsYXp5IGV2YWx1YXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGF6eVdyYXBwZXIodmFsdWUpIHtcbiAgICAgIHRoaXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHRoaXMuX19hY3Rpb25zX18gPSBbXTtcbiAgICAgIHRoaXMuX19kaXJfXyA9IDE7XG4gICAgICB0aGlzLl9fZmlsdGVyZWRfXyA9IGZhbHNlO1xuICAgICAgdGhpcy5fX2l0ZXJhdGVlc19fID0gW107XG4gICAgICB0aGlzLl9fdGFrZUNvdW50X18gPSBNQVhfQVJSQVlfTEVOR1RIO1xuICAgICAgdGhpcy5fX3ZpZXdzX18gPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGxhenkgd3JhcHBlciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsb25lXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlDbG9uZSgpIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcy5fX3dyYXBwZWRfXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19kaXJfXyA9IHRoaXMuX19kaXJfXztcbiAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0aGlzLl9fZmlsdGVyZWRfXztcbiAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fID0gY29weUFycmF5KHRoaXMuX19pdGVyYXRlZXNfXyk7XG4gICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXztcbiAgICAgIHJlc3VsdC5fX3ZpZXdzX18gPSBjb3B5QXJyYXkodGhpcy5fX3ZpZXdzX18pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnNlcyB0aGUgZGlyZWN0aW9uIG9mIGxhenkgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHJldmVyc2VkIGBMYXp5V3JhcHBlcmAgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhenlSZXZlcnNlKCkge1xuICAgICAgaWYgKHRoaXMuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIHJlc3VsdC5fX2Rpcl9fID0gLTE7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyAqPSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgdGhlIHVud3JhcHBlZCB2YWx1ZSBmcm9tIGl0cyBsYXp5IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIExhenlXcmFwcGVyXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5VmFsdWUoKSB7XG4gICAgICB2YXIgYXJyYXkgPSB0aGlzLl9fd3JhcHBlZF9fLnZhbHVlKCksXG4gICAgICAgICAgZGlyID0gdGhpcy5fX2Rpcl9fLFxuICAgICAgICAgIGlzQXJyID0gaXNBcnJheShhcnJheSksXG4gICAgICAgICAgaXNSaWdodCA9IGRpciA8IDAsXG4gICAgICAgICAgYXJyTGVuZ3RoID0gaXNBcnIgPyBhcnJheS5sZW5ndGggOiAwLFxuICAgICAgICAgIHZpZXcgPSBnZXRWaWV3KDAsIGFyckxlbmd0aCwgdGhpcy5fX3ZpZXdzX18pLFxuICAgICAgICAgIHN0YXJ0ID0gdmlldy5zdGFydCxcbiAgICAgICAgICBlbmQgPSB2aWV3LmVuZCxcbiAgICAgICAgICBsZW5ndGggPSBlbmQgLSBzdGFydCxcbiAgICAgICAgICBpbmRleCA9IGlzUmlnaHQgPyBlbmQgOiAoc3RhcnQgLSAxKSxcbiAgICAgICAgICBpdGVyYXRlZXMgPSB0aGlzLl9faXRlcmF0ZWVzX18sXG4gICAgICAgICAgaXRlckxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHRha2VDb3VudCA9IG5hdGl2ZU1pbihsZW5ndGgsIHRoaXMuX190YWtlQ291bnRfXyk7XG5cbiAgICAgIGlmICghaXNBcnIgfHwgKCFpc1JpZ2h0ICYmIGFyckxlbmd0aCA9PSBsZW5ndGggJiYgdGFrZUNvdW50ID09IGxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUoYXJyYXksIHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlIChsZW5ndGgtLSAmJiByZXNJbmRleCA8IHRha2VDb3VudCkge1xuICAgICAgICBpbmRleCArPSBkaXI7XG5cbiAgICAgICAgdmFyIGl0ZXJJbmRleCA9IC0xLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtpbmRleF07XG5cbiAgICAgICAgd2hpbGUgKCsraXRlckluZGV4IDwgaXRlckxlbmd0aCkge1xuICAgICAgICAgIHZhciBkYXRhID0gaXRlcmF0ZWVzW2l0ZXJJbmRleF0sXG4gICAgICAgICAgICAgIGl0ZXJhdGVlID0gZGF0YS5pdGVyYXRlZSxcbiAgICAgICAgICAgICAgdHlwZSA9IGRhdGEudHlwZSxcbiAgICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX01BUF9GTEFHKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbXB1dGVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIWNvbXB1dGVkKSB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgYExhenlXcmFwcGVyYCBpcyBhbiBpbnN0YW5jZSBvZiBgYmFzZUxvZGFzaGAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF6eVdyYXBwZXI7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICAgICAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIEhhc2hcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgICAgIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gICAgICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbiAgICBIYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbiAgICBIYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuICAgIEhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG4gICAgSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbiAgICBIYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gW107XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgICAgIGRhdGEucG9wKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICAtLXRoaXMuc2l6ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gICAgICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICArK3RoaXMuc2l6ZTtcbiAgICAgICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG4gICAgTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICAgIHRoaXMuX19kYXRhX18gPSB7XG4gICAgICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICAgICAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgc2V0XG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBhZGRcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAYWxpYXMgcHVzaFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNhY2hlIGluc3RhbmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fLnNldCh2YWx1ZSwgSEFTSF9VTkRFRklORUQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuICAgIFNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuICAgIFNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbGVhclxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBkZWxldGVcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgcmVzdWx0ID0gZGF0YVsnZGVsZXRlJ10oa2V5KTtcblxuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0hhcyhrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBTdGFja1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgICAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgICAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cbiAgICBTdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuICAgIFN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcbiAgICBTdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG4gICAgU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuICAgIFN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICAgICApKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGUoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYXJyYXlbYmFzZVJhbmRvbSgwLCBsZW5ndGggLSAxKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNhbXBsZVNpemVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTYW1wbGVTaXplKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSwgYmFzZUNsYW1wKG4sIDAsIGFycmF5Lmxlbmd0aCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnJheVNodWZmbGUoYXJyYXkpIHtcbiAgICAgIHJldHVybiBzaHVmZmxlU2VsZihjb3B5QXJyYXkoYXJyYXkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFzc2lnblZhbHVlYCBleGNlcHQgdGhhdCBpdCBkb2Vzbid0IGFzc2lnblxuICAgICAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIGlmICgodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZXEob2JqZWN0W2tleV0sIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoIShoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBlcShvYmpWYWx1ZSwgdmFsdWUpKSB8fFxuICAgICAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBga2V5YCBpcyBmb3VuZCBpbiBgYXJyYXlgIG9mIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWdncmVnYXRlcyBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgb24gYGFjY3VtdWxhdG9yYCB3aXRoIGtleXMgdHJhbnNmb3JtZWRcbiAgICAgKiBieSBgaXRlcmF0ZWVgIGFuZCB2YWx1ZXMgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBhZ2dyZWdhdGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQWdncmVnYXRvcihjb2xsZWN0aW9uLCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAgICAgKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBc3NpZ24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hc3NpZ25JbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gICAgICogdmFsdWUgY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgICAgICd2YWx1ZSc6IHZhbHVlLFxuICAgICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWwgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUF0KG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpLFxuICAgICAgICAgIHNraXAgPSBvYmplY3QgPT0gbnVsbDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IHNraXAgPyB1bmRlZmluZWQgOiBnZXQob2JqZWN0LCBwYXRoc1tpbmRleF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbGFtcGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAobnVtYmVyID09PSBudW1iZXIpIHtcbiAgICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPD0gdXBwZXIgPyBudW1iZXIgOiB1cHBlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG51bWJlciA9IG51bWJlciA+PSBsb3dlciA/IG51bWJlciA6IGxvd2VyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAgICAgKiB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gRGVlcCBjbG9uZVxuICAgICAqICAyIC0gRmxhdHRlbiBpbmhlcml0ZWQgcHJvcGVydGllc1xuICAgICAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFRoZSBrZXkgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgICAgICBpc0Z1bGwgPSBiaXRtYXNrICYgQ0xPTkVfU1lNQk9MU19GTEFHO1xuXG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICAgICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUFycmF5KHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICAgIGlzRnVuYyA9IHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG5cbiAgICAgICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgICAgICA6IGNvcHlTeW1ib2xzKHZhbHVlLCBiYXNlQXNzaWduKHJlc3VsdCwgdmFsdWUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjbG9uZWFibGVUYWdzW3RhZ10pIHtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVCeVRhZyh2YWx1ZSwgdGFnLCBpc0RlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBhbmQgcmV0dXJuIGl0cyBjb3JyZXNwb25kaW5nIGNsb25lLlxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkO1xuICAgICAgfVxuICAgICAgc3RhY2suc2V0KHZhbHVlLCByZXN1bHQpO1xuXG4gICAgICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgICAgICByZXN1bHQuYWRkKGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3ViVmFsdWUsIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICAgICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICAgICAgOiAoaXNGbGF0ID8ga2V5c0luIDoga2V5cyk7XG5cbiAgICAgIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICAgICAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UsIHByb3BzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY29uZm9ybXNUb2Agd2hpY2ggYWNjZXB0cyBgcHJvcHNgIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcykge1xuICAgICAgdmFyIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tsZW5ndGhdLFxuICAgICAgICAgICAgcHJlZGljYXRlID0gc291cmNlW2tleV0sXG4gICAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgIGlmICgodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB8fCAhcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZGVsYXlgIGFuZCBgXy5kZWZlcmAgd2hpY2ggYWNjZXB0cyBgYXJnc2BcbiAgICAgKiB0byBwcm92aWRlIHRvIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICogQHJldHVybnMge251bWJlcnxPYmplY3R9IFJldHVybnMgdGhlIHRpbWVyIGlkIG9yIHRpbWVvdXQgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VEZWxheShmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsgZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOyB9LCB3YWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZGlmZmVyZW5jZWAgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGV4Y2x1ZGluZyBtdWx0aXBsZSBhcnJheXMgb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdmFsdWVzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVyYXRlZSkge1xuICAgICAgICB2YWx1ZXMgPSBhcnJheU1hcCh2YWx1ZXMsIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHZhbHVlcy5sZW5ndGggPj0gTEFSR0VfQVJSQVlfU0laRSkge1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMgPSBuZXcgU2V0Q2FjaGUodmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA9PSBudWxsID8gdmFsdWUgOiBpdGVyYXRlZSh2YWx1ZSk7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgdmFsdWVzSW5kZXggPSB2YWx1ZXNMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlc0luZGV4LS0pIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZXNbdmFsdWVzSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpbmNsdWRlcyh2YWx1ZXMsIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JFYWNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqL1xuICAgIHZhciBiYXNlRWFjaFJpZ2h0ID0gY3JlYXRlQmFzZUVhY2goYmFzZUZvck93blJpZ2h0LCB0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmV2ZXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV2ZXJ5KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmVzdWx0ID0gISFwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ubWF4YCBhbmQgYF8ubWluYCB3aGljaCBhY2NlcHRzIGFcbiAgICAgKiBgY29tcGFyYXRvcmAgdG8gZGV0ZXJtaW5lIHRoZSBleHRyZW11bSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgdXNlZCB0byBjb21wYXJlIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUV4dHJlbXVtKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjdXJyZW50ID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9IG51bGwgJiYgKGNvbXB1dGVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAoY3VycmVudCA9PT0gY3VycmVudCAmJiAhaXNTeW1ib2woY3VycmVudCkpXG4gICAgICAgICAgICAgIDogY29tcGFyYXRvcihjdXJyZW50LCBjb21wdXRlZClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICB2YXIgY29tcHV0ZWQgPSBjdXJyZW50LFxuICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWxsYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmaWxsLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGZpbGwgYGFycmF5YCB3aXRoLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiBsZW5ndGgpID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICBpZiAoZW5kIDwgMCkge1xuICAgICAgICBlbmQgKz0gbGVuZ3RoO1xuICAgICAgfVxuICAgICAgZW5kID0gc3RhcnQgPiBlbmQgPyAwIDogdG9MZW5ndGgoZW5kKTtcbiAgICAgIHdoaWxlIChzdGFydCA8IGVuZCkge1xuICAgICAgICBhcnJheVtzdGFydCsrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbHRlcmAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbHRlcihjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mbGF0dGVuYCB3aXRoIHN1cHBvcnQgZm9yIHJlc3RyaWN0aW5nIGZsYXR0ZW5pbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNTdHJpY3RdIFJlc3RyaWN0IHRvIHZhbHVlcyB0aGF0IHBhc3MgYHByZWRpY2F0ZWAgY2hlY2tzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgICAgIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgIGlmIChkZXB0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFpc1N0cmljdCkge1xuICAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gICAgICogcHJvcGVydGllcyByZXR1cm5lZCBieSBga2V5c0Z1bmNgIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yID0gY3JlYXRlQmFzZUZvcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlRm9yYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXNcbiAgICAgKiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgdmFyIGJhc2VGb3JSaWdodCA9IGNyZWF0ZUJhc2VGb3IodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3Iob2JqZWN0LCBpdGVyYXRlZSwga2V5cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duUmlnaHRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvclJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZ1bmN0aW9uc2Agd2hpY2ggY3JlYXRlcyBhbiBhcnJheSBvZlxuICAgICAqIGBvYmplY3RgIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZpbHRlcmVkIGZyb20gYHByb3BzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGZpbHRlci5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGdW5jdGlvbnMob2JqZWN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqZWN0W2tleV0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAgICAgKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICAgICAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChzeW1Ub1N0cmluZ1RhZyAmJiBzeW1Ub1N0cmluZ1RhZyBpbiBPYmplY3QodmFsdWUpKVxuICAgICAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICAgICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ3RgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUd0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlID4gb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluUmFuZ2VgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIG51bWJlciA+PSBuYXRpdmVNaW4oc3RhcnQsIGVuZCkgJiYgbnVtYmVyIDwgbmF0aXZlTWF4KHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gLCB3aXRob3V0IHN1cHBvcnRcbiAgICAgKiBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2Ygc2hhcmVkIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW50ZXJzZWN0aW9uKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmNsdWRlcyA9IGNvbXBhcmF0b3IgPyBhcnJheUluY2x1ZGVzV2l0aCA6IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXlzWzBdLmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBhcnJheXMubGVuZ3RoLFxuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoLFxuICAgICAgICAgIGNhY2hlcyA9IEFycmF5KG90aExlbmd0aCksXG4gICAgICAgICAgbWF4TGVuZ3RoID0gSW5maW5pdHksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlIChvdGhJbmRleC0tKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tvdGhJbmRleF07XG4gICAgICAgIGlmIChvdGhJbmRleCAmJiBpdGVyYXRlZSkge1xuICAgICAgICAgIGFycmF5ID0gYXJyYXlNYXAoYXJyYXksIGJhc2VVbmFyeShpdGVyYXRlZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1heExlbmd0aCA9IG5hdGl2ZU1pbihhcnJheS5sZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIGNhY2hlc1tvdGhJbmRleF0gPSAhY29tcGFyYXRvciAmJiAoaXRlcmF0ZWUgfHwgKGxlbmd0aCA+PSAxMjAgJiYgYXJyYXkubGVuZ3RoID49IDEyMCkpXG4gICAgICAgICAgPyBuZXcgU2V0Q2FjaGUob3RoSW5kZXggJiYgYXJyYXkpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnJheSA9IGFycmF5c1swXTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgc2VlbiA9IGNhY2hlc1swXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCAmJiByZXN1bHQubGVuZ3RoIDwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKCEoc2VlblxuICAgICAgICAgICAgICA/IGNhY2hlSGFzKHNlZW4sIGNvbXB1dGVkKVxuICAgICAgICAgICAgICA6IGluY2x1ZGVzKHJlc3VsdCwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgb3RoSW5kZXggPSBvdGhMZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKC0tb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZSA9IGNhY2hlc1tvdGhJbmRleF07XG4gICAgICAgICAgICBpZiAoIShjYWNoZVxuICAgICAgICAgICAgICAgICAgPyBjYWNoZUhhcyhjYWNoZSwgY29tcHV0ZWQpXG4gICAgICAgICAgICAgICAgICA6IGluY2x1ZGVzKGFycmF5c1tvdGhJbmRleF0sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52ZXJ0YCBhbmQgYF8uaW52ZXJ0QnlgIHdoaWNoIGludmVydHNcbiAgICAgKiBgb2JqZWN0YCB3aXRoIHZhbHVlcyB0cmFuc2Zvcm1lZCBieSBgaXRlcmF0ZWVgIGFuZCBzZXQgYnkgYHNldHRlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW52ZXJ0ZXIob2JqZWN0LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIGl0ZXJhdGVlKHZhbHVlKSwga2V5LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaW52b2tlYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBtZXRob2QgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgb2JqZWN0ID0gcGFyZW50KG9iamVjdCwgcGF0aCk7XG4gICAgICB2YXIgZnVuYyA9IG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyB1bmRlZmluZWQgOiBhcHBseShmdW5jLCBvYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FycmF5QnVmZmVyYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXkgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzQXJyYXlCdWZmZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFycmF5QnVmZmVyVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRGF0ZWAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNEYXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBkYXRlVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzRXF1YWxgIHdoaWNoIHN1cHBvcnRzIHBhcnRpYWwgY29tcGFyaXNvbnNcbiAgICAgKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICAgICAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAgICAgKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAgICAgKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gICAgICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgICAgIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gICAgICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gICAgICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICAgICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgICAgICBvYmpJc09iaiA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgICAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaXNTYW1lVGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWF0Y2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgICAgICBub0N1c3RvbWl6ZXIgPSAhY3VzdG9taXplcjtcblxuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAhbGVuZ3RoO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgICAgIDogIShkYXRhWzBdIGluIG9iamVjdClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgZGF0YSA9IG1hdGNoRGF0YVtpbmRleF07XG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgICAgIHNyY1ZhbHVlID0gZGF0YVsxXTtcblxuICAgICAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzdGFjayA9IG5ldyBTdGFjaztcbiAgICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICAgICAgOiByZXN1bHRcbiAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzUmVnRXhwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNSZWdFeHAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHJlZ2V4cFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhIXR5cGVkQXJyYXlUYWdzW2Jhc2VHZXRUYWcodmFsdWUpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gICAgICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gICAgICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzSW4ob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubHRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUx0KHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDwgb3RoZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWFwYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdFsrK2luZGV4XSA9IGl0ZXJhdGVlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgICAgIGlmIChtYXRjaERhdGEubGVuZ3RoID09IDEgJiYgbWF0Y2hEYXRhWzBdWzJdKSB7XG4gICAgICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWF0Y2hlc1Byb3BlcnR5YCB3aGljaCBkb2Vzbid0IGNsb25lIGBzcmNWYWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUodG9LZXkocGF0aCksIHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gZ2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICAgICAgOiBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1lcmdlYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcmNJbmRleCBUaGUgaW5kZXggb2YgYHNvdXJjZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgbWVyZ2VkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmIChvYmplY3QgPT09IHNvdXJjZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBiYXNlRm9yKHNvdXJjZSwgZnVuY3Rpb24oc3JjVmFsdWUsIGtleSkge1xuICAgICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICAgICAgYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgYmFzZU1lcmdlLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZU1lcmdlYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBtZXJnZXMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAgICAgKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG1lcmdlRnVuYyBUaGUgZnVuY3Rpb24gdG8gbWVyZ2UgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICAgICAqICBjb3VudGVycGFydHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICAgICAgdmFyIG9ialZhbHVlID0gc2FmZUdldChvYmplY3QsIGtleSksXG4gICAgICAgICAgc3JjVmFsdWUgPSBzYWZlR2V0KHNvdXJjZSwga2V5KSxcbiAgICAgICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgc3RhY2tlZCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIGlzQ29tbW9uID0gbmV3VmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkoc3JjVmFsdWUpLFxuICAgICAgICAgICAgaXNCdWZmID0gIWlzQXJyICYmIGlzQnVmZmVyKHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgIGlmIChpc0FyciB8fCBpc0J1ZmYgfHwgaXNUeXBlZCkge1xuICAgICAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNvcHlBcnJheShvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVCdWZmZXIoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc1R5cGVkKSB7XG4gICAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgaWYgKGlzQXJndW1lbnRzKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoIWlzT2JqZWN0KG9ialZhbHVlKSB8fCBpc0Z1bmN0aW9uKG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNDb21tb24pIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICBtZXJnZUZ1bmMobmV3VmFsdWUsIHNyY1ZhbHVlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgYXNzaWduTWVyZ2VWYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm50aGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbnRoIGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTnRoKGFycmF5LCBuKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbiArPSBuIDwgMCA/IGxlbmd0aCA6IDA7XG4gICAgICByZXR1cm4gaXNJbmRleChuLCBsZW5ndGgpID8gYXJyYXlbbl0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ub3JkZXJCeWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gb3JkZXJzIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpIHtcbiAgICAgIGlmIChpdGVyYXRlZXMubGVuZ3RoKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShpdGVyYXRlZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICByZXR1cm4gYmFzZUdldCh2YWx1ZSwgaXRlcmF0ZWUubGVuZ3RoID09PSAxID8gaXRlcmF0ZWVbMF0gOiBpdGVyYXRlZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRlZTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRlZXMgPSBbaWRlbnRpdHldO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VNYXAoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICB2YXIgY3JpdGVyaWEgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7ICdjcml0ZXJpYSc6IGNyaXRlcmlhLCAnaW5kZXgnOiArK2luZGV4LCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBiYXNlU29ydEJ5KHJlc3VsdCwgZnVuY3Rpb24ob2JqZWN0LCBvdGhlcikge1xuICAgICAgICByZXR1cm4gY29tcGFyZU11bHRpcGxlKG9iamVjdCwgb3RoZXIsIG9yZGVycyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5waWNrYCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBoYXNJbihvYmplY3QsIHBhdGgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgIGBfLnBpY2tCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGlja0J5KG9iamVjdCwgcGF0aHMsIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IHt9O1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuXG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIHBhdGgpKSB7XG4gICAgICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEFsbEJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAgICogc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4T2YgPSBjb21wYXJhdG9yID8gYmFzZUluZGV4T2ZXaXRoIDogYmFzZUluZGV4T2YsXG4gICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICAgIHNlZW4gPSBhcnJheTtcblxuICAgICAgaWYgKGFycmF5ID09PSB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWVzID0gY29weUFycmF5KHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgc2VlbiA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBmcm9tSW5kZXggPSAwLFxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIHdoaWxlICgoZnJvbUluZGV4ID0gaW5kZXhPZihzZWVuLCBjb21wdXRlZCwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSkgPiAtMSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSBhcnJheSkge1xuICAgICAgICAgICAgc3BsaWNlLmNhbGwoc2VlbiwgZnJvbUluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3BsaWNlLmNhbGwoYXJyYXksIGZyb21JbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wdWxsQXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaW5kaXZpZHVhbFxuICAgICAqIGluZGV4ZXMgb3IgY2FwdHVyaW5nIHRoZSByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyW119IGluZGV4ZXMgVGhlIGluZGV4ZXMgb2YgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VQdWxsQXQoYXJyYXksIGluZGV4ZXMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA/IGluZGV4ZXMubGVuZ3RoIDogMCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBpZiAobGVuZ3RoID09IGxhc3RJbmRleCB8fCBpbmRleCAhPT0gcHJldmlvdXMpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXMgPSBpbmRleDtcbiAgICAgICAgICBpZiAoaXNJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBpbmRleCwgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhc2VVbnNldChhcnJheSwgaW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJhbmRvbWAgd2l0aG91dCBzdXBwb3J0IGZvciByZXR1cm5pbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbG93ZXIgVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcikge1xuICAgICAgcmV0dXJuIGxvd2VyICsgbmF0aXZlRmxvb3IobmF0aXZlUmFuZG9tKCkgKiAodXBwZXIgLSBsb3dlciArIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5nZWAgYW5kIGBfLnJhbmdlUmlnaHRgIHdoaWNoIGRvZXNuJ3RcbiAgICAgKiBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgobmF0aXZlQ2VpbCgoZW5kIC0gc3RhcnQpIC8gKHN0ZXAgfHwgMSkpLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ICs9IHN0ZXA7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlcGVhdGAgd2hpY2ggZG9lc24ndCBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXBlYXQoc3RyaW5nLCBuKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICBpZiAoIXN0cmluZyB8fCBuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgLy8gTGV2ZXJhZ2UgdGhlIGV4cG9uZW50aWF0aW9uIGJ5IHNxdWFyaW5nIGFsZ29yaXRobSBmb3IgYSBmYXN0ZXIgcmVwZWF0LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V4cG9uZW50aWF0aW9uX2J5X3NxdWFyaW5nIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuICUgMikge1xuICAgICAgICAgIHJlc3VsdCArPSBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgbiA9IG5hdGl2ZUZsb29yKG4gLyAyKTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICBzdHJpbmcgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChuKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXN0YCB3aGljaCBkb2Vzbid0IHZhbGlkYXRlIG9yIGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zYW1wbGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTYW1wbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIGFycmF5U2FtcGxlKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlU2l6ZWAgd2l0aG91dCBwYXJhbSBndWFyZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlU2l6ZShjb2xsZWN0aW9uLCBuKSB7XG4gICAgICB2YXIgYXJyYXkgPSB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoYXJyYXksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zZXRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgfVxuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICAgICAgbmVzdGVkID0gb2JqZWN0O1xuXG4gICAgICB3aGlsZSAobmVzdGVkICE9IG51bGwgJiYgKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICAgICAgbmV3VmFsdWUgPSB2YWx1ZTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJyB8fCBrZXkgPT09ICdjb25zdHJ1Y3RvcicgfHwga2V5ID09PSAncHJvdG90eXBlJykge1xuICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5kZXggIT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICAgICAgbmV3VmFsdWUgPSBjdXN0b21pemVyID8gY3VzdG9taXplcihvYmpWYWx1ZSwga2V5LCBuZXN0ZWQpIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgICAgICA/IG9ialZhbHVlXG4gICAgICAgICAgICAgIDogKGlzSW5kZXgocGF0aFtpbmRleCArIDFdKSA/IFtdIDoge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3NpZ25WYWx1ZShuZXN0ZWQsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldERhdGFgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc29jaWF0ZSBtZXRhZGF0YSB3aXRoLlxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldERhdGEgPSAhbWV0YU1hcCA/IGlkZW50aXR5IDogZnVuY3Rpb24oZnVuYywgZGF0YSkge1xuICAgICAgbWV0YU1hcC5zZXQoZnVuYywgZGF0YSk7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYHNldFRvU3RyaW5nYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3RyaW5nIFRoZSBgdG9TdHJpbmdgIHJlc3VsdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBiYXNlU2V0VG9TdHJpbmcgPSAhZGVmaW5lUHJvcGVydHkgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIHN0cmluZykge1xuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAgICdlbnVtZXJhYmxlJzogZmFsc2UsXG4gICAgICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zaHVmZmxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYodmFsdWVzKGNvbGxlY3Rpb24pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zbGljZWAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICBzdGFydCA9IC1zdGFydCA+IGxlbmd0aCA/IDAgOiAobGVuZ3RoICsgc3RhcnQpO1xuICAgICAgfVxuICAgICAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IHN0YXJ0ID4gZW5kID8gMCA6ICgoZW5kIC0gc3RhcnQpID4+PiAwKTtcbiAgICAgIHN0YXJ0ID4+Pj0gMDtcblxuICAgICAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvbWVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9IHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgICByZXR1cm4gIXJlc3VsdDtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4YCB3aGljaFxuICAgICAqIHBlcmZvcm1zIGEgYmluYXJ5IHNlYXJjaCBvZiBgYXJyYXlgIHRvIGRldGVybWluZSB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYFxuICAgICAqIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG8gbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtyZXRIaWdoZXN0XSBTcGVjaWZ5IHJldHVybmluZyB0aGUgaGlnaGVzdCBxdWFsaWZpZWQgaW5kZXguXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHJldEhpZ2hlc3QpIHtcbiAgICAgIHZhciBsb3cgPSAwLFxuICAgICAgICAgIGhpZ2ggPSBhcnJheSA9PSBudWxsID8gbG93IDogYXJyYXkubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIHZhbHVlID09PSB2YWx1ZSAmJiBoaWdoIDw9IEhBTEZfTUFYX0FSUkFZX0xFTkdUSCkge1xuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDEsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gYXJyYXlbbWlkXTtcblxuICAgICAgICAgIGlmIChjb21wdXRlZCAhPT0gbnVsbCAmJiAhaXNTeW1ib2woY29tcHV0ZWQpICYmXG4gICAgICAgICAgICAgIChyZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWdoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaWRlbnRpdHksIHJldEhpZ2hlc3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZEluZGV4QnlgIGFuZCBgXy5zb3J0ZWRMYXN0SW5kZXhCeWBcbiAgICAgKiB3aGljaCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGVcbiAgICAgKiB0aGVpciBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoaGlnaCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cblxuICAgICAgdmFsdWUgPSBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICB2YXIgdmFsSXNOYU4gPSB2YWx1ZSAhPT0gdmFsdWUsXG4gICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSksXG4gICAgICAgICAgdmFsSXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICB2YXIgbWlkID0gbmF0aXZlRmxvb3IoKGxvdyArIGhpZ2gpIC8gMiksXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKGFycmF5W21pZF0pLFxuICAgICAgICAgICAgb3RoSXNEZWZpbmVkID0gY29tcHV0ZWQgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIG90aElzTnVsbCA9IGNvbXB1dGVkID09PSBudWxsLFxuICAgICAgICAgICAgb3RoSXNSZWZsZXhpdmUgPSBjb21wdXRlZCA9PT0gY29tcHV0ZWQsXG4gICAgICAgICAgICBvdGhJc1N5bWJvbCA9IGlzU3ltYm9sKGNvbXB1dGVkKTtcblxuICAgICAgICBpZiAodmFsSXNOYU4pIHtcbiAgICAgICAgICB2YXIgc2V0TG93ID0gcmV0SGlnaGVzdCB8fCBvdGhJc1JlZmxleGl2ZTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1VuZGVmaW5lZCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIChyZXRIaWdoZXN0IHx8IG90aElzRGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNOdWxsKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc051bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gb3RoSXNSZWZsZXhpdmUgJiYgb3RoSXNEZWZpbmVkICYmICFvdGhJc051bGwgJiYgKHJldEhpZ2hlc3QgfHwgIW90aElzU3ltYm9sKTtcbiAgICAgICAgfSBlbHNlIGlmIChvdGhJc051bGwgfHwgb3RoSXNTeW1ib2wpIHtcbiAgICAgICAgICBzZXRMb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRMb3cgPSByZXRIaWdoZXN0ID8gKGNvbXB1dGVkIDw9IHZhbHVlKSA6IChjb21wdXRlZCA8IHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2V0TG93KSB7XG4gICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlTWluKGhpZ2gsIE1BWF9BUlJBWV9JTkRFWCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydGVkVW5pcWAgYW5kIGBfLnNvcnRlZFVuaXFCeWAgd2l0aG91dFxuICAgICAqIHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZFVuaXEoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgaWYgKCFpbmRleCB8fCAhZXEoY29tcHV0ZWQsIHNlZW4pKSB7XG4gICAgICAgICAgdmFyIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b051bWJlcmAgd2hpY2ggZG9lc24ndCBlbnN1cmUgY29ycmVjdFxuICAgICAqIGNvbnZlcnNpb25zIG9mIGJpbmFyeSwgaGV4YWRlY2ltYWwsIG9yIG9jdGFsIHN0cmluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VUb051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICByZXR1cm4gK3ZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICAgICAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5pcUJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXMsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGlzQ29tbW9uID0gdHJ1ZSxcbiAgICAgICAgICByZXN1bHQgPSBbXSxcbiAgICAgICAgICBzZWVuID0gcmVzdWx0O1xuXG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgICAgIGlmIChzZXQpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9BcnJheShzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgIGluY2x1ZGVzID0gY2FjaGVIYXM7XG4gICAgICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICAgICAgaWYgKGlzQ29tbW9uICYmIGNvbXB1dGVkID09PSBjb21wdXRlZCkge1xuICAgICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgICAgIGlmIChzZWVuW3NlZW5JbmRleF0gPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXMoc2VlbiwgY29tcHV0ZWQsIGNvbXBhcmF0b3IpKSB7XG4gICAgICAgICAgaWYgKHNlZW4gIT09IHJlc3VsdCkge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcHJvcGVydHkgcGF0aCB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsIHx8IGRlbGV0ZSBvYmplY3RbdG9LZXkobGFzdChwYXRoKSldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVwZGF0ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIHBhdGggY3JlYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgcmV0dXJuIGJhc2VTZXQob2JqZWN0LCBwYXRoLCB1cGRhdGVyKGJhc2VHZXQob2JqZWN0LCBwYXRoKSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy5kcm9wV2hpbGVgIGFuZCBgXy50YWtlV2hpbGVgXG4gICAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEcm9wXSBTcGVjaWZ5IGRyb3BwaW5nIGVsZW1lbnRzIGluc3RlYWQgb2YgdGFraW5nIHRoZW0uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VXaGlsZShhcnJheSwgcHJlZGljYXRlLCBpc0Ryb3AsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xO1xuXG4gICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSAmJlxuICAgICAgICBwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7fVxuXG4gICAgICByZXR1cm4gaXNEcm9wXG4gICAgICAgID8gYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gMCA6IGluZGV4KSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IGxlbmd0aCkpXG4gICAgICAgIDogYmFzZVNsaWNlKGFycmF5LCAoZnJvbVJpZ2h0ID8gaW5kZXggKyAxIDogMCksIChmcm9tUmlnaHQgPyBsZW5ndGggOiBpbmRleCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGB3cmFwcGVyVmFsdWVgIHdoaWNoIHJldHVybnMgdGhlIHJlc3VsdCBvZlxuICAgICAqIHBlcmZvcm1pbmcgYSBzZXF1ZW5jZSBvZiBhY3Rpb25zIG9uIHRoZSB1bndyYXBwZWQgYHZhbHVlYCwgd2hlcmUgZWFjaFxuICAgICAqIHN1Y2Nlc3NpdmUgYWN0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gYWN0aW9ucyBBY3Rpb25zIHRvIHBlcmZvcm0gdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV3JhcHBlclZhbHVlKHZhbHVlLCBhY3Rpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWU7XG4gICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnZhbHVlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UoYWN0aW9ucywgZnVuY3Rpb24ocmVzdWx0LCBhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbi5mdW5jLmFwcGx5KGFjdGlvbi50aGlzQXJnLCBhcnJheVB1c2goW3Jlc3VsdF0sIGFjdGlvbi5hcmdzKSk7XG4gICAgICB9LCByZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIG1ldGhvZHMgbGlrZSBgXy54b3JgLCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcywgdGhhdCBhY2NlcHRzIGFuIGFycmF5IG9mIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheXMgVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgdmFsdWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VYb3IoYXJyYXlzLCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVVuaXEoYXJyYXlzWzBdKSA6IFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJyYXlzW2luZGV4XSxcbiAgICAgICAgICAgIG90aEluZGV4ID0gLTE7XG5cbiAgICAgICAgd2hpbGUgKCsrb3RoSW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3RoSW5kZXggIT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBiYXNlRGlmZmVyZW5jZShyZXN1bHRbaW5kZXhdIHx8IGFycmF5LCBhcnJheXNbb3RoSW5kZXhdLCBpdGVyYXRlZSwgY29tcGFyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4ocmVzdWx0LCAxKSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy56aXBPYmplY3RgIHdoaWNoIGFzc2lnbnMgdmFsdWVzIHVzaW5nIGBhc3NpZ25GdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbkZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFzc2lnbiB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWmlwT2JqZWN0KHByb3BzLCB2YWx1ZXMsIGFzc2lnbkZ1bmMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aCxcbiAgICAgICAgICB2YWxzTGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gaW5kZXggPCB2YWxzTGVuZ3RoID8gdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgYXNzaWduRnVuYyhyZXN1bHQsIHByb3BzW2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGFuIGVtcHR5IGFycmF5IGlmIGl0J3Mgbm90IGFuIGFycmF5IGxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgdGhlIGNhc3QgYXJyYXktbGlrZSBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KHZhbHVlKSA/IHZhbHVlIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBgaWRlbnRpdHlgIGlmIGl0J3Mgbm90IGEgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGNhc3QgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicgPyB2YWx1ZSA6IGlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBgYmFzZVJlc3RgIGFsaWFzIHdoaWNoIGNhbiBiZSByZXBsYWNlZCB3aXRoIGBpZGVudGl0eWAgYnkgbW9kdWxlXG4gICAgICogcmVwbGFjZW1lbnQgcGx1Z2lucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHR5cGUge0Z1bmN0aW9ufVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgdmFyIGNhc3RSZXN0ID0gYmFzZVJlc3Q7XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGFydCBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc2ltcGxlIHdyYXBwZXIgYXJvdW5kIHRoZSBnbG9iYWwgW2BjbGVhclRpbWVvdXRgXShodHRwczovL21kbi5pby9jbGVhclRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcnxPYmplY3R9IGlkIFRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdCBvZiB0aGUgdGltZXIgdG8gY2xlYXIuXG4gICAgICovXG4gICAgdmFyIGNsZWFyVGltZW91dCA9IGN0eENsZWFyVGltZW91dCB8fCBmdW5jdGlvbihpZCkge1xuICAgICAgcmV0dXJuIHJvb3QuY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUJ1ZmZlcihidWZmZXIsIGlzRGVlcCkge1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgbmV3IFVpbnQ4QXJyYXkocmVzdWx0KS5zZXQobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURhdGFWaWV3KGRhdGFWaWV3LCBpc0RlZXApIHtcbiAgICAgIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGByZWdleHBgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcmVnZXhwIFRoZSByZWdleHAgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVJlZ0V4cChyZWdleHApIHtcbiAgICAgIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgICAgIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgICAgIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHZhbHVlcyB0byBzb3J0IHRoZW0gaW4gYXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGB2YWx1ZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gb3RoZXIpIHtcbiAgICAgICAgdmFyIHZhbElzRGVmaW5lZCA9IHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgICAgIHZhbElzUmVmbGV4aXZlID0gdmFsdWUgPT09IHZhbHVlLFxuICAgICAgICAgICAgdmFsSXNTeW1ib2wgPSBpc1N5bWJvbCh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBvdGhlciA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gb3RoZXIgPT09IG90aGVyLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICAgICAgaWYgKCghb3RoSXNOdWxsICYmICFvdGhJc1N5bWJvbCAmJiAhdmFsSXNTeW1ib2wgJiYgdmFsdWUgPiBvdGhlcikgfHxcbiAgICAgICAgICAgICh2YWxJc1N5bWJvbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUgJiYgIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghdmFsSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIXZhbElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdmFsSXNOdWxsICYmICF2YWxJc1N5bWJvbCAmJiAhb3RoSXNTeW1ib2wgJiYgdmFsdWUgPCBvdGhlcikgfHxcbiAgICAgICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgICAgICAob3RoSXNOdWxsICYmIHZhbElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICghb3RoSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9yZGVyQnlgIHRvIGNvbXBhcmUgbXVsdGlwbGUgcHJvcGVydGllcyBvZiBhIHZhbHVlIHRvIGFub3RoZXJcbiAgICAgKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAgICAgKlxuICAgICAqIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsXG4gICAgICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICAgICAqIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc29ydCBvcmRlciBpbmRpY2F0b3IgZm9yIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIG9iakNyaXRlcmlhID0gb2JqZWN0LmNyaXRlcmlhLFxuICAgICAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICAgICAgbGVuZ3RoID0gb2JqQ3JpdGVyaWEubGVuZ3RoLFxuICAgICAgICAgIG9yZGVyc0xlbmd0aCA9IG9yZGVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjb21wYXJlQXNjZW5kaW5nKG9iakNyaXRlcmlhW2luZGV4XSwgb3RoQ3JpdGVyaWFbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAqIChvcmRlciA9PSAnZGVzYycgPyAtMSA6IDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBGaXhlcyBhbiBgQXJyYXkjc29ydGAgYnVnIGluIHRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgYXBwbGljYXRpb25zXG4gICAgICAvLyB0aGF0IGNhdXNlcyBpdCwgdW5kZXIgY2VydGFpbiBjaXJjdW1zdGFuY2VzLCB0byBwcm92aWRlIHRoZSBzYW1lIHZhbHVlIGZvclxuICAgICAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QuaW5kZXggLSBvdGhlci5pbmRleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHRoYXQgaXMgdGhlIGNvbXBvc2l0aW9uIG9mIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cyxcbiAgICAgKiBwbGFjZWhvbGRlcnMsIGFuZCBwcm92aWRlZCBhcmd1bWVudHMgaW50byBhIHNpbmdsZSBhcnJheSBvZiBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpIHtcbiAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJncy5sZW5ndGgsXG4gICAgICAgICAgaG9sZGVyc0xlbmd0aCA9IGhvbGRlcnMubGVuZ3RoLFxuICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgIGxlZnRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlZnRMZW5ndGggKyByYW5nZUxlbmd0aCksXG4gICAgICAgICAgaXNVbmN1cnJpZWQgPSAhaXNDdXJyaWVkO1xuXG4gICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbaG9sZGVyc1thcmdzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKHJhbmdlTGVuZ3RoLS0pIHtcbiAgICAgICAgcmVzdWx0W2xlZnRJbmRleCsrXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGNvbXBvc2VBcmdzYCBleGNlcHQgdGhhdCB0aGUgYXJndW1lbnRzIGNvbXBvc2l0aW9uXG4gICAgICogaXMgdGFpbG9yZWQgZm9yIGBfLnBhcnRpYWxSaWdodGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIGFwcGVuZCB0byB0aG9zZSBwcm92aWRlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBob2xkZXJzIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtcyB7Ym9vbGVhbn0gW2lzQ3VycmllZF0gU3BlY2lmeSBjb21wb3NpbmcgZm9yIGEgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21wb3NlZCBhcmd1bWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcG9zZUFyZ3NSaWdodChhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNJbmRleCA9IC0xLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICByaWdodEluZGV4ID0gLTEsXG4gICAgICAgICAgcmlnaHRMZW5ndGggPSBwYXJ0aWFscy5sZW5ndGgsXG4gICAgICAgICAgcmFuZ2VMZW5ndGggPSBuYXRpdmVNYXgoYXJnc0xlbmd0aCAtIGhvbGRlcnNMZW5ndGgsIDApLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KHJhbmdlTGVuZ3RoICsgcmlnaHRMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrYXJnc0luZGV4IDwgcmFuZ2VMZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2FyZ3NJbmRleF0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICB9XG4gICAgICB2YXIgb2Zmc2V0ID0gYXJnc0luZGV4O1xuICAgICAgd2hpbGUgKCsrcmlnaHRJbmRleCA8IHJpZ2h0TGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtvZmZzZXQgKyByaWdodEluZGV4XSA9IHBhcnRpYWxzW3JpZ2h0SW5kZXhdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraG9sZGVyc0luZGV4IDwgaG9sZGVyc0xlbmd0aCkge1xuICAgICAgICBpZiAoaXNVbmN1cnJpZWQgfHwgYXJnc0luZGV4IDwgYXJnc0xlbmd0aCkge1xuICAgICAgICAgIHJlc3VsdFtvZmZzZXQgKyBob2xkZXJzW2hvbGRlcnNJbmRleF1dID0gYXJnc1thcmdzSW5kZXgrK107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheT1bXV0gVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2UsIGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gICAgICBhcnJheSB8fCAoYXJyYXkgPSBBcnJheShsZW5ndGgpKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gICAgICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICAgICAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgb3duIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBhbmQgaW5oZXJpdGVkIHN5bWJvbHMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmdyb3VwQnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2luaXRpYWxpemVyXSBUaGUgYWNjdW11bGF0b3Igb2JqZWN0IGluaXRpYWxpemVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFnZ3JlZ2F0b3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQWdncmVnYXRvcihzZXR0ZXIsIGluaXRpYWxpemVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlBZ2dyZWdhdG9yIDogYmFzZUFnZ3JlZ2F0b3IsXG4gICAgICAgICAgICBhY2N1bXVsYXRvciA9IGluaXRpYWxpemVyID8gaW5pdGlhbGl6ZXIoKSA6IHt9O1xuXG4gICAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIHNldHRlciwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBhY2N1bXVsYXRvcik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmFzc2lnbmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFzc2lnbmVyIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFzc2lnbmVyKGFzc2lnbmVyKSB7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVuZ3RoID0gc291cmNlcy5sZW5ndGgsXG4gICAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGN1c3RvbWl6ZXIgPSAoYXNzaWduZXIubGVuZ3RoID4gMyAmJiB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgYXNzaWduZXIob2JqZWN0LCBzb3VyY2UsIGluZGV4LCBjdXN0b21pemVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcblxuICAgICAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGludm9rZSBpdCB3aXRoIHRoZSBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShpc0JpbmQgPyB0aGlzQXJnIDogdGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcblxuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgICAgICA6IHN0cmluZy5jaGFyQXQoMCk7XG5cbiAgICAgICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICAgICAgOiBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgICAgICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3VuZGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBpbnN0YW5jZSBvZiBgQ3RvcmAgcmVnYXJkbGVzcyBvZlxuICAgICAqIHdoZXRoZXIgaXQgd2FzIGludm9rZWQgYXMgcGFydCBvZiBhIGBuZXdgIGV4cHJlc3Npb24gb3IgYnkgYGNhbGxgIG9yIGBhcHBseWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IEN0b3IgVGhlIGNvbnN0cnVjdG9yIHRvIHdyYXAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDdG9yKEN0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVXNlIGEgYHN3aXRjaGAgc3RhdGVtZW50IHRvIHdvcmsgd2l0aCBjbGFzcyBjb25zdHJ1Y3RvcnMuIFNlZVxuICAgICAgICAvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWZ1bmN0aW9uLW9iamVjdHMtY2FsbC10aGlzYXJndW1lbnQtYXJndW1lbnRzbGlzdFxuICAgICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDdG9yO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0pO1xuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0pO1xuICAgICAgICAgIGNhc2UgNzogcmV0dXJuIG5ldyBDdG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10sIGFyZ3NbNF0sIGFyZ3NbNV0sIGFyZ3NbNl0pO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGJhc2VDcmVhdGUoQ3Rvci5wcm90b3R5cGUpLFxuICAgICAgICAgICAgcmVzdWx0ID0gQ3Rvci5hcHBseSh0aGlzQmluZGluZywgYXJncyk7XG5cbiAgICAgICAgLy8gTWltaWMgdGhlIGNvbnN0cnVjdG9yJ3MgYHJldHVybmAgYmVoYXZpb3IuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2VzNS5naXRodWIuaW8vI3gxMy4yLjIgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiB0aGlzQmluZGluZztcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGVuYWJsZSBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhcml0eSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3VycnkoZnVuYywgYml0bWFzaywgYXJpdHkpIHtcbiAgICAgIHZhciBDdG9yID0gY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoLFxuICAgICAgICAgICAgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlcik7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICBhcmdzW2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvbGRlcnMgPSAobGVuZ3RoIDwgMyAmJiBhcmdzWzBdICE9PSBwbGFjZWhvbGRlciAmJiBhcmdzW2xlbmd0aCAtIDFdICE9PSBwbGFjZWhvbGRlcilcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG5cbiAgICAgICAgbGVuZ3RoIC09IGhvbGRlcnMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXJncywgaG9sZGVycywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5IC0gbGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZpbmRgIG9yIGBfLmZpbmRMYXN0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZmluZEluZGV4RnVuYyBUaGUgZnVuY3Rpb24gdG8gZmluZCB0aGUgY29sbGVjdGlvbiBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmaW5kIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbmQoZmluZEluZGV4RnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICAgIHZhciBpdGVyYWJsZSA9IE9iamVjdChjb2xsZWN0aW9uKTtcbiAgICAgICAgaWYgKCFpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHZhciBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICAgICAgY29sbGVjdGlvbiA9IGtleXMoY29sbGVjdGlvbik7XG4gICAgICAgICAgcHJlZGljYXRlID0gZnVuY3Rpb24oa2V5KSB7IHJldHVybiBpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKTsgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBmaW5kSW5kZXhGdW5jKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZnJvbUluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluZGV4ID4gLTEgPyBpdGVyYWJsZVtpdGVyYXRlZSA/IGNvbGxlY3Rpb25baW5kZXhdIDogaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYF8uZmxvd2Agb3IgYF8uZmxvd1JpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxvdyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGbG93KGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmNzKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmdW5jcy5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHByZXJlcSA9IExvZGFzaFdyYXBwZXIucHJvdG90eXBlLnRocnU7XG5cbiAgICAgICAgaWYgKGZyb21SaWdodCkge1xuICAgICAgICAgIGZ1bmNzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIHZhciBmdW5jID0gZnVuY3NbaW5kZXhdO1xuICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmVyZXEgJiYgIXdyYXBwZXIgJiYgZ2V0RnVuY05hbWUoZnVuYykgPT0gJ3dyYXBwZXInKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IG5ldyBMb2Rhc2hXcmFwcGVyKFtdLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSB3cmFwcGVyID8gaW5kZXggOiBsZW5ndGg7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgZnVuYyA9IGZ1bmNzW2luZGV4XTtcblxuICAgICAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgICAgICBkYXRhID0gZnVuY05hbWUgPT0gJ3dyYXBwZXInID8gZ2V0RGF0YShmdW5jKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChkYXRhICYmIGlzTGF6aWFibGUoZGF0YVswXSkgJiZcbiAgICAgICAgICAgICAgICBkYXRhWzFdID09IChXUkFQX0FSWV9GTEFHIHwgV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpICYmXG4gICAgICAgICAgICAgICAgIWRhdGFbNF0ubGVuZ3RoICYmIGRhdGFbOV0gPT0gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSB3cmFwcGVyW2dldEZ1bmNOYW1lKGRhdGFbMF0pXS5hcHBseSh3cmFwcGVyLCBkYXRhWzNdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd3JhcHBlciA9IChmdW5jLmxlbmd0aCA9PSAxICYmIGlzTGF6aWFibGUoZnVuYykpXG4gICAgICAgICAgICAgID8gd3JhcHBlcltmdW5jTmFtZV0oKVxuICAgICAgICAgICAgICA6IHdyYXBwZXIudGhydShmdW5jKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgICB2YWx1ZSA9IGFyZ3NbMF07XG5cbiAgICAgICAgICBpZiAod3JhcHBlciAmJiBhcmdzLmxlbmd0aCA9PSAxICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gd3JhcHBlci5wbGFudCh2YWx1ZSkudmFsdWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbGVuZ3RoID8gZnVuY3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3MpIDogdmFsdWU7XG5cbiAgICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZnVuY3NbaW5kZXhdLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCBvcHRpb25hbCBgdGhpc2BcbiAgICAgKiBiaW5kaW5nIG9mIGB0aGlzQXJnYCwgcGFydGlhbCBhcHBsaWNhdGlvbiwgYW5kIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7Kn0gW3RoaXNBcmddIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNSaWdodF0gVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWRcbiAgICAgKiAgdG8gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc1JpZ2h0XSBUaGUgYHBhcnRpYWxzUmlnaHRgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSHlicmlkKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBwYXJ0aWFsc1JpZ2h0LCBob2xkZXJzUmlnaHQsIGFyZ1BvcywgYXJ5LCBhcml0eSkge1xuICAgICAgdmFyIGlzQXJ5ID0gYml0bWFzayAmIFdSQVBfQVJZX0ZMQUcsXG4gICAgICAgICAgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIGlzQmluZEtleSA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfS0VZX0ZMQUcsXG4gICAgICAgICAgaXNDdXJyaWVkID0gYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpLFxuICAgICAgICAgIGlzRmxpcCA9IGJpdG1hc2sgJiBXUkFQX0ZMSVBfRkxBRyxcbiAgICAgICAgICBDdG9yID0gaXNCaW5kS2V5ID8gdW5kZWZpbmVkIDogY3JlYXRlQ3RvcihmdW5jKTtcblxuICAgICAgZnVuY3Rpb24gd3JhcHBlcigpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0N1cnJpZWQpIHtcbiAgICAgICAgICB2YXIgcGxhY2Vob2xkZXIgPSBnZXRIb2xkZXIod3JhcHBlciksXG4gICAgICAgICAgICAgIGhvbGRlcnNDb3VudCA9IGNvdW50SG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRpYWxzKSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzKGFyZ3MsIHBhcnRpYWxzLCBob2xkZXJzLCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFsc1JpZ2h0KSB7XG4gICAgICAgICAgYXJncyA9IGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBpc0N1cnJpZWQpO1xuICAgICAgICB9XG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzQ291bnQ7XG4gICAgICAgIGlmIChpc0N1cnJpZWQgJiYgbGVuZ3RoIDwgYXJpdHkpIHtcbiAgICAgICAgICB2YXIgbmV3SG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKGFyZ3MsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUmVjdXJyeShcbiAgICAgICAgICAgIGZ1bmMsIGJpdG1hc2ssIGNyZWF0ZUh5YnJpZCwgd3JhcHBlci5wbGFjZWhvbGRlciwgdGhpc0FyZyxcbiAgICAgICAgICAgIGFyZ3MsIG5ld0hvbGRlcnMsIGFyZ1BvcywgYXJ5LCBhcml0eSAtIGxlbmd0aFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRoaXNCaW5kaW5nID0gaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsXG4gICAgICAgICAgICBmbiA9IGlzQmluZEtleSA/IHRoaXNCaW5kaW5nW2Z1bmNdIDogZnVuYztcblxuICAgICAgICBsZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgICAgICAgaWYgKGFyZ1Bvcykge1xuICAgICAgICAgIGFyZ3MgPSByZW9yZGVyKGFyZ3MsIGFyZ1Bvcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGbGlwICYmIGxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBhcmdzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnkgJiYgYXJ5IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJncy5sZW5ndGggPSBhcnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikge1xuICAgICAgICAgIGZuID0gQ3RvciB8fCBjcmVhdGVDdG9yKGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uaW52ZXJ0QnlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBhY2N1bXVsYXRvciB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JdGVyYXRlZSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSBpdGVyYXRlZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52ZXJ0ZXIoc2V0dGVyLCB0b0l0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCB0b0l0ZXJhdGVlKGl0ZXJhdGVlKSwge30pO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIG1hdGhlbWF0aWNhbCBvcGVyYXRpb24gb24gdHdvIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3BlcmF0b3IgVGhlIGZ1bmN0aW9uIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHVzZWQgZm9yIGB1bmRlZmluZWRgIGFyZ3VtZW50cy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU1hdGhPcGVyYXRpb24ob3BlcmF0b3IsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvdGhlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb1N0cmluZyhvdGhlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlID0gYmFzZVRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICAgIG90aGVyID0gYmFzZVRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5vdmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gYXJyYXlGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG92ZXIgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlT3ZlcihhcnJheUZ1bmMpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihpdGVyYXRlZXMpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpO1xuICAgICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICAgIHZhciB0aGlzQXJnID0gdGhpcztcbiAgICAgICAgICByZXR1cm4gYXJyYXlGdW5jKGl0ZXJhdGVlcywgZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdGhpc0FyZywgYXJncyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyB0aGUgcGFkZGluZyBmb3IgYHN0cmluZ2AgYmFzZWQgb24gYGxlbmd0aGAuIFRoZSBgY2hhcnNgIHN0cmluZ1xuICAgICAqIGlzIHRydW5jYXRlZCBpZiB0aGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgZXhjZWVkcyBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aCBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhZGRpbmcobGVuZ3RoLCBjaGFycykge1xuICAgICAgY2hhcnMgPSBjaGFycyA9PT0gdW5kZWZpbmVkID8gJyAnIDogYmFzZVRvU3RyaW5nKGNoYXJzKTtcblxuICAgICAgdmFyIGNoYXJzTGVuZ3RoID0gY2hhcnMubGVuZ3RoO1xuICAgICAgaWYgKGNoYXJzTGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gY2hhcnNMZW5ndGggPyBiYXNlUmVwZWF0KGNoYXJzLCBsZW5ndGgpIDogY2hhcnM7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVJlcGVhdChjaGFycywgbmF0aXZlQ2VpbChsZW5ndGggLyBzdHJpbmdTaXplKGNoYXJzKSkpO1xuICAgICAgcmV0dXJuIGhhc1VuaWNvZGUoY2hhcnMpXG4gICAgICAgID8gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkocmVzdWx0KSwgMCwgbGVuZ3RoKS5qb2luKCcnKVxuICAgICAgICA6IHJlc3VsdC5zbGljZSgwLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmdcbiAgICAgKiBvZiBgdGhpc0FyZ2AgYW5kIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYXJ0aWFscyBUaGUgYXJndW1lbnRzIHRvIHByZXBlbmQgdG8gdGhvc2UgcHJvdmlkZWQgdG9cbiAgICAgKiAgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhcnRpYWwoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBpc0JpbmQgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBhcmdzSW5kZXggPSAtMSxcbiAgICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgbGVmdEluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlZnRMZW5ndGggKyBhcmdzTGVuZ3RoKSxcbiAgICAgICAgICAgIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcblxuICAgICAgICB3aGlsZSAoKytsZWZ0SW5kZXggPCBsZWZ0TGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXhdID0gcGFydGlhbHNbbGVmdEluZGV4XTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoYXJnc0xlbmd0aC0tKSB7XG4gICAgICAgICAgYXJnc1tsZWZ0SW5kZXgrK10gPSBhcmd1bWVudHNbKythcmdzSW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcHBseShmbiwgaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdyYXBwZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnJhbmdlYCBvciBgXy5yYW5nZVJpZ2h0YCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmFuZ2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmFuZ2UoZnJvbVJpZ2h0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RlcCAmJiB0eXBlb2Ygc3RlcCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdGFydCwgZW5kLCBzdGVwKSkge1xuICAgICAgICAgIGVuZCA9IHN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5zdXJlIHRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcCA9IHN0ZXAgPT09IHVuZGVmaW5lZCA/IChzdGFydCA8IGVuZCA/IDEgOiAtMSkgOiB0b0Zpbml0ZShzdGVwKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSYW5nZShzdGFydCwgZW5kLCBzdGVwLCBmcm9tUmlnaHQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHJlbGF0aW9uYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVsYXRpb25hbCBvcGVyYXRpb24gZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihvcGVyYXRvcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgICBpZiAoISh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgJiYgdHlwZW9mIG90aGVyID09ICdzdHJpbmcnKSkge1xuICAgICAgICAgIHZhbHVlID0gdG9OdW1iZXIodmFsdWUpO1xuICAgICAgICAgIG90aGVyID0gdG9OdW1iZXIob3RoZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcGVyYXRvcih2YWx1ZSwgb3RoZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gY29udGludWUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwRnVuYyBUaGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBgZnVuY2Agd3JhcHBlci5cbiAgICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVjdXJyeShmdW5jLCBiaXRtYXNrLCB3cmFwRnVuYywgcGxhY2Vob2xkZXIsIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0N1cnJ5ID0gYml0bWFzayAmIFdSQVBfQ1VSUllfRkxBRyxcbiAgICAgICAgICBuZXdIb2xkZXJzID0gaXNDdXJyeSA/IGhvbGRlcnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3SG9sZGVyc1JpZ2h0ID0gaXNDdXJyeSA/IHVuZGVmaW5lZCA6IGhvbGRlcnMsXG4gICAgICAgICAgbmV3UGFydGlhbHMgPSBpc0N1cnJ5ID8gcGFydGlhbHMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgbmV3UGFydGlhbHNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBwYXJ0aWFscztcblxuICAgICAgYml0bWFzayB8PSAoaXNDdXJyeSA/IFdSQVBfUEFSVElBTF9GTEFHIDogV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgYml0bWFzayAmPSB+KGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRyA6IFdSQVBfUEFSVElBTF9GTEFHKTtcblxuICAgICAgaWYgKCEoYml0bWFzayAmIFdSQVBfQ1VSUllfQk9VTkRfRkxBRykpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBuZXdQYXJ0aWFscywgbmV3SG9sZGVycywgbmV3UGFydGlhbHNSaWdodCxcbiAgICAgICAgbmV3SG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSB3cmFwRnVuYy5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgaWYgKGlzTGF6aWFibGUoZnVuYykpIHtcbiAgICAgICAgc2V0RGF0YShyZXN1bHQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHJlc3VsdCwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ucm91bmRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYE1hdGhgIG1ldGhvZCB0byB1c2Ugd2hlbiByb3VuZGluZy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByb3VuZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVSb3VuZChtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IE1hdGhbbWV0aG9kTmFtZV07XG4gICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyLCBwcmVjaXNpb24pIHtcbiAgICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyAwIDogbmF0aXZlTWluKHRvSW50ZWdlcihwcmVjaXNpb24pLCAyOTIpO1xuICAgICAgICBpZiAocHJlY2lzaW9uICYmIG5hdGl2ZUlzRmluaXRlKG51bWJlcikpIHtcbiAgICAgICAgICAvLyBTaGlmdCB3aXRoIGV4cG9uZW50aWFsIG5vdGF0aW9uIHRvIGF2b2lkIGZsb2F0aW5nLXBvaW50IGlzc3Vlcy5cbiAgICAgICAgICAvLyBTZWUgW01ETl0oaHR0cHM6Ly9tZG4uaW8vcm91bmQjRXhhbXBsZXMpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgdmFyIHBhaXIgPSAodG9TdHJpbmcobnVtYmVyKSArICdlJykuc3BsaXQoJ2UnKSxcbiAgICAgICAgICAgICAgdmFsdWUgPSBmdW5jKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gKyBwcmVjaXNpb24pKTtcblxuICAgICAgICAgIHBhaXIgPSAodG9TdHJpbmcodmFsdWUpICsgJ2UnKS5zcGxpdCgnZScpO1xuICAgICAgICAgIHJldHVybiArKHBhaXJbMF0gKyAnZScgKyAoK3BhaXJbMV0gLSBwcmVjaXNpb24pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYyhudW1iZXIpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IHNldC5cbiAgICAgKi9cbiAgICB2YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgcmV0dXJuIG5ldyBTZXQodmFsdWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLnRvUGFpcnNgIG9yIGBfLnRvUGFpcnNJbmAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFpcnMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlVG9QYWlycyhrZXlzRnVuYykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICB2YXIgdGFnID0gZ2V0VGFnKG9iamVjdCk7XG4gICAgICAgIGlmICh0YWcgPT0gbWFwVGFnKSB7XG4gICAgICAgICAgcmV0dXJuIG1hcFRvQXJyYXkob2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09IHNldFRhZykge1xuICAgICAgICAgIHJldHVybiBzZXRUb1BhaXJzKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJhc2VUb1BhaXJzKG9iamVjdCwga2V5c0Z1bmMob2JqZWN0KSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVpdGhlciBjdXJyaWVzIG9yIGludm9rZXMgYGZ1bmNgIHdpdGggb3B0aW9uYWxcbiAgICAgKiBgdGhpc2AgYmluZGluZyBhbmQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gZnVuYyBUaGUgZnVuY3Rpb24gb3IgbWV0aG9kIG5hbWUgdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgICAxIC0gYF8uYmluZGBcbiAgICAgKiAgICAyIC0gYF8uYmluZEtleWBcbiAgICAgKiAgICA0IC0gYF8uY3VycnlgIG9yIGBfLmN1cnJ5UmlnaHRgIG9mIGEgYm91bmQgZnVuY3Rpb25cbiAgICAgKiAgICA4IC0gYF8uY3VycnlgXG4gICAgICogICAxNiAtIGBfLmN1cnJ5UmlnaHRgXG4gICAgICogICAzMiAtIGBfLnBhcnRpYWxgXG4gICAgICogICA2NCAtIGBfLnBhcnRpYWxSaWdodGBcbiAgICAgKiAgMTI4IC0gYF8ucmVhcmdgXG4gICAgICogIDI1NiAtIGBfLmFyeWBcbiAgICAgKiAgNTEyIC0gYF8uZmxpcGBcbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbaG9sZGVyc10gVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJnUG9zXSBUaGUgYXJndW1lbnQgcG9zaXRpb25zIG9mIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcnldIFRoZSBhcml0eSBjYXAgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKCFpc0JpbmRLZXkgJiYgdHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGFydGlhbHMgPyBwYXJ0aWFscy5sZW5ndGggOiAwO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgYml0bWFzayAmPSB+KFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpO1xuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBhcnkgPSBhcnkgPT09IHVuZGVmaW5lZCA/IGFyeSA6IG5hdGl2ZU1heCh0b0ludGVnZXIoYXJ5KSwgMCk7XG4gICAgICBhcml0eSA9IGFyaXR5ID09PSB1bmRlZmluZWQgPyBhcml0eSA6IHRvSW50ZWdlcihhcml0eSk7XG4gICAgICBsZW5ndGggLT0gaG9sZGVycyA/IGhvbGRlcnMubGVuZ3RoIDogMDtcblxuICAgICAgaWYgKGJpdG1hc2sgJiBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRykge1xuICAgICAgICB2YXIgcGFydGlhbHNSaWdodCA9IHBhcnRpYWxzLFxuICAgICAgICAgICAgaG9sZGVyc1JpZ2h0ID0gaG9sZGVycztcblxuICAgICAgICBwYXJ0aWFscyA9IGhvbGRlcnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGdldERhdGEoZnVuYyk7XG5cbiAgICAgIHZhciBuZXdEYXRhID0gW1xuICAgICAgICBmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LFxuICAgICAgICBhcmdQb3MsIGFyeSwgYXJpdHlcbiAgICAgIF07XG5cbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIG1lcmdlRGF0YShuZXdEYXRhLCBkYXRhKTtcbiAgICAgIH1cbiAgICAgIGZ1bmMgPSBuZXdEYXRhWzBdO1xuICAgICAgYml0bWFzayA9IG5ld0RhdGFbMV07XG4gICAgICB0aGlzQXJnID0gbmV3RGF0YVsyXTtcbiAgICAgIHBhcnRpYWxzID0gbmV3RGF0YVszXTtcbiAgICAgIGhvbGRlcnMgPSBuZXdEYXRhWzRdO1xuICAgICAgYXJpdHkgPSBuZXdEYXRhWzldID0gbmV3RGF0YVs5XSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gKGlzQmluZEtleSA/IDAgOiBmdW5jLmxlbmd0aClcbiAgICAgICAgOiBuYXRpdmVNYXgobmV3RGF0YVs5XSAtIGxlbmd0aCwgMCk7XG5cbiAgICAgIGlmICghYXJpdHkgJiYgYml0bWFzayAmIChXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0NVUlJZX0ZMQUcgfCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcpO1xuICAgICAgfVxuICAgICAgaWYgKCFiaXRtYXNrIHx8IGJpdG1hc2sgPT0gV1JBUF9CSU5EX0ZMQUcpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUJpbmQoZnVuYywgYml0bWFzaywgdGhpc0FyZyk7XG4gICAgICB9IGVsc2UgaWYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHIHx8IGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KTtcbiAgICAgIH0gZWxzZSBpZiAoKGJpdG1hc2sgPT0gV1JBUF9QQVJUSUFMX0ZMQUcgfHwgYml0bWFzayA9PSAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX1BBUlRJQUxfRkxBRykpICYmICFob2xkZXJzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZUh5YnJpZC5hcHBseSh1bmRlZmluZWQsIG5ld0RhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIHNldHRlciA9IGRhdGEgPyBiYXNlU2V0RGF0YSA6IHNldERhdGE7XG4gICAgICByZXR1cm4gc2V0V3JhcFRvU3RyaW5nKHNldHRlcihyZXN1bHQsIG5ld0RhdGEpLCBmdW5jLCBiaXRtYXNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzYCB0byBjdXN0b21pemUgaXRzIGBfLmFzc2lnbkluYCB1c2UgdG8gYXNzaWduIHByb3BlcnRpZXNcbiAgICAgKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICAgICAqIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBvYmpWYWx1ZSBUaGUgZGVzdGluYXRpb24gdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgc291cmNlIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzQXNzaWduSW4ob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgcmV0dXJuIHNyY1ZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8uZGVmYXVsdHNEZWVwYCB0byBjdXN0b21pemUgaXRzIGBfLm1lcmdlYCB1c2UgdG8gbWVyZ2Ugc291cmNlXG4gICAgICogb2JqZWN0cyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdHMgdGhhdCBhcmUgcGFzc2VkIHRocnUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIG1lcmdlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHBhcmVudCBvYmplY3Qgb2YgYG9ialZhbHVlYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBzcmNWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqVmFsdWUpICYmIGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBtZXJnZSBvYmplY3RzIGFuZCBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgc3RhY2suc2V0KHNyY1ZhbHVlLCBvYmpWYWx1ZSk7XG4gICAgICAgIGJhc2VNZXJnZShvYmpWYWx1ZSwgc3JjVmFsdWUsIHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSwgc3RhY2spO1xuICAgICAgICBzdGFja1snZGVsZXRlJ10oc3JjVmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9ialZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZWQgYnkgYF8ub21pdGAgdG8gY3VzdG9taXplIGl0cyBgXy5jbG9uZURlZXBgIHVzZSB0byBvbmx5IGNsb25lIHBsYWluXG4gICAgICogb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHVuY2xvbmVkIHZhbHVlIG9yIGB1bmRlZmluZWRgIHRvIGRlZmVyIGNsb25pbmcgdG8gYF8uY2xvbmVEZWVwYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21PbWl0Q2xvbmUodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbHVlKSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgICAgIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgICAgIHZhciBvdGhTdGFja2VkID0gc3RhY2suZ2V0KG90aGVyKTtcbiAgICAgIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgICAgIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmIChzZWVuKSB7XG4gICAgICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gICAgICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICAgICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICAgICAgY2FzZSBzZXRUYWc6XG4gICAgICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAgICAgKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgICAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBvYmpTdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAob2JqU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBvYmpTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gb2JqZWN0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgICAgIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAgICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICAgICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAgICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggZmxhdHRlbnMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdFJlc3QoZnVuYykge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHVuZGVmaW5lZCwgZmxhdHRlbiksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAgICAgKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBtZXRhZGF0YSBmb3IgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgZ2V0RGF0YSA9ICFtZXRhTWFwID8gbm9vcCA6IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgIHJldHVybiBtZXRhTWFwLmdldChmdW5jKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmFtZSBvZiBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0RnVuY05hbWUoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IChmdW5jLm5hbWUgKyAnJyksXG4gICAgICAgICAgYXJyYXkgPSByZWFsTmFtZXNbcmVzdWx0XSxcbiAgICAgICAgICBsZW5ndGggPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywgcmVzdWx0KSA/IGFycmF5Lmxlbmd0aCA6IDA7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgZGF0YSA9IGFycmF5W2xlbmd0aF0sXG4gICAgICAgICAgICBvdGhlckZ1bmMgPSBkYXRhLmZ1bmM7XG4gICAgICAgIGlmIChvdGhlckZ1bmMgPT0gbnVsbCB8fCBvdGhlckZ1bmMgPT0gZnVuYykge1xuICAgICAgICAgIHJldHVybiBkYXRhLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXJndW1lbnQgcGxhY2Vob2xkZXIgdmFsdWUgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SG9sZGVyKGZ1bmMpIHtcbiAgICAgIHZhciBvYmplY3QgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaCwgJ3BsYWNlaG9sZGVyJykgPyBsb2Rhc2ggOiBmdW5jO1xuICAgICAgcmV0dXJuIG9iamVjdC5wbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBhcHByb3ByaWF0ZSBcIml0ZXJhdGVlXCIgZnVuY3Rpb24uIElmIGBfLml0ZXJhdGVlYCBpcyBjdXN0b21pemVkLFxuICAgICAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgY3VzdG9tIG1ldGhvZCwgb3RoZXJ3aXNlIGl0IHJldHVybnMgYGJhc2VJdGVyYXRlZWAuXG4gICAgICogSWYgYXJndW1lbnRzIGFyZSBwcm92aWRlZCwgdGhlIGNob3NlbiBmdW5jdGlvbiBpcyBpbnZva2VkIHdpdGggdGhlbSBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIHRoZSBjcmVhdGVkIGl0ZXJhdGVlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY2hvc2VuIGZ1bmN0aW9uIG9yIGl0cyByZXN1bHQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0SXRlcmF0ZWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoLml0ZXJhdGVlIHx8IGl0ZXJhdGVlO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0ID09PSBpdGVyYXRlZSA/IGJhc2VJdGVyYXRlZSA6IHJlc3VsdDtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gcmVzdWx0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgICAgIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICAgICAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgICAgIDogZGF0YS5tYXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gICAgICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gICAgICB0cnkge1xuICAgICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICBpZiAodW5tYXNrZWQpIHtcbiAgICAgICAgaWYgKGlzT3duKSB7XG4gICAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAgICAgKi9cbiAgICB2YXIgZ2V0U3ltYm9sc0luID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHdoaWxlIChvYmplY3QpIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgZ2V0U3ltYm9scyhvYmplY3QpKTtcbiAgICAgICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gICAgICovXG4gICAgdmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbiAgICAvLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG4gICAgaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgICAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAgICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgICAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gICAgICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmlldywgYXBwbHlpbmcgYW55IGB0cmFuc2Zvcm1zYCB0byB0aGUgYHN0YXJ0YCBhbmQgYGVuZGAgcG9zaXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSB2aWV3LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIFRoZSB0cmFuc2Zvcm1hdGlvbnMgdG8gYXBwbHkgdG8gdGhlIHZpZXcuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgYHN0YXJ0YCBhbmQgYGVuZGBcbiAgICAgKiAgcG9zaXRpb25zIG9mIHRoZSB2aWV3LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFZpZXcoc3RhcnQsIGVuZCwgdHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBkYXRhID0gdHJhbnNmb3Jtc1tpbmRleF0sXG4gICAgICAgICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XG4gICAgICAgICAgY2FzZSAnZHJvcCc6ICAgICAgc3RhcnQgKz0gc2l6ZTsgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZHJvcFJpZ2h0JzogZW5kIC09IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2UnOiAgICAgIGVuZCA9IG5hdGl2ZU1pbihlbmQsIHN0YXJ0ICsgc2l6ZSk7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3Rha2VSaWdodCc6IHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0LCBlbmQgLSBzaXplKTsgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7ICdzdGFydCc6IHN0YXJ0LCAnZW5kJzogZW5kIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgd3JhcHBlciBkZXRhaWxzIGZyb20gdGhlIGBzb3VyY2VgIGJvZHkgY29tbWVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3cmFwcGVyIGRldGFpbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0V3JhcERldGFpbHMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBzb3VyY2UubWF0Y2gocmVXcmFwRGV0YWlscyk7XG4gICAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS5zcGxpdChyZVNwbGl0RGV0YWlscykgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgaGFzRnVuYykge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pO1xuICAgICAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgfHwgKytpbmRleCAhPSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGxlbmd0aCA9IG9iamVjdCA9PSBudWxsID8gMCA6IG9iamVjdC5sZW5ndGg7XG4gICAgICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgICAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIGFycmF5IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVBcnJheShhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgYXNzaWduZWQgYnkgYFJlZ0V4cCNleGVjYC5cbiAgICAgIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgICAgICByZXN1bHQuaW5wdXQgPSBhcnJheS5pbnB1dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lT2JqZWN0KG9iamVjdCkge1xuICAgICAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICAgICAgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUgYmFzZWQgb24gaXRzIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICAgICAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTWFwYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBgU2V0YCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gICAgICB2YXIgQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lQXJyYXlCdWZmZXIob2JqZWN0KTtcblxuICAgICAgICBjYXNlIGJvb2xUYWc6XG4gICAgICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3IoK29iamVjdCk7XG5cbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBmbG9hdDMyVGFnOiBjYXNlIGZsb2F0NjRUYWc6XG4gICAgICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICAgICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVUeXBlZEFycmF5KG9iamVjdCwgaXNEZWVwKTtcblxuICAgICAgICBjYXNlIG1hcFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHdyYXBwZXIgYGRldGFpbHNgIGluIGEgY29tbWVudCBhdCB0aGUgdG9wIG9mIHRoZSBgc291cmNlYCBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlIFRoZSBzb3VyY2UgdG8gbW9kaWZ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gZGV0YWlscyBUaGUgZGV0YWlscyB0byBpbnNlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc291cmNlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgZGV0YWlscykge1xuICAgICAgdmFyIGxlbmd0aCA9IGRldGFpbHMubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICAgIH1cbiAgICAgIHZhciBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgZGV0YWlsc1tsYXN0SW5kZXhdID0gKGxlbmd0aCA+IDEgPyAnJiAnIDogJycpICsgZGV0YWlsc1tsYXN0SW5kZXhdO1xuICAgICAgZGV0YWlscyA9IGRldGFpbHMuam9pbihsZW5ndGggPiAyID8gJywgJyA6ICcgJyk7XG4gICAgICByZXR1cm4gc291cmNlLnJlcGxhY2UocmVXcmFwQ29tbWVudCwgJ3tcXG4vKiBbd3JhcHBlZCB3aXRoICcgKyBkZXRhaWxzICsgJ10gKi9cXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZsYXR0ZW5hYmxlIGBhcmd1bWVudHNgIG9iamVjdCBvciBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ZsYXR0ZW5hYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAgICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gaW5kZXggVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBpbmRleCBvciBrZXkgYXJndW1lbnQuXG4gICAgICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSBvYmplY3QgYXJndW1lbnQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgaW5kZXg7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJ1xuICAgICAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgICAgIDogKHR5cGUgPT0gJ3N0cmluZycgJiYgaW5kZXggaW4gb2JqZWN0KVxuICAgICAgICAgICkge1xuICAgICAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gICAgICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICAgICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGhhcyBhIGxhenkgY291bnRlcnBhcnQsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xhemlhYmxlKGZ1bmMpIHtcbiAgICAgIHZhciBmdW5jTmFtZSA9IGdldEZ1bmNOYW1lKGZ1bmMpLFxuICAgICAgICAgIG90aGVyID0gbG9kYXNoW2Z1bmNOYW1lXTtcblxuICAgICAgaWYgKHR5cGVvZiBvdGhlciAhPSAnZnVuY3Rpb24nIHx8ICEoZnVuY05hbWUgaW4gTGF6eVdyYXBwZXIucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZnVuYyA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgZGF0YSA9IGdldERhdGEob3RoZXIpO1xuICAgICAgcmV0dXJuICEhZGF0YSAmJiBmdW5jID09PSBkYXRhWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgICAgIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBmdW5jYCBpcyBjYXBhYmxlIG9mIGJlaW5nIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrYWJsZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIHZhciBpc01hc2thYmxlID0gY29yZUpzRGF0YSA/IGlzRnVuY3Rpb24gOiBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3RvdHlwZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gICAgICB2YXIgQ3RvciA9IHZhbHVlICYmIHZhbHVlLmNvbnN0cnVjdG9yLFxuICAgICAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gICAgICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAgICAgKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAgICAgKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKGtleSwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgICAgICAoc3JjVmFsdWUgIT09IHVuZGVmaW5lZCB8fCAoa2V5IGluIE9iamVjdChvYmplY3QpKSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAgICAgKiBjYWNoZSB3aGVuIGl0IGV4Y2VlZHMgYE1BWF9NRU1PSVpFX1NJWkVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVtb2l6ZUNhcHBlZChmdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgICAgICBjYWNoZS5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIGZ1bmN0aW9uIG1ldGFkYXRhIG9mIGBzb3VyY2VgIGludG8gYGRhdGFgLlxuICAgICAqXG4gICAgICogTWVyZ2luZyBtZXRhZGF0YSByZWR1Y2VzIHRoZSBudW1iZXIgb2Ygd3JhcHBlcnMgdXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbi5cbiAgICAgKiBUaGlzIGlzIHBvc3NpYmxlIGJlY2F1c2UgbWV0aG9kcyBsaWtlIGBfLmJpbmRgLCBgXy5jdXJyeWAsIGFuZCBgXy5wYXJ0aWFsYFxuICAgICAqIG1heSBiZSBhcHBsaWVkIHJlZ2FyZGxlc3Mgb2YgZXhlY3V0aW9uIG9yZGVyLiBNZXRob2RzIGxpa2UgYF8uYXJ5YCBhbmRcbiAgICAgKiBgXy5yZWFyZ2AgbW9kaWZ5IGZ1bmN0aW9uIGFyZ3VtZW50cywgbWFraW5nIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFyZVxuICAgICAqIGV4ZWN1dGVkIGltcG9ydGFudCwgcHJldmVudGluZyB0aGUgbWVyZ2luZyBvZiBtZXRhZGF0YS4gSG93ZXZlciwgd2UgbWFrZVxuICAgICAqIGFuIGV4Y2VwdGlvbiBmb3IgYSBzYWZlIGNvbWJpbmVkIGNhc2Ugd2hlcmUgY3VycmllZCBmdW5jdGlvbnMgaGF2ZSBgXy5hcnlgXG4gICAgICogYW5kIG9yIGBfLnJlYXJnYCBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIFRoZSBkZXN0aW5hdGlvbiBtZXRhZGF0YS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIHNvdXJjZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGRhdGFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lcmdlRGF0YShkYXRhLCBzb3VyY2UpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gZGF0YVsxXSxcbiAgICAgICAgICBzcmNCaXRtYXNrID0gc291cmNlWzFdLFxuICAgICAgICAgIG5ld0JpdG1hc2sgPSBiaXRtYXNrIHwgc3JjQml0bWFzayxcbiAgICAgICAgICBpc0NvbW1vbiA9IG5ld0JpdG1hc2sgPCAoV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUcgfCBXUkFQX0FSWV9GTEFHKTtcblxuICAgICAgdmFyIGlzQ29tYm8gPVxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gV1JBUF9BUllfRkxBRykgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSkgfHxcbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfUkVBUkdfRkxBRykgJiYgKGRhdGFbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfUkVBUkdfRkxBRykpICYmIChzb3VyY2VbN10ubGVuZ3RoIDw9IHNvdXJjZVs4XSkgJiYgKGJpdG1hc2sgPT0gV1JBUF9DVVJSWV9GTEFHKSk7XG5cbiAgICAgIC8vIEV4aXQgZWFybHkgaWYgbWV0YWRhdGEgY2FuJ3QgYmUgbWVyZ2VkLlxuICAgICAgaWYgKCEoaXNDb21tb24gfHwgaXNDb21ibykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGB0aGlzQXJnYCBpZiBhdmFpbGFibGUuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIGRhdGFbMl0gPSBzb3VyY2VbMl07XG4gICAgICAgIC8vIFNldCB3aGVuIGN1cnJ5aW5nIGEgYm91bmQgZnVuY3Rpb24uXG4gICAgICAgIG5ld0JpdG1hc2sgfD0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHID8gMCA6IFdSQVBfQ1VSUllfQk9VTkRfRkxBRztcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCBhcmd1bWVudHMuXG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2VbM107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzID0gZGF0YVszXTtcbiAgICAgICAgZGF0YVszXSA9IHBhcnRpYWxzID8gY29tcG9zZUFyZ3MocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNF0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNF0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbM10sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs0XTtcbiAgICAgIH1cbiAgICAgIC8vIENvbXBvc2UgcGFydGlhbCByaWdodCBhcmd1bWVudHMuXG4gICAgICB2YWx1ZSA9IHNvdXJjZVs1XTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBwYXJ0aWFscyA9IGRhdGFbNV07XG4gICAgICAgIGRhdGFbNV0gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzUmlnaHQocGFydGlhbHMsIHZhbHVlLCBzb3VyY2VbNl0pIDogdmFsdWU7XG4gICAgICAgIGRhdGFbNl0gPSBwYXJ0aWFscyA/IHJlcGxhY2VIb2xkZXJzKGRhdGFbNV0sIFBMQUNFSE9MREVSKSA6IHNvdXJjZVs2XTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyZ1Bvc2AgaWYgYXZhaWxhYmxlLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbN107XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZGF0YVs3XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJ5YCBpZiBpdCdzIHNtYWxsZXIuXG4gICAgICBpZiAoc3JjQml0bWFzayAmIFdSQVBfQVJZX0ZMQUcpIHtcbiAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gPT0gbnVsbCA/IHNvdXJjZVs4XSA6IG5hdGl2ZU1pbihkYXRhWzhdLCBzb3VyY2VbOF0pO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgYXJpdHlgIGlmIG9uZSBpcyBub3QgcHJvdmlkZWQuXG4gICAgICBpZiAoZGF0YVs5XSA9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbOV0gPSBzb3VyY2VbOV07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBmdW5jYCBhbmQgbWVyZ2UgYml0bWFza3MuXG4gICAgICBkYXRhWzBdID0gc291cmNlWzBdO1xuICAgICAgZGF0YVsxXSA9IG5ld0JpdG1hc2s7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICAgICAqIFtgT2JqZWN0LmtleXNgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAob2JqZWN0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUmVzdGAgd2hpY2ggdHJhbnNmb3JtcyB0aGUgcmVzdCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gICAgICBzdGFydCA9IG5hdGl2ZU1heChzdGFydCA9PT0gdW5kZWZpbmVkID8gKGZ1bmMubGVuZ3RoIC0gMSkgOiBzdGFydCwgMCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgICAgICBvdGhlckFyZ3NbaW5kZXhdID0gYXJnc1tpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB0aGlzLCBvdGhlckFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwYXJlbnQgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGF0aCBUaGUgcGF0aCB0byBnZXQgdGhlIHBhcmVudCB2YWx1ZSBvZi5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcGFyZW50IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcmVudChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmxlbmd0aCA8IDIgPyBvYmplY3QgOiBiYXNlR2V0KG9iamVjdCwgYmFzZVNsaWNlKHBhdGgsIDAsIC0xKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVvcmRlciBgYXJyYXlgIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGluZGV4ZXMgd2hlcmUgdGhlIGVsZW1lbnQgYXRcbiAgICAgKiB0aGUgZmlyc3QgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIGZpcnN0IGVsZW1lbnQsIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIHNlY29uZCBpbmRleCBpcyBhc3NpZ25lZCBhcyB0aGUgc2Vjb25kIGVsZW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHJlb3JkZXIuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBUaGUgYXJyYW5nZWQgYXJyYXkgaW5kZXhlcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW9yZGVyKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihpbmRleGVzLmxlbmd0aCwgYXJyTGVuZ3RoKSxcbiAgICAgICAgICBvbGRBcnJheSA9IGNvcHlBcnJheShhcnJheSk7XG5cbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIgaW5kZXggPSBpbmRleGVzW2xlbmd0aF07XG4gICAgICAgIGFycmF5W2xlbmd0aF0gPSBpc0luZGV4KGluZGV4LCBhcnJMZW5ndGgpID8gb2xkQXJyYXlbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgLCB1bmxlc3MgYGtleWAgaXMgXCJfX3Byb3RvX19cIiBvciBcImNvbnN0cnVjdG9yXCIuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICAgICAgaWYgKGtleSA9PT0gJ2NvbnN0cnVjdG9yJyAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiB0aGlzIGZ1bmN0aW9uIGJlY29tZXMgaG90LCBpLmUuIGlzIGludm9rZWQgYSBsb3QgaW4gYSBzaG9ydFxuICAgICAqIHBlcmlvZCBvZiB0aW1lLCBpdCB3aWxsIHRyaXAgaXRzIGJyZWFrZXIgYW5kIHRyYW5zaXRpb24gdG8gYW4gaWRlbnRpdHlcbiAgICAgKiBmdW5jdGlvbiB0byBhdm9pZCBnYXJiYWdlIGNvbGxlY3Rpb24gcGF1c2VzIGluIFY4LiBTZWVcbiAgICAgKiBbVjggaXNzdWUgMjA3MF0oaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MjA3MClcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldERhdGEgPSBzaG9ydE91dChiYXNlU2V0RGF0YSk7XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgc2V0VGltZW91dGBdKGh0dHBzOi8vbWRuLmlvL3NldFRpbWVvdXQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VGltZW91dCA9IGN0eFNldFRpbWVvdXQgfHwgZnVuY3Rpb24oZnVuYywgd2FpdCkge1xuICAgICAgcmV0dXJuIHJvb3Quc2V0VGltZW91dChmdW5jLCB3YWl0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYGZ1bmNgIHRvIHJldHVybiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYHRvU3RyaW5nYCBtZXRob2Qgb2YgYHdyYXBwZXJgIHRvIG1pbWljIHRoZSBzb3VyY2Ugb2YgYHJlZmVyZW5jZWBcbiAgICAgKiB3aXRoIHdyYXBwZXIgZGV0YWlscyBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgc291cmNlIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdyYXBwZXIgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWZlcmVuY2UgVGhlIHJlZmVyZW5jZSBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgd3JhcHBlcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V3JhcFRvU3RyaW5nKHdyYXBwZXIsIHJlZmVyZW5jZSwgYml0bWFzaykge1xuICAgICAgdmFyIHNvdXJjZSA9IChyZWZlcmVuY2UgKyAnJyk7XG4gICAgICByZXR1cm4gc2V0VG9TdHJpbmcod3JhcHBlciwgaW5zZXJ0V3JhcERldGFpbHMoc291cmNlLCB1cGRhdGVXcmFwRGV0YWlscyhnZXRXcmFwRGV0YWlscyhzb3VyY2UpLCBiaXRtYXNrKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICAgICAqIG9mIGBmdW5jYCB3aGVuIGl0J3MgY2FsbGVkIGBIT1RfQ09VTlRgIG9yIG1vcmUgdGltZXMgaW4gYEhPVF9TUEFOYFxuICAgICAqIG1pbGxpc2Vjb25kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNob3J0T3V0KGZ1bmMpIHtcbiAgICAgIHZhciBjb3VudCA9IDAsXG4gICAgICAgICAgbGFzdENhbGxlZCA9IDA7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgICAgICByZW1haW5pbmcgPSBIT1RfU1BBTiAtIChzdGFtcCAtIGxhc3RDYWxsZWQpO1xuXG4gICAgICAgIGxhc3RDYWxsZWQgPSBzdGFtcDtcbiAgICAgICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgICAgICBpZiAoKytjb3VudCA+PSBIT1RfQ09VTlQpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbMF07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zaHVmZmxlYCB3aGljaCBtdXRhdGVzIGFuZCBzZXRzIHRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzaHVmZmxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT1hcnJheS5sZW5ndGhdIFRoZSBzaXplIG9mIGBhcnJheWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZVNlbGYoYXJyYXksIHNpemUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxO1xuXG4gICAgICBzaXplID0gc2l6ZSA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogc2l6ZTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgc2l6ZSkge1xuICAgICAgICB2YXIgcmFuZCA9IGJhc2VSYW5kb20oaW5kZXgsIGxhc3RJbmRleCksXG4gICAgICAgICAgICB2YWx1ZSA9IGFycmF5W3JhbmRdO1xuXG4gICAgICAgIGFycmF5W3JhbmRdID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBhcnJheVtpbmRleF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFycmF5Lmxlbmd0aCA9IHNpemU7XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICovXG4gICAgdmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICAgICAgcmVzdWx0LnB1c2goJycpO1xuICAgICAgfVxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgICAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge3N0cmluZ3xzeW1ib2x9IFJldHVybnMgdGhlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9ICh2YWx1ZSArICcnKTtcbiAgICAgIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgICAgIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgd3JhcHBlciBgZGV0YWlsc2AgYmFzZWQgb24gYGJpdG1hc2tgIGZsYWdzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkZXRhaWxzYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXcmFwRGV0YWlscyhkZXRhaWxzLCBiaXRtYXNrKSB7XG4gICAgICBhcnJheUVhY2god3JhcEZsYWdzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9ICdfLicgKyBwYWlyWzBdO1xuICAgICAgICBpZiAoKGJpdG1hc2sgJiBwYWlyWzFdKSAmJiAhYXJyYXlJbmNsdWRlcyhkZXRhaWxzLCB2YWx1ZSkpIHtcbiAgICAgICAgICBkZXRhaWxzLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXRhaWxzLnNvcnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHdyYXBwZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gd3JhcHBlciBUaGUgd3JhcHBlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgd3JhcHBlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ2xvbmUod3JhcHBlcikge1xuICAgICAgaWYgKHdyYXBwZXIgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikge1xuICAgICAgICByZXR1cm4gd3JhcHBlci5jbG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZXIuX193cmFwcGVkX18sIHdyYXBwZXIuX19jaGFpbl9fKTtcbiAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh3cmFwcGVyLl9fYWN0aW9uc19fKTtcbiAgICAgIHJlc3VsdC5fX2luZGV4X18gID0gd3JhcHBlci5fX2luZGV4X187XG4gICAgICByZXN1bHQuX192YWx1ZXNfXyA9IHdyYXBwZXIuX192YWx1ZXNfXztcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIGdyb3VwcyB0aGUgbGVuZ3RoIG9mIGBzaXplYC5cbiAgICAgKiBJZiBgYXJyYXlgIGNhbid0IGJlIHNwbGl0IGV2ZW5seSwgdGhlIGZpbmFsIGNodW5rIHdpbGwgYmUgdGhlIHJlbWFpbmluZ1xuICAgICAqIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzaXplPTFdIFRoZSBsZW5ndGggb2YgZWFjaCBjaHVua1xuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY2h1bmtzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAyKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InXSwgWydjJywgJ2QnXV1cbiAgICAgKlxuICAgICAqIF8uY2h1bmsoWydhJywgJ2InLCAnYycsICdkJ10sIDMpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYicsICdjJ10sIFsnZCddXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNodW5rKGFycmF5LCBzaXplLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzaXplLCBndWFyZCkgOiBzaXplID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHNpemUgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2l6ZSA9IG5hdGl2ZU1heCh0b0ludGVnZXIoc2l6ZSksIDApO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc2l6ZSA8IDEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobmF0aXZlQ2VpbChsZW5ndGggLyBzaXplKSk7XG5cbiAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSBiYXNlU2xpY2UoYXJyYXksIGluZGV4LCAoaW5kZXggKz0gc2l6ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IHdpdGggYWxsIGZhbHNleSB2YWx1ZXMgcmVtb3ZlZC4gVGhlIHZhbHVlcyBgZmFsc2VgLCBgbnVsbGAsXG4gICAgICogYDBgLCBgXCJcImAsIGB1bmRlZmluZWRgLCBhbmQgYE5hTmAgYXJlIGZhbHNleS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb21wYWN0KFswLCAxLCBmYWxzZSwgMiwgJycsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYWN0KGFycmF5KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBhcnJheSBjb25jYXRlbmF0aW5nIGBhcnJheWAgd2l0aCBhbnkgYWRkaXRpb25hbCBhcnJheXNcbiAgICAgKiBhbmQvb3IgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbmNhdGVuYXRlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBjb25jYXRlbmF0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxXTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNvbmNhdChhcnJheSwgMiwgWzNdLCBbWzRdXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvdGhlcik7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIFs0XV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gQXJyYXkobGVuZ3RoIC0gMSksXG4gICAgICAgICAgYXJyYXkgPSBhcmd1bWVudHNbMF0sXG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgIGFyZ3NbaW5kZXggLSAxXSA9IGFyZ3VtZW50c1tpbmRleF07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlQdXNoKGlzQXJyYXkoYXJyYXkpID8gY29weUFycmF5KGFycmF5KSA6IFthcnJheV0sIGJhc2VGbGF0dGVuKGFyZ3MsIDEpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGBhcnJheWAgdmFsdWVzIG5vdCBpbmNsdWRlZCBpbiB0aGUgb3RoZXIgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLndpdGhvdXQsIF8ueG9yXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZShbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2UgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kaWZmZXJlbmNlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsQnlgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZUJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sIFt7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZUJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdCh2YWx1ZXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIG9yZGVyIGFuZFxuICAgICAqIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxBbGxXaXRoYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8uZGlmZmVyZW5jZVdpdGgob2JqZWN0cywgW3sgJ3gnOiAxLCAneSc6IDIgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgZGlmZmVyZW5jZVdpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChjb21wYXJhdG9yKSkge1xuICAgICAgICBjb21wYXJhdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBiZWdpbm5pbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wKGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gZHJvcC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGVuZC5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUsIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZXhjbHVkaW5nIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqIEVsZW1lbnRzIGFyZSBkcm9wcGVkIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRyb3BXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIHRydWUpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlsbHMgZWxlbWVudHMgb2YgYGFycmF5YCB3aXRoIGB2YWx1ZWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90XG4gICAgICogaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8uZmlsbChhcnJheSwgJ2EnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2EnLCAnYSddXG4gICAgICpcbiAgICAgKiBfLmZpbGwoQXJyYXkoMyksIDIpO1xuICAgICAqIC8vID0+IFsyLCAyLCAyXVxuICAgICAqXG4gICAgICogXy5maWxsKFs0LCA2LCA4LCAxMF0sICcqJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzQsICcqJywgJyonLCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0ICYmIHR5cGVvZiBzdGFydCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgdmFsdWUsIHN0YXJ0KSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmb3VuZCBlbGVtZW50LCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ2Jhcm5leSc7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIHsgJ3VzZXInOiAnZnJlZCcsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggPT0gbnVsbCA/IDAgOiB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRJbmRleGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50c1xuICAgICAqIG9mIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8udXNlciA9PSAncGViYmxlcyc7IH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0SW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RJbmRleChhcnJheSwgcHJlZGljYXRlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgICBpZiAoZnJvbUluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5kZXggPSB0b0ludGVnZXIoZnJvbUluZGV4KTtcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggPCAwXG4gICAgICAgICAgPyBuYXRpdmVNYXgobGVuZ3RoICsgaW5kZXgsIDApXG4gICAgICAgICAgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VGaW5kSW5kZXgoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGF0dGVucyBgYXJyYXlgIGEgc2luZ2xlIGxldmVsIGRlZXAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbihbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIDEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0LCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZUZsYXR0ZW4oYXJyYXksIElORklOSVRZKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYGFycmF5YCB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgWzIsIFszLCBbNF1dLCA1XV07XG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW5EZXB0aChhcnJheSwgMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIFszLCBbNF1dLCA1XVxuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbkRlcHRoKGFycmF5LCBkZXB0aCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy50b1BhaXJzYDsgdGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgY29tcG9zZWRcbiAgICAgKiBmcm9tIGtleS12YWx1ZSBgcGFpcnNgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZyb21QYWlycyhbWydhJywgMV0sIFsnYicsIDJdXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gZnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYWlycyA9PSBudWxsID8gMCA6IHBhaXJzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgIHJlc3VsdFtwYWlyWzBdXSA9IHBhaXJbMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyBmaXJzdFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmhlYWQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiBfLmhlYWQoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhlYWQoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGFycmF5WzBdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGluZGV4IGF0IHdoaWNoIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGB2YWx1ZWAgaXMgZm91bmQgaW4gYGFycmF5YFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBJZiBgZnJvbUluZGV4YCBpcyBuZWdhdGl2ZSwgaXQncyB1c2VkIGFzIHRoZVxuICAgICAqIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5kZXhPZihbMSwgMiwgMSwgMl0sIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFNlYXJjaCBmcm9tIHRoZSBgZnJvbUluZGV4YC5cbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSW5kZXhPZihhcnJheSwgdmFsdWUsIGluZGV4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFsbCBidXQgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbml0aWFsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdGlhbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMCwgLTEpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgYXJlIGluY2x1ZGVkIGluIGFsbCBnaXZlbiBhcnJheXNcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb24oWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsyXVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuICAgICAgcmV0dXJuIChtYXBwZWQubGVuZ3RoICYmIG1hcHBlZFswXSA9PT0gYXJyYXlzWzBdKVxuICAgICAgICA/IGJhc2VJbnRlcnNlY3Rpb24obWFwcGVkKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5pbnRlcnNlY3Rpb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBpZiAoaXRlcmF0ZWUgPT09IGxhc3QobWFwcGVkKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnRlcnNlY3Rpb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXNcbiAgICAgKiBvZiByZXN1bHQgdmFsdWVzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBpbnRlcnNlY3RpbmcgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICogdmFyIG90aGVycyA9IFt7ICd4JzogMSwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLmludGVyc2VjdGlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpLFxuICAgICAgICAgIG1hcHBlZCA9IGFycmF5TWFwKGFycmF5cywgY2FzdEFycmF5TGlrZU9iamVjdCk7XG5cbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIG1hcHBlZC5wb3AoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZCwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYWxsIGVsZW1lbnRzIGluIGBhcnJheWAgaW50byBhIHN0cmluZyBzZXBhcmF0ZWQgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NlcGFyYXRvcj0nLCddIFRoZSBlbGVtZW50IHNlcGFyYXRvci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBqb2luZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmpvaW4oWydhJywgJ2InLCAnYyddLCAnficpO1xuICAgICAqIC8vID0+ICdhfmJ+YydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBqb2luKGFycmF5LCBzZXBhcmF0b3IpIHtcbiAgICAgIHJldHVybiBhcnJheSA9PSBudWxsID8gJycgOiBuYXRpdmVKb2luLmNhbGwoYXJyYXksIHNlcGFyYXRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBhcnJheWAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1hcnJheS5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5sYXN0SW5kZXhPZihbMSwgMiwgMSwgMl0sIDIsIDIpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKSA6IG5hdGl2ZU1pbihpbmRleCwgbGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICAgID8gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleClcbiAgICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IGF0IGluZGV4IGBuYCBvZiBgYXJyYXlgLiBJZiBgbmAgaXMgbmVnYXRpdmUsIHRoZSBudGhcbiAgICAgKiBlbGVtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjExLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnZCddO1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogXy5udGgoYXJyYXksIC0yKTtcbiAgICAgKiAvLyA9PiAnYyc7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoKGFycmF5LCBuKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlTnRoKGFycmF5LCB0b0ludGVnZXIobikpIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGdpdmVuIHZhbHVlcyBmcm9tIGBhcnJheWAgdXNpbmdcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ud2l0aG91dGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnJlbW92ZWBcbiAgICAgKiB0byByZW1vdmUgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSBwcmVkaWNhdGUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbChhcnJheSwgJ2EnLCAnYycpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgdmFyIHB1bGwgPSBiYXNlUmVzdChwdWxsQWxsKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnYScsICdiJywgJ2MnLCAnYScsICdiJywgJ2MnXTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbChhcnJheSwgWydhJywgJ2MnXSk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYicsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5wdWxsQWxsYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCBhbmQgYHZhbHVlc2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvblxuICAgICAqIGJ5IHdoaWNoIHRoZXkncmUgY29tcGFyZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5kaWZmZXJlbmNlQnlgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMyB9LCB7ICd4JzogMSB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbEJ5KGFycmF5LCBbeyAneCc6IDEgfSwgeyAneCc6IDMgfV0sICd4Jyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHB1bGxBbGxCeShhcnJheSwgdmFsdWVzLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YCB0byBgdmFsdWVzYC4gVGhlIGNvbXBhcmF0b3IgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZVdpdGhgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDMsICd5JzogNCB9LCB7ICd4JzogNSwgJ3knOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5wdWxsQWxsV2l0aChhcnJheSwgW3sgJ3gnOiAzLCAneSc6IDQgfV0sIF8uaXNFcXVhbCk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiA1LCAneSc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsV2l0aChhcnJheSwgdmFsdWVzLCBjb21wYXJhdG9yKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpXG4gICAgICAgIDogYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBlbGVtZW50cyBmcm9tIGBhcnJheWAgY29ycmVzcG9uZGluZyB0byBgaW5kZXhlc2AgYW5kIHJldHVybnMgYW5cbiAgICAgKiBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5hdGAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHsuLi4obnVtYmVyfG51bWJlcltdKX0gW2luZGV4ZXNdIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZW1vdmVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKiB2YXIgcHVsbGVkID0gXy5wdWxsQXQoYXJyYXksIFsxLCAzXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydhJywgJ2MnXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cocHVsbGVkKTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnZCddXG4gICAgICovXG4gICAgdmFyIHB1bGxBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZUF0KGFycmF5LCBpbmRleGVzKTtcblxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgYXJyYXlNYXAoaW5kZXhlcywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGlzSW5kZXgoaW5kZXgsIGxlbmd0aCkgPyAraW5kZXggOiBpbmRleDtcbiAgICAgIH0pLnNvcnQoY29tcGFyZUFzY2VuZGluZykpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwgZWxlbWVudHMgZnJvbSBgYXJyYXlgIHRoYXQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yXG4gICAgICogYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJlbW92ZWQgZWxlbWVudHMuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmZpbHRlcmAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC4gVXNlIGBfLnB1bGxgXG4gICAgICogdG8gcHVsbCBlbGVtZW50cyBmcm9tIGFuIGFycmF5IGJ5IHZhbHVlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDMsIDRdO1xuICAgICAqIHZhciBldmVucyA9IF8ucmVtb3ZlKGFycmF5LCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgM11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGV2ZW5zKTtcbiAgICAgKiAvLyA9PiBbMiwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICBpbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgYGFycmF5YCBzbyB0aGF0IHRoZSBmaXJzdCBlbGVtZW50IGJlY29tZXMgdGhlIGxhc3QsIHRoZSBzZWNvbmRcbiAgICAgKiBlbGVtZW50IGJlY29tZXMgdGhlIHNlY29uZCB0byBsYXN0LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgIGFuZCBpcyBiYXNlZCBvblxuICAgICAqIFtgQXJyYXkjcmV2ZXJzZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3JldmVyc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqXG4gICAgICogXy5yZXZlcnNlKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXZlcnNlKGFycmF5KSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/IGFycmF5IDogbmF0aXZlUmV2ZXJzZS5jYWxsKGFycmF5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBmcm9tIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICAgKiBbYEFycmF5I3NsaWNlYF0oaHR0cHM6Ly9tZG4uaW8vQXJyYXkvc2xpY2UpIHRvIGVuc3VyZSBkZW5zZSBhcnJheXMgYXJlXG4gICAgICogcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2xpY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAmJiB0eXBlb2YgZW5kICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKGFycmF5LCBzdGFydCwgZW5kKSkge1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgIGVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0ludGVnZXIoZW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZXMgYSBiaW5hcnkgc2VhcmNoIHRvIGRldGVybWluZSB0aGUgbG93ZXN0IGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleChbMzAsIDUwXSwgNDApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlIHRoZWlyXG4gICAgICogc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogNCB9LCB7ICd4JzogNSB9XTtcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkSW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhPZihhcnJheSwgdmFsdWUpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAmJiBlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydGVkSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGhpZ2hlc3RcbiAgICAgKiBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZCBpbnRvIGBhcnJheWAgaW4gb3JkZXIgdG9cbiAgICAgKiBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4KFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gNFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleChhcnJheSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZExhc3RJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleEJ5KG9iamVjdHMsIHsgJ3gnOiA0IH0sIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ueDsgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCAneCcpO1xuICAgICAqIC8vID0+IDFcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubGFzdEluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IHBlcmZvcm1zIGEgYmluYXJ5XG4gICAgICogc2VhcmNoIG9uIGEgc29ydGVkIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4T2YoWzQsIDUsIDUsIDUsIDZdLCA1KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUsIHRydWUpIC0gMTtcbiAgICAgICAgaWYgKGVxKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCdzIGRlc2lnbmVkIGFuZCBvcHRpbWl6ZWRcbiAgICAgKiBmb3Igc29ydGVkIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXEoWzEsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFCeWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZFVuaXFCeShbMS4xLCAxLjIsIDIuMywgMi40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzEuMSwgMi4zXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZFVuaXFCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRhaWwoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWlsKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICByZXR1cm4gbGVuZ3RoID8gYmFzZVNsaWNlKGFycmF5LCAxLCBsZW5ndGgpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBgbmAgZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHRha2UuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZShhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIDAsIG4gPCAwID8gMCA6IG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFszXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0KGFycmF5LCBuLCBndWFyZCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgbiA9IChndWFyZCB8fCBuID09PSB1bmRlZmluZWQpID8gMSA6IHRvSW50ZWdlcihuKTtcbiAgICAgIG4gPSBsZW5ndGggLSBuO1xuICAgICAgcmV0dXJuIGJhc2VTbGljZShhcnJheSwgbiA8IDAgPyAwIDogbiwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGVuZC4gRWxlbWVudHMgYXJlXG4gICAgICogdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlUmlnaHRXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGZhbHNlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggZWxlbWVudHMgdGFrZW4gZnJvbSB0aGUgYmVnaW5uaW5nLiBFbGVtZW50c1xuICAgICAqIGFyZSB0YWtlbiB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGhcbiAgICAgKiB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VXaGlsZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VXaGlsZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlV2hpbGUoYXJyYXksIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzLCBpbiBvcmRlciwgZnJvbSBhbGwgZ2l2ZW4gYXJyYXlzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uKFsyXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb24gPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb20gdGhlIGZpcnN0XG4gICAgICogYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tYmluZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaW9uQnkoWzIuMV0sIFsxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pb25CeShbeyAneCc6IDEgfV0sIFt7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25CeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pb25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBSZXN1bHQgdmFsdWVzIGFyZSBjaG9zZW4gZnJvbVxuICAgICAqIHRoZSBmaXJzdCBhcnJheSBpbiB3aGljaCB0aGUgdmFsdWUgb2NjdXJzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlvbldpdGgob2JqZWN0cywgb3RoZXJzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB1bmlvbldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKGFycmF5cywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgYW4gYXJyYXksIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGluIHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50XG4gICAgICogaXMga2VwdC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1clxuICAgICAqIGluIHRoZSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXEoWzIsIDEsIDJdKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB1bmlxdWVuZXNzIGlzIGNvbXB1dGVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZVxuICAgICAqIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDpcbiAgICAgKiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXFCeShbMi4xLCAxLjIsIDIuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsyLjEsIDEuMl1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udW5pcUJ5KFt7ICd4JzogMSB9LCB7ICd4JzogMiB9LCB7ICd4JzogMSB9XSwgJ3gnKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEgfSwgeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBiYXNlVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5YC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXNcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS5UaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy51bmlxV2l0aChvYmplY3RzLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxV2l0aChhcnJheSwgY29tcGFyYXRvcikge1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIHVuZGVmaW5lZCwgY29tcGFyYXRvcikgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhbiBhcnJheSBvZiBncm91cGVkXG4gICAgICogZWxlbWVudHMgYW5kIGNyZWF0ZXMgYW4gYXJyYXkgcmVncm91cGluZyB0aGUgZWxlbWVudHMgdG8gdGhlaXIgcHJlLXppcFxuICAgICAqIGNvbmZpZ3VyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICpcbiAgICAgKiBfLnVuemlwKHppcHBlZCk7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnppcChhcnJheSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gMDtcbiAgICAgIGFycmF5ID0gYXJyYXlGaWx0ZXIoYXJyYXksIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChncm91cCkpIHtcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoZ3JvdXAubGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBiYXNlVGltZXMobGVuZ3RoLCBmdW5jdGlvbihpbmRleCkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAoYXJyYXksIGJhc2VQcm9wZXJ0eShpbmRleCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgcmVncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIHJlZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgemlwcGVkID0gXy56aXAoWzEsIDJdLCBbMTAsIDIwXSwgWzEwMCwgMjAwXSk7XG4gICAgICogLy8gPT4gW1sxLCAxMCwgMTAwXSwgWzIsIDIwLCAyMDBdXVxuICAgICAqXG4gICAgICogXy51bnppcFdpdGgoemlwcGVkLCBfLmFkZCk7XG4gICAgICogLy8gPT4gWzMsIDMwLCAzMDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXBXaXRoKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgaWYgKCEoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gdW56aXAoYXJyYXkpO1xuICAgICAgaWYgKGl0ZXJhdGVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheU1hcChyZXN1bHQsIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHJldHVybiBhcHBseShpdGVyYXRlZSwgdW5kZWZpbmVkLCBncm91cCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IGV4Y2x1ZGluZyBhbGwgZ2l2ZW4gdmFsdWVzIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLnB1bGxgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndpdGhvdXQoWzIsIDEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKi9cbiAgICB2YXIgd2l0aG91dCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IFtdO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB1bmlxdWUgdmFsdWVzIHRoYXQgaXMgdGhlXG4gICAgICogW3N5bW1ldHJpYyBkaWZmZXJlbmNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TeW1tZXRyaWNfZGlmZmVyZW5jZSlcbiAgICAgKiBvZiB0aGUgZ2l2ZW4gYXJyYXlzLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBvcmRlclxuICAgICAqIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQHNlZSBfLmRpZmZlcmVuY2UsIF8ud2l0aG91dFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvcihbMiwgMV0sIFsyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICovXG4gICAgdmFyIHhvciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBvZiBlYWNoIGBhcnJheXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnlcbiAgICAgKiB3aGljaCBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpcyBkZXRlcm1pbmVkXG4gICAgICogYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmVcbiAgICAgKiBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnhvckJ5KFsyLjEsIDEuMl0sIFsyLjMsIDMuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjIsIDMuNF1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ueG9yQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHhvckJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoaXRlcmF0ZWUpKSB7XG4gICAgICAgIGl0ZXJhdGVlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnhvcmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY29tcGFyYXRvcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIGNvbXBhcmUgZWxlbWVudHMgb2YgYGFycmF5c2AuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXlzLiBUaGUgY29tcGFyYXRvciBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy54b3JXaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIHhvcldpdGggPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBjb21wYXJhdG9yID0gbGFzdChhcnJheXMpO1xuICAgICAgY29tcGFyYXRvciA9IHR5cGVvZiBjb21wYXJhdG9yID09ICdmdW5jdGlvbicgPyBjb21wYXJhdG9yIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VYb3IoYXJyYXlGaWx0ZXIoYXJyYXlzLCBpc0FycmF5TGlrZU9iamVjdCksIHVuZGVmaW5lZCwgY29tcGFyYXRvcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMsIHRoZSBmaXJzdCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBmaXJzdCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCB0aGUgc2Vjb25kIG9mIHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgICAqIHNlY29uZCBlbGVtZW50cyBvZiB0aGUgZ2l2ZW4gYXJyYXlzLCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXAoWydhJywgJ2InXSwgWzEsIDJdLCBbdHJ1ZSwgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMSwgdHJ1ZV0sIFsnYicsIDIsIGZhbHNlXV1cbiAgICAgKi9cbiAgICB2YXIgemlwID0gYmFzZVJlc3QodW56aXApO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mcm9tUGFpcnNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgdHdvIGFycmF5cyxcbiAgICAgKiBvbmUgb2YgcHJvcGVydHkgaWRlbnRpZmllcnMgYW5kIG9uZSBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3QoWydhJywgJ2InXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3QocHJvcHMsIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGJhc2VaaXBPYmplY3QocHJvcHMgfHwgW10sIHZhbHVlcyB8fCBbXSwgYXNzaWduVmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwT2JqZWN0YCBleGNlcHQgdGhhdCBpdCBzdXBwb3J0cyBwcm9wZXJ0eSBwYXRocy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wcz1bXV0gVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXM9W11dIFRoZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBPYmplY3REZWVwKFsnYS5iWzBdLmMnLCAnYS5iWzFdLmQnXSwgWzEsIDJdKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IFt7ICdjJzogMSB9LCB7ICdkJzogMiB9XSB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB6aXBPYmplY3REZWVwKHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGJhc2VTZXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uemlwYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgdG8gc3BlY2lmeVxuICAgICAqIGhvdyBncm91cGVkIHZhbHVlcyBzaG91bGQgYmUgY29tYmluZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhlXG4gICAgICogZWxlbWVudHMgb2YgZWFjaCBncm91cDogKC4uLmdyb3VwKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmVcbiAgICAgKiAgZ3JvdXBlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy56aXBXaXRoKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0sIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBhICsgYiArIGM7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gWzExMSwgMjIyXVxuICAgICAqL1xuICAgIHZhciB6aXBXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBpdGVyYXRlZSA9IGxlbmd0aCA+IDEgPyBhcnJheXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGl0ZXJhdGVlID0gdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgPyAoYXJyYXlzLnBvcCgpLCBpdGVyYXRlZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdW56aXBXaXRoKGFycmF5cywgaXRlcmF0ZWUpO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCB3cmFwcyBgdmFsdWVgIHdpdGggZXhwbGljaXQgbWV0aG9kXG4gICAgICogY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuIFRoZSByZXN1bHQgb2Ygc3VjaCBzZXF1ZW5jZXMgbXVzdCBiZSB1bndyYXBwZWRcbiAgICAgKiB3aXRoIGBfI3ZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiB2YXIgeW91bmdlc3QgPSBfXG4gICAgICogICAuY2hhaW4odXNlcnMpXG4gICAgICogICAuc29ydEJ5KCdhZ2UnKVxuICAgICAqICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICogICAgIHJldHVybiBvLnVzZXIgKyAnIGlzICcgKyBvLmFnZTtcbiAgICAgKiAgIH0pXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcyBpcyAxJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNoYWluKHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoKHZhbHVlKTtcbiAgICAgIHJlc3VsdC5fX2NoYWluX18gPSB0cnVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIGBpbnRlcmNlcHRvcmAgYW5kIHJldHVybnMgYHZhbHVlYC4gVGhlIGludGVyY2VwdG9yXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS4gVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG9cbiAgICAgKiBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UgaW4gb3JkZXIgdG8gbW9kaWZ5IGludGVybWVkaWF0ZSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKVxuICAgICAqICAudGFwKGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICogICAgLy8gTXV0YXRlIGlucHV0IGFycmF5LlxuICAgICAqICAgIGFycmF5LnBvcCgpO1xuICAgICAqICB9KVxuICAgICAqICAucmV2ZXJzZSgpXG4gICAgICogIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRhcCh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIGludGVyY2VwdG9yKHZhbHVlKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnRhcGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGBpbnRlcmNlcHRvcmAuXG4gICAgICogVGhlIHB1cnBvc2Ugb2YgdGhpcyBtZXRob2QgaXMgdG8gXCJwYXNzIHRocnVcIiB2YWx1ZXMgcmVwbGFjaW5nIGludGVybWVkaWF0ZVxuICAgICAqIHJlc3VsdHMgaW4gYSBtZXRob2QgY2hhaW4gc2VxdWVuY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvdmlkZSB0byBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGludGVyY2VwdG9yIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKCcgIGFiYyAgJylcbiAgICAgKiAgLmNoYWluKClcbiAgICAgKiAgLnRyaW0oKVxuICAgICAqICAudGhydShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgIHJldHVybiBbdmFsdWVdO1xuICAgICAqICB9KVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGhydSh2YWx1ZSwgaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJldHVybiBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5hdGAuXG4gICAgICpcbiAgICAgKiBAbmFtZSBhdFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfKG9iamVjdCkuYXQoWydhWzBdLmIuYycsICdhWzFdJ10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIHdyYXBwZXJBdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKHBhdGhzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgICAgIHN0YXJ0ID0gbGVuZ3RoID8gcGF0aHNbMF0gOiAwLFxuICAgICAgICAgIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKG9iamVjdCkgeyByZXR1cm4gYmFzZUF0KG9iamVjdCwgcGF0aHMpOyB9O1xuXG4gICAgICBpZiAobGVuZ3RoID4gMSB8fCB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCB8fFxuICAgICAgICAgICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikgfHwgIWlzSW5kZXgoc3RhcnQpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShzdGFydCwgK3N0YXJ0ICsgKGxlbmd0aCA/IDEgOiAwKSk7XG4gICAgICB2YWx1ZS5fX2FjdGlvbnNfXy5wdXNoKHtcbiAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAnYXJncyc6IFtpbnRlcmNlcHRvcl0sXG4gICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih2YWx1ZSwgdGhpcy5fX2NoYWluX18pLnRocnUoZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgaWYgKGxlbmd0aCAmJiAhYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgYXJyYXkucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBleHBsaWNpdCBtZXRob2QgY2hhaW4gc2VxdWVuY2VzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjaGFpblxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGhvdXQgZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycykuaGVhZCgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2IH1cbiAgICAgKlxuICAgICAqIC8vIEEgc2VxdWVuY2Ugd2l0aCBleHBsaWNpdCBjaGFpbmluZy5cbiAgICAgKiBfKHVzZXJzKVxuICAgICAqICAgLmNoYWluKClcbiAgICAgKiAgIC5oZWFkKClcbiAgICAgKiAgIC5waWNrKCd1c2VyJylcbiAgICAgKiAgIC52YWx1ZSgpO1xuICAgICAqIC8vID0+IHsgJ3VzZXInOiAnYmFybmV5JyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNoYWluKCkge1xuICAgICAgcmV0dXJuIGNoYWluKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBjaGFpbiBzZXF1ZW5jZSBhbmQgcmV0dXJucyB0aGUgd3JhcHBlZCByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAbmFtZSBjb21taXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDJdO1xuICAgICAqIHZhciB3cmFwcGVkID0gXyhhcnJheSkucHVzaCgzKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQgPSB3cmFwcGVkLmNvbW1pdCgpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubGFzdCgpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyQ29tbWl0KCkge1xuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5leHQgdmFsdWUgb24gYSB3cmFwcGVkIG9iamVjdCBmb2xsb3dpbmcgdGhlXG4gICAgICogW2l0ZXJhdG9yIHByb3RvY29sXShodHRwczovL21kbi5pby9pdGVyYXRpb25fcHJvdG9jb2xzI2l0ZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBuYW1lIG5leHRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXh0IGl0ZXJhdG9yIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKTtcbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiBmYWxzZSwgJ3ZhbHVlJzogMSB9XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDIgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IHRydWUsICd2YWx1ZSc6IHVuZGVmaW5lZCB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlck5leHQoKSB7XG4gICAgICBpZiAodGhpcy5fX3ZhbHVlc19fID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdG9BcnJheSh0aGlzLnZhbHVlKCkpO1xuICAgICAgfVxuICAgICAgdmFyIGRvbmUgPSB0aGlzLl9faW5kZXhfXyA+PSB0aGlzLl9fdmFsdWVzX18ubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gZG9uZSA/IHVuZGVmaW5lZCA6IHRoaXMuX192YWx1ZXNfX1t0aGlzLl9faW5kZXhfXysrXTtcblxuICAgICAgcmV0dXJuIHsgJ2RvbmUnOiBkb25lLCAndmFsdWUnOiB2YWx1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIHdyYXBwZXIgdG8gYmUgaXRlcmFibGUuXG4gICAgICpcbiAgICAgKiBAbmFtZSBTeW1ib2wuaXRlcmF0b3JcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkW1N5bWJvbC5pdGVyYXRvcl0oKSA9PT0gd3JhcHBlZDtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBBcnJheS5mcm9tKHdyYXBwZWQpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJUb0l0ZXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBjaGFpbiBzZXF1ZW5jZSBwbGFudGluZyBgdmFsdWVgIGFzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgcGxhbnRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwbGFudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oWzEsIDJdKS5tYXAoc3F1YXJlKTtcbiAgICAgKiB2YXIgb3RoZXIgPSB3cmFwcGVkLnBsYW50KFszLCA0XSk7XG4gICAgICpcbiAgICAgKiBvdGhlci52YWx1ZSgpO1xuICAgICAqIC8vID0+IFs5LCAxNl1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMSwgNF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyUGxhbnQodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQsXG4gICAgICAgICAgcGFyZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKHBhcmVudCBpbnN0YW5jZW9mIGJhc2VMb2Rhc2gpIHtcbiAgICAgICAgdmFyIGNsb25lID0gd3JhcHBlckNsb25lKHBhcmVudCk7XG4gICAgICAgIGNsb25lLl9faW5kZXhfXyA9IDA7XG4gICAgICAgIGNsb25lLl9fdmFsdWVzX18gPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IGNsb25lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGNsb25lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2aW91cyA9IGNsb25lO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQuX193cmFwcGVkX187XG4gICAgICB9XG4gICAgICBwcmV2aW91cy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyB0aGUgd3JhcHBlciB2ZXJzaW9uIG9mIGBfLnJldmVyc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgdGhlIHdyYXBwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAbmFtZSByZXZlcnNlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8oYXJyYXkpLnJldmVyc2UoKS52YWx1ZSgpXG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclJldmVyc2UoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgdmFyIHdyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuX19hY3Rpb25zX18ubGVuZ3RoKSB7XG4gICAgICAgICAgd3JhcHBlZCA9IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB3cmFwcGVkID0gd3JhcHBlZC5yZXZlcnNlKCk7XG4gICAgICAgIHdyYXBwZWQuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICAgJ2Z1bmMnOiB0aHJ1LFxuICAgICAgICAgICdhcmdzJzogW3JldmVyc2VdLFxuICAgICAgICAgICd0aGlzQXJnJzogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIod3JhcHBlZCwgdGhpcy5fX2NoYWluX18pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudGhydShyZXZlcnNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgdG8gcmVzb2x2ZSB0aGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBhbGlhcyB0b0pTT04sIHZhbHVlT2ZcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXyhbMSwgMiwgM10pLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIGJhc2VXcmFwcGVyVmFsdWUodGhpcy5fX3dyYXBwZWRfXywgdGhpcy5fX2FjdGlvbnNfXyk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBjb3JyZXNwb25kaW5nIHZhbHVlIG9mXG4gICAgICogZWFjaCBrZXkgaXMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyByZXR1cm5lZCBieSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb21wb3NlZCBhZ2dyZWdhdGUgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNvdW50QnkoWzYuMSwgNC4yLCA2LjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiB7ICc0JzogMSwgJzYnOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uY291bnRCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiAyLCAnNSc6IDEgfVxuICAgICAqL1xuICAgIHZhciBjb3VudEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICArK3Jlc3VsdFtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCAxKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBbZW1wdHkgY29sbGVjdGlvbnNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICAgICAqIFtldmVyeXRoaW5nIGlzIHRydWVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1ZhY3VvdXNfdHJ1dGgpIG9mXG4gICAgICogZWxlbWVudHMgb2YgZW1wdHkgY29sbGVjdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmV2ZXJ5KFt0cnVlLCAxLCBudWxsLCAneWVzJ10sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZXZlcnkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBldmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUV2ZXJ5IDogYmFzZUV2ZXJ5O1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgYWxsIGVsZW1lbnRzXG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5yZW1vdmVgLCB0aGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5yZWplY3RcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBDb21iaW5pbmcgc2V2ZXJhbCBwcmVkaWNhdGVzIHVzaW5nIGBfLm92ZXJFdmVyeWAgb3IgYF8ub3ZlclNvbWVgLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLm92ZXJTb21lKFt7ICdhZ2UnOiAzNiB9LCBbJ2FnZScsIDQwXV0pKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIHRoZSBmaXJzdCBlbGVtZW50XG4gICAgICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdCBmb3IgJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICovXG4gICAgdmFyIGZpbmQgPSBjcmVhdGVGaW5kKGZpbmRJbmRleCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD1jb2xsZWN0aW9uLmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hdGNoZWQgZWxlbWVudCwgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5maW5kTGFzdChbMSwgMiwgMywgNF0sIGZ1bmN0aW9uKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAxO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICB2YXIgZmluZExhc3QgPSBjcmVhdGVGaW5kKGZpbmRMYXN0SW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZsYXR0ZW5lZCBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gXG4gICAgICogdGhydSBgaXRlcmF0ZWVgIGFuZCBmbGF0dGVuaW5nIHRoZSBtYXBwZWQgcmVzdWx0cy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtuLCBuXTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLmZsYXRNYXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZsYXRNYXBgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIHRoZVxuICAgICAqIG1hcHBlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVlcChbMSwgMl0sIGR1cGxpY2F0ZSk7XG4gICAgICogLy8gPT4gWzEsIDEsIDIsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlZXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBJTkZJTklUWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cyB1cCB0byBgZGVwdGhgIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZXB0aD0xXSBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBkdXBsaWNhdGUobikge1xuICAgICAqICAgcmV0dXJuIFtbW24sIG5dXV07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwRGVwdGgoWzEsIDJdLCBkdXBsaWNhdGUsIDIpO1xuICAgICAqIC8vID0+IFtbMSwgMV0sIFsyLCAyXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwRGVwdGgoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGRlcHRoKSB7XG4gICAgICBkZXB0aCA9IGRlcHRoID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyKGRlcHRoKTtcbiAgICAgIHJldHVybiBiYXNlRmxhdHRlbihtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpLCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEFzIHdpdGggb3RoZXIgXCJDb2xsZWN0aW9uc1wiIG1ldGhvZHMsIG9iamVjdHMgd2l0aCBhIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICAgICAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZWFjaFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoKFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAxYCB0aGVuIGAyYC5cbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yRWFjaGAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGBjb2xsZWN0aW9uYCBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAYWxpYXMgZWFjaFJpZ2h0XG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gICAgICogQHNlZSBfLmZvckVhY2hcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mb3JFYWNoUmlnaHQoWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgY29uc29sZS5sb2codmFsdWUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgYDJgIHRoZW4gYDFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2hSaWdodChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoUmlnaHQgOiBiYXNlRWFjaFJpZ2h0O1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIG9yZGVyIG9mIGdyb3VwZWQgdmFsdWVzXG4gICAgICogaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiBgY29sbGVjdGlvbmAuIFRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogdmFsdWUgb2YgZWFjaCBrZXkgaXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlXG4gICAgICoga2V5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ncm91cEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IFs0LjJdLCAnNic6IFs2LjEsIDYuM10gfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ncm91cEJ5KFsnb25lJywgJ3R3bycsICd0aHJlZSddLCAnbGVuZ3RoJyk7XG4gICAgICogLy8gPT4geyAnMyc6IFsnb25lJywgJ3R3byddLCAnNSc6IFsndGhyZWUnXSB9XG4gICAgICovXG4gICAgdmFyIGdyb3VwQnkgPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBbdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIGBjb2xsZWN0aW9uYC4gSWYgYGNvbGxlY3Rpb25gIGlzIGEgc3RyaW5nLCBpdCdzXG4gICAgICogY2hlY2tlZCBmb3IgYSBzdWJzdHJpbmcgb2YgYHZhbHVlYCwgb3RoZXJ3aXNlXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBpcyB1c2VkIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhc1xuICAgICAqIHRoZSBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2Zyb21JbmRleD0wXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ucmVkdWNlYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKFsxLCAyLCAzXSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluY2x1ZGVzKHsgJ2EnOiAxLCAnYic6IDIgfSwgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcygnYWJjZCcsICdiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbmNsdWRlcyhjb2xsZWN0aW9uLCB2YWx1ZSwgZnJvbUluZGV4LCBndWFyZCkge1xuICAgICAgY29sbGVjdGlvbiA9IGlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pID8gY29sbGVjdGlvbiA6IHZhbHVlcyhjb2xsZWN0aW9uKTtcbiAgICAgIGZyb21JbmRleCA9IChmcm9tSW5kZXggJiYgIWd1YXJkKSA/IHRvSW50ZWdlcihmcm9tSW5kZXgpIDogMDtcblxuICAgICAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgaWYgKGZyb21JbmRleCA8IDApIHtcbiAgICAgICAgZnJvbUluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGZyb21JbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbilcbiAgICAgICAgPyAoZnJvbUluZGV4IDw9IGxlbmd0aCAmJiBjb2xsZWN0aW9uLmluZGV4T2YodmFsdWUsIGZyb21JbmRleCkgPiAtMSlcbiAgICAgICAgOiAoISFsZW5ndGggJiYgYmFzZUluZGV4T2YoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCkgPiAtMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gLCByZXR1cm5pbmdcbiAgICAgKiBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZiBlYWNoIGludm9rZWQgbWV0aG9kLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAgICAgKiBhcmUgcHJvdmlkZWQgdG8gZWFjaCBpbnZva2VkIG1ldGhvZC4gSWYgYHBhdGhgIGlzIGEgZnVuY3Rpb24sIGl0J3MgaW52b2tlZFxuICAgICAqIGZvciwgYW5kIGB0aGlzYCBib3VuZCB0bywgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb258c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlIG9yXG4gICAgICogIHRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgZWFjaCBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFtbNSwgMSwgN10sIFszLCAyLCAxXV0sICdzb3J0Jyk7XG4gICAgICogLy8gPT4gW1sxLCA1LCA3XSwgWzEsIDIsIDNdXVxuICAgICAqXG4gICAgICogXy5pbnZva2VNYXAoWzEyMywgNDU2XSwgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgJycpO1xuICAgICAqIC8vID0+IFtbJzEnLCAnMicsICczJ10sIFsnNCcsICc1JywgJzYnXV1cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgcGF0aCwgYXJncykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaXNGdW5jID0gdHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJyxcbiAgICAgICAgICByZXN1bHQgPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IEFycmF5KGNvbGxlY3Rpb24ubGVuZ3RoKSA6IFtdO1xuXG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpc0Z1bmMgPyBhcHBseShwYXRoLCB2YWx1ZSwgYXJncykgOiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBsYXN0IGVsZW1lbnQgcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGtleS4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gW1xuICAgICAqICAgeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sXG4gICAgICogICB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksIGZ1bmN0aW9uKG8pIHtcbiAgICAgKiAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG8uY29kZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LCAnZCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqXG4gICAgICogXy5rZXlCeShhcnJheSwgJ2RpcicpO1xuICAgICAqIC8vID0+IHsgJ2xlZnQnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ3JpZ2h0JzogeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfSB9XG4gICAgICovXG4gICAgdmFyIGtleUJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgdmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgYnkgcnVubmluZyBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5ldmVyeWAsIGBfLmZpbHRlcmAsIGBfLm1hcGAsIGBfLm1hcFZhbHVlc2AsIGBfLnJlamVjdGAsIGFuZCBgXy5zb21lYC5cbiAgICAgKlxuICAgICAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhcnlgLCBgY2h1bmtgLCBgY3VycnlgLCBgY3VycnlSaWdodGAsIGBkcm9wYCwgYGRyb3BSaWdodGAsIGBldmVyeWAsXG4gICAgICogYGZpbGxgLCBgaW52ZXJ0YCwgYHBhcnNlSW50YCwgYHJhbmRvbWAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlcGVhdGAsXG4gICAgICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICAgICAqIGB0ZW1wbGF0ZWAsIGB0cmltYCwgYHRyaW1FbmRgLCBgdHJpbVN0YXJ0YCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1hcChbNCwgOF0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF1cbiAgICAgKlxuICAgICAqIF8ubWFwKHsgJ2EnOiA0LCAnYic6IDggfSwgc3F1YXJlKTtcbiAgICAgKiAvLyA9PiBbMTYsIDY0XSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsICd1c2VyJyk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheU1hcCA6IGJhc2VNYXA7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc29ydEJ5YCBleGNlcHQgdGhhdCBpdCBhbGxvd3Mgc3BlY2lmeWluZyB0aGUgc29ydFxuICAgICAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gICAgICogYXJlIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIuIE90aGVyd2lzZSwgc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3JcbiAgICAgKiBkZXNjZW5kaW5nIG9yIFwiYXNjXCIgZm9yIGFzY2VuZGluZyBzb3J0IG9yZGVyIG9mIGNvcnJlc3BvbmRpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gW29yZGVyc10gVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFNvcnQgYnkgYHVzZXJgIGluIGFzY2VuZGluZyBvcmRlciBhbmQgYnkgYGFnZWAgaW4gZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDQwXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAoIWlzQXJyYXkoaXRlcmF0ZWVzKSkge1xuICAgICAgICBpdGVyYXRlZXMgPSBpdGVyYXRlZXMgPT0gbnVsbCA/IFtdIDogW2l0ZXJhdGVlc107XG4gICAgICB9XG4gICAgICBvcmRlcnMgPSBndWFyZCA/IHVuZGVmaW5lZCA6IG9yZGVycztcbiAgICAgIGlmICghaXNBcnJheShvcmRlcnMpKSB7XG4gICAgICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cyBzcGxpdCBpbnRvIHR3byBncm91cHMsIHRoZSBmaXJzdCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciwgdGhlIHNlY29uZCBvZiB3aGljaFxuICAgICAqIGNvbnRhaW5zIGVsZW1lbnRzIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5IGZvci4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEsICAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ3BlYmJsZXMnXSwgWydiYXJuZXknLCAnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ucGFydGl0aW9uKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgJ3BlYmJsZXMnXSwgWydmcmVkJ11dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2ZyZWQnXSwgWydiYXJuZXknLCAncGViYmxlcyddXVxuICAgICAqL1xuICAgIHZhciBwYXJ0aXRpb24gPSBjcmVhdGVBZ2dyZWdhdG9yKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgcmVzdWx0W2tleSA/IDAgOiAxXS5wdXNoKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbigpIHsgcmV0dXJuIFtbXSwgW11dOyB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAsIHdoZXJlIGVhY2ggc3VjY2Vzc2l2ZVxuICAgICAqIGludm9jYXRpb24gaXMgc3VwcGxpZWQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgcHJldmlvdXMuIElmIGBhY2N1bXVsYXRvcmBcbiAgICAgKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gICAgICogdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6XG4gICAgICogKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIE1hbnkgbG9kYXNoIG1ldGhvZHMgYXJlIGd1YXJkZWQgdG8gd29yayBhcyBpdGVyYXRlZXMgZm9yIG1ldGhvZHMgbGlrZVxuICAgICAqIGBfLnJlZHVjZWAsIGBfLnJlZHVjZVJpZ2h0YCwgYW5kIGBfLnRyYW5zZm9ybWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXNzaWduYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBpbmNsdWRlc2AsIGBtZXJnZWAsIGBvcmRlckJ5YCxcbiAgICAgKiBhbmQgYHNvcnRCeWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlKFsxLCAyXSwgZnVuY3Rpb24oc3VtLCBuKSB7XG4gICAgICogICByZXR1cm4gc3VtICsgbjtcbiAgICAgKiB9LCAwKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5UmVkdWNlIDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yZWR1Y2VgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8ucmVkdWNlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtbMCwgMV0sIFsyLCAzXSwgWzQsIDVdXTtcbiAgICAgKlxuICAgICAqIF8ucmVkdWNlUmlnaHQoYXJyYXksIGZ1bmN0aW9uKGZsYXR0ZW5lZCwgb3RoZXIpIHtcbiAgICAgKiAgIHJldHVybiBmbGF0dGVuZWQuY29uY2F0KG90aGVyKTtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDUsIDIsIDMsIDAsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZVJpZ2h0IDogYmFzZVJlZHVjZSxcbiAgICAgICAgICBpbml0QWNjdW0gPSBhcmd1bWVudHMubGVuZ3RoIDwgMztcblxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBiYXNlRWFjaFJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uZmlsdGVyYDsgdGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gXG4gICAgICogdGhhdCBgcHJlZGljYXRlYCBkb2VzICoqbm90KiogcmV0dXJuIHRydXRoeSBmb3IuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAgICogQHNlZSBfLmZpbHRlclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLnJlamVjdCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgeyAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnJlamVjdCh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWplY3QoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYSByYW5kb20gZWxlbWVudCBmcm9tIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGUoWzEsIDIsIDMsIDRdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlIDogYmFzZVNhbXBsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYG5gIHJhbmRvbSBlbGVtZW50cyBhdCB1bmlxdWUga2V5cyBmcm9tIGBjb2xsZWN0aW9uYCB1cCB0byB0aGVcbiAgICAgKiBzaXplIG9mIGBjb2xsZWN0aW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCAyKTtcbiAgICAgKiAvLyA9PiBbMywgMV1cbiAgICAgKlxuICAgICAqIF8uc2FtcGxlU2l6ZShbMSwgMiwgM10sIDQpO1xuICAgICAqIC8vID0+IFsyLCAzLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZVNpemUoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U2FtcGxlU2l6ZSA6IGJhc2VTYW1wbGVTaXplO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBzaHVmZmxlZCB2YWx1ZXMsIHVzaW5nIGEgdmVyc2lvbiBvZiB0aGVcbiAgICAgKiBbRmlzaGVyLVlhdGVzIHNodWZmbGVdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Zpc2hlci1ZYXRlc19zaHVmZmxlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2h1ZmZsZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzaHVmZmxlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaHVmZmxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gWzQsIDEsIDMsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2h1ZmZsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNodWZmbGUgOiBiYXNlU2h1ZmZsZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gICAgICogdmFsdWVzIG9yIHRoZSBudW1iZXIgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbGxlY3Rpb24gc2l6ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zaXplKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5zaXplKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5zaXplKCdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gN1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNpemUoY29sbGVjdGlvbikge1xuICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcoY29sbGVjdGlvbikgPyBzdHJpbmdTaXplKGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5zaXplO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VLZXlzKGNvbGxlY3Rpb24pLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYW55KiogZWxlbWVudCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvbWUoW251bGwsIDAsICd5ZXMnLCBmYWxzZV0sIEJvb2xlYW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvbWUodXNlcnMsIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IGZhbHNlIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvbWUoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTb21lIDogYmFzZVNvbWU7XG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkpIHtcbiAgICAgICAgcHJlZGljYXRlID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBlbGVtZW50cywgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlciBieSB0aGUgcmVzdWx0cyBvZlxuICAgICAqIHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGEgY29sbGVjdGlvbiB0aHJ1IGVhY2ggaXRlcmF0ZWUuIFRoaXMgbWV0aG9kXG4gICAgICogcGVyZm9ybXMgYSBzdGFibGUgc29ydCwgdGhhdCBpcywgaXQgcHJlc2VydmVzIHRoZSBvcmlnaW5hbCBzb3J0IG9yZGVyIG9mXG4gICAgICogZXF1YWwgZWxlbWVudHMuIFRoZSBpdGVyYXRlZXMgYXJlIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQ4IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogMzAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5zb3J0QnkodXNlcnMsIFtmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXI7IH1dKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNl0sIFsnYmFybmV5JywgMzRdLCBbJ2ZyZWQnLCA0OF0sIFsnZnJlZCcsIDMwXV1cbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM0XSwgWydiYXJuZXknLCAzNl0sIFsnZnJlZCcsIDMwXSwgWydmcmVkJywgNDhdXVxuICAgICAqL1xuICAgIHZhciBzb3J0QnkgPSBiYXNlUmVzdChmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZXMpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGl0ZXJhdGVlcy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoID4gMSAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBpdGVyYXRlZXNbMF0sIGl0ZXJhdGVlc1sxXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW107XG4gICAgICB9IGVsc2UgaWYgKGxlbmd0aCA+IDIgJiYgaXNJdGVyYXRlZUNhbGwoaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0sIGl0ZXJhdGVlc1syXSkpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2l0ZXJhdGVlc1swXV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgYmFzZUZsYXR0ZW4oaXRlcmF0ZWVzLCAxKSwgW10pO1xuICAgIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gICAgICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgRGF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICAgICAqICAgY29uc29sZS5sb2coXy5ub3coKSAtIHN0YW1wKTtcbiAgICAgKiB9LCBfLm5vdygpKTtcbiAgICAgKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICAgICAqL1xuICAgIHZhciBub3cgPSBjdHhOb3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdC5EYXRlLm5vdygpO1xuICAgIH07XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8uYmVmb3JlYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIGBmdW5jYCBvbmNlIGl0J3MgY2FsbGVkIGBuYCBvciBtb3JlIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBiZWZvcmUgYGZ1bmNgIGlzIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNhdmVzID0gWydwcm9maWxlJywgJ3NldHRpbmdzJ107XG4gICAgICpcbiAgICAgKiB2YXIgZG9uZSA9IF8uYWZ0ZXIoc2F2ZXMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKCdkb25lIHNhdmluZyEnKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChzYXZlcywgZnVuY3Rpb24odHlwZSkge1xuICAgICAqICAgYXN5bmNTYXZlKHsgJ3R5cGUnOiB0eXBlLCAnY29tcGxldGUnOiBkb25lIH0pO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2RvbmUgc2F2aW5nIScgYWZ0ZXIgdGhlIHR3byBhc3luYyBzYXZlcyBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZnRlcihuLCBmdW5jKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdXAgdG8gYG5gIGFyZ3VtZW50cyxcbiAgICAgKiBpZ25vcmluZyBhbnkgYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBjYXAuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8uYXJ5KHBhcnNlSW50LCAxKSk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFyeShmdW5jLCBuLCBndWFyZCkge1xuICAgICAgbiA9IGd1YXJkID8gdW5kZWZpbmVkIDogbjtcbiAgICAgIG4gPSAoZnVuYyAmJiBuID09IG51bGwpID8gZnVuYy5sZW5ndGggOiBuO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9BUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCwgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50c1xuICAgICAqIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGlsZSBpdCdzIGNhbGxlZCBsZXNzIHRoYW4gYG5gIHRpbWVzLiBTdWJzZXF1ZW50XG4gICAgICogY2FsbHMgdG8gdGhlIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGNhbGxzIGF0IHdoaWNoIGBmdW5jYCBpcyBubyBsb25nZXIgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZXN0cmljdC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyByZXN0cmljdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5iZWZvcmUoNSwgYWRkQ29udGFjdFRvTGlzdCkpO1xuICAgICAqIC8vID0+IEFsbG93cyBhZGRpbmcgdXAgdG8gNCBjb250YWN0cyB0byB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiZWZvcmUobiwgZnVuYykge1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgtLW4gPiAwKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuIDw9IDEpIHtcbiAgICAgICAgICBmdW5jID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYFxuICAgICAqIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBuYXRpdmUgYEZ1bmN0aW9uI2JpbmRgLCB0aGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIlxuICAgICAqIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGJpbmQuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ3VzZXInOiAnZnJlZCcgfTtcbiAgICAgKlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZChncmVldCwgb2JqZWN0LCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKi9cbiAgICB2YXIgYmluZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZCkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBvYmplY3Rba2V5XWAgd2l0aCBgcGFydGlhbHNgXG4gICAgICogcHJlcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkaWZmZXJzIGZyb20gYF8uYmluZGAgYnkgYWxsb3dpbmcgYm91bmQgZnVuY3Rpb25zIHRvIHJlZmVyZW5jZVxuICAgICAqIG1ldGhvZHMgdGhhdCBtYXkgYmUgcmVkZWZpbmVkIG9yIGRvbid0IHlldCBleGlzdC4gU2VlXG4gICAgICogW1BldGVyIE1pY2hhdXgncyBhcnRpY2xlXShodHRwOi8vcGV0ZXIubWljaGF1eC5jYS9hcnRpY2xlcy9sYXp5LWZ1bmN0aW9uLWRlZmluaXRpb24tcGF0dGVybilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogVGhlIGBfLmJpbmRLZXkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZva2UgdGhlIG1ldGhvZCBvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBib3VuZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICd1c2VyJzogJ2ZyZWQnLFxuICAgICAqICAgJ2dyZWV0JzogZnVuY3Rpb24oZ3JlZXRpbmcsIHB1bmN0dWF0aW9uKSB7XG4gICAgICogICAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCAnaGknKTtcbiAgICAgKiBib3VuZCgnIScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkISdcbiAgICAgKlxuICAgICAqIG9iamVjdC5ncmVldCA9IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJ3lhICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGl5YSBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIEJvdW5kIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBib3VuZCA9IF8uYmluZEtleShvYmplY3QsICdncmVldCcsIF8sICchJyk7XG4gICAgICogYm91bmQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmRLZXkgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGtleSwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBiaXRtYXNrID0gV1JBUF9CSU5EX0ZMQUcgfCBXUkFQX0JJTkRfS0VZX0ZMQUc7XG4gICAgICBpZiAocGFydGlhbHMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihiaW5kS2V5KSk7XG4gICAgICAgIGJpdG1hc2sgfD0gV1JBUF9QQVJUSUFMX0ZMQUc7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChrZXksIGJpdG1hc2ssIG9iamVjdCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhcmd1bWVudHMgb2YgYGZ1bmNgIGFuZCBlaXRoZXIgaW52b2tlc1xuICAgICAqIGBmdW5jYCByZXR1cm5pbmcgaXRzIHJlc3VsdCwgaWYgYXQgbGVhc3QgYGFyaXR5YCBudW1iZXIgb2YgYXJndW1lbnRzIGhhdmVcbiAgICAgKiBiZWVuIHByb3ZpZGVkLCBvciByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHRoZSByZW1haW5pbmcgYGZ1bmNgXG4gICAgICogYXJndW1lbnRzLCBhbmQgc28gb24uIFRoZSBhcml0eSBvZiBgZnVuY2AgbWF5IGJlIHNwZWNpZmllZCBpZiBgZnVuYy5sZW5ndGhgXG4gICAgICogaXMgbm90IHN1ZmZpY2llbnQuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnkucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpYyBidWlsZHMsXG4gICAgICogbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnkoYWJjKTtcbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSkoMikoMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyLCAzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIC8vIEN1cnJpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogY3VycmllZCgxKShfLCAzKSgyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXJyeShmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmN1cnJ5YCBleGNlcHQgdGhhdCBhcmd1bWVudHMgYXJlIGFwcGxpZWQgdG8gYGZ1bmNgXG4gICAgICogaW4gdGhlIG1hbm5lciBvZiBgXy5wYXJ0aWFsUmlnaHRgIGluc3RlYWQgb2YgYF8ucGFydGlhbGAuXG4gICAgICpcbiAgICAgKiBUaGUgYF8uY3VycnlSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgY3VycmllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjdXJyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5PWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY3VycmllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFiYyA9IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgKiAgIHJldHVybiBbYSwgYiwgY107XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBjdXJyaWVkID0gXy5jdXJyeVJpZ2h0KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDMpKDIpKDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgyLCAzKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMykoMSwgXykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnlSaWdodChmdW5jLCBhcml0eSwgZ3VhcmQpIHtcbiAgICAgIGFyaXR5ID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBhcml0eTtcbiAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQ1VSUllfUklHSFRfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyaXR5KTtcbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IGN1cnJ5UmlnaHQucGxhY2Vob2xkZXI7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICAgICAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICAgICAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAgICAgKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAgICAgKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAgICAgKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gICAgICogaW52b2NhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAgICAgKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICAgICAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAgICAgKlxuICAgICAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICAgICAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAgICAgKlxuICAgICAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICAgICAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gICAgICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAgICAgKlxuICAgICAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAgICAgKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAgICAgKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gICAgICogfSkpO1xuICAgICAqXG4gICAgICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAgICAgKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAgICAgKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gICAgICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGFzdEFyZ3MsXG4gICAgICAgICAgbGFzdFRoaXMsXG4gICAgICAgICAgbWF4V2FpdCxcbiAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgdGltZXJJZCxcbiAgICAgICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICAgICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgICAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgICAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgICAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgICAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgICAgIHRpbWVXYWl0aW5nID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgICAgIHJldHVybiBtYXhpbmdcbiAgICAgICAgICA/IG5hdGl2ZU1pbih0aW1lV2FpdGluZywgbWF4V2FpdCAtIHRpbWVTaW5jZUxhc3RJbnZva2UpXG4gICAgICAgICAgOiB0aW1lV2FpdGluZztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2hvdWxkSW52b2tlKHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAgICAgLy8gRWl0aGVyIHRoaXMgaXMgdGhlIGZpcnN0IGNhbGwsIGFjdGl2aXR5IGhhcyBzdG9wcGVkIGFuZCB3ZSdyZSBhdCB0aGVcbiAgICAgICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAgICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgICAgICByZXR1cm4gKGxhc3RDYWxsVGltZSA9PT0gdW5kZWZpbmVkIHx8ICh0aW1lU2luY2VMYXN0Q2FsbCA+PSB3YWl0KSB8fFxuICAgICAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVyRXhwaXJlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICAgICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgICAgIHJldHVybiB0cmFpbGluZ0VkZ2UodGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgcmVtYWluaW5nV2FpdCh0aW1lKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgICAgIHRpbWVySWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgICAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICAgICAgaWYgKHRyYWlsaW5nICYmIGxhc3RBcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgICAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICAgICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgICAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICAgICAgaXNJbnZva2luZyA9IHNob3VsZEludm9rZSh0aW1lKTtcblxuICAgICAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lO1xuXG4gICAgICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxlYWRpbmdFZGdlKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBpbnZvY2F0aW9ucyBpbiBhIHRpZ2h0IGxvb3AuXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gICAgICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgICAgIHJldHVybiBkZWJvdW5jZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmZXJzIGludm9raW5nIHRoZSBgZnVuY2AgdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZC4gQW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlZmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmVyKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sICdkZWZlcnJlZCcpO1xuICAgICAqIC8vID0+IExvZ3MgJ2RlZmVycmVkJyBhZnRlciBvbmUgbWlsbGlzZWNvbmQuXG4gICAgICovXG4gICAgdmFyIGRlZmVyID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgcmV0dXJuIGJhc2VEZWxheShmdW5jLCAxLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgYGZ1bmNgIGFmdGVyIGB3YWl0YCBtaWxsaXNlY29uZHMuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWxheS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2FpdCBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBpbnZvY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVyIGlkLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlbGF5KGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHRleHQpO1xuICAgICAqIH0sIDEwMDAsICdsYXRlcicpO1xuICAgICAqIC8vID0+IExvZ3MgJ2xhdGVyJyBhZnRlciBvbmUgc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWxheSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgdG9OdW1iZXIod2FpdCkgfHwgMCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyByZXZlcnNlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZsaXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmbGlwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZmxpcHBlZCA9IF8uZmxpcChmdW5jdGlvbigpIHtcbiAgICAgKiAgIHJldHVybiBfLnRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIGZsaXBwZWQoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiBbJ2QnLCAnYycsICdiJywgJ2EnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsaXAoZnVuYykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9GTElQX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gICAgICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICAgICAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gICAgICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gICAgICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAgICAgKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICAgICAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gICAgICpcbiAgICAgKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAgICAgKiB2YWx1ZXMob2JqZWN0KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIHZhbHVlcyhvdGhlcik7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICpcbiAgICAgKiBvYmplY3QuYSA9IDI7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAgICAgKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqXG4gICAgICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAgICAgKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICAgICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICAgICAgcmV0dXJuIG1lbW9pemVkO1xuICAgIH1cblxuICAgIC8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxuICAgIG1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG5lZ2F0ZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJlZGljYXRlIGBmdW5jYC4gVGhlXG4gICAgICogYGZ1bmNgIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgcHJlZGljYXRlIHRvIG5lZ2F0ZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBuZWdhdGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0V2ZW4obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5maWx0ZXIoWzEsIDIsIDMsIDQsIDUsIDZdLCBfLm5lZ2F0ZShpc0V2ZW4pKTtcbiAgICAgKiAvLyA9PiBbMSwgMywgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBuZWdhdGUocHJlZGljYXRlKSB7XG4gICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcyk7XG4gICAgICAgICAgY2FzZSAxOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0pO1xuICAgICAgICAgIGNhc2UgMjogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gaW52b2tpbmcgYGZ1bmNgIG9uY2UuIFJlcGVhdCBjYWxsc1xuICAgICAqIHRvIHRoZSBmdW5jdGlvbiByZXR1cm4gdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCBpbnZvY2F0aW9uLiBUaGUgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGluaXRpYWxpemUgPSBfLm9uY2UoY3JlYXRlQXBwbGljYXRpb24pO1xuICAgICAqIGluaXRpYWxpemUoKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogLy8gPT4gYGNyZWF0ZUFwcGxpY2F0aW9uYCBpcyBpbnZva2VkIG9uY2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbmNlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiZWZvcmUoMiwgZnVuYyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnRzIHRyYW5zZm9ybWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3RyYW5zZm9ybXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgYXJndW1lbnQgdHJhbnNmb3Jtcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZG91YmxlZChuKSB7XG4gICAgICogICByZXR1cm4gbiAqIDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckFyZ3MoZnVuY3Rpb24oeCwgeSkge1xuICAgICAqICAgcmV0dXJuIFt4LCB5XTtcbiAgICAgKiB9LCBbc3F1YXJlLCBkb3VibGVkXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDksIDMpO1xuICAgICAqIC8vID0+IFs4MSwgNl1cbiAgICAgKlxuICAgICAqIGZ1bmMoMTAsIDUpO1xuICAgICAqIC8vID0+IFsxMDAsIDEwXVxuICAgICAqL1xuICAgIHZhciBvdmVyQXJncyA9IGNhc3RSZXN0KGZ1bmN0aW9uKGZ1bmMsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHRyYW5zZm9ybXMgPSAodHJhbnNmb3Jtcy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHRyYW5zZm9ybXNbMF0pKVxuICAgICAgICA/IGFycmF5TWFwKHRyYW5zZm9ybXNbMF0sIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSlcbiAgICAgICAgOiBhcnJheU1hcChiYXNlRmxhdHRlbih0cmFuc2Zvcm1zLCAxKSwgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcblxuICAgICAgdmFyIGZ1bmNzTGVuZ3RoID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihhcmdzLmxlbmd0aCwgZnVuY3NMZW5ndGgpO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSB0cmFuc2Zvcm1zW2luZGV4XS5jYWxsKHRoaXMsIGFyZ3NbaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlXG4gICAgICogYXJndW1lbnRzIGl0IHJlY2VpdmVzLiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmJpbmRgIGV4Y2VwdCBpdCBkb2VzICoqbm90KipcbiAgICAgKiBhbHRlciB0aGUgYHRoaXNgIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbChncmVldCwgJ2hlbGxvJyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIGdyZWV0RnJlZCA9IF8ucGFydGlhbChncmVldCwgXywgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWwgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWwpKTtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUEFSVElBTF9GTEFHLCB1bmRlZmluZWQsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucGFydGlhbGAgZXhjZXB0IHRoYXQgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzXG4gICAgICogYXJlIGFwcGVuZGVkIHRvIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgYF8ucGFydGlhbFJpZ2h0LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBwYXJ0aWFsbHlcbiAgICAgKiBhcHBsaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseSBhcmd1bWVudHMgdG8uXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFydGlhbGx5IGFwcGxpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGdyZWV0KGdyZWV0aW5nLCBuYW1lKSB7XG4gICAgICogICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyBuYW1lO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2ZyZWQnKTtcbiAgICAgKiBncmVldEZyZWQoJ2hpJyk7XG4gICAgICogLy8gPT4gJ2hpIGZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBQYXJ0aWFsbHkgYXBwbGllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgc2F5SGVsbG9UbyA9IF8ucGFydGlhbFJpZ2h0KGdyZWV0LCAnaGVsbG8nLCBfKTtcbiAgICAgKiBzYXlIZWxsb1RvKCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQnXG4gICAgICovXG4gICAgdmFyIHBhcnRpYWxSaWdodCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIocGFydGlhbFJpZ2h0KSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfUklHSFRfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGFyZ3VtZW50cyBhcnJhbmdlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc3BlY2lmaWVkIGBpbmRleGVzYCB3aGVyZSB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIGZpcnN0IGluZGV4IGlzXG4gICAgICogcHJvdmlkZWQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LCB0aGUgYXJndW1lbnQgdmFsdWUgYXQgdGhlIHNlY29uZCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQsIGFuZCBzbyBvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlYXJyYW5nZSBhcmd1bWVudHMgZm9yLlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFyZ3VtZW50IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciByZWFyZ2VkID0gXy5yZWFyZyhmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH0sIFsyLCAwLCAxXSk7XG4gICAgICpcbiAgICAgKiByZWFyZ2VkKCdiJywgJ2MnLCAnYScpXG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgdmFyIHJlYXJnID0gZmxhdFJlc3QoZnVuY3Rpb24oZnVuYywgaW5kZXhlcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9SRUFSR19GTEFHLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBpbmRleGVzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gYW5kIGFyZ3VtZW50cyBmcm9tIGBzdGFydGAgYW5kIGJleW9uZCBwcm92aWRlZCBhc1xuICAgICAqIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtyZXN0IHBhcmFtZXRlcl0oaHR0cHM6Ly9tZG4uaW8vcmVzdF9wYXJhbWV0ZXJzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5yZXN0KGZ1bmN0aW9uKHdoYXQsIG5hbWVzKSB7XG4gICAgICogICByZXR1cm4gd2hhdCArICcgJyArIF8uaW5pdGlhbChuYW1lcykuam9pbignLCAnKSArXG4gICAgICogICAgIChfLnNpemUobmFtZXMpID4gMSA/ICcsICYgJyA6ICcnKSArIF8ubGFzdChuYW1lcyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBzYXkoJ2hlbGxvJywgJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiB0b0ludGVnZXIoc3RhcnQpO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGUgZnVuY3Rpb24gYW5kIGFuIGFycmF5IG9mIGFyZ3VtZW50cyBtdWNoIGxpa2VcbiAgICAgKiBbYEZ1bmN0aW9uI2FwcGx5YF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb24gdGhlXG4gICAgICogW3NwcmVhZCBvcGVyYXRvcl0oaHR0cHM6Ly9tZG4uaW8vc3ByZWFkX29wZXJhdG9yKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHNwcmVhZCBhcmd1bWVudHMgb3Zlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgc3ByZWFkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgc2F5ID0gXy5zcHJlYWQoZnVuY3Rpb24od2hvLCB3aGF0KSB7XG4gICAgICogICByZXR1cm4gd2hvICsgJyBzYXlzICcgKyB3aGF0O1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KFsnZnJlZCcsICdoZWxsbyddKTtcbiAgICAgKiAvLyA9PiAnZnJlZCBzYXlzIGhlbGxvJ1xuICAgICAqXG4gICAgICogdmFyIG51bWJlcnMgPSBQcm9taXNlLmFsbChbXG4gICAgICogICBQcm9taXNlLnJlc29sdmUoNDApLFxuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDM2KVxuICAgICAqIF0pO1xuICAgICAqXG4gICAgICogbnVtYmVycy50aGVuKF8uc3ByZWFkKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiB4ICsgeTtcbiAgICAgKiB9KSk7XG4gICAgICogLy8gPT4gYSBQcm9taXNlIG9mIDc2XG4gICAgICovXG4gICAgZnVuY3Rpb24gc3ByZWFkKGZ1bmMsIHN0YXJ0KSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBzdGFydCA9IHN0YXJ0ID09IG51bGwgPyAwIDogbmF0aXZlTWF4KHRvSW50ZWdlcihzdGFydCksIDApO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gYXJnc1tzdGFydF0sXG4gICAgICAgICAgICBvdGhlckFyZ3MgPSBjYXN0U2xpY2UoYXJncywgMCwgc3RhcnQpO1xuXG4gICAgICAgIGlmIChhcnJheSkge1xuICAgICAgICAgIGFycmF5UHVzaChvdGhlckFyZ3MsIGFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAgICAgKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICAgICAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAgICAgKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAgICAgKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gICAgICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICAgICAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAgICAgKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICAgICAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAgICAgKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gICAgICpcbiAgICAgKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAgICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgdXAgdG8gb25lIGFyZ3VtZW50LCBpZ25vcmluZyBhbnlcbiAgICAgKiBhZGRpdGlvbmFsIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzgnLCAnMTAnXSwgXy51bmFyeShwYXJzZUludCkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmFyeShmdW5jKSB7XG4gICAgICByZXR1cm4gYXJ5KGZ1bmMsIDEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGB2YWx1ZWAgdG8gYHdyYXBwZXJgIGFzIGl0cyBmaXJzdFxuICAgICAqIGFyZ3VtZW50LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uIGFyZSBhcHBlbmRlZFxuICAgICAqIHRvIHRob3NlIHByb3ZpZGVkIHRvIHRoZSBgd3JhcHBlcmAuIFRoZSB3cmFwcGVyIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3dyYXBwZXI9aWRlbnRpdHldIFRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcCA9IF8ud3JhcChfLmVzY2FwZSwgZnVuY3Rpb24oZnVuYywgdGV4dCkge1xuICAgICAqICAgcmV0dXJuICc8cD4nICsgZnVuYyh0ZXh0KSArICc8L3A+JztcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHAoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJzxwPmZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlczwvcD4nXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcCh2YWx1ZSwgd3JhcHBlcikge1xuICAgICAgcmV0dXJuIHBhcnRpYWwoY2FzdEZ1bmN0aW9uKHdyYXBwZXIpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCBhcyBhbiBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSgxKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHsgJ2EnOiAxIH0pO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYWJjJ11cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KG51bGwpO1xuICAgICAqIC8vID0+IFtudWxsXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkodW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkXVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIDIsIDNdO1xuICAgICAqIGNvbnNvbGUubG9nKF8uY2FzdEFycmF5KGFycmF5KSA9PT0gYXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0QXJyYXkoKSB7XG4gICAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gYXJndW1lbnRzWzBdO1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzaGFsbG93IGNsb25lIG9mIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAgICAgKiBbc3RydWN0dXJlZCBjbG9uZSBhbGdvcml0aG1dKGh0dHBzOi8vbWRuLmlvL1N0cnVjdHVyZWRfY2xvbmVfYWxnb3JpdGhtKVxuICAgICAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAgICAgKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAgICAgKiBhcnJheXMuIFRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBhcmd1bWVudHNgIG9iamVjdHMgYXJlIGNsb25lZFxuICAgICAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAgICAgKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgc2hhbGxvdyA9IF8uY2xvbmUob2JqZWN0cyk7XG4gICAgICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBjbG9uZWQgdmFsdWUuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAqIGNsb25pbmcgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdXAgdG8gZm91ciBhcmd1bWVudHM7ICh2YWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgc3RhY2tdKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZURlZXBXaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzRWxlbWVudCh2YWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZVdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5ub2RlTmFtZSk7XG4gICAgICogLy8gPT4gJ0JPRFknXG4gICAgICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZVdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gICAgICpcbiAgICAgKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKGRlZXBbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEZWVwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVXaXRoYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBjbG9uZXMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVjdXJzaXZlbHkgY2xvbmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGVsID0gXy5jbG9uZURlZXBXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcFdpdGgodmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBvYmplY3RgIGNvbmZvcm1zIHRvIGBzb3VyY2VgIGJ5IGludm9raW5nIHRoZSBwcmVkaWNhdGVcbiAgICAgKiBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGggdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGNvbmZvcm1zLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICpcbiAgICAgKiBfLmNvbmZvcm1zVG8ob2JqZWN0LCB7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAyOyB9IH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZSA9PSBudWxsIHx8IGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGFcbiAgICAgKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZXEoTmFOLCBOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIGBvdGhlcmAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmd0KDMsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmd0KDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihiYXNlR3QpO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICAgKiAgYG90aGVyYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5sdGVcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMywgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndGUoMSwgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgZ3RlID0gY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbihmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+PSBvdGhlcjtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAgICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5QnVmZmVyYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5QnVmZmVyKDIpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlCdWZmZXIobmV3IEFycmF5KDIpKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc0FycmF5QnVmZmVyID0gbm9kZUlzQXJyYXlCdWZmZXIgPyBiYXNlVW5hcnkobm9kZUlzQXJyYXlCdWZmZXIpIDogYmFzZUlzQXJyYXlCdWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gICAgICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICAgICAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNBcnJheUxpa2VgIGV4Y2VwdCB0aGF0IGl0IGFsc28gY2hlY2tzIGlmIGB2YWx1ZWBcbiAgICAgKiBpcyBhbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LWxpa2Ugb2JqZWN0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2VPYmplY3QoJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBib29sZWFuIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYm9vbGVhbiwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQm9vbGVhbihmYWxzZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4obnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Jvb2xlYW4odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYm9vbFRhZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYERhdGVgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBkYXRlIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRGF0ZShuZXcgRGF0ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUoJ01vbiBBcHJpbCAyMyAyMDEyJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNEYXRlID0gbm9kZUlzRGF0ZSA/IGJhc2VVbmFyeShub2RlSXNEYXRlKSA6IGJhc2VJc0RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBET00gZWxlbWVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRWxlbWVudCgnPGJvZHk+Jyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAxICYmICFpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICAgICAqXG4gICAgICogT2JqZWN0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgbm8gb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkXG4gICAgICogcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEFycmF5LWxpa2UgdmFsdWVzIHN1Y2ggYXMgYGFyZ3VtZW50c2Agb2JqZWN0cywgYXJyYXlzLCBidWZmZXJzLCBzdHJpbmdzLCBvclxuICAgICAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAgICAgKiBTaW1pbGFybHksIG1hcHMgYW5kIHNldHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIGEgYHNpemVgIG9mIGAwYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZW1wdHksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh0cnVlKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgICAgIChpc0FycmF5KHZhbHVlKSB8fCB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlLnNwbGljZSA9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAgICAgICBpc0J1ZmZlcih2YWx1ZSkgfHwgaXNUeXBlZEFycmF5KHZhbHVlKSB8fCBpc0FyZ3VtZW50cyh2YWx1ZSkpKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSk7XG4gICAgICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgICAgIHJldHVybiAhdmFsdWUuc2l6ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuICFiYXNlS2V5cyh2YWx1ZSkubGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gICAgICogZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAgICAgKiBkYXRlIG9iamVjdHMsIGVycm9yIG9iamVjdHMsIG1hcHMsIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsXG4gICAgICogc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkIGFycmF5cy4gYE9iamVjdGAgb2JqZWN0cyBhcmUgY29tcGFyZWRcbiAgICAgKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAgICAgKiBub2RlcyBhcmUgY29tcGFyZWQgYnkgc3RyaWN0IGVxdWFsaXR5LCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBvYmplY3QgPT09IG90aGVyO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaXNFcXVhbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIGNvbXBhcmUgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgY29tcGFyaXNvbnNcbiAgICAgKiBhcmUgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHVwIHRvXG4gICAgICogc2l4IGFyZ3VtZW50czogKG9ialZhbHVlLCBvdGhWYWx1ZSBbLCBpbmRleHxrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhvdGhWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydoZWxsbycsICdnb29kYnllJ107XG4gICAgICogdmFyIG90aGVyID0gWydoaScsICdnb29kYnllJ107XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWxXaXRoKGFycmF5LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWxXaXRoKHZhbHVlLCBvdGhlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKHZhbHVlLCBvdGhlcikgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBiYXNlSXNFcXVhbCh2YWx1ZSwgb3RoZXIsIHVuZGVmaW5lZCwgY3VzdG9taXplcikgOiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLCBgRXZhbEVycm9yYCwgYFJhbmdlRXJyb3JgLCBgUmVmZXJlbmNlRXJyb3JgLFxuICAgICAqIGBTeW50YXhFcnJvcmAsIGBUeXBlRXJyb3JgLCBvciBgVVJJRXJyb3JgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFcnJvcihFcnJvcik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBlcnJvclRhZyB8fCB0YWcgPT0gZG9tRXhjVGFnIHx8XG4gICAgICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIHByaW1pdGl2ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc0Zpbml0ZWBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0Zpbml0ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZmluaXRlIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZShJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRmluaXRlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmIG5hdGl2ZUlzRmluaXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYEZ1bmN0aW9uYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Z1bmN0aW9uKF8pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgICAgIC8vIGluIFNhZmFyaSA5IHdoaWNoIHJldHVybnMgJ29iamVjdCcgZm9yIHR5cGVkIGFycmF5cyBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICAgICAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICAgICAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGludGVnZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0ludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PSB0b0ludGVnZXIodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAgICAgKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gICAgICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdCh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAgICAgKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGBvYmplY3RgIGFuZCBgc291cmNlYCB0b1xuICAgICAqIGRldGVybWluZSBpZiBgb2JqZWN0YCBjb250YWlucyBlcXVpdmFsZW50IHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLm1hdGNoZXNgIHdoZW4gYHNvdXJjZWAgaXNcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hdGNoKG9iamVjdCwgeyAnYic6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIGdldE1hdGNoRGF0YShzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzTWF0Y2hgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBmaXZlXG4gICAgICogYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBpbmRleHxrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBpc0dyZWV0aW5nKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gL15oKD86aXxlbGxvKSQvLnRlc3QodmFsdWUpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoaXNHcmVldGluZyhvYmpWYWx1ZSkgJiYgaXNHcmVldGluZyhzcmNWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIHRydWU7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2dyZWV0aW5nJzogJ2hlbGxvJyB9O1xuICAgICAqIHZhciBzb3VyY2UgPSB7ICdncmVldGluZyc6ICdoaScgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hdGNoV2l0aChvYmplY3QsIHNvdXJjZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYE5hTmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc05hTmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc05hTikgYW5kIGlzIG5vdCB0aGUgc2FtZSBhc1xuICAgICAqIGdsb2JhbCBbYGlzTmFOYF0oaHR0cHM6Ly9tZG4uaW8vaXNOYU4pIHdoaWNoIHJldHVybnMgYHRydWVgIGZvclxuICAgICAqIGB1bmRlZmluZWRgIGFuZCBvdGhlciBub24tbnVtYmVyIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hTihOYU4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4obmV3IE51bWJlcihOYU4pKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBpc05hTih1bmRlZmluZWQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmFOKHZhbHVlKSB7XG4gICAgICAvLyBBbiBgTmFOYCBwcmltaXRpdmUgaXMgdGhlIG9ubHkgdmFsdWUgdGhhdCBpcyBub3QgZXF1YWwgdG8gaXRzZWxmLlxuICAgICAgLy8gUGVyZm9ybSB0aGUgYHRvU3RyaW5nVGFnYCBjaGVjayBmaXJzdCB0byBhdm9pZCBlcnJvcnMgd2l0aCBzb21lXG4gICAgICAvLyBBY3RpdmVYIG9iamVjdHMgaW4gSUUuXG4gICAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpICYmIHZhbHVlICE9ICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByaXN0aW5lIG5hdGl2ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBjYW4ndCByZWxpYWJseSBkZXRlY3QgbmF0aXZlIGZ1bmN0aW9ucyBpbiB0aGUgcHJlc2VuY2VcbiAgICAgKiBvZiB0aGUgY29yZS1qcyBwYWNrYWdlIGJlY2F1c2UgY29yZS1qcyBjaXJjdW12ZW50cyB0aGlzIGtpbmQgb2YgZGV0ZWN0aW9uLlxuICAgICAqIERlc3BpdGUgbXVsdGlwbGUgcmVxdWVzdHMsIHRoZSBjb3JlLWpzIG1haW50YWluZXIgaGFzIG1hZGUgaXQgY2xlYXI6IGFueVxuICAgICAqIGF0dGVtcHQgdG8gZml4IHRoZSBkZXRlY3Rpb24gd2lsbCBiZSBvYnN0cnVjdGVkLiBBcyBhIHJlc3VsdCwgd2UncmUgbGVmdFxuICAgICAqIHdpdGggbGl0dGxlIGNob2ljZSBidXQgdG8gdGhyb3cgYW4gZXJyb3IuIFVuZm9ydHVuYXRlbHksIHRoaXMgYWxzbyBhZmZlY3RzXG4gICAgICogcGFja2FnZXMsIGxpa2UgW2JhYmVsLXBvbHlmaWxsXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9iYWJlbC1wb2x5ZmlsbCksXG4gICAgICogd2hpY2ggcmVseSBvbiBjb3JlLWpzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKEFycmF5LnByb3RvdHlwZS5wdXNoKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmF0aXZlKF8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmIChpc01hc2thYmxlKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ09SRV9FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBudWxsYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYG51bGxgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdWxsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bGwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG51bGxpc2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05pbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmlsKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbChOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOaWwodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTnVtYmVyYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRvIGV4Y2x1ZGUgYEluZmluaXR5YCwgYC1JbmZpbml0eWAsIGFuZCBgTmFOYCwgd2hpY2ggYXJlXG4gICAgICogY2xhc3NpZmllZCBhcyBudW1iZXJzLCB1c2UgdGhlIGBfLmlzRmluaXRlYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbnVtYmVyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBudW1iZXJUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAgICAgKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC44LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gICAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgICAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICAgICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFJlZ0V4cGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHJlZ2V4cCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKC9hYmMvKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzUmVnRXhwKCcvYWJjLycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzUmVnRXhwID0gbm9kZUlzUmVnRXhwID8gYmFzZVVuYXJ5KG5vZGVJc1JlZ0V4cCkgOiBiYXNlSXNSZWdFeHA7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlci4gQW4gaW50ZWdlciBpcyBzYWZlIGlmIGl0J3MgYW4gSUVFRS03NTRcbiAgICAgKiBkb3VibGUgcHJlY2lzaW9uIG51bWJlciB3aGljaCBpc24ndCB0aGUgcmVzdWx0IG9mIGEgcm91bmRlZCB1bnNhZmUgaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzU2FmZUludGVnZXJgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNTYWZlSW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2FmZSBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcigzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNTYWZlSW50ZWdlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gLU1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFNldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBTZXQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygnYWJjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N0cmluZygxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN5bWJvbCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU3ltYm9sKFN5bWJvbC5pdGVyYXRvcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbCgnYWJjJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgICAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha01hcGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrTWFwKG5ldyBXZWFrTWFwKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgTWFwKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha01hcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSB3ZWFrTWFwVGFnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgV2Vha1NldGAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHdlYWsgc2V0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNXZWFrU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzV2Vha1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gd2Vha1NldFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHQoMSwgMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5sdCgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUx0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8uZ3RlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubHRlKDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHRlKDMsIDEpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGx0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPD0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKlxuICAgICAqIF8udG9BcnJheSgnYWJjJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoMSk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIF8udG9BcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgICAgIHJldHVybiBmdW5jKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgZmluaXRlIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEyLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZShOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6IDA7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gSU5GSU5JVFkgfHwgdmFsdWUgPT09IC1JTkZJTklUWSkge1xuICAgICAgICB2YXIgc2lnbiA9ICh2YWx1ZSA8IDAgPyAtMSA6IDEpO1xuICAgICAgICByZXR1cm4gc2lnbiAqIE1BWF9JTlRFR0VSO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/IHZhbHVlIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgVG9JbnRlZ2VyYF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvaW50ZWdlcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDEuNzk3NjkzMTM0ODYyMzE1N2UrMzA4XG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvSW50ZWdlcih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRvRmluaXRlKHZhbHVlKSxcbiAgICAgICAgICByZW1haW5kZXIgPSByZXN1bHQgJSAxO1xuXG4gICAgICByZXR1cm4gcmVzdWx0ID09PSByZXN1bHQgPyAocmVtYWluZGVyID8gcmVzdWx0IC0gcmVtYWluZGVyIDogcmVzdWx0KSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyIHN1aXRhYmxlIGZvciB1c2UgYXMgdGhlIGxlbmd0aCBvZiBhblxuICAgICAqIGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b0xlbmd0aChJbmZpbml0eSk7XG4gICAgICogLy8gPT4gNDI5NDk2NzI5NVxuICAgICAqXG4gICAgICogXy50b0xlbmd0aCgnMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTGVuZ3RoKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgMCwgTUFYX0FSUkFZX0xFTkdUSCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKDMuMik7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDVlLTMyNFxuICAgICAqXG4gICAgICogXy50b051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gSW5maW5pdHlcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTnVtYmVyKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE5BTjtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IGlzT2JqZWN0KG90aGVyKSA/IChvdGhlciArICcnKSA6IG90aGVyO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IDAgPyB2YWx1ZSA6ICt2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gYmFzZVRyaW0odmFsdWUpO1xuICAgICAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgICAgIHJldHVybiAoaXNCaW5hcnkgfHwgcmVJc09jdGFsLnRlc3QodmFsdWUpKVxuICAgICAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICAgICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHBsYWluIG9iamVjdCBmbGF0dGVuaW5nIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZ1xuICAgICAqIGtleWVkIHByb3BlcnRpZXMgb2YgYHZhbHVlYCB0byBvd24gcHJvcGVydGllcyBvZiB0aGUgcGxhaW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHZhbHVlLCBrZXlzSW4odmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc2FmZSBpbnRlZ2VyLiBBIHNhZmUgaW50ZWdlciBjYW4gYmUgY29tcGFyZWQgYW5kXG4gICAgICogcmVwcmVzZW50ZWQgY29ycmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiA5MDA3MTk5MjU0NzQwOTkxXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NhZmVJbnRlZ2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgPyBiYXNlQ2xhbXAodG9JbnRlZ2VyKHZhbHVlKSwgLU1BWF9TQUZFX0lOVEVHRVIsIE1BWF9TQUZFX0lOVEVHRVIpXG4gICAgICAgIDogKHZhbHVlID09PSAwID8gdmFsdWUgOiAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICAgICAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcobnVsbCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoLTApO1xuICAgICAqIC8vID0+ICctMCdcbiAgICAgKlxuICAgICAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiAnMSwyLDMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogU3Vic2VxdWVudCBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAgYW5kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYE9iamVjdC5hc3NpZ25gXShodHRwczovL21kbi5pby9PYmplY3QvYXNzaWduKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGlmIChpc1Byb3RvdHlwZShzb3VyY2UpIHx8IGlzQXJyYXlMaWtlKHNvdXJjZSkpIHtcbiAgICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgc291cmNlW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIHNvdXJjZSBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduSW4oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzLCAnZCc6IDQgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbkluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFdpdGhcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW5XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25XaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBgcGF0aHNgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHBpY2tlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH0sIDRdIH07XG4gICAgICpcbiAgICAgKiBfLmF0KG9iamVjdCwgWydhWzBdLmIuYycsICdhWzFdJ10pO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciBhdCA9IGZsYXRSZXN0KGJhc2VBdCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGBwcm90b3R5cGVgIG9iamVjdC4gSWYgYVxuICAgICAqIGBwcm9wZXJ0aWVzYCBvYmplY3QgaXMgZ2l2ZW4sIGl0cyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllc1xuICAgICAqIGFyZSBhc3NpZ25lZCB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3RvdHlwZSBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3Byb3BlcnRpZXNdIFRoZSBwcm9wZXJ0aWVzIHRvIGFzc2lnbiB0byB0aGUgb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIFNoYXBlKCkge1xuICAgICAqICAgdGhpcy54ID0gMDtcbiAgICAgKiAgIHRoaXMueSA9IDA7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQ2lyY2xlKCkge1xuICAgICAqICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBDaXJjbGUucHJvdG90eXBlID0gXy5jcmVhdGUoU2hhcGUucHJvdG90eXBlLCB7XG4gICAgICogICAnY29uc3RydWN0b3InOiBDaXJjbGVcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHZhciBjaXJjbGUgPSBuZXcgQ2lyY2xlO1xuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIENpcmNsZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBTaGFwZTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlKHByb3RvdHlwZSwgcHJvcGVydGllcykge1xuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VDcmVhdGUocHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzID09IG51bGwgPyByZXN1bHQgOiBiYXNlQXNzaWduKHJlc3VsdCwgcHJvcGVydGllcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZVxuICAgICAqIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXMgdGhhdFxuICAgICAqIHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBPbmNlIGEgcHJvcGVydHkgaXMgc2V0LCBhZGRpdGlvbmFsIHZhbHVlcyBvZiB0aGUgc2FtZSBwcm9wZXJ0eSBhcmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c0RlZXBcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHMgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIHNvdXJjZXMpIHtcbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgIHZhciBsZW5ndGggPSBzb3VyY2VzLmxlbmd0aDtcbiAgICAgIHZhciBndWFyZCA9IGxlbmd0aCA+IDIgPyBzb3VyY2VzWzJdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBzb3VyY2VzW2luZGV4XTtcbiAgICAgICAgdmFyIHByb3BzID0ga2V5c0luKHNvdXJjZSk7XG4gICAgICAgIHZhciBwcm9wc0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBwcm9wc0xlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoKytwcm9wc0luZGV4IDwgcHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbcHJvcHNJbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAoZXEodmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICAgICAgICAgIG9iamVjdFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRlZmF1bHRzYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBhc3NpZ25zXG4gICAgICogZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5kZWZhdWx0c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzRGVlcCh7ICdhJzogeyAnYic6IDIgfSB9LCB7ICdhJzogeyAnYic6IDEsICdjJzogMyB9IH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdiJzogMiwgJ2MnOiAzIH0gfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0c0RlZXAgPSBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICBhcmdzLnB1c2godW5kZWZpbmVkLCBjdXN0b21EZWZhdWx0c01lcmdlKTtcbiAgICAgIHJldHVybiBhcHBseShtZXJnZVdpdGgsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGtleSBvZiB0aGUgZmlyc3RcbiAgICAgKiBlbGVtZW50IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leScgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCB7ICdhZ2UnOiAxLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93bik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kS2V5YCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYSBjb2xsZWN0aW9uIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge3N0cmluZ3x1bmRlZmluZWR9IFJldHVybnMgdGhlIGtleSBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50LFxuICAgICAqICBlbHNlIGB1bmRlZmluZWRgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnYmFybmV5JzogIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgJ2ZyZWQnOiAgICB7ICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ2FnZSc6IDEsICAnYWN0aXZlJzogdHJ1ZSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+IHJldHVybnMgJ3BlYmJsZXMnIGFzc3VtaW5nIGBfLmZpbmRLZXlgIHJldHVybnMgJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0S2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duUmlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhblxuICAgICAqIG9iamVjdCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0XG4gICAgICogaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScsICdiJywgdGhlbiAnYycgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW4ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvcihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckluYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJblJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYycsICdiJywgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9ySW5gIGxvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsXG4gICAgICAgID8gb2JqZWN0XG4gICAgICAgIDogYmFzZUZvclJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IGFuZFxuICAgICAqIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb25cbiAgICAgKiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duKG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93bihvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JPd25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd25SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2InIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvck93bmAgbG9ncyAnYScgdGhlbiAnYicuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9yT3duUmlnaHQob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0aWVzXG4gICAgICogb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZnVuY3Rpb24gcHJvcGVydHkgbmFtZXMgZnJvbSBvd24gYW5kIGluaGVyaXRlZFxuICAgICAqIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gXy5jb25zdGFudCgnYScpO1xuICAgICAqICAgdGhpcy5iID0gXy5jb25zdGFudCgnYicpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IF8uY29uc3RhbnQoJ2MnKTtcbiAgICAgKlxuICAgICAqIF8uZnVuY3Rpb25zSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VGdW5jdGlvbnMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogeyAnYic6IDIgfSB9O1xuICAgICAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG90aGVyLCAnYScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGludmVydGVkIGtleXMgYW5kIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKiBJZiBgb2JqZWN0YCBjb250YWlucyBkdXBsaWNhdGUgdmFsdWVzLCBzdWJzZXF1ZW50IHZhbHVlcyBvdmVyd3JpdGVcbiAgICAgKiBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydChvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiAnYycsICcyJzogJ2InIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdFt2YWx1ZV0gPSBrZXk7XG4gICAgfSwgY29uc3RhbnQoaWRlbnRpdHkpKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW52ZXJ0YCBleGNlcHQgdGhhdCB0aGUgaW52ZXJ0ZWQgb2JqZWN0IGlzIGdlbmVyYXRlZFxuICAgICAqIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZyBlYWNoIGVsZW1lbnQgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGVcbiAgICAgKiBjb3JyZXNwb25kaW5nIGludmVydGVkIHZhbHVlIG9mIGVhY2ggaW52ZXJ0ZWQga2V5IGlzIGFuIGFycmF5IG9mIGtleXNcbiAgICAgKiByZXNwb25zaWJsZSBmb3IgZ2VuZXJhdGluZyB0aGUgaW52ZXJ0ZWQgdmFsdWUuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGludmVydC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuICdncm91cCcgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdncm91cDEnOiBbJ2EnLCAnYyddLCAnZ3JvdXAyJzogWydiJ10gfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnRCeSA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHZhbHVlKSkge1xuICAgICAgICByZXN1bHRbdmFsdWVdLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0gPSBba2V5XTtcbiAgICAgIH1cbiAgICB9LCBnZXRJdGVyYXRlZSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogWzEsIDIsIDMsIDRdIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uaW52b2tlKG9iamVjdCwgJ2FbMF0uYi5jLnNsaWNlJywgMSwgMyk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgdmFyIGludm9rZSA9IGJhc2VSZXN0KGJhc2VJbnZva2UpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICAgICAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8ua2V5cygnaGknKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMSddXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QpIDogYmFzZUtleXMob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAgICAgKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gICAgICogc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwVmFsdWVzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcEtleXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICAgICAqIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydVxuICAgICAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcEtleXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2ZyZWQnOiAgICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBtZXJnZXMgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIGludG8gdGhlXG4gICAgICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gICAgICogc2tpcHBlZCBpZiBhIGRlc3RpbmF0aW9uIHZhbHVlIGV4aXN0cy4gQXJyYXkgYW5kIHBsYWluIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIG1lcmdlZCByZWN1cnNpdmVseS4gT3RoZXIgb2JqZWN0cyBhbmQgdmFsdWUgdHlwZXMgYXJlIG92ZXJyaWRkZW4gYnlcbiAgICAgKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAgICAgKiBzb3VyY2VzIG92ZXJ3cml0ZSBwcm9wZXJ0eSBhc3NpZ25tZW50cyBvZiBwcmV2aW91cyBzb3VyY2VzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC41LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgb3RoZXIgPSB7XG4gICAgICogICAnYSc6IFt7ICdjJzogMyB9LCB7ICdlJzogNSB9XVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IDIsICdjJzogMyB9LCB7ICdkJzogNCwgJ2UnOiA1IH1dIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2UgPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZXJnZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2hcbiAgICAgKiBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG1lcmdlZCB2YWx1ZXMgb2YgdGhlIGRlc3RpbmF0aW9uIGFuZCBzb3VyY2VcbiAgICAgKiBwcm9wZXJ0aWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCwgbWVyZ2luZyBpcyBoYW5kbGVkIGJ5IHRoZVxuICAgICAqIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCBzaXggYXJndW1lbnRzOlxuICAgICAqIChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgKiAgICAgcmV0dXJuIG9ialZhbHVlLmNvbmNhdChzcmNWYWx1ZSk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbMV0sICdiJzogWzJdIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYSc6IFszXSwgJ2InOiBbNF0gfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2VXaXRoKG9iamVjdCwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbMSwgM10sICdiJzogWzIsIDRdIH1cbiAgICAgKi9cbiAgICB2YXIgbWVyZ2VXaXRoID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlXG4gICAgICogb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBwYXRocyBvZiBgb2JqZWN0YCB0aGF0IGFyZSBub3Qgb21pdHRlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBjb25zaWRlcmFibHkgc2xvd2VyIHRoYW4gYF8ucGlja2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBvbWl0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0KG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgdmFyIG9taXQgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpc0RlZXAgPSBmYWxzZTtcbiAgICAgIHBhdGhzID0gYXJyYXlNYXAocGF0aHMsIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICAgIGlzRGVlcCB8fCAoaXNEZWVwID0gcGF0aC5sZW5ndGggPiAxKTtcbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgICB9KTtcbiAgICAgIGNvcHlPYmplY3Qob2JqZWN0LCBnZXRBbGxLZXlzSW4ob2JqZWN0KSwgcmVzdWx0KTtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmVzdWx0ID0gYmFzZUNsb25lKHJlc3VsdCwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfRkxBVF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21PbWl0Q2xvbmUpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICBiYXNlVW5zZXQocmVzdWx0LCBwYXRoc1tsZW5ndGhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja0J5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2ZcbiAgICAgKiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBgb2JqZWN0YCB0aGF0XG4gICAgICogYHByZWRpY2F0ZWAgZG9lc24ndCByZXR1cm4gdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdEJ5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYic6ICcyJyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gb21pdEJ5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gcGlja0J5KG9iamVjdCwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgcGlja2VkIGBvYmplY3RgIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrKG9iamVjdCwgWydhJywgJ2MnXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIHBpY2sgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB7fSA6IGJhc2VQaWNrKG9iamVjdCwgcGF0aHMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIGBvYmplY3RgIHByb3BlcnRpZXMgYHByZWRpY2F0ZWAgcmV0dXJuc1xuICAgICAqIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5waWNrQnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwaWNrQnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvcHMgPSBhcnJheU1hcChnZXRBbGxLZXlzSW4ob2JqZWN0KSwgZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICByZXR1cm4gW3Byb3BdO1xuICAgICAgfSk7XG4gICAgICBwcmVkaWNhdGUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUpO1xuICAgICAgcmV0dXJuIGJhc2VQaWNrQnkob2JqZWN0LCBwcm9wcywgZnVuY3Rpb24odmFsdWUsIHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSh2YWx1ZSwgcGF0aFswXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmdldGAgZXhjZXB0IHRoYXQgaWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzIGFcbiAgICAgKiBmdW5jdGlvbiBpdCdzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgaXRzIHBhcmVudCBvYmplY3QgYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHJlc29sdmUuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjMSc6IDMsICdjMic6IF8uY29uc3RhbnQoNCkgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMxJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMyJyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsIF8uY29uc3RhbnQoJ2RlZmF1bHQnKSk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVzdWx0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgICAgIC8vIEVuc3VyZSB0aGUgbG9vcCBpcyBlbnRlcmVkIHdoZW4gcGF0aCBpcyBlbXB0eS5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIG9iamVjdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXhdKV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaW5kZXggPSBsZW5ndGg7XG4gICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiBhIHBvcnRpb24gb2YgYHBhdGhgIGRvZXNuJ3QgZXhpc3QsXG4gICAgICogaXQncyBjcmVhdGVkLiBBcnJheXMgYXJlIGNyZWF0ZWQgZm9yIG1pc3NpbmcgaW5kZXggcHJvcGVydGllcyB3aGlsZSBvYmplY3RzXG4gICAgICogYXJlIGNyZWF0ZWQgZm9yIGFsbCBvdGhlciBtaXNzaW5nIHByb3BlcnRpZXMuIFVzZSBgXy5zZXRXaXRoYCB0byBjdXN0b21pemVcbiAgICAgKiBgcGF0aGAgY3JlYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsICdhWzBdLmIuYycsIDQpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCBbJ3gnLCAnMCcsICd5JywgJ3onXSwgNSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8uc2V0V2l0aChvYmplY3QsICdbMF1bMV0nLCAnYScsIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0V2l0aChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YFxuICAgICAqIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcCBvciBzZXQsIGl0c1xuICAgICAqIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl1dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnMgPSBjcmVhdGVUb1BhaXJzKGtleXMpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlyc1xuICAgICAqIGZvciBgb2JqZWN0YCB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXBcbiAgICAgKiBvciBzZXQsIGl0cyBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzSW5cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy50b1BhaXJzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXSwgWydjJywgM11dIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgdmFyIHRvUGFpcnNJbiA9IGNyZWF0ZVRvUGFpcnMoa2V5c0luKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAgICAgKiBgYWNjdW11bGF0b3JgIG9iamVjdCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgZWFjaCBvZiBpdHMgb3duXG4gICAgICogZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyB0aHJ1IGBpdGVyYXRlZWAsIHdpdGggZWFjaCBpbnZvY2F0aW9uXG4gICAgICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICAgICAqIHByb3ZpZGVkLCBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgc2FtZSBgW1tQcm90b3R5cGVdXWAgd2lsbCBiZSB1c2VkLiBUaGVcbiAgICAgKiBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggZm91ciBhcmd1bWVudHM6IChhY2N1bXVsYXRvciwgdmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGN1c3RvbSBhY2N1bXVsYXRvciB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gICAgICogICByZXN1bHQucHVzaChuICo9IG4pO1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA5XVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiB9LCB7fSk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShvYmplY3QsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgICAgIGlzQXJyTGlrZSA9IGlzQXJyIHx8IGlzQnVmZmVyKG9iamVjdCkgfHwgaXNUeXBlZEFycmF5KG9iamVjdCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDQpO1xuICAgICAgaWYgKGFjY3VtdWxhdG9yID09IG51bGwpIHtcbiAgICAgICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoaXNBcnJMaWtlKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0FyciA/IG5ldyBDdG9yIDogW107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNGdW5jdGlvbihDdG9yKSA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpIDoge307XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgKGlzQXJyTGlrZSA/IGFycmF5RWFjaCA6IGJhc2VGb3JPd24pKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwcm9wZXJ0eSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1bnNldC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHByb3BlcnR5IGlzIGRlbGV0ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiA3IH0gfV0gfTtcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqXG4gICAgICogXy51bnNldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5zZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB0cnVlIDogYmFzZVVuc2V0KG9iamVjdCwgcGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zZXRgIGV4Y2VwdCB0aGF0IGFjY2VwdHMgYHVwZGF0ZXJgIHRvIHByb2R1Y2UgdGhlXG4gICAgICogdmFsdWUgdG8gc2V0LiBVc2UgYF8udXBkYXRlV2l0aGAgdG8gY3VzdG9taXplIGBwYXRoYCBjcmVhdGlvbi4gVGhlIGB1cGRhdGVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAnYVswXS5iLmMnLCBmdW5jdGlvbihuKSB7IHJldHVybiBuICogbjsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICd4WzBdLnkueicsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPyBuICsgMSA6IDA7IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlcikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udXBkYXRlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjYuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy51cGRhdGVXaXRoKG9iamVjdCwgJ1swXVsxXScsIF8uY29uc3RhbnQoJ2EnKSwgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGVXaXRoKG9iamVjdCwgcGF0aCwgdXBkYXRlciwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy52YWx1ZXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWydoJywgJ2knXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlcyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHlcbiAgICAgKiB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHZhbHVlc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENsYW1wcyBgbnVtYmVyYCB3aXRoaW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcl0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB1cHBlciBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoLTEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gLTVcbiAgICAgKlxuICAgICAqIF8uY2xhbXAoMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtYmVyLCBsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHVwcGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSB0b051bWJlcih1cHBlcik7XG4gICAgICAgIHVwcGVyID0gdXBwZXIgPT09IHVwcGVyID8gdXBwZXIgOiAwO1xuICAgICAgfVxuICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSB0b051bWJlcihsb3dlcik7XG4gICAgICAgIGxvd2VyID0gbG93ZXIgPT09IGxvd2VyID8gbG93ZXIgOiAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VDbGFtcCh0b051bWJlcihudW1iZXIpLCBsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgbmAgaXMgYmV0d2VlbiBgc3RhcnRgIGFuZCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBJZlxuICAgICAqIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKiBJZiBgc3RhcnRgIGlzIGdyZWF0ZXIgdGhhbiBgZW5kYCB0aGUgcGFyYW1zIGFyZSBzd2FwcGVkIHRvIHN1cHBvcnRcbiAgICAgKiBuZWdhdGl2ZSByYW5nZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ucmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMywgMiwgNCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDgpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDIsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMS4yLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNS4yLCA0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKC0zLCAtMiwgLTYpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVuZCA9IHRvRmluaXRlKGVuZCk7XG4gICAgICB9XG4gICAgICBudW1iZXIgPSB0b051bWJlcihudW1iZXIpO1xuICAgICAgcmV0dXJuIGJhc2VJblJhbmdlKG51bWJlciwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYSByYW5kb20gbnVtYmVyIGJldHdlZW4gdGhlIGluY2x1c2l2ZSBgbG93ZXJgIGFuZCBgdXBwZXJgIGJvdW5kcy5cbiAgICAgKiBJZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwcm92aWRlZCBhIG51bWJlciBiZXR3ZWVuIGAwYCBhbmQgdGhlIGdpdmVuIG51bWJlclxuICAgICAqIGlzIHJldHVybmVkLiBJZiBgZmxvYXRpbmdgIGlzIGB0cnVlYCwgb3IgZWl0aGVyIGBsb3dlcmAgb3IgYHVwcGVyYCBhcmVcbiAgICAgKiBmbG9hdHMsIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGlzIHJldHVybmVkIGluc3RlYWQgb2YgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXI9MF0gVGhlIGxvd2VyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdXBwZXI9MV0gVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zsb2F0aW5nXSBTcGVjaWZ5IHJldHVybmluZyBhIGZsb2F0aW5nLXBvaW50IG51bWJlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByYW5kb20gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgwLCA1KTtcbiAgICAgKiAvLyA9PiBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSk7XG4gICAgICogLy8gPT4gYWxzbyBhbiBpbnRlZ2VyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oNSwgdHJ1ZSk7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSgxLjIsIDUuMik7XG4gICAgICogLy8gPT4gYSBmbG9hdGluZy1wb2ludCBudW1iZXIgYmV0d2VlbiAxLjIgYW5kIDUuMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJhbmRvbShsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSB7XG4gICAgICBpZiAoZmxvYXRpbmcgJiYgdHlwZW9mIGZsb2F0aW5nICE9ICdib29sZWFuJyAmJiBpc0l0ZXJhdGVlQ2FsbChsb3dlciwgdXBwZXIsIGZsb2F0aW5nKSkge1xuICAgICAgICB1cHBlciA9IGZsb2F0aW5nID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cHBlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IHVwcGVyO1xuICAgICAgICAgIHVwcGVyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsb3dlciA9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBmbG9hdGluZyA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPT09IHVuZGVmaW5lZCAmJiB1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgdXBwZXIgPSAxO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxvd2VyID0gdG9GaW5pdGUobG93ZXIpO1xuICAgICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHVwcGVyID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwcGVyID0gdG9GaW5pdGUodXBwZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgPiB1cHBlcikge1xuICAgICAgICB2YXIgdGVtcCA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVwcGVyO1xuICAgICAgICB1cHBlciA9IHRlbXA7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgfHwgbG93ZXIgJSAxIHx8IHVwcGVyICUgMSkge1xuICAgICAgICB2YXIgcmFuZCA9IG5hdGl2ZVJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlTWluKGxvd2VyICsgKHJhbmQgKiAodXBwZXIgLSBsb3dlciArIGZyZWVQYXJzZUZsb2F0KCcxZS0nICsgKChyYW5kICsgJycpLmxlbmd0aCAtIDEpKSkpLCB1cHBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKi9cbiAgICB2YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICB3b3JkID0gd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICAgICAqIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYXBpdGFsaXplZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FwaXRhbGl6ZSgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGcmVkJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICAgICAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICAgICAqIGFuZCBbTGF0aW4gRXh0ZW5kZWQtQV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW5fRXh0ZW5kZWQtQSlcbiAgICAgKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gICAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlYnVycignZMOpasOgIHZ1Jyk7XG4gICAgICogLy8gPT4gJ2RlamEgdnUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVidXJyKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj1zdHJpbmcubGVuZ3RoXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBlbmRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2MnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYicsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlbmRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcblxuICAgICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWRcbiAgICAgICAgPyBsZW5ndGhcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgbGVuZ3RoKTtcblxuICAgICAgdmFyIGVuZCA9IHBvc2l0aW9uO1xuICAgICAgcG9zaXRpb24gLT0gdGFyZ2V0Lmxlbmd0aDtcbiAgICAgIHJldHVybiBwb3NpdGlvbiA+PSAwICYmIHN0cmluZy5zbGljZShwb3NpdGlvbiwgZW5kKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gICAgICogY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gICAgICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAgICAgKiB1bmxlc3MgdGhleSdyZSBwYXJ0IG9mIGEgdGFnIG9yIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZS4gU2VlXG4gICAgICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICAgICAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICAgICAqIFtxdW90ZSBhdHRyaWJ1dGUgdmFsdWVzXShodHRwOi8vd29ua28uY29tL3Bvc3QvaHRtbC1lc2NhcGluZykgdG8gcmVkdWNlXG4gICAgICogWFNTIHZlY3RvcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzY2FwZXMgdGhlIGBSZWdFeHBgIHNwZWNpYWwgY2hhcmFjdGVycyBcIl5cIiwgXCIkXCIsIFwiXFxcIiwgXCIuXCIsIFwiKlwiLCBcIitcIixcbiAgICAgKiBcIj9cIiwgXCIoXCIsIFwiKVwiLCBcIltcIiwgXCJdXCIsIFwie1wiLCBcIn1cIiwgYW5kIFwifFwiIGluIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGVSZWdFeHAoJ1tsb2Rhc2hdKGh0dHBzOi8vbG9kYXNoLmNvbS8pJyk7XG4gICAgICogLy8gPT4gJ1xcW2xvZGFzaFxcXVxcKGh0dHBzOi8vbG9kYXNoXFwuY29tL1xcKSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdFeHAoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNSZWdFeHBDaGFyLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtrZWJhYiBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTcGVjaWFsX2Nhc2Vfc3R5bGVzKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGtlYmFiIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqL1xuICAgIHZhciBrZWJhYkNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnLScgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdmUkVEJ1xuICAgICAqL1xuICAgIHZhciBsb3dlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b0xvd2VyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBhbmQgcmlnaHQgc2lkZXMgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuXG4gICAgICogUGFkZGluZyBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBjYW4ndCBiZSBldmVubHkgZGl2aWRlZCBieSBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCk7XG4gICAgICogLy8gPT4gJyAgYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgsICdfLScpO1xuICAgICAqIC8vID0+ICdfLWFiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICBpZiAoIWxlbmd0aCB8fCBzdHJMZW5ndGggPj0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgbWlkID0gKGxlbmd0aCAtIHN0ckxlbmd0aCkgLyAyO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVGbG9vcihtaWQpLCBjaGFycykgK1xuICAgICAgICBzdHJpbmcgK1xuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUNlaWwobWlkKSwgY2hhcnMpXG4gICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIHJpZ2h0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICdhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiY18tXydcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZEVuZChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKHN0cmluZyArIGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnICAgYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNiwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tX2FiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkU3RhcnQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpICsgc3RyaW5nKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBpbnRlZ2VyIG9mIHRoZSBzcGVjaWZpZWQgcmFkaXguIElmIGByYWRpeGAgaXNcbiAgICAgKiBgdW5kZWZpbmVkYCBvciBgMGAsIGEgYHJhZGl4YCBvZiBgMTBgIGlzIHVzZWQgdW5sZXNzIGB2YWx1ZWAgaXMgYVxuICAgICAqIGhleGFkZWNpbWFsLCBpbiB3aGljaCBjYXNlIGEgYHJhZGl4YCBvZiBgMTZgIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgYWxpZ25zIHdpdGggdGhlXG4gICAgICogW0VTNSBpbXBsZW1lbnRhdGlvbl0oaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuMS4yLjIpIG9mIGBwYXJzZUludGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyYWRpeD0xMF0gVGhlIHJhZGl4IHRvIGludGVycHJldCBgdmFsdWVgIGJ5LlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFyc2VJbnQoJzA4Jyk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXAoWyc2JywgJzA4JywgJzEwJ10sIF8ucGFyc2VJbnQpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4LCBndWFyZCkge1xuICAgICAgaWYgKGd1YXJkIHx8IHJhZGl4ID09IG51bGwpIHtcbiAgICAgICAgcmFkaXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChyYWRpeCkge1xuICAgICAgICByYWRpeCA9ICtyYWRpeDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuYXRpdmVQYXJzZUludCh0b1N0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKSwgcmFkaXggfHwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwZWF0cyB0aGUgZ2l2ZW4gc3RyaW5nIGBuYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byByZXBlYXQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByZXBlYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCcqJywgMyk7XG4gICAgICogLy8gPT4gJyoqKidcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAyKTtcbiAgICAgKiAvLyA9PiAnYWJjYWJjJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDApO1xuICAgICAqIC8vID0+ICcnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwZWF0KHN0cmluZywgbiwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG4sIGd1YXJkKSA6IG4gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgbiA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSZXBlYXQodG9TdHJpbmcoc3RyaW5nKSwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGBzdHJpbmdgIHdpdGggYHJlcGxhY2VtZW50YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3JlcGxhY2VgXShodHRwczovL21kbi5pby9TdHJpbmcvcmVwbGFjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gcGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSByZXBsYWNlbWVudCBUaGUgbWF0Y2ggcmVwbGFjZW1lbnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbW9kaWZpZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGxhY2UoJ0hpIEZyZWQnLCAnRnJlZCcsICdCYXJuZXknKTtcbiAgICAgKiAvLyA9PiAnSGkgQmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2UoKSB7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICBzdHJpbmcgPSB0b1N0cmluZyhhcmdzWzBdKTtcblxuICAgICAgcmV0dXJuIGFyZ3MubGVuZ3RoIDwgMyA/IHN0cmluZyA6IHN0cmluZy5yZXBsYWNlKGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3NuYWtlIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NuYWtlX2Nhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICovXG4gICAgdmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBieSBgc2VwYXJhdG9yYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgU3RyaW5nI3NwbGl0YF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3NwbGl0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBzcGxpdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHNlcGFyYXRvciBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gc3BsaXQgYnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdF0gVGhlIGxlbmd0aCB0byB0cnVuY2F0ZSByZXN1bHRzIHRvLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc3RyaW5nIHNlZ21lbnRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNwbGl0KCdhLWItYycsICctJywgMik7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgaWYgKGxpbWl0ICYmIHR5cGVvZiBsaW1pdCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGxpbWl0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgbGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX0FSUkFZX0xFTkdUSCA6IGxpbWl0ID4+PiAwO1xuICAgICAgaWYgKCFsaW1pdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoXG4gICAgICAgICAgICB0eXBlb2Ygc2VwYXJhdG9yID09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAoc2VwYXJhdG9yICE9IG51bGwgJiYgIWlzUmVnRXhwKHNlcGFyYXRvcikpXG4gICAgICAgICAgKSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBiYXNlVG9TdHJpbmcoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKCFzZXBhcmF0b3IgJiYgaGFzVW5pY29kZShzdHJpbmcpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHN0cmluZyksIDAsIGxpbWl0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzdGFydCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MZXR0ZXJfY2FzZSNTdHlsaXN0aWNfb3Jfc3BlY2lhbGlzZWRfdXNhZ2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RhcnQgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRm9vIEJhcidcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciBzdGFydENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB1cHBlckZpcnN0KHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPTBdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggYHRhcmdldGAsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFydHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT0gbnVsbFxuICAgICAgICA/IDBcbiAgICAgICAgOiBiYXNlQ2xhbXAodG9JbnRlZ2VyKHBvc2l0aW9uKSwgMCwgc3RyaW5nLmxlbmd0aCk7XG5cbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyB0YXJnZXQubGVuZ3RoKSA9PSB0YXJnZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uIHRoYXQgY2FuIGludGVycG9sYXRlIGRhdGEgcHJvcGVydGllc1xuICAgICAqIGluIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXJzLCBIVE1MLWVzY2FwZSBpbnRlcnBvbGF0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluXG4gICAgICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gICAgICogcHJvcGVydGllcyBtYXkgYmUgYWNjZXNzZWQgYXMgZnJlZSB2YXJpYWJsZXMgaW4gdGhlIHRlbXBsYXRlLiBJZiBhIHNldHRpbmdcbiAgICAgKiBvYmplY3QgaXMgZ2l2ZW4sIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciBgXy50ZW1wbGF0ZVNldHRpbmdzYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSW4gdGhlIGRldmVsb3BtZW50IGJ1aWxkIGBfLnRlbXBsYXRlYCB1dGlsaXplc1xuICAgICAqIFtzb3VyY2VVUkxzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9kZXZlbG9wZXJ0b29scy9zb3VyY2VtYXBzLyN0b2Mtc291cmNldXJsKVxuICAgICAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gcHJlY29tcGlsaW5nIHRlbXBsYXRlcyBzZWVcbiAgICAgKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBDaHJvbWUgZXh0ZW5zaW9uIHNhbmRib3hlcyBzZWVcbiAgICAgKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5lc2NhcGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmVzY2FwZV1cbiAgICAgKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmV2YWx1YXRlPV8udGVtcGxhdGVTZXR0aW5ncy5ldmFsdWF0ZV1cbiAgICAgKiAgVGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gICAgICogIEFuIG9iamVjdCB0byBpbXBvcnQgaW50byB0aGUgdGVtcGxhdGUgYXMgZnJlZSB2YXJpYWJsZXMuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmludGVycG9sYXRlPV8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZV1cbiAgICAgKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnNvdXJjZVVSTD0nbG9kYXNoLnRlbXBsYXRlU291cmNlc1tuXSddXG4gICAgICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy52YXJpYWJsZT0nb2JqJ11cbiAgICAgKiAgVGhlIGRhdGEgb2JqZWN0IHZhcmlhYmxlIG5hbWUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNvbXBpbGVkIHRlbXBsYXRlIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIgdG8gY3JlYXRlIGEgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzxiPjwlLSB2YWx1ZSAlPjwvYj4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICc8c2NyaXB0PicgfSk7XG4gICAgICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlciB0byBleGVjdXRlIEphdmFTY3JpcHQgYW5kIGdlbmVyYXRlIEhUTUwuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgaW50ZXJuYWwgYHByaW50YCBmdW5jdGlvbiBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBwcmludChcImhlbGxvIFwiICsgdXNlcik7ICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gYmFybmV5ISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiAvLyBEaXNhYmxlIHN1cHBvcnQgYnkgcmVwbGFjaW5nIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvICR7IHVzZXIgfSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBwZWJibGVzISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCU9IFwiXFxcXDwlLSB2YWx1ZSAlXFxcXD5cIiAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJ2lnbm9yZWQnIH0pO1xuICAgICAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBpbXBvcnRzYCBvcHRpb24gdG8gaW1wb3J0IGBqUXVlcnlgIGFzIGBqcWAuXG4gICAgICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKHRleHQsIHsgJ2ltcG9ydHMnOiB7ICdqcSc6IGpRdWVyeSB9IH0pO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlVVJMYCBvcHRpb24gdG8gc3BlY2lmeSBhIGN1c3RvbSBzb3VyY2VVUkwgZm9yIHRoZSB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gICAgICogY29tcGlsZWQoZGF0YSk7XG4gICAgICogLy8gPT4gRmluZCB0aGUgc291cmNlIG9mIFwiZ3JlZXRpbmcuanN0XCIgdW5kZXIgdGhlIFNvdXJjZXMgdGFiIG9yIFJlc291cmNlcyBwYW5lbCBvZiB0aGUgd2ViIGluc3BlY3Rvci5cbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHZhcmlhYmxlYCBvcHRpb24gdG8gZW5zdXJlIGEgd2l0aC1zdGF0ZW1lbnQgaXNuJ3QgdXNlZCBpbiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGkgPCU9IGRhdGEudXNlciAlPiEnLCB7ICd2YXJpYWJsZSc6ICdkYXRhJyB9KTtcbiAgICAgKiBjb21waWxlZC5zb3VyY2U7XG4gICAgICogLy8gPT4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAqIC8vICAgdmFyIF9fdCwgX19wID0gJyc7XG4gICAgICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gICAgICogLy8gICByZXR1cm4gX19wO1xuICAgICAqIC8vIH1cbiAgICAgKlxuICAgICAqIC8vIFVzZSBjdXN0b20gdGVtcGxhdGUgZGVsaW1pdGVycy5cbiAgICAgKiBfLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGUgPSAve3soW1xcc1xcU10rPyl9fS9nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdtdXN0YWNoZScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIG11c3RhY2hlISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZWAgcHJvcGVydHkgdG8gaW5saW5lIGNvbXBpbGVkIHRlbXBsYXRlcyBmb3IgbWVhbmluZ2Z1bFxuICAgICAqIC8vIGxpbmUgbnVtYmVycyBpbiBlcnJvciBtZXNzYWdlcyBhbmQgc3RhY2sgdHJhY2VzLlxuICAgICAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gICAgICogICB2YXIgSlNUID0ge1xcXG4gICAgICogICAgIFwibWFpblwiOiAnICsgXy50ZW1wbGF0ZShtYWluVGV4dCkuc291cmNlICsgJ1xcXG4gICAgICogICB9O1xcXG4gICAgICogJyk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAgICAgLy8gQmFzZWQgb24gSm9obiBSZXNpZydzIGB0bXBsYCBpbXBsZW1lbnRhdGlvblxuICAgICAgLy8gKGh0dHA6Ly9lam9obi5vcmcvYmxvZy9qYXZhc2NyaXB0LW1pY3JvLXRlbXBsYXRpbmcvKVxuICAgICAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gICAgICB2YXIgc2V0dGluZ3MgPSBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncztcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgb3B0aW9ucyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucywgc2V0dGluZ3MsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pO1xuXG4gICAgICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgICAgICBpbXBvcnRzS2V5cyA9IGtleXMoaW1wb3J0cyksXG4gICAgICAgICAgaW1wb3J0c1ZhbHVlcyA9IGJhc2VWYWx1ZXMoaW1wb3J0cywgaW1wb3J0c0tleXMpO1xuXG4gICAgICB2YXIgaXNFc2NhcGluZyxcbiAgICAgICAgICBpc0V2YWx1YXRpbmcsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICAgICAgc291cmNlID0gXCJfX3AgKz0gJ1wiO1xuXG4gICAgICAvLyBDb21waWxlIHRoZSByZWdleHAgdG8gbWF0Y2ggZWFjaCBkZWxpbWl0ZXIuXG4gICAgICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgICAgICAob3B0aW9ucy5lc2NhcGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICBpbnRlcnBvbGF0ZS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIChvcHRpb25zLmV2YWx1YXRlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wkJ1xuICAgICAgLCAnZycpO1xuXG4gICAgICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICAvLyBUaGUgc291cmNlVVJMIGdldHMgaW5qZWN0ZWQgaW50byB0aGUgc291cmNlIHRoYXQncyBldmFsLWVkLCBzbyBiZSBjYXJlZnVsXG4gICAgICAvLyB0byBub3JtYWxpemUgYWxsIGtpbmRzIG9mIHdoaXRlc3BhY2UsIHNvIGUuZy4gbmV3bGluZXMgKGFuZCB1bmljb2RlIHZlcnNpb25zIG9mIGl0KSBjYW4ndCBzbmVhayBpblxuICAgICAgLy8gYW5kIGVzY2FwZSB0aGUgY29tbWVudCwgdGh1cyBpbmplY3RpbmcgY29kZSB0aGF0IGdldHMgZXZhbGVkLlxuICAgICAgdmFyIHNvdXJjZVVSTCA9ICcvLyMgc291cmNlVVJMPScgK1xuICAgICAgICAoaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAnc291cmNlVVJMJylcbiAgICAgICAgICA/IChvcHRpb25zLnNvdXJjZVVSTCArICcnKS5yZXBsYWNlKC9cXHMvZywgJyAnKVxuICAgICAgICAgIDogKCdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzWycgKyAoKyt0ZW1wbGF0ZUNvdW50ZXIpICsgJ10nKVxuICAgICAgICApICsgJ1xcbic7XG5cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlRGVsaW1pdGVycywgZnVuY3Rpb24obWF0Y2gsIGVzY2FwZVZhbHVlLCBpbnRlcnBvbGF0ZVZhbHVlLCBlc1RlbXBsYXRlVmFsdWUsIGV2YWx1YXRlVmFsdWUsIG9mZnNldCkge1xuICAgICAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgICAgICAvLyBFc2NhcGUgY2hhcmFjdGVycyB0aGF0IGNhbid0IGJlIGluY2x1ZGVkIGluIHN0cmluZyBsaXRlcmFscy5cbiAgICAgICAgc291cmNlICs9IHN0cmluZy5zbGljZShpbmRleCwgb2Zmc2V0KS5yZXBsYWNlKHJlVW5lc2NhcGVkU3RyaW5nLCBlc2NhcGVTdHJpbmdDaGFyKTtcblxuICAgICAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICAgICAgaWYgKGVzY2FwZVZhbHVlKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZhbHVhdGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlVmFsdWUgKyBcIjtcXG5fX3AgKz0gJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICAgICAgc291cmNlICs9IFwiJyArXFxuKChfX3QgPSAoXCIgKyBpbnRlcnBvbGF0ZVZhbHVlICsgXCIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAgICAgLy8gVGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBwcm9kdWN0cyBuZWVkcyBgbWF0Y2hgIHJldHVybmVkIGluXG4gICAgICAgIC8vIG9yZGVyIHRvIHByb2R1Y2UgdGhlIGNvcnJlY3QgYG9mZnNldGAgdmFsdWUuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pO1xuXG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiO1xuXG4gICAgICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gICAgICAvLyBjb2RlIHRvIGFkZCB0aGUgZGF0YSBvYmplY3QgdG8gdGhlIHRvcCBvZiB0aGUgc2NvcGUgY2hhaW4uXG4gICAgICB2YXIgdmFyaWFibGUgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICd2YXJpYWJsZScpICYmIG9wdGlvbnMudmFyaWFibGU7XG4gICAgICBpZiAoIXZhcmlhYmxlKSB7XG4gICAgICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICAgICAgfVxuICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgYSBmb3JiaWRkZW4gY2hhcmFjdGVyIHdhcyBmb3VuZCBpbiBgdmFyaWFibGVgLCB0byBwcmV2ZW50XG4gICAgICAvLyBwb3RlbnRpYWwgY29tbWFuZCBpbmplY3Rpb24gYXR0YWNrcy5cbiAgICAgIGVsc2UgaWYgKHJlRm9yYmlkZGVuSWRlbnRpZmllckNoYXJzLnRlc3QodmFyaWFibGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihJTlZBTElEX1RFTVBMX1ZBUl9FUlJPUl9URVhUKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBjb2RlIGJ5IHN0cmlwcGluZyBlbXB0eSBzdHJpbmdzLlxuICAgICAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdNaWRkbGUsICckMScpXG4gICAgICAgIC5yZXBsYWNlKHJlRW1wdHlTdHJpbmdUcmFpbGluZywgJyQxOycpO1xuXG4gICAgICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICAgICAgc291cmNlID0gJ2Z1bmN0aW9uKCcgKyAodmFyaWFibGUgfHwgJ29iaicpICsgJykge1xcbicgK1xuICAgICAgICAodmFyaWFibGVcbiAgICAgICAgICA/ICcnXG4gICAgICAgICAgOiAnb2JqIHx8IChvYmogPSB7fSk7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAgICAgKGlzRXNjYXBpbmdcbiAgICAgICAgICAgPyAnLCBfX2UgPSBfLmVzY2FwZSdcbiAgICAgICAgICAgOiAnJ1xuICAgICAgICApICtcbiAgICAgICAgKGlzRXZhbHVhdGluZ1xuICAgICAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgICAgICBcImZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxcblwiXG4gICAgICAgICAgOiAnO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIHNvdXJjZSArXG4gICAgICAgICdyZXR1cm4gX19wXFxufSc7XG5cbiAgICAgIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gRnVuY3Rpb24oaW1wb3J0c0tleXMsIHNvdXJjZVVSTCArICdyZXR1cm4gJyArIHNvdXJjZSlcbiAgICAgICAgICAuYXBwbHkodW5kZWZpbmVkLCBpbXBvcnRzVmFsdWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBmdW5jdGlvbidzIHNvdXJjZSBieSBpdHMgYHRvU3RyaW5nYCBtZXRob2Qgb3JcbiAgICAgIC8vIHRoZSBgc291cmNlYCBwcm9wZXJ0eSBhcyBhIGNvbnZlbmllbmNlIGZvciBpbmxpbmluZyBjb21waWxlZCB0ZW1wbGF0ZXMuXG4gICAgICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICAgICAgaWYgKGlzRXJyb3IocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byBsb3dlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9Mb3dlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvTG93ZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0xvd2VyKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICctLWZvby1iYXItLSdcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb2JhcidcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnX19mb29fYmFyX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9Mb3dlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBhIHdob2xlLCB0byB1cHBlciBjYXNlIGp1c3QgbGlrZVxuICAgICAqIFtTdHJpbmcjdG9VcHBlckNhc2VdKGh0dHBzOi8vbWRuLmlvL3RvVXBwZXJDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVwcGVyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1VwcGVyKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICctLUZPTy1CQVItLSdcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPT0JBUidcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnX19GT09fQkFSX18nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9VcHBlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHZhbHVlKS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbSgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICpcbiAgICAgKiBfLm1hcChbJyAgZm9vICAnLCAnICBiYXIgICddLCBfLnRyaW0pO1xuICAgICAqIC8vID0+IFsnZm9vJywgJ2JhciddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbShzdHJpbmcsIGNoYXJzLCBndWFyZCkge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKGd1YXJkIHx8IGNoYXJzID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHJldHVybiBiYXNlVHJpbShzdHJpbmcpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIHRyaW1tZWRFbmRJbmRleChzdHJpbmcpICsgMSk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5vdmVyU29tZShbXy5tYXRjaGVzKHsgJ2EnOiAxIH0pLCBfLm1hdGNoZXMoeyAnYSc6IDQgfSldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0aGVcbiAgICAgKiB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QgdG8gYHNyY1ZhbHVlYCwgcmV0dXJuaW5nIGB0cnVlYCBpZiB0aGVcbiAgICAgKiBvYmplY3QgdmFsdWUgaXMgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0XG4gICAgICogYHNyY1ZhbHVlYCB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZVxuICAgICAqIGBfLmlzRXF1YWxgIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmQob2JqZWN0cywgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KSk7XG4gICAgICogLy8gPT4geyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlc1Byb3BlcnR5KCdhJywgMSksIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCldKSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LCB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzUHJvcGVydHkocGF0aCwgc3JjVmFsdWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIGJhc2VDbG9uZShzcmNWYWx1ZSwgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDIpIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgxKSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKFsnYScsICdiJ10pKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tZXRob2RgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzXG4gICAgICogdGhlIG1ldGhvZCBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmVcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gXy50aW1lcygzLCBfLmNvbnN0YW50KSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLm1ldGhvZE9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIHZhciBtZXRob2RPZiA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgYXJncykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFsbCBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgZnVuY3Rpb24gcHJvcGVydGllcyBvZiBhIHNvdXJjZVxuICAgICAqIG9iamVjdCB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0LiBJZiBgb2JqZWN0YCBpcyBhIGZ1bmN0aW9uLCB0aGVuIG1ldGhvZHNcbiAgICAgKiBhcmUgYWRkZWQgdG8gaXRzIHByb3RvdHlwZSBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVzZSBgXy5ydW5JbkNvbnRleHRgIHRvIGNyZWF0ZSBhIHByaXN0aW5lIGBsb2Rhc2hgIGZ1bmN0aW9uIHRvXG4gICAgICogYXZvaWQgY29uZmxpY3RzIGNhdXNlZCBieSBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gW29iamVjdD1sb2Rhc2hdIFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIGZ1bmN0aW9ucyB0byBhZGQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jaGFpbj10cnVlXSBTcGVjaWZ5IHdoZXRoZXIgbWl4aW5zIGFyZSBjaGFpbmFibGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gdm93ZWxzKHN0cmluZykge1xuICAgICAqICAgcmV0dXJuIF8uZmlsdGVyKHN0cmluZywgZnVuY3Rpb24odikge1xuICAgICAqICAgICByZXR1cm4gL1thZWlvdV0vaS50ZXN0KHYpO1xuICAgICAqICAgfSk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSk7XG4gICAgICogXy52b3dlbHMoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXygnZnJlZCcpLnZvd2VscygpLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0sIHsgJ2NoYWluJzogZmFsc2UgfSk7XG4gICAgICogXygnZnJlZCcpLnZvd2VscygpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWl4aW4ob2JqZWN0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKSxcbiAgICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBwcm9wcyk7XG5cbiAgICAgIGlmIChvcHRpb25zID09IG51bGwgJiZcbiAgICAgICAgICAhKGlzT2JqZWN0KHNvdXJjZSkgJiYgKG1ldGhvZE5hbWVzLmxlbmd0aCB8fCAhcHJvcHMubGVuZ3RoKSkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHNvdXJjZTtcbiAgICAgICAgc291cmNlID0gb2JqZWN0O1xuICAgICAgICBvYmplY3QgPSB0aGlzO1xuICAgICAgICBtZXRob2ROYW1lcyA9IGJhc2VGdW5jdGlvbnMoc291cmNlLCBrZXlzKHNvdXJjZSkpO1xuICAgICAgfVxuICAgICAgdmFyIGNoYWluID0gIShpc09iamVjdChvcHRpb25zKSAmJiAnY2hhaW4nIGluIG9wdGlvbnMpIHx8ICEhb3B0aW9ucy5jaGFpbixcbiAgICAgICAgICBpc0Z1bmMgPSBpc0Z1bmN0aW9uKG9iamVjdCk7XG5cbiAgICAgIGFycmF5RWFjaChtZXRob2ROYW1lcywgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IHNvdXJjZVttZXRob2ROYW1lXTtcbiAgICAgICAgb2JqZWN0W21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgIG9iamVjdC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fO1xuICAgICAgICAgICAgaWYgKGNoYWluIHx8IGNoYWluQWxsKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvYmplY3QodGhpcy5fX3dyYXBwZWRfXyksXG4gICAgICAgICAgICAgICAgICBhY3Rpb25zID0gcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuXG4gICAgICAgICAgICAgIGFjdGlvbnMucHVzaCh7ICdmdW5jJzogZnVuYywgJ2FyZ3MnOiBhcmd1bWVudHMsICd0aGlzQXJnJzogb2JqZWN0IH0pO1xuICAgICAgICAgICAgICByZXN1bHQuX19jaGFpbl9fID0gY2hhaW5BbGw7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShvYmplY3QsIGFycmF5UHVzaChbdGhpcy52YWx1ZSgpXSwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJ0cyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0cyBwcmV2aW91cyB2YWx1ZSBhbmQgcmV0dXJucyBhIHJlZmVyZW5jZSB0b1xuICAgICAqIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGxvZGFzaCA9IF8ubm9Db25mbGljdCgpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgICBpZiAocm9vdC5fID09PSB0aGlzKSB7XG4gICAgICAgIHJvb3QuXyA9IG9sZERhc2g7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLm5vb3ApO1xuICAgICAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub29wKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBnZXRzIHRoZSBhcmd1bWVudCBhdCBpbmRleCBgbmAuIElmIGBuYCBpcyBuZWdhdGl2ZSxcbiAgICAgKiB0aGUgbnRoIGFyZ3VtZW50IGZyb20gdGhlIGVuZCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTBdIFRoZSBpbmRleCBvZiB0aGUgYXJndW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhc3MtdGhydSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygxKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2InXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKC0yKTtcbiAgICAgKiBmdW5jKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gJ2MnXG4gICAgICovXG4gICAgZnVuY3Rpb24gbnRoQXJnKG4pIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICByZXR1cm4gYmFzZU50aChhcmdzLCBuKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGl0ZXJhdGVlc2Agd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzXG4gICAgICogYW5kIHJldHVybnMgdGhlaXIgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXIoW01hdGgubWF4LCBNYXRoLm1pbl0pO1xuICAgICAqXG4gICAgICogZnVuYygxLCAyLCAzLCA0KTtcbiAgICAgKiAvLyA9PiBbNCwgMV1cbiAgICAgKi9cbiAgICB2YXIgb3ZlciA9IGNyZWF0ZU92ZXIoYXJyYXlNYXApO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYWxsKiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlckV2ZXJ5KFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBvdmVyRXZlcnkgPSBjcmVhdGVPdmVyKGFycmF5RXZlcnkpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmICoqYW55Kiogb2YgdGhlIGBwcmVkaWNhdGVzYCByZXR1cm5cbiAgICAgKiB0cnV0aHkgd2hlbiBpbnZva2VkIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEZvbGxvd2luZyBzaG9ydGhhbmRzIGFyZSBwb3NzaWJsZSBmb3IgcHJvdmlkaW5nIHByZWRpY2F0ZXMuXG4gICAgICogUGFzcyBhbiBgT2JqZWN0YCBhbmQgaXQgd2lsbCBiZSB1c2VkIGFzIGFuIHBhcmFtZXRlciBmb3IgYF8ubWF0Y2hlc2AgdG8gY3JlYXRlIHRoZSBwcmVkaWNhdGUuXG4gICAgICogUGFzcyBhbiBgQXJyYXlgIG9mIHBhcmFtZXRlcnMgZm9yIGBfLm1hdGNoZXNQcm9wZXJ0eWAgYW5kIHRoZSBwcmVkaWNhdGUgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRoZW0uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbcHJlZGljYXRlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBwcmVkaWNhdGVzIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlclNvbWUoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIHZhciBtYXRjaGVzRnVuYyA9IF8ub3ZlclNvbWUoW3sgJ2EnOiAxIH0sIHsgJ2EnOiAyIH1dKVxuICAgICAqIHZhciBtYXRjaGVzUHJvcGVydHlGdW5jID0gXy5vdmVyU29tZShbWydhJywgMV0sIFsnYScsIDJdXSlcbiAgICAgKi9cbiAgICB2YXIgb3ZlclNvbWUgPSBjcmVhdGVPdmVyKGFycmF5U29tZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gICAgICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucHJvcGVydHlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zXG4gICAgICogdGhlIHZhbHVlIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMCwgMSwgMl0sXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqXG4gICAgICogXy5tYXAoW1snYScsICcyJ10sIFsnYycsICcwJ11dLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHlPZihvYmplY3QpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBudW1iZXJzIChwb3NpdGl2ZSBhbmQvb3IgbmVnYXRpdmUpIHByb2dyZXNzaW5nIGZyb21cbiAgICAgKiBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIEEgc3RlcCBvZiBgLTFgIGlzIHVzZWQgaWYgYSBuZWdhdGl2ZVxuICAgICAqIGBzdGFydGAgaXMgc3BlY2lmaWVkIHdpdGhvdXQgYW4gYGVuZGAgb3IgYHN0ZXBgLiBJZiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAqIGl0J3Mgc2V0IHRvIGBzdGFydGAgd2l0aCBgc3RhcnRgIHRoZW4gc2V0IHRvIGAwYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBKYXZhU2NyaXB0IGZvbGxvd3MgdGhlIElFRUUtNzU0IHN0YW5kYXJkIGZvciByZXNvbHZpbmdcbiAgICAgKiBmbG9hdGluZy1wb2ludCB2YWx1ZXMgd2hpY2ggY2FuIHByb2R1Y2UgdW5leHBlY3RlZCByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZSg0KTtcbiAgICAgKiAvLyA9PiBbMCwgMSwgMiwgM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoLTQpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA1KTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFswLCA1LCAxMCwgMTVdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZSA9IGNyZWF0ZVJhbmdlKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnJhbmdlYCBleGNlcHQgdGhhdCBpdCBwb3B1bGF0ZXMgdmFsdWVzIGluXG4gICAgICogZGVzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoNCk7XG4gICAgICogLy8gPT4gWzMsIDIsIDEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoLTQpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDUpO1xuICAgICAqIC8vID0+IFs0LCAzLCAyLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTUsIDEwLCA1LCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDAsIC00LCAtMSk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2VSaWdodCA9IGNyZWF0ZVJhbmdlKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXlzID0gXy50aW1lcygyLCBfLnN0dWJBcnJheSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICAgICAqIC8vID0+IFtbXSwgW11dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gICAgICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5zdHViT2JqZWN0KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7fSwge31dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJPYmplY3QoKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBhbiBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJycsICcnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJTdHJpbmcoKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViVHJ1ZSk7XG4gICAgICogLy8gPT4gW3RydWUsIHRydWVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlRydWUoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIHRoZSBpdGVyYXRlZSBgbmAgdGltZXMsIHJldHVybmluZyBhbiBhcnJheSBvZiB0aGUgcmVzdWx0cyBvZlxuICAgICAqIGVhY2ggaW52b2NhdGlvbi4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7IChpbmRleCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDMsIFN0cmluZyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnLCAnMiddXG4gICAgICpcbiAgICAgKiAgXy50aW1lcyg0LCBfLmNvbnN0YW50KDApKTtcbiAgICAgKiAvLyA9PiBbMCwgMCwgMCwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aW1lcyhuLCBpdGVyYXRlZSkge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIGlmIChuIDwgMSB8fCBuID4gTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBNQVhfQVJSQVlfTEVOR1RILFxuICAgICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSk7XG4gICAgICBuIC09IE1BWF9BUlJBWV9MRU5HVEg7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlVGltZXMobGVuZ3RoLCBpdGVyYXRlZSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgICAgaXRlcmF0ZWUoaW5kZXgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QYXRoKHZhbHVlKSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pcXVlIElELiBJZiBgcHJlZml4YCBpcyBnaXZlbiwgdGhlIElEIGlzIGFwcGVuZGVkIHRvIGl0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3ByZWZpeD0nJ10gVGhlIHZhbHVlIHRvIHByZWZpeCB0aGUgSUQgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1bmlxdWUgSUQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoJ2NvbnRhY3RfJyk7XG4gICAgICogLy8gPT4gJ2NvbnRhY3RfMTA0J1xuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgpO1xuICAgICAqIC8vID0+ICcxMDUnXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcXVlSWQocHJlZml4KSB7XG4gICAgICB2YXIgaWQgPSArK2lkQ291bnRlcjtcbiAgICAgIHJldHVybiB0b1N0cmluZyhwcmVmaXgpICsgaWQ7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGF1Z2VuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhZGRlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdG90YWwuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uYWRkKDYsIDQpO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgdmFyIGFkZCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oYXVnZW5kLCBhZGRlbmQpIHtcbiAgICAgIHJldHVybiBhdWdlbmQgKyBhZGRlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHVwIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIHVwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdXAgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCB1cCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg0LjAwNik7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogXy5jZWlsKDYuMDA0LCAyKTtcbiAgICAgKiAvLyA9PiA2LjAxXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNjA0MCwgLTIpO1xuICAgICAqIC8vID0+IDYxMDBcbiAgICAgKi9cbiAgICB2YXIgY2VpbCA9IGNyZWF0ZVJvdW5kKCdjZWlsJyk7XG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGUgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpZGVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlzb3IgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBxdW90aWVudC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kaXZpZGUoNiwgNCk7XG4gICAgICogLy8gPT4gMS41XG4gICAgICovXG4gICAgdmFyIGRpdmlkZSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24oZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgIHJldHVybiBkaXZpZGVuZCAvIGRpdmlzb3I7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIGRvd24gdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgZG93bi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIGRvd24gdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBkb3duIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mbG9vcig0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5mbG9vcigwLjA0NiwgMik7XG4gICAgICogLy8gPT4gMC4wNFxuICAgICAqXG4gICAgICogXy5mbG9vcig0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDAwMFxuICAgICAqL1xuICAgIHZhciBmbG9vciA9IGNyZWF0ZVJvdW5kKCdmbG9vcicpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1heGltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWF4KFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gOFxuICAgICAqXG4gICAgICogXy5tYXgoW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heChhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1heGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXhCeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXhCeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtZWFuIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1lYW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbihhcnJheSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBpZGVudGl0eSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tZWFuYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgYXZlcmFnZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYGFycmF5YC4gSWYgYGFycmF5YCBpcyBlbXB0eSBvciBmYWxzZXksXG4gICAgICogYHVuZGVmaW5lZGAgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWluKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogXy5taW4oW10pO1xuICAgICAqIC8vID0+IHVuZGVmaW5lZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbihhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBpZGVudGl0eSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1pbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieSB3aGljaFxuICAgICAqIHRoZSB2YWx1ZSBpcyByYW5rZWQuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDEgfSwgeyAnbic6IDIgfV07XG4gICAgICpcbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5taW5CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGllciBUaGUgZmlyc3QgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpY2FuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHByb2R1Y3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubXVsdGlwbHkoNiwgNCk7XG4gICAgICogLy8gPT4gMjRcbiAgICAgKi9cbiAgICB2YXIgbXVsdGlwbHkgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG11bHRpcGxpZXIsIG11bHRpcGxpY2FuZCkge1xuICAgICAgcmV0dXJuIG11bHRpcGxpZXIgKiBtdWx0aXBsaWNhbmQ7XG4gICAgfSwgMSk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBgbnVtYmVyYCByb3VuZGVkIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgdG8uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcm91bmRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNC4wMDYsIDIpO1xuICAgICAqIC8vID0+IDQuMDFcbiAgICAgKlxuICAgICAqIF8ucm91bmQoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQxMDBcbiAgICAgKi9cbiAgICB2YXIgcm91bmQgPSBjcmVhdGVSb3VuZCgncm91bmQnKTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0IHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWludWVuZCBUaGUgZmlyc3QgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN1YnRyYWhlbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1YnRyYWN0KDYsIDQpO1xuICAgICAqIC8vID0+IDJcbiAgICAgKi9cbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKG1pbnVlbmQsIHN1YnRyYWhlbmQpIHtcbiAgICAgIHJldHVybiBtaW51ZW5kIC0gc3VidHJhaGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBzdW0gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdW0oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgaWRlbnRpdHkpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnN1bWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIHN1bW1lZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zdW1CeShvYmplY3RzLCAnbicpO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogMDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB3cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFmdGVyID0gYWZ0ZXI7XG4gICAgbG9kYXNoLmFyeSA9IGFyeTtcbiAgICBsb2Rhc2guYXNzaWduID0gYXNzaWduO1xuICAgIGxvZGFzaC5hc3NpZ25JbiA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5hc3NpZ25JbldpdGggPSBhc3NpZ25JbldpdGg7XG4gICAgbG9kYXNoLmFzc2lnbldpdGggPSBhc3NpZ25XaXRoO1xuICAgIGxvZGFzaC5hdCA9IGF0O1xuICAgIGxvZGFzaC5iZWZvcmUgPSBiZWZvcmU7XG4gICAgbG9kYXNoLmJpbmQgPSBiaW5kO1xuICAgIGxvZGFzaC5iaW5kQWxsID0gYmluZEFsbDtcbiAgICBsb2Rhc2guYmluZEtleSA9IGJpbmRLZXk7XG4gICAgbG9kYXNoLmNhc3RBcnJheSA9IGNhc3RBcnJheTtcbiAgICBsb2Rhc2guY2hhaW4gPSBjaGFpbjtcbiAgICBsb2Rhc2guY2h1bmsgPSBjaHVuaztcbiAgICBsb2Rhc2guY29tcGFjdCA9IGNvbXBhY3Q7XG4gICAgbG9kYXNoLmNvbmNhdCA9IGNvbmNhdDtcbiAgICBsb2Rhc2guY29uZCA9IGNvbmQ7XG4gICAgbG9kYXNoLmNvbmZvcm1zID0gY29uZm9ybXM7XG4gICAgbG9kYXNoLmNvbnN0YW50ID0gY29uc3RhbnQ7XG4gICAgbG9kYXNoLmNvdW50QnkgPSBjb3VudEJ5O1xuICAgIGxvZGFzaC5jcmVhdGUgPSBjcmVhdGU7XG4gICAgbG9kYXNoLmN1cnJ5ID0gY3Vycnk7XG4gICAgbG9kYXNoLmN1cnJ5UmlnaHQgPSBjdXJyeVJpZ2h0O1xuICAgIGxvZGFzaC5kZWJvdW5jZSA9IGRlYm91bmNlO1xuICAgIGxvZGFzaC5kZWZhdWx0cyA9IGRlZmF1bHRzO1xuICAgIGxvZGFzaC5kZWZhdWx0c0RlZXAgPSBkZWZhdWx0c0RlZXA7XG4gICAgbG9kYXNoLmRlZmVyID0gZGVmZXI7XG4gICAgbG9kYXNoLmRlbGF5ID0gZGVsYXk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2UgPSBkaWZmZXJlbmNlO1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlQnkgPSBkaWZmZXJlbmNlQnk7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VXaXRoID0gZGlmZmVyZW5jZVdpdGg7XG4gICAgbG9kYXNoLmRyb3AgPSBkcm9wO1xuICAgIGxvZGFzaC5kcm9wUmlnaHQgPSBkcm9wUmlnaHQ7XG4gICAgbG9kYXNoLmRyb3BSaWdodFdoaWxlID0gZHJvcFJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLmRyb3BXaGlsZSA9IGRyb3BXaGlsZTtcbiAgICBsb2Rhc2guZmlsbCA9IGZpbGw7XG4gICAgbG9kYXNoLmZpbHRlciA9IGZpbHRlcjtcbiAgICBsb2Rhc2guZmxhdE1hcCA9IGZsYXRNYXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZWVwID0gZmxhdE1hcERlZXA7XG4gICAgbG9kYXNoLmZsYXRNYXBEZXB0aCA9IGZsYXRNYXBEZXB0aDtcbiAgICBsb2Rhc2guZmxhdHRlbiA9IGZsYXR0ZW47XG4gICAgbG9kYXNoLmZsYXR0ZW5EZWVwID0gZmxhdHRlbkRlZXA7XG4gICAgbG9kYXNoLmZsYXR0ZW5EZXB0aCA9IGZsYXR0ZW5EZXB0aDtcbiAgICBsb2Rhc2guZmxpcCA9IGZsaXA7XG4gICAgbG9kYXNoLmZsb3cgPSBmbG93O1xuICAgIGxvZGFzaC5mbG93UmlnaHQgPSBmbG93UmlnaHQ7XG4gICAgbG9kYXNoLmZyb21QYWlycyA9IGZyb21QYWlycztcbiAgICBsb2Rhc2guZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuICAgIGxvZGFzaC5mdW5jdGlvbnNJbiA9IGZ1bmN0aW9uc0luO1xuICAgIGxvZGFzaC5ncm91cEJ5ID0gZ3JvdXBCeTtcbiAgICBsb2Rhc2guaW5pdGlhbCA9IGluaXRpYWw7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbiA9IGludGVyc2VjdGlvbjtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uQnkgPSBpbnRlcnNlY3Rpb25CeTtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uV2l0aCA9IGludGVyc2VjdGlvbldpdGg7XG4gICAgbG9kYXNoLmludmVydCA9IGludmVydDtcbiAgICBsb2Rhc2guaW52ZXJ0QnkgPSBpbnZlcnRCeTtcbiAgICBsb2Rhc2guaW52b2tlTWFwID0gaW52b2tlTWFwO1xuICAgIGxvZGFzaC5pdGVyYXRlZSA9IGl0ZXJhdGVlO1xuICAgIGxvZGFzaC5rZXlCeSA9IGtleUJ5O1xuICAgIGxvZGFzaC5rZXlzID0ga2V5cztcbiAgICBsb2Rhc2gua2V5c0luID0ga2V5c0luO1xuICAgIGxvZGFzaC5tYXAgPSBtYXA7XG4gICAgbG9kYXNoLm1hcEtleXMgPSBtYXBLZXlzO1xuICAgIGxvZGFzaC5tYXBWYWx1ZXMgPSBtYXBWYWx1ZXM7XG4gICAgbG9kYXNoLm1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGxvZGFzaC5tYXRjaGVzUHJvcGVydHkgPSBtYXRjaGVzUHJvcGVydHk7XG4gICAgbG9kYXNoLm1lbW9pemUgPSBtZW1vaXplO1xuICAgIGxvZGFzaC5tZXJnZSA9IG1lcmdlO1xuICAgIGxvZGFzaC5tZXJnZVdpdGggPSBtZXJnZVdpdGg7XG4gICAgbG9kYXNoLm1ldGhvZCA9IG1ldGhvZDtcbiAgICBsb2Rhc2gubWV0aG9kT2YgPSBtZXRob2RPZjtcbiAgICBsb2Rhc2gubWl4aW4gPSBtaXhpbjtcbiAgICBsb2Rhc2gubmVnYXRlID0gbmVnYXRlO1xuICAgIGxvZGFzaC5udGhBcmcgPSBudGhBcmc7XG4gICAgbG9kYXNoLm9taXQgPSBvbWl0O1xuICAgIGxvZGFzaC5vbWl0QnkgPSBvbWl0Qnk7XG4gICAgbG9kYXNoLm9uY2UgPSBvbmNlO1xuICAgIGxvZGFzaC5vcmRlckJ5ID0gb3JkZXJCeTtcbiAgICBsb2Rhc2gub3ZlciA9IG92ZXI7XG4gICAgbG9kYXNoLm92ZXJBcmdzID0gb3ZlckFyZ3M7XG4gICAgbG9kYXNoLm92ZXJFdmVyeSA9IG92ZXJFdmVyeTtcbiAgICBsb2Rhc2gub3ZlclNvbWUgPSBvdmVyU29tZTtcbiAgICBsb2Rhc2gucGFydGlhbCA9IHBhcnRpYWw7XG4gICAgbG9kYXNoLnBhcnRpYWxSaWdodCA9IHBhcnRpYWxSaWdodDtcbiAgICBsb2Rhc2gucGFydGl0aW9uID0gcGFydGl0aW9uO1xuICAgIGxvZGFzaC5waWNrID0gcGljaztcbiAgICBsb2Rhc2gucGlja0J5ID0gcGlja0J5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgIGxvZGFzaC5wcm9wZXJ0eU9mID0gcHJvcGVydHlPZjtcbiAgICBsb2Rhc2gucHVsbCA9IHB1bGw7XG4gICAgbG9kYXNoLnB1bGxBbGwgPSBwdWxsQWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsQnkgPSBwdWxsQWxsQnk7XG4gICAgbG9kYXNoLnB1bGxBbGxXaXRoID0gcHVsbEFsbFdpdGg7XG4gICAgbG9kYXNoLnB1bGxBdCA9IHB1bGxBdDtcbiAgICBsb2Rhc2gucmFuZ2UgPSByYW5nZTtcbiAgICBsb2Rhc2gucmFuZ2VSaWdodCA9IHJhbmdlUmlnaHQ7XG4gICAgbG9kYXNoLnJlYXJnID0gcmVhcmc7XG4gICAgbG9kYXNoLnJlamVjdCA9IHJlamVjdDtcbiAgICBsb2Rhc2gucmVtb3ZlID0gcmVtb3ZlO1xuICAgIGxvZGFzaC5yZXN0ID0gcmVzdDtcbiAgICBsb2Rhc2gucmV2ZXJzZSA9IHJldmVyc2U7XG4gICAgbG9kYXNoLnNhbXBsZVNpemUgPSBzYW1wbGVTaXplO1xuICAgIGxvZGFzaC5zZXQgPSBzZXQ7XG4gICAgbG9kYXNoLnNldFdpdGggPSBzZXRXaXRoO1xuICAgIGxvZGFzaC5zaHVmZmxlID0gc2h1ZmZsZTtcbiAgICBsb2Rhc2guc2xpY2UgPSBzbGljZTtcbiAgICBsb2Rhc2guc29ydEJ5ID0gc29ydEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxID0gc29ydGVkVW5pcTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcUJ5ID0gc29ydGVkVW5pcUJ5O1xuICAgIGxvZGFzaC5zcGxpdCA9IHNwbGl0O1xuICAgIGxvZGFzaC5zcHJlYWQgPSBzcHJlYWQ7XG4gICAgbG9kYXNoLnRhaWwgPSB0YWlsO1xuICAgIGxvZGFzaC50YWtlID0gdGFrZTtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0ID0gdGFrZVJpZ2h0O1xuICAgIGxvZGFzaC50YWtlUmlnaHRXaGlsZSA9IHRha2VSaWdodFdoaWxlO1xuICAgIGxvZGFzaC50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4gICAgbG9kYXNoLnRhcCA9IHRhcDtcbiAgICBsb2Rhc2gudGhyb3R0bGUgPSB0aHJvdHRsZTtcbiAgICBsb2Rhc2gudGhydSA9IHRocnU7XG4gICAgbG9kYXNoLnRvQXJyYXkgPSB0b0FycmF5O1xuICAgIGxvZGFzaC50b1BhaXJzID0gdG9QYWlycztcbiAgICBsb2Rhc2gudG9QYWlyc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC50b1BhdGggPSB0b1BhdGg7XG4gICAgbG9kYXNoLnRvUGxhaW5PYmplY3QgPSB0b1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgbG9kYXNoLnVuYXJ5ID0gdW5hcnk7XG4gICAgbG9kYXNoLnVuaW9uID0gdW5pb247XG4gICAgbG9kYXNoLnVuaW9uQnkgPSB1bmlvbkJ5O1xuICAgIGxvZGFzaC51bmlvbldpdGggPSB1bmlvbldpdGg7XG4gICAgbG9kYXNoLnVuaXEgPSB1bmlxO1xuICAgIGxvZGFzaC51bmlxQnkgPSB1bmlxQnk7XG4gICAgbG9kYXNoLnVuaXFXaXRoID0gdW5pcVdpdGg7XG4gICAgbG9kYXNoLnVuc2V0ID0gdW5zZXQ7XG4gICAgbG9kYXNoLnVuemlwID0gdW56aXA7XG4gICAgbG9kYXNoLnVuemlwV2l0aCA9IHVuemlwV2l0aDtcbiAgICBsb2Rhc2gudXBkYXRlID0gdXBkYXRlO1xuICAgIGxvZGFzaC51cGRhdGVXaXRoID0gdXBkYXRlV2l0aDtcbiAgICBsb2Rhc2gudmFsdWVzID0gdmFsdWVzO1xuICAgIGxvZGFzaC52YWx1ZXNJbiA9IHZhbHVlc0luO1xuICAgIGxvZGFzaC53aXRob3V0ID0gd2l0aG91dDtcbiAgICBsb2Rhc2gud29yZHMgPSB3b3JkcztcbiAgICBsb2Rhc2gud3JhcCA9IHdyYXA7XG4gICAgbG9kYXNoLnhvciA9IHhvcjtcbiAgICBsb2Rhc2gueG9yQnkgPSB4b3JCeTtcbiAgICBsb2Rhc2gueG9yV2l0aCA9IHhvcldpdGg7XG4gICAgbG9kYXNoLnppcCA9IHppcDtcbiAgICBsb2Rhc2guemlwT2JqZWN0ID0gemlwT2JqZWN0O1xuICAgIGxvZGFzaC56aXBPYmplY3REZWVwID0gemlwT2JqZWN0RGVlcDtcbiAgICBsb2Rhc2guemlwV2l0aCA9IHppcFdpdGg7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZW50cmllcyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLmVudHJpZXNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2guZXh0ZW5kID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmV4dGVuZFdpdGggPSBhc3NpZ25JbldpdGg7XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgbWl4aW4obG9kYXNoLCBsb2Rhc2gpO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gdW53cmFwcGVkIHZhbHVlcyBpbiBjaGFpbiBzZXF1ZW5jZXMuXG4gICAgbG9kYXNoLmFkZCA9IGFkZDtcbiAgICBsb2Rhc2guYXR0ZW1wdCA9IGF0dGVtcHQ7XG4gICAgbG9kYXNoLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbiAgICBsb2Rhc2guY2FwaXRhbGl6ZSA9IGNhcGl0YWxpemU7XG4gICAgbG9kYXNoLmNlaWwgPSBjZWlsO1xuICAgIGxvZGFzaC5jbGFtcCA9IGNsYW1wO1xuICAgIGxvZGFzaC5jbG9uZSA9IGNsb25lO1xuICAgIGxvZGFzaC5jbG9uZURlZXAgPSBjbG9uZURlZXA7XG4gICAgbG9kYXNoLmNsb25lRGVlcFdpdGggPSBjbG9uZURlZXBXaXRoO1xuICAgIGxvZGFzaC5jbG9uZVdpdGggPSBjbG9uZVdpdGg7XG4gICAgbG9kYXNoLmNvbmZvcm1zVG8gPSBjb25mb3Jtc1RvO1xuICAgIGxvZGFzaC5kZWJ1cnIgPSBkZWJ1cnI7XG4gICAgbG9kYXNoLmRlZmF1bHRUbyA9IGRlZmF1bHRUbztcbiAgICBsb2Rhc2guZGl2aWRlID0gZGl2aWRlO1xuICAgIGxvZGFzaC5lbmRzV2l0aCA9IGVuZHNXaXRoO1xuICAgIGxvZGFzaC5lcSA9IGVxO1xuICAgIGxvZGFzaC5lc2NhcGUgPSBlc2NhcGU7XG4gICAgbG9kYXNoLmVzY2FwZVJlZ0V4cCA9IGVzY2FwZVJlZ0V4cDtcbiAgICBsb2Rhc2guZXZlcnkgPSBldmVyeTtcbiAgICBsb2Rhc2guZmluZCA9IGZpbmQ7XG4gICAgbG9kYXNoLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbiAgICBsb2Rhc2guZmluZEtleSA9IGZpbmRLZXk7XG4gICAgbG9kYXNoLmZpbmRMYXN0ID0gZmluZExhc3Q7XG4gICAgbG9kYXNoLmZpbmRMYXN0SW5kZXggPSBmaW5kTGFzdEluZGV4O1xuICAgIGxvZGFzaC5maW5kTGFzdEtleSA9IGZpbmRMYXN0S2V5O1xuICAgIGxvZGFzaC5mbG9vciA9IGZsb29yO1xuICAgIGxvZGFzaC5mb3JFYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZm9yRWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5mb3JJbiA9IGZvckluO1xuICAgIGxvZGFzaC5mb3JJblJpZ2h0ID0gZm9ySW5SaWdodDtcbiAgICBsb2Rhc2guZm9yT3duID0gZm9yT3duO1xuICAgIGxvZGFzaC5mb3JPd25SaWdodCA9IGZvck93blJpZ2h0O1xuICAgIGxvZGFzaC5nZXQgPSBnZXQ7XG4gICAgbG9kYXNoLmd0ID0gZ3Q7XG4gICAgbG9kYXNoLmd0ZSA9IGd0ZTtcbiAgICBsb2Rhc2guaGFzID0gaGFzO1xuICAgIGxvZGFzaC5oYXNJbiA9IGhhc0luO1xuICAgIGxvZGFzaC5oZWFkID0gaGVhZDtcbiAgICBsb2Rhc2guaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBsb2Rhc2guaW5jbHVkZXMgPSBpbmNsdWRlcztcbiAgICBsb2Rhc2guaW5kZXhPZiA9IGluZGV4T2Y7XG4gICAgbG9kYXNoLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgIGxvZGFzaC5pbnZva2UgPSBpbnZva2U7XG4gICAgbG9kYXNoLmlzQXJndW1lbnRzID0gaXNBcmd1bWVudHM7XG4gICAgbG9kYXNoLmlzQXJyYXkgPSBpc0FycmF5O1xuICAgIGxvZGFzaC5pc0FycmF5QnVmZmVyID0gaXNBcnJheUJ1ZmZlcjtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2UgPSBpc0FycmF5TGlrZTtcbiAgICBsb2Rhc2guaXNBcnJheUxpa2VPYmplY3QgPSBpc0FycmF5TGlrZU9iamVjdDtcbiAgICBsb2Rhc2guaXNCb29sZWFuID0gaXNCb29sZWFuO1xuICAgIGxvZGFzaC5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuICAgIGxvZGFzaC5pc0RhdGUgPSBpc0RhdGU7XG4gICAgbG9kYXNoLmlzRWxlbWVudCA9IGlzRWxlbWVudDtcbiAgICBsb2Rhc2guaXNFbXB0eSA9IGlzRW1wdHk7XG4gICAgbG9kYXNoLmlzRXF1YWwgPSBpc0VxdWFsO1xuICAgIGxvZGFzaC5pc0VxdWFsV2l0aCA9IGlzRXF1YWxXaXRoO1xuICAgIGxvZGFzaC5pc0Vycm9yID0gaXNFcnJvcjtcbiAgICBsb2Rhc2guaXNGaW5pdGUgPSBpc0Zpbml0ZTtcbiAgICBsb2Rhc2guaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4gICAgbG9kYXNoLmlzSW50ZWdlciA9IGlzSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNMZW5ndGggPSBpc0xlbmd0aDtcbiAgICBsb2Rhc2guaXNNYXAgPSBpc01hcDtcbiAgICBsb2Rhc2guaXNNYXRjaCA9IGlzTWF0Y2g7XG4gICAgbG9kYXNoLmlzTWF0Y2hXaXRoID0gaXNNYXRjaFdpdGg7XG4gICAgbG9kYXNoLmlzTmFOID0gaXNOYU47XG4gICAgbG9kYXNoLmlzTmF0aXZlID0gaXNOYXRpdmU7XG4gICAgbG9kYXNoLmlzTmlsID0gaXNOaWw7XG4gICAgbG9kYXNoLmlzTnVsbCA9IGlzTnVsbDtcbiAgICBsb2Rhc2guaXNOdW1iZXIgPSBpc051bWJlcjtcbiAgICBsb2Rhc2guaXNPYmplY3QgPSBpc09iamVjdDtcbiAgICBsb2Rhc2guaXNPYmplY3RMaWtlID0gaXNPYmplY3RMaWtlO1xuICAgIGxvZGFzaC5pc1BsYWluT2JqZWN0ID0gaXNQbGFpbk9iamVjdDtcbiAgICBsb2Rhc2guaXNSZWdFeHAgPSBpc1JlZ0V4cDtcbiAgICBsb2Rhc2guaXNTYWZlSW50ZWdlciA9IGlzU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLmlzU2V0ID0gaXNTZXQ7XG4gICAgbG9kYXNoLmlzU3RyaW5nID0gaXNTdHJpbmc7XG4gICAgbG9kYXNoLmlzU3ltYm9sID0gaXNTeW1ib2w7XG4gICAgbG9kYXNoLmlzVHlwZWRBcnJheSA9IGlzVHlwZWRBcnJheTtcbiAgICBsb2Rhc2guaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbiAgICBsb2Rhc2guaXNXZWFrTWFwID0gaXNXZWFrTWFwO1xuICAgIGxvZGFzaC5pc1dlYWtTZXQgPSBpc1dlYWtTZXQ7XG4gICAgbG9kYXNoLmpvaW4gPSBqb2luO1xuICAgIGxvZGFzaC5rZWJhYkNhc2UgPSBrZWJhYkNhc2U7XG4gICAgbG9kYXNoLmxhc3QgPSBsYXN0O1xuICAgIGxvZGFzaC5sYXN0SW5kZXhPZiA9IGxhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5sb3dlckNhc2UgPSBsb3dlckNhc2U7XG4gICAgbG9kYXNoLmxvd2VyRmlyc3QgPSBsb3dlckZpcnN0O1xuICAgIGxvZGFzaC5sdCA9IGx0O1xuICAgIGxvZGFzaC5sdGUgPSBsdGU7XG4gICAgbG9kYXNoLm1heCA9IG1heDtcbiAgICBsb2Rhc2gubWF4QnkgPSBtYXhCeTtcbiAgICBsb2Rhc2gubWVhbiA9IG1lYW47XG4gICAgbG9kYXNoLm1lYW5CeSA9IG1lYW5CeTtcbiAgICBsb2Rhc2gubWluID0gbWluO1xuICAgIGxvZGFzaC5taW5CeSA9IG1pbkJ5O1xuICAgIGxvZGFzaC5zdHViQXJyYXkgPSBzdHViQXJyYXk7XG4gICAgbG9kYXNoLnN0dWJGYWxzZSA9IHN0dWJGYWxzZTtcbiAgICBsb2Rhc2guc3R1Yk9iamVjdCA9IHN0dWJPYmplY3Q7XG4gICAgbG9kYXNoLnN0dWJTdHJpbmcgPSBzdHViU3RyaW5nO1xuICAgIGxvZGFzaC5zdHViVHJ1ZSA9IHN0dWJUcnVlO1xuICAgIGxvZGFzaC5tdWx0aXBseSA9IG11bHRpcGx5O1xuICAgIGxvZGFzaC5udGggPSBudGg7XG4gICAgbG9kYXNoLm5vQ29uZmxpY3QgPSBub0NvbmZsaWN0O1xuICAgIGxvZGFzaC5ub29wID0gbm9vcDtcbiAgICBsb2Rhc2gubm93ID0gbm93O1xuICAgIGxvZGFzaC5wYWQgPSBwYWQ7XG4gICAgbG9kYXNoLnBhZEVuZCA9IHBhZEVuZDtcbiAgICBsb2Rhc2gucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBsb2Rhc2gucGFyc2VJbnQgPSBwYXJzZUludDtcbiAgICBsb2Rhc2gucmFuZG9tID0gcmFuZG9tO1xuICAgIGxvZGFzaC5yZWR1Y2UgPSByZWR1Y2U7XG4gICAgbG9kYXNoLnJlZHVjZVJpZ2h0ID0gcmVkdWNlUmlnaHQ7XG4gICAgbG9kYXNoLnJlcGVhdCA9IHJlcGVhdDtcbiAgICBsb2Rhc2gucmVwbGFjZSA9IHJlcGxhY2U7XG4gICAgbG9kYXNoLnJlc3VsdCA9IHJlc3VsdDtcbiAgICBsb2Rhc2gucm91bmQgPSByb3VuZDtcbiAgICBsb2Rhc2gucnVuSW5Db250ZXh0ID0gcnVuSW5Db250ZXh0O1xuICAgIGxvZGFzaC5zYW1wbGUgPSBzYW1wbGU7XG4gICAgbG9kYXNoLnNpemUgPSBzaXplO1xuICAgIGxvZGFzaC5zbmFrZUNhc2UgPSBzbmFrZUNhc2U7XG4gICAgbG9kYXNoLnNvbWUgPSBzb21lO1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleCA9IHNvcnRlZEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleEJ5ID0gc29ydGVkSW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhPZiA9IHNvcnRlZEluZGV4T2Y7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleCA9IHNvcnRlZExhc3RJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4QnkgPSBzb3J0ZWRMYXN0SW5kZXhCeTtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4T2YgPSBzb3J0ZWRMYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2guc3RhcnRDYXNlID0gc3RhcnRDYXNlO1xuICAgIGxvZGFzaC5zdGFydHNXaXRoID0gc3RhcnRzV2l0aDtcbiAgICBsb2Rhc2guc3VidHJhY3QgPSBzdWJ0cmFjdDtcbiAgICBsb2Rhc2guc3VtID0gc3VtO1xuICAgIGxvZGFzaC5zdW1CeSA9IHN1bUJ5O1xuICAgIGxvZGFzaC50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGxvZGFzaC50aW1lcyA9IHRpbWVzO1xuICAgIGxvZGFzaC50b0Zpbml0ZSA9IHRvRmluaXRlO1xuICAgIGxvZGFzaC50b0ludGVnZXIgPSB0b0ludGVnZXI7XG4gICAgbG9kYXNoLnRvTGVuZ3RoID0gdG9MZW5ndGg7XG4gICAgbG9kYXNoLnRvTG93ZXIgPSB0b0xvd2VyO1xuICAgIGxvZGFzaC50b051bWJlciA9IHRvTnVtYmVyO1xuICAgIGxvZGFzaC50b1NhZmVJbnRlZ2VyID0gdG9TYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9TdHJpbmcgPSB0b1N0cmluZztcbiAgICBsb2Rhc2gudG9VcHBlciA9IHRvVXBwZXI7XG4gICAgbG9kYXNoLnRyaW0gPSB0cmltO1xuICAgIGxvZGFzaC50cmltRW5kID0gdHJpbUVuZDtcbiAgICBsb2Rhc2gudHJpbVN0YXJ0ID0gdHJpbVN0YXJ0O1xuICAgIGxvZGFzaC50cnVuY2F0ZSA9IHRydW5jYXRlO1xuICAgIGxvZGFzaC51bmVzY2FwZSA9IHVuZXNjYXBlO1xuICAgIGxvZGFzaC51bmlxdWVJZCA9IHVuaXF1ZUlkO1xuICAgIGxvZGFzaC51cHBlckNhc2UgPSB1cHBlckNhc2U7XG4gICAgbG9kYXNoLnVwcGVyRmlyc3QgPSB1cHBlckZpcnN0O1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5lYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZpcnN0ID0gaGVhZDtcblxuICAgIG1peGluKGxvZGFzaCwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHt9O1xuICAgICAgYmFzZUZvck93bihsb2Rhc2gsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKGxvZGFzaC5wcm90b3R5cGUsIG1ldGhvZE5hbWUpKSB7XG4gICAgICAgICAgc291cmNlW21ldGhvZE5hbWVdID0gZnVuYztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc291cmNlO1xuICAgIH0oKSksIHsgJ2NoYWluJzogZmFsc2UgfSk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGxvZGFzaC5WRVJTSU9OID0gVkVSU0lPTjtcblxuICAgIC8vIEFzc2lnbiBkZWZhdWx0IHBsYWNlaG9sZGVycy5cbiAgICBhcnJheUVhY2goWydiaW5kJywgJ2JpbmRLZXknLCAnY3VycnknLCAnY3VycnlSaWdodCcsICdwYXJ0aWFsJywgJ3BhcnRpYWxSaWdodCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICBsb2Rhc2hbbWV0aG9kTmFtZV0ucGxhY2Vob2xkZXIgPSBsb2Rhc2g7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5kcm9wYCBhbmQgYF8udGFrZWAgdmFyaWFudHMuXG4gICAgYXJyYXlFYWNoKFsnZHJvcCcsICd0YWtlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIG4gPSBuID09PSB1bmRlZmluZWQgPyAxIDogbmF0aXZlTWF4KHRvSW50ZWdlcihuKSwgMCk7XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9ICh0aGlzLl9fZmlsdGVyZWRfXyAmJiAhaW5kZXgpXG4gICAgICAgICAgPyBuZXcgTGF6eVdyYXBwZXIodGhpcylcbiAgICAgICAgICA6IHRoaXMuY2xvbmUoKTtcblxuICAgICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXykge1xuICAgICAgICAgIHJlc3VsdC5fX3Rha2VDb3VudF9fID0gbmF0aXZlTWluKG4sIHJlc3VsdC5fX3Rha2VDb3VudF9fKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQuX192aWV3c19fLnB1c2goe1xuICAgICAgICAgICAgJ3NpemUnOiBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCksXG4gICAgICAgICAgICAndHlwZSc6IG1ldGhvZE5hbWUgKyAocmVzdWx0Ll9fZGlyX18gPCAwID8gJ1JpZ2h0JyA6ICcnKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZSArICdSaWdodCddID0gZnVuY3Rpb24obikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKClbbWV0aG9kTmFtZV0obikucmV2ZXJzZSgpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdGhhdCBhY2NlcHQgYW4gYGl0ZXJhdGVlYCB2YWx1ZS5cbiAgICBhcnJheUVhY2goWydmaWx0ZXInLCAnbWFwJywgJ3Rha2VXaGlsZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHR5cGUgPSBpbmRleCArIDEsXG4gICAgICAgICAgaXNGaWx0ZXIgPSB0eXBlID09IExBWllfRklMVEVSX0ZMQUcgfHwgdHlwZSA9PSBMQVpZX1dISUxFX0ZMQUc7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIHJlc3VsdC5fX2l0ZXJhdGVlc19fLnB1c2goe1xuICAgICAgICAgICdpdGVyYXRlZSc6IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSxcbiAgICAgICAgICAndHlwZSc6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdC5fX2ZpbHRlcmVkX18gPSByZXN1bHQuX19maWx0ZXJlZF9fIHx8IGlzRmlsdGVyO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmhlYWRgIGFuZCBgXy5sYXN0YC5cbiAgICBhcnJheUVhY2goWydoZWFkJywgJ2xhc3QnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0YWtlTmFtZSA9ICd0YWtlJyArIChpbmRleCA/ICdSaWdodCcgOiAnJyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpc1t0YWtlTmFtZV0oMSkudmFsdWUoKVswXTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5pbml0aWFsYCBhbmQgYF8udGFpbGAuXG4gICAgYXJyYXlFYWNoKFsnaW5pdGlhbCcsICd0YWlsJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgZHJvcE5hbWUgPSAnZHJvcCcgKyAoaW5kZXggPyAnJyA6ICdSaWdodCcpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IExhenlXcmFwcGVyKHRoaXMpIDogdGhpc1tkcm9wTmFtZV0oMSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNvbXBhY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihpZGVudGl0eSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIocHJlZGljYXRlKS5oZWFkKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5maW5kTGFzdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQocHJlZGljYXRlKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2UodmFsdWUsIHBhdGgsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmVqZWN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIobmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSkpKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgc3RhcnQgPSB0b0ludGVnZXIoc3RhcnQpO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcztcbiAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fICYmIChzdGFydCA+IDAgfHwgZW5kIDwgMCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcihyZXN1bHQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXJ0IDwgMCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQudGFrZVJpZ2h0KC1zdGFydCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5kcm9wKHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSB0b0ludGVnZXIoZW5kKTtcbiAgICAgICAgcmVzdWx0ID0gZW5kIDwgMCA/IHJlc3VsdC5kcm9wUmlnaHQoLWVuZCkgOiByZXN1bHQudGFrZShlbmQgLSBzdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudGFrZVJpZ2h0V2hpbGUgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUocHJlZGljYXRlKS5yZXZlcnNlKCk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWtlKE1BWF9BUlJBWV9MRU5HVEgpO1xuICAgIH07XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGNoZWNrSXRlcmF0ZWUgPSAvXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBpc1Rha2VyID0gL14oPzpoZWFkfGxhc3QpJC8udGVzdChtZXRob2ROYW1lKSxcbiAgICAgICAgICBsb2Rhc2hGdW5jID0gbG9kYXNoW2lzVGFrZXIgPyAoJ3Rha2UnICsgKG1ldGhvZE5hbWUgPT0gJ2xhc3QnID8gJ1JpZ2h0JyA6ICcnKSkgOiBtZXRob2ROYW1lXSxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSBpc1Rha2VyIHx8IC9eZmluZC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgaWYgKCFsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXyxcbiAgICAgICAgICAgIGFyZ3MgPSBpc1Rha2VyID8gWzFdIDogYXJndW1lbnRzLFxuICAgICAgICAgICAgaXNMYXp5ID0gdmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcixcbiAgICAgICAgICAgIGl0ZXJhdGVlID0gYXJnc1swXSxcbiAgICAgICAgICAgIHVzZUxhenkgPSBpc0xhenkgfHwgaXNBcnJheSh2YWx1ZSk7XG5cbiAgICAgICAgdmFyIGludGVyY2VwdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gbG9kYXNoRnVuYy5hcHBseShsb2Rhc2gsIGFycmF5UHVzaChbdmFsdWVdLCBhcmdzKSk7XG4gICAgICAgICAgcmV0dXJuIChpc1Rha2VyICYmIGNoYWluQWxsKSA/IHJlc3VsdFswXSA6IHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodXNlTGF6eSAmJiBjaGVja0l0ZXJhdGVlICYmIHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nICYmIGl0ZXJhdGVlLmxlbmd0aCAhPSAxKSB7XG4gICAgICAgICAgLy8gQXZvaWQgbGF6eSB1c2UgaWYgdGhlIGl0ZXJhdGVlIGhhcyBhIFwibGVuZ3RoXCIgdmFsdWUgb3RoZXIgdGhhbiBgMWAuXG4gICAgICAgICAgaXNMYXp5ID0gdXNlTGF6eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFpbkFsbCA9IHRoaXMuX19jaGFpbl9fLFxuICAgICAgICAgICAgaXNIeWJyaWQgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLFxuICAgICAgICAgICAgaXNVbndyYXBwZWQgPSByZXRVbndyYXBwZWQgJiYgIWNoYWluQWxsLFxuICAgICAgICAgICAgb25seUxhenkgPSBpc0xhenkgJiYgIWlzSHlicmlkO1xuXG4gICAgICAgIGlmICghcmV0VW53cmFwcGVkICYmIHVzZUxhenkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9ubHlMYXp5ID8gdmFsdWUgOiBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodmFsdWUsIGFyZ3MpO1xuICAgICAgICAgIHJlc3VsdC5fX2FjdGlvbnNfXy5wdXNoKHsgJ2Z1bmMnOiB0aHJ1LCAnYXJncyc6IFtpbnRlcmNlcHRvcl0sICd0aGlzQXJnJzogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcihyZXN1bHQsIGNoYWluQWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNVbndyYXBwZWQgJiYgb25seUxhenkpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB0aGlzLnRocnUoaW50ZXJjZXB0b3IpO1xuICAgICAgICByZXR1cm4gaXNVbndyYXBwZWQgPyAoaXNUYWtlciA/IHJlc3VsdC52YWx1ZSgpWzBdIDogcmVzdWx0LnZhbHVlKCkpIDogcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgQXJyYXlgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGFycmF5RWFjaChbJ3BvcCcsICdwdXNoJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBhcnJheVByb3RvW21ldGhvZE5hbWVdLFxuICAgICAgICAgIGNoYWluTmFtZSA9IC9eKD86cHVzaHxzb3J0fHVuc2hpZnQpJC8udGVzdChtZXRob2ROYW1lKSA/ICd0YXAnIDogJ3RocnUnLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IC9eKD86cG9wfHNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmIChyZXRVbndyYXBwZWQgJiYgIXRoaXMuX19jaGFpbl9fKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbY2hhaW5OYW1lXShmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KGlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIE1hcCBtaW5pZmllZCBtZXRob2QgbmFtZXMgdG8gdGhlaXIgcmVhbCBuYW1lcy5cbiAgICBiYXNlRm9yT3duKExhenlXcmFwcGVyLnByb3RvdHlwZSwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbbWV0aG9kTmFtZV07XG4gICAgICBpZiAobG9kYXNoRnVuYykge1xuICAgICAgICB2YXIga2V5ID0gbG9kYXNoRnVuYy5uYW1lICsgJyc7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIGtleSkpIHtcbiAgICAgICAgICByZWFsTmFtZXNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlYWxOYW1lc1trZXldLnB1c2goeyAnbmFtZSc6IG1ldGhvZE5hbWUsICdmdW5jJzogbG9kYXNoRnVuYyB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlYWxOYW1lc1tjcmVhdGVIeWJyaWQodW5kZWZpbmVkLCBXUkFQX0JJTkRfS0VZX0ZMQUcpLm5hbWVdID0gW3tcbiAgICAgICduYW1lJzogJ3dyYXBwZXInLFxuICAgICAgJ2Z1bmMnOiB1bmRlZmluZWRcbiAgICB9XTtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMYXp5V3JhcHBlcmAuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmNsb25lID0gbGF6eUNsb25lO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZXZlcnNlID0gbGF6eVJldmVyc2U7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnZhbHVlID0gbGF6eVZhbHVlO1xuXG4gICAgLy8gQWRkIGNoYWluIHNlcXVlbmNlIG1ldGhvZHMgdG8gdGhlIGBsb2Rhc2hgIHdyYXBwZXIuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5hdCA9IHdyYXBwZXJBdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNoYWluID0gd3JhcHBlckNoYWluO1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY29tbWl0ID0gd3JhcHBlckNvbW1pdDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLm5leHQgPSB3cmFwcGVyTmV4dDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnBsYW50ID0gd3JhcHBlclBsYW50O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucmV2ZXJzZSA9IHdyYXBwZXJSZXZlcnNlO1xuICAgIGxvZGFzaC5wcm90b3R5cGUudG9KU09OID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZU9mID0gbG9kYXNoLnByb3RvdHlwZS52YWx1ZSA9IHdyYXBwZXJWYWx1ZTtcblxuICAgIC8vIEFkZCBsYXp5IGFsaWFzZXMuXG4gICAgbG9kYXNoLnByb3RvdHlwZS5maXJzdCA9IGxvZGFzaC5wcm90b3R5cGUuaGVhZDtcblxuICAgIGlmIChzeW1JdGVyYXRvcikge1xuICAgICAgbG9kYXNoLnByb3RvdHlwZVtzeW1JdGVyYXRvcl0gPSB3cmFwcGVyVG9JdGVyYXRvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxvZGFzaDtcbiAgfSk7XG5cbiAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgLy8gRXhwb3J0IGxvZGFzaC5cbiAgdmFyIF8gPSBydW5JbkNvbnRleHQoKTtcblxuICAvLyBTb21lIEFNRCBidWlsZCBvcHRpbWl6ZXJzLCBsaWtlIHIuanMsIGNoZWNrIGZvciBjb25kaXRpb24gcGF0dGVybnMgbGlrZTpcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gRXhwb3NlIExvZGFzaCBvbiB0aGUgZ2xvYmFsIG9iamVjdCB0byBwcmV2ZW50IGVycm9ycyB3aGVuIExvZGFzaCBpc1xuICAgIC8vIGxvYWRlZCBieSBhIHNjcmlwdCB0YWcgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRCBsb2FkZXIuXG4gICAgLy8gU2VlIGh0dHA6Ly9yZXF1aXJlanMub3JnL2RvY3MvZXJyb3JzLmh0bWwjbWlzbWF0Y2ggZm9yIG1vcmUgZGV0YWlscy5cbiAgICAvLyBVc2UgYF8ubm9Db25mbGljdGAgdG8gcmVtb3ZlIExvZGFzaCBmcm9tIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG5cbiAgICAvLyBEZWZpbmUgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSBzbywgdGhyb3VnaCBwYXRoIG1hcHBpbmcsIGl0IGNhbiBiZVxuICAgIC8vIHJlZmVyZW5jZWQgYXMgdGhlIFwidW5kZXJzY29yZVwiIG1vZHVsZS5cbiAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxuICAvLyBDaGVjayBmb3IgYGV4cG9ydHNgIGFmdGVyIGBkZWZpbmVgIGluIGNhc2UgYSBidWlsZCBvcHRpbWl6ZXIgYWRkcyBpdC5cbiAgZWxzZSBpZiAoZnJlZU1vZHVsZSkge1xuICAgIC8vIEV4cG9ydCBmb3IgTm9kZS5qcy5cbiAgICAoZnJlZU1vZHVsZS5leHBvcnRzID0gXykuXyA9IF87XG4gICAgLy8gRXhwb3J0IGZvciBDb21tb25KUyBzdXBwb3J0LlxuICAgIGZyZWVFeHBvcnRzLl8gPSBfO1xuICB9XG4gIGVsc2Uge1xuICAgIC8vIEV4cG9ydCB0byB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuICB9XG59LmNhbGwodGhpcykpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgVXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgd2hhdHdnVXJsIGZyb20gJ3doYXR3Zy11cmwnO1xuaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCB6bGliIGZyb20gJ3psaWInO1xuXG4vLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdG1wdmFyL2pzZG9tL2Jsb2IvYWE4NWIyYWJmMDc3NjZmZjdiZjVjMWY2ZGFhZmIzNzI2ZjJmMmRiNS9saWIvanNkb20vbGl2aW5nL2Jsb2IuanNcblxuLy8gZml4IGZvciBcIlJlYWRhYmxlXCIgaXNuJ3QgYSBuYW1lZCBleHBvcnQgaXNzdWVcbmNvbnN0IFJlYWRhYmxlID0gU3RyZWFtLlJlYWRhYmxlO1xuXG5jb25zdCBCVUZGRVIgPSBTeW1ib2woJ2J1ZmZlcicpO1xuY29uc3QgVFlQRSA9IFN5bWJvbCgndHlwZScpO1xuXG5jbGFzcyBCbG9iIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpc1tUWVBFXSA9ICcnO1xuXG5cdFx0Y29uc3QgYmxvYlBhcnRzID0gYXJndW1lbnRzWzBdO1xuXHRcdGNvbnN0IG9wdGlvbnMgPSBhcmd1bWVudHNbMV07XG5cblx0XHRjb25zdCBidWZmZXJzID0gW107XG5cdFx0bGV0IHNpemUgPSAwO1xuXG5cdFx0aWYgKGJsb2JQYXJ0cykge1xuXHRcdFx0Y29uc3QgYSA9IGJsb2JQYXJ0cztcblx0XHRcdGNvbnN0IGxlbmd0aCA9IE51bWJlcihhLmxlbmd0aCk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGNvbnN0IGVsZW1lbnQgPSBhW2ldO1xuXHRcdFx0XHRsZXQgYnVmZmVyO1xuXHRcdFx0XHRpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuXHRcdFx0XHRcdGJ1ZmZlciA9IGVsZW1lbnQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGVsZW1lbnQpKSB7XG5cdFx0XHRcdFx0YnVmZmVyID0gQnVmZmVyLmZyb20oZWxlbWVudC5idWZmZXIsIGVsZW1lbnQuYnl0ZU9mZnNldCwgZWxlbWVudC5ieXRlTGVuZ3RoKTtcblx0XHRcdFx0fSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcblx0XHRcdFx0XHRidWZmZXIgPSBCdWZmZXIuZnJvbShlbGVtZW50KTtcblx0XHRcdFx0fSBlbHNlIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQmxvYikge1xuXHRcdFx0XHRcdGJ1ZmZlciA9IGVsZW1lbnRbQlVGRkVSXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRidWZmZXIgPSBCdWZmZXIuZnJvbSh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgPyBlbGVtZW50IDogU3RyaW5nKGVsZW1lbnQpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzaXplICs9IGJ1ZmZlci5sZW5ndGg7XG5cdFx0XHRcdGJ1ZmZlcnMucHVzaChidWZmZXIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXNbQlVGRkVSXSA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycyk7XG5cblx0XHRsZXQgdHlwZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlICE9PSB1bmRlZmluZWQgJiYgU3RyaW5nKG9wdGlvbnMudHlwZSkudG9Mb3dlckNhc2UoKTtcblx0XHRpZiAodHlwZSAmJiAhL1teXFx1MDAyMC1cXHUwMDdFXS8udGVzdCh0eXBlKSkge1xuXHRcdFx0dGhpc1tUWVBFXSA9IHR5cGU7XG5cdFx0fVxuXHR9XG5cdGdldCBzaXplKCkge1xuXHRcdHJldHVybiB0aGlzW0JVRkZFUl0ubGVuZ3RoO1xuXHR9XG5cdGdldCB0eXBlKCkge1xuXHRcdHJldHVybiB0aGlzW1RZUEVdO1xuXHR9XG5cdHRleHQoKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzW0JVRkZFUl0udG9TdHJpbmcoKSk7XG5cdH1cblx0YXJyYXlCdWZmZXIoKSB7XG5cdFx0Y29uc3QgYnVmID0gdGhpc1tCVUZGRVJdO1xuXHRcdGNvbnN0IGFiID0gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aCk7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZShhYik7XG5cdH1cblx0c3RyZWFtKCkge1xuXHRcdGNvbnN0IHJlYWRhYmxlID0gbmV3IFJlYWRhYmxlKCk7XG5cdFx0cmVhZGFibGUuX3JlYWQgPSBmdW5jdGlvbiAoKSB7fTtcblx0XHRyZWFkYWJsZS5wdXNoKHRoaXNbQlVGRkVSXSk7XG5cdFx0cmVhZGFibGUucHVzaChudWxsKTtcblx0XHRyZXR1cm4gcmVhZGFibGU7XG5cdH1cblx0dG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuICdbb2JqZWN0IEJsb2JdJztcblx0fVxuXHRzbGljZSgpIHtcblx0XHRjb25zdCBzaXplID0gdGhpcy5zaXplO1xuXG5cdFx0Y29uc3Qgc3RhcnQgPSBhcmd1bWVudHNbMF07XG5cdFx0Y29uc3QgZW5kID0gYXJndW1lbnRzWzFdO1xuXHRcdGxldCByZWxhdGl2ZVN0YXJ0LCByZWxhdGl2ZUVuZDtcblx0XHRpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmVsYXRpdmVTdGFydCA9IDA7XG5cdFx0fSBlbHNlIGlmIChzdGFydCA8IDApIHtcblx0XHRcdHJlbGF0aXZlU3RhcnQgPSBNYXRoLm1heChzaXplICsgc3RhcnQsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWxhdGl2ZVN0YXJ0ID0gTWF0aC5taW4oc3RhcnQsIHNpemUpO1xuXHRcdH1cblx0XHRpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHJlbGF0aXZlRW5kID0gc2l6ZTtcblx0XHR9IGVsc2UgaWYgKGVuZCA8IDApIHtcblx0XHRcdHJlbGF0aXZlRW5kID0gTWF0aC5tYXgoc2l6ZSArIGVuZCwgMCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbGF0aXZlRW5kID0gTWF0aC5taW4oZW5kLCBzaXplKTtcblx0XHR9XG5cdFx0Y29uc3Qgc3BhbiA9IE1hdGgubWF4KHJlbGF0aXZlRW5kIC0gcmVsYXRpdmVTdGFydCwgMCk7XG5cblx0XHRjb25zdCBidWZmZXIgPSB0aGlzW0JVRkZFUl07XG5cdFx0Y29uc3Qgc2xpY2VkQnVmZmVyID0gYnVmZmVyLnNsaWNlKHJlbGF0aXZlU3RhcnQsIHJlbGF0aXZlU3RhcnQgKyBzcGFuKTtcblx0XHRjb25zdCBibG9iID0gbmV3IEJsb2IoW10sIHsgdHlwZTogYXJndW1lbnRzWzJdIH0pO1xuXHRcdGJsb2JbQlVGRkVSXSA9IHNsaWNlZEJ1ZmZlcjtcblx0XHRyZXR1cm4gYmxvYjtcblx0fVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhCbG9iLnByb3RvdHlwZSwge1xuXHRzaXplOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0dHlwZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHNsaWNlOiB7IGVudW1lcmFibGU6IHRydWUgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCbG9iLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG5cdHZhbHVlOiAnQmxvYicsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbi8qKlxuICogZmV0Y2gtZXJyb3IuanNcbiAqXG4gKiBGZXRjaEVycm9yIGludGVyZmFjZSBmb3Igb3BlcmF0aW9uYWwgZXJyb3JzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgRmV0Y2hFcnJvciBpbnN0YW5jZVxuICpcbiAqIEBwYXJhbSAgIFN0cmluZyAgICAgIG1lc3NhZ2UgICAgICBFcnJvciBtZXNzYWdlIGZvciBodW1hblxuICogQHBhcmFtICAgU3RyaW5nICAgICAgdHlwZSAgICAgICAgIEVycm9yIHR5cGUgZm9yIG1hY2hpbmVcbiAqIEBwYXJhbSAgIFN0cmluZyAgICAgIHN5c3RlbUVycm9yICBGb3IgTm9kZS5qcyBzeXN0ZW0gZXJyb3JcbiAqIEByZXR1cm4gIEZldGNoRXJyb3JcbiAqL1xuZnVuY3Rpb24gRmV0Y2hFcnJvcihtZXNzYWdlLCB0eXBlLCBzeXN0ZW1FcnJvcikge1xuICBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG5cbiAgLy8gd2hlbiBlcnIudHlwZSBpcyBgc3lzdGVtYCwgZXJyLmNvZGUgY29udGFpbnMgc3lzdGVtIGVycm9yIGNvZGVcbiAgaWYgKHN5c3RlbUVycm9yKSB7XG4gICAgdGhpcy5jb2RlID0gdGhpcy5lcnJubyA9IHN5c3RlbUVycm9yLmNvZGU7XG4gIH1cblxuICAvLyBoaWRlIGN1c3RvbSBlcnJvciBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIGZyb20gZW5kLXVzZXJzXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xufVxuXG5GZXRjaEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbkZldGNoRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmV0Y2hFcnJvcjtcbkZldGNoRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnRmV0Y2hFcnJvcic7XG5cbmxldCBjb252ZXJ0O1xudHJ5IHtcblx0Y29udmVydCA9IHJlcXVpcmUoJ2VuY29kaW5nJykuY29udmVydDtcbn0gY2F0Y2ggKGUpIHt9XG5cbmNvbnN0IElOVEVSTkFMUyA9IFN5bWJvbCgnQm9keSBpbnRlcm5hbHMnKTtcblxuLy8gZml4IGFuIGlzc3VlIHdoZXJlIFwiUGFzc1Rocm91Z2hcIiBpc24ndCBhIG5hbWVkIGV4cG9ydCBmb3Igbm9kZSA8MTBcbmNvbnN0IFBhc3NUaHJvdWdoID0gU3RyZWFtLlBhc3NUaHJvdWdoO1xuXG4vKipcbiAqIEJvZHkgbWl4aW5cbiAqXG4gKiBSZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNib2R5XG4gKlxuICogQHBhcmFtICAgU3RyZWFtICBib2R5ICBSZWFkYWJsZSBzdHJlYW1cbiAqIEBwYXJhbSAgIE9iamVjdCAgb3B0cyAgUmVzcG9uc2Ugb3B0aW9uc1xuICogQHJldHVybiAgVm9pZFxuICovXG5mdW5jdGlvbiBCb2R5KGJvZHkpIHtcblx0dmFyIF90aGlzID0gdGhpcztcblxuXHR2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG5cdCAgICBfcmVmJHNpemUgPSBfcmVmLnNpemU7XG5cblx0bGV0IHNpemUgPSBfcmVmJHNpemUgPT09IHVuZGVmaW5lZCA/IDAgOiBfcmVmJHNpemU7XG5cdHZhciBfcmVmJHRpbWVvdXQgPSBfcmVmLnRpbWVvdXQ7XG5cdGxldCB0aW1lb3V0ID0gX3JlZiR0aW1lb3V0ID09PSB1bmRlZmluZWQgPyAwIDogX3JlZiR0aW1lb3V0O1xuXG5cdGlmIChib2R5ID09IG51bGwpIHtcblx0XHQvLyBib2R5IGlzIHVuZGVmaW5lZCBvciBudWxsXG5cdFx0Ym9keSA9IG51bGw7XG5cdH0gZWxzZSBpZiAoaXNVUkxTZWFyY2hQYXJhbXMoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGEgVVJMU2VhcmNoUGFyYW1zXG5cdFx0Ym9keSA9IEJ1ZmZlci5mcm9tKGJvZHkudG9TdHJpbmcoKSk7XG5cdH0gZWxzZSBpZiAoaXNCbG9iKGJvZHkpKSA7IGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihib2R5KSkgOyBlbHNlIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcblx0XHQvLyBib2R5IGlzIEFycmF5QnVmZmVyXG5cdFx0Ym9keSA9IEJ1ZmZlci5mcm9tKGJvZHkpO1xuXHR9IGVsc2UgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhib2R5KSkge1xuXHRcdC8vIGJvZHkgaXMgQXJyYXlCdWZmZXJWaWV3XG5cdFx0Ym9keSA9IEJ1ZmZlci5mcm9tKGJvZHkuYnVmZmVyLCBib2R5LmJ5dGVPZmZzZXQsIGJvZHkuYnl0ZUxlbmd0aCk7XG5cdH0gZWxzZSBpZiAoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkgOyBlbHNlIHtcblx0XHQvLyBub25lIG9mIHRoZSBhYm92ZVxuXHRcdC8vIGNvZXJjZSB0byBzdHJpbmcgdGhlbiBidWZmZXJcblx0XHRib2R5ID0gQnVmZmVyLmZyb20oU3RyaW5nKGJvZHkpKTtcblx0fVxuXHR0aGlzW0lOVEVSTkFMU10gPSB7XG5cdFx0Ym9keSxcblx0XHRkaXN0dXJiZWQ6IGZhbHNlLFxuXHRcdGVycm9yOiBudWxsXG5cdH07XG5cdHRoaXMuc2l6ZSA9IHNpemU7XG5cdHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG5cblx0aWYgKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0pIHtcblx0XHRib2R5Lm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdGNvbnN0IGVycm9yID0gZXJyLm5hbWUgPT09ICdBYm9ydEVycm9yJyA/IGVyciA6IG5ldyBGZXRjaEVycm9yKGBJbnZhbGlkIHJlc3BvbnNlIGJvZHkgd2hpbGUgdHJ5aW5nIHRvIGZldGNoICR7X3RoaXMudXJsfTogJHtlcnIubWVzc2FnZX1gLCAnc3lzdGVtJywgZXJyKTtcblx0XHRcdF90aGlzW0lOVEVSTkFMU10uZXJyb3IgPSBlcnJvcjtcblx0XHR9KTtcblx0fVxufVxuXG5Cb2R5LnByb3RvdHlwZSA9IHtcblx0Z2V0IGJvZHkoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTXS5ib2R5O1xuXHR9LFxuXG5cdGdldCBib2R5VXNlZCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFNdLmRpc3R1cmJlZDtcblx0fSxcblxuXHQvKipcbiAgKiBEZWNvZGUgcmVzcG9uc2UgYXMgQXJyYXlCdWZmZXJcbiAgKlxuICAqIEByZXR1cm4gIFByb21pc2VcbiAgKi9cblx0YXJyYXlCdWZmZXIoKSB7XG5cdFx0cmV0dXJuIGNvbnN1bWVCb2R5LmNhbGwodGhpcykudGhlbihmdW5jdGlvbiAoYnVmKSB7XG5cdFx0XHRyZXR1cm4gYnVmLmJ1ZmZlci5zbGljZShidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVPZmZzZXQgKyBidWYuYnl0ZUxlbmd0aCk7XG5cdFx0fSk7XG5cdH0sXG5cblx0LyoqXG4gICogUmV0dXJuIHJhdyByZXNwb25zZSBhcyBCbG9iXG4gICpcbiAgKiBAcmV0dXJuIFByb21pc2VcbiAgKi9cblx0YmxvYigpIHtcblx0XHRsZXQgY3QgPSB0aGlzLmhlYWRlcnMgJiYgdGhpcy5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykgfHwgJyc7XG5cdFx0cmV0dXJuIGNvbnN1bWVCb2R5LmNhbGwodGhpcykudGhlbihmdW5jdGlvbiAoYnVmKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihcblx0XHRcdC8vIFByZXZlbnQgY29weWluZ1xuXHRcdFx0bmV3IEJsb2IoW10sIHtcblx0XHRcdFx0dHlwZTogY3QudG9Mb3dlckNhc2UoKVxuXHRcdFx0fSksIHtcblx0XHRcdFx0W0JVRkZFUl06IGJ1ZlxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH0sXG5cblx0LyoqXG4gICogRGVjb2RlIHJlc3BvbnNlIGFzIGpzb25cbiAgKlxuICAqIEByZXR1cm4gIFByb21pc2VcbiAgKi9cblx0anNvbigpIHtcblx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdHJldHVybiBjb25zdW1lQm9keS5jYWxsKHRoaXMpLnRoZW4oZnVuY3Rpb24gKGJ1ZmZlcikge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0cmV0dXJuIEpTT04ucGFyc2UoYnVmZmVyLnRvU3RyaW5nKCkpO1xuXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdHJldHVybiBCb2R5LlByb21pc2UucmVqZWN0KG5ldyBGZXRjaEVycm9yKGBpbnZhbGlkIGpzb24gcmVzcG9uc2UgYm9keSBhdCAke190aGlzMi51cmx9IHJlYXNvbjogJHtlcnIubWVzc2FnZX1gLCAnaW52YWxpZC1qc29uJykpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdC8qKlxuICAqIERlY29kZSByZXNwb25zZSBhcyB0ZXh0XG4gICpcbiAgKiBAcmV0dXJuICBQcm9taXNlXG4gICovXG5cdHRleHQoKSB7XG5cdFx0cmV0dXJuIGNvbnN1bWVCb2R5LmNhbGwodGhpcykudGhlbihmdW5jdGlvbiAoYnVmZmVyKSB7XG5cdFx0XHRyZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCk7XG5cdFx0fSk7XG5cdH0sXG5cblx0LyoqXG4gICogRGVjb2RlIHJlc3BvbnNlIGFzIGJ1ZmZlciAobm9uLXNwZWMgYXBpKVxuICAqXG4gICogQHJldHVybiAgUHJvbWlzZVxuICAqL1xuXHRidWZmZXIoKSB7XG5cdFx0cmV0dXJuIGNvbnN1bWVCb2R5LmNhbGwodGhpcyk7XG5cdH0sXG5cblx0LyoqXG4gICogRGVjb2RlIHJlc3BvbnNlIGFzIHRleHQsIHdoaWxlIGF1dG9tYXRpY2FsbHkgZGV0ZWN0aW5nIHRoZSBlbmNvZGluZyBhbmRcbiAgKiB0cnlpbmcgdG8gZGVjb2RlIHRvIFVURi04IChub24tc3BlYyBhcGkpXG4gICpcbiAgKiBAcmV0dXJuICBQcm9taXNlXG4gICovXG5cdHRleHRDb252ZXJ0ZWQoKSB7XG5cdFx0dmFyIF90aGlzMyA9IHRoaXM7XG5cblx0XHRyZXR1cm4gY29uc3VtZUJvZHkuY2FsbCh0aGlzKS50aGVuKGZ1bmN0aW9uIChidWZmZXIpIHtcblx0XHRcdHJldHVybiBjb252ZXJ0Qm9keShidWZmZXIsIF90aGlzMy5oZWFkZXJzKTtcblx0XHR9KTtcblx0fVxufTtcblxuLy8gSW4gYnJvd3NlcnMsIGFsbCBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhYmxlLlxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQm9keS5wcm90b3R5cGUsIHtcblx0Ym9keTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGJvZHlVc2VkOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0YXJyYXlCdWZmZXI6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRibG9iOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0anNvbjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHRleHQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9XG59KTtcblxuQm9keS5taXhJbiA9IGZ1bmN0aW9uIChwcm90bykge1xuXHRmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoQm9keS5wcm90b3R5cGUpKSB7XG5cdFx0Ly8gaXN0YW5idWwgaWdub3JlIGVsc2U6IGZ1dHVyZSBwcm9vZlxuXHRcdGlmICghKG5hbWUgaW4gcHJvdG8pKSB7XG5cdFx0XHRjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihCb2R5LnByb3RvdHlwZSwgbmFtZSk7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIG5hbWUsIGRlc2MpO1xuXHRcdH1cblx0fVxufTtcblxuLyoqXG4gKiBDb25zdW1lIGFuZCBjb252ZXJ0IGFuIGVudGlyZSBCb2R5IHRvIGEgQnVmZmVyLlxuICpcbiAqIFJlZjogaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtYm9keS1jb25zdW1lLWJvZHlcbiAqXG4gKiBAcmV0dXJuICBQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGNvbnN1bWVCb2R5KCkge1xuXHR2YXIgX3RoaXM0ID0gdGhpcztcblxuXHRpZiAodGhpc1tJTlRFUk5BTFNdLmRpc3R1cmJlZCkge1xuXHRcdHJldHVybiBCb2R5LlByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoYGJvZHkgdXNlZCBhbHJlYWR5IGZvcjogJHt0aGlzLnVybH1gKSk7XG5cdH1cblxuXHR0aGlzW0lOVEVSTkFMU10uZGlzdHVyYmVkID0gdHJ1ZTtcblxuXHRpZiAodGhpc1tJTlRFUk5BTFNdLmVycm9yKSB7XG5cdFx0cmV0dXJuIEJvZHkuUHJvbWlzZS5yZWplY3QodGhpc1tJTlRFUk5BTFNdLmVycm9yKTtcblx0fVxuXG5cdGxldCBib2R5ID0gdGhpcy5ib2R5O1xuXG5cdC8vIGJvZHkgaXMgbnVsbFxuXHRpZiAoYm9keSA9PT0gbnVsbCkge1xuXHRcdHJldHVybiBCb2R5LlByb21pc2UucmVzb2x2ZShCdWZmZXIuYWxsb2MoMCkpO1xuXHR9XG5cblx0Ly8gYm9keSBpcyBibG9iXG5cdGlmIChpc0Jsb2IoYm9keSkpIHtcblx0XHRib2R5ID0gYm9keS5zdHJlYW0oKTtcblx0fVxuXG5cdC8vIGJvZHkgaXMgYnVmZmVyXG5cdGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHtcblx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlc29sdmUoYm9keSk7XG5cdH1cblxuXHQvLyBpc3RhbmJ1bCBpZ25vcmUgaWY6IHNob3VsZCBuZXZlciBoYXBwZW5cblx0aWYgKCEoYm9keSBpbnN0YW5jZW9mIFN0cmVhbSkpIHtcblx0XHRyZXR1cm4gQm9keS5Qcm9taXNlLnJlc29sdmUoQnVmZmVyLmFsbG9jKDApKTtcblx0fVxuXG5cdC8vIGJvZHkgaXMgc3RyZWFtXG5cdC8vIGdldCByZWFkeSB0byBhY3R1YWxseSBjb25zdW1lIHRoZSBib2R5XG5cdGxldCBhY2N1bSA9IFtdO1xuXHRsZXQgYWNjdW1CeXRlcyA9IDA7XG5cdGxldCBhYm9ydCA9IGZhbHNlO1xuXG5cdHJldHVybiBuZXcgQm9keS5Qcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRsZXQgcmVzVGltZW91dDtcblxuXHRcdC8vIGFsbG93IHRpbWVvdXQgb24gc2xvdyByZXNwb25zZSBib2R5XG5cdFx0aWYgKF90aGlzNC50aW1lb3V0KSB7XG5cdFx0XHRyZXNUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGFib3J0ID0gdHJ1ZTtcblx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBSZXNwb25zZSB0aW1lb3V0IHdoaWxlIHRyeWluZyB0byBmZXRjaCAke190aGlzNC51cmx9IChvdmVyICR7X3RoaXM0LnRpbWVvdXR9bXMpYCwgJ2JvZHktdGltZW91dCcpKTtcblx0XHRcdH0sIF90aGlzNC50aW1lb3V0KTtcblx0XHR9XG5cblx0XHQvLyBoYW5kbGUgc3RyZWFtIGVycm9yc1xuXHRcdGJvZHkub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikge1xuXHRcdFx0aWYgKGVyci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcblx0XHRcdFx0Ly8gaWYgdGhlIHJlcXVlc3Qgd2FzIGFib3J0ZWQsIHJlamVjdCB3aXRoIHRoaXMgRXJyb3Jcblx0XHRcdFx0YWJvcnQgPSB0cnVlO1xuXHRcdFx0XHRyZWplY3QoZXJyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIG90aGVyIGVycm9ycywgc3VjaCBhcyBpbmNvcnJlY3QgY29udGVudC1lbmNvZGluZ1xuXHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYEludmFsaWQgcmVzcG9uc2UgYm9keSB3aGlsZSB0cnlpbmcgdG8gZmV0Y2ggJHtfdGhpczQudXJsfTogJHtlcnIubWVzc2FnZX1gLCAnc3lzdGVtJywgZXJyKSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRib2R5Lm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG5cdFx0XHRpZiAoYWJvcnQgfHwgY2h1bmsgPT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX3RoaXM0LnNpemUgJiYgYWNjdW1CeXRlcyArIGNodW5rLmxlbmd0aCA+IF90aGlzNC5zaXplKSB7XG5cdFx0XHRcdGFib3J0ID0gdHJ1ZTtcblx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBjb250ZW50IHNpemUgYXQgJHtfdGhpczQudXJsfSBvdmVyIGxpbWl0OiAke190aGlzNC5zaXplfWAsICdtYXgtc2l6ZScpKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRhY2N1bUJ5dGVzICs9IGNodW5rLmxlbmd0aDtcblx0XHRcdGFjY3VtLnB1c2goY2h1bmspO1xuXHRcdH0pO1xuXG5cdFx0Ym9keS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKGFib3J0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y2xlYXJUaW1lb3V0KHJlc1RpbWVvdXQpO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyZXNvbHZlKEJ1ZmZlci5jb25jYXQoYWNjdW0sIGFjY3VtQnl0ZXMpKTtcblx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHQvLyBoYW5kbGUgc3RyZWFtcyB0aGF0IGhhdmUgYWNjdW11bGF0ZWQgdG9vIG11Y2ggZGF0YSAoaXNzdWUgIzQxNClcblx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBDb3VsZCBub3QgY3JlYXRlIEJ1ZmZlciBmcm9tIHJlc3BvbnNlIGJvZHkgZm9yICR7X3RoaXM0LnVybH06ICR7ZXJyLm1lc3NhZ2V9YCwgJ3N5c3RlbScsIGVycikpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBEZXRlY3QgYnVmZmVyIGVuY29kaW5nIGFuZCBjb252ZXJ0IHRvIHRhcmdldCBlbmNvZGluZ1xuICogcmVmOiBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwMTEzL3BhcnNpbmcuaHRtbCNkZXRlcm1pbmluZy10aGUtY2hhcmFjdGVyLWVuY29kaW5nXG4gKlxuICogQHBhcmFtICAgQnVmZmVyICBidWZmZXIgICAgSW5jb21pbmcgYnVmZmVyXG4gKiBAcGFyYW0gICBTdHJpbmcgIGVuY29kaW5nICBUYXJnZXQgZW5jb2RpbmdcbiAqIEByZXR1cm4gIFN0cmluZ1xuICovXG5mdW5jdGlvbiBjb252ZXJ0Qm9keShidWZmZXIsIGhlYWRlcnMpIHtcblx0aWYgKHR5cGVvZiBjb252ZXJ0ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgcGFja2FnZSBgZW5jb2RpbmdgIG11c3QgYmUgaW5zdGFsbGVkIHRvIHVzZSB0aGUgdGV4dENvbnZlcnRlZCgpIGZ1bmN0aW9uJyk7XG5cdH1cblxuXHRjb25zdCBjdCA9IGhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcblx0bGV0IGNoYXJzZXQgPSAndXRmLTgnO1xuXHRsZXQgcmVzLCBzdHI7XG5cblx0Ly8gaGVhZGVyXG5cdGlmIChjdCkge1xuXHRcdHJlcyA9IC9jaGFyc2V0PShbXjtdKikvaS5leGVjKGN0KTtcblx0fVxuXG5cdC8vIG5vIGNoYXJzZXQgaW4gY29udGVudCB0eXBlLCBwZWVrIGF0IHJlc3BvbnNlIGJvZHkgZm9yIGF0IG1vc3QgMTAyNCBieXRlc1xuXHRzdHIgPSBidWZmZXIuc2xpY2UoMCwgMTAyNCkudG9TdHJpbmcoKTtcblxuXHQvLyBodG1sNVxuXHRpZiAoIXJlcyAmJiBzdHIpIHtcblx0XHRyZXMgPSAvPG1ldGEuKz9jaGFyc2V0PShbJ1wiXSkoLis/KVxcMS9pLmV4ZWMoc3RyKTtcblx0fVxuXG5cdC8vIGh0bWw0XG5cdGlmICghcmVzICYmIHN0cikge1xuXHRcdHJlcyA9IC88bWV0YVtcXHNdKz9odHRwLWVxdWl2PShbJ1wiXSljb250ZW50LXR5cGVcXDFbXFxzXSs/Y29udGVudD0oWydcIl0pKC4rPylcXDIvaS5leGVjKHN0cik7XG5cdFx0aWYgKCFyZXMpIHtcblx0XHRcdHJlcyA9IC88bWV0YVtcXHNdKz9jb250ZW50PShbJ1wiXSkoLis/KVxcMVtcXHNdKz9odHRwLWVxdWl2PShbJ1wiXSljb250ZW50LXR5cGVcXDMvaS5leGVjKHN0cik7XG5cdFx0XHRpZiAocmVzKSB7XG5cdFx0XHRcdHJlcy5wb3AoKTsgLy8gZHJvcCBsYXN0IHF1b3RlXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHJlcykge1xuXHRcdFx0cmVzID0gL2NoYXJzZXQ9KC4qKS9pLmV4ZWMocmVzLnBvcCgpKTtcblx0XHR9XG5cdH1cblxuXHQvLyB4bWxcblx0aWYgKCFyZXMgJiYgc3RyKSB7XG5cdFx0cmVzID0gLzxcXD94bWwuKz9lbmNvZGluZz0oWydcIl0pKC4rPylcXDEvaS5leGVjKHN0cik7XG5cdH1cblxuXHQvLyBmb3VuZCBjaGFyc2V0XG5cdGlmIChyZXMpIHtcblx0XHRjaGFyc2V0ID0gcmVzLnBvcCgpO1xuXG5cdFx0Ly8gcHJldmVudCBkZWNvZGUgaXNzdWVzIHdoZW4gc2l0ZXMgdXNlIGluY29ycmVjdCBlbmNvZGluZ1xuXHRcdC8vIHJlZjogaHR0cHM6Ly9oc2l2b25lbi5maS9lbmNvZGluZy1tZW51L1xuXHRcdGlmIChjaGFyc2V0ID09PSAnZ2IyMzEyJyB8fCBjaGFyc2V0ID09PSAnZ2JrJykge1xuXHRcdFx0Y2hhcnNldCA9ICdnYjE4MDMwJztcblx0XHR9XG5cdH1cblxuXHQvLyB0dXJuIHJhdyBidWZmZXJzIGludG8gYSBzaW5nbGUgdXRmLTggYnVmZmVyXG5cdHJldHVybiBjb252ZXJ0KGJ1ZmZlciwgJ1VURi04JywgY2hhcnNldCkudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBEZXRlY3QgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKiByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9iaXRpbm4vbm9kZS1mZXRjaC9pc3N1ZXMvMjk2I2lzc3VlY29tbWVudC0zMDc1OTgxNDNcbiAqXG4gKiBAcGFyYW0gICBPYmplY3QgIG9iaiAgICAgT2JqZWN0IHRvIGRldGVjdCBieSB0eXBlIG9yIGJyYW5kXG4gKiBAcmV0dXJuICBTdHJpbmdcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXMob2JqKSB7XG5cdC8vIER1Y2stdHlwaW5nIGFzIGEgbmVjZXNzYXJ5IGNvbmRpdGlvbi5cblx0aWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmouYXBwZW5kICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouZGVsZXRlICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouZ2V0QWxsICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouaGFzICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvYmouc2V0ICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gQnJhbmQtY2hlY2tpbmcgYW5kIG1vcmUgZHVjay10eXBpbmcgYXMgb3B0aW9uYWwgY29uZGl0aW9uLlxuXHRyZXR1cm4gb2JqLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdVUkxTZWFyY2hQYXJhbXMnIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBVUkxTZWFyY2hQYXJhbXNdJyB8fCB0eXBlb2Ygb2JqLnNvcnQgPT09ICdmdW5jdGlvbic7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYSBXM0MgYEJsb2JgIG9iamVjdCAod2hpY2ggYEZpbGVgIGluaGVyaXRzIGZyb20pXG4gKiBAcGFyYW0gIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzQmxvYihvYmopIHtcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmouYXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai50eXBlID09PSAnc3RyaW5nJyAmJiB0eXBlb2Ygb2JqLnN0cmVhbSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gJ3N0cmluZycgJiYgL14oQmxvYnxGaWxlKSQvLnRlc3Qob2JqLmNvbnN0cnVjdG9yLm5hbWUpICYmIC9eKEJsb2J8RmlsZSkkLy50ZXN0KG9ialtTeW1ib2wudG9TdHJpbmdUYWddKTtcbn1cblxuLyoqXG4gKiBDbG9uZSBib2R5IGdpdmVuIFJlcy9SZXEgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gICBNaXhlZCAgaW5zdGFuY2UgIFJlc3BvbnNlIG9yIFJlcXVlc3QgaW5zdGFuY2VcbiAqIEByZXR1cm4gIE1peGVkXG4gKi9cbmZ1bmN0aW9uIGNsb25lKGluc3RhbmNlKSB7XG5cdGxldCBwMSwgcDI7XG5cdGxldCBib2R5ID0gaW5zdGFuY2UuYm9keTtcblxuXHQvLyBkb24ndCBhbGxvdyBjbG9uaW5nIGEgdXNlZCBib2R5XG5cdGlmIChpbnN0YW5jZS5ib2R5VXNlZCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignY2Fubm90IGNsb25lIGJvZHkgYWZ0ZXIgaXQgaXMgdXNlZCcpO1xuXHR9XG5cblx0Ly8gY2hlY2sgdGhhdCBib2R5IGlzIGEgc3RyZWFtIGFuZCBub3QgZm9ybS1kYXRhIG9iamVjdFxuXHQvLyBub3RlOiB3ZSBjYW4ndCBjbG9uZSB0aGUgZm9ybS1kYXRhIG9iamVjdCB3aXRob3V0IGhhdmluZyBpdCBhcyBhIGRlcGVuZGVuY3lcblx0aWYgKGJvZHkgaW5zdGFuY2VvZiBTdHJlYW0gJiYgdHlwZW9mIGJvZHkuZ2V0Qm91bmRhcnkgIT09ICdmdW5jdGlvbicpIHtcblx0XHQvLyB0ZWUgaW5zdGFuY2UgYm9keVxuXHRcdHAxID0gbmV3IFBhc3NUaHJvdWdoKCk7XG5cdFx0cDIgPSBuZXcgUGFzc1Rocm91Z2goKTtcblx0XHRib2R5LnBpcGUocDEpO1xuXHRcdGJvZHkucGlwZShwMik7XG5cdFx0Ly8gc2V0IGluc3RhbmNlIGJvZHkgdG8gdGVlZCBib2R5IGFuZCByZXR1cm4gdGhlIG90aGVyIHRlZWQgYm9keVxuXHRcdGluc3RhbmNlW0lOVEVSTkFMU10uYm9keSA9IHAxO1xuXHRcdGJvZHkgPSBwMjtcblx0fVxuXG5cdHJldHVybiBib2R5O1xufVxuXG4vKipcbiAqIFBlcmZvcm1zIHRoZSBvcGVyYXRpb24gXCJleHRyYWN0IGEgYENvbnRlbnQtVHlwZWAgdmFsdWUgZnJvbSB8b2JqZWN0fFwiIGFzXG4gKiBzcGVjaWZpZWQgaW4gdGhlIHNwZWNpZmljYXRpb246XG4gKiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1ib2R5aW5pdC1leHRyYWN0XG4gKlxuICogVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgaW5zdGFuY2UuYm9keSBpcyBwcmVzZW50LlxuICpcbiAqIEBwYXJhbSAgIE1peGVkICBpbnN0YW5jZSAgQW55IG9wdGlvbnMuYm9keSBpbnB1dFxuICovXG5mdW5jdGlvbiBleHRyYWN0Q29udGVudFR5cGUoYm9keSkge1xuXHRpZiAoYm9keSA9PT0gbnVsbCkge1xuXHRcdC8vIGJvZHkgaXMgbnVsbFxuXHRcdHJldHVybiBudWxsO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuXHRcdC8vIGJvZHkgaXMgc3RyaW5nXG5cdFx0cmV0dXJuICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xuXHR9IGVsc2UgaWYgKGlzVVJMU2VhcmNoUGFyYW1zKGJvZHkpKSB7XG5cdFx0Ly8gYm9keSBpcyBhIFVSTFNlYXJjaFBhcmFtc1xuXHRcdHJldHVybiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnO1xuXHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkge1xuXHRcdC8vIGJvZHkgaXMgYmxvYlxuXHRcdHJldHVybiBib2R5LnR5cGUgfHwgbnVsbDtcblx0fSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRcdHJldHVybiBudWxsO1xuXHR9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuXHRcdC8vIGJvZHkgaXMgQXJyYXlCdWZmZXJcblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIEFycmF5QnVmZmVyVmlld1xuXHRcdHJldHVybiBudWxsO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBib2R5LmdldEJvdW5kYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0Ly8gZGV0ZWN0IGZvcm0gZGF0YSBpbnB1dCBmcm9tIGZvcm0tZGF0YSBtb2R1bGVcblx0XHRyZXR1cm4gYG11bHRpcGFydC9mb3JtLWRhdGE7Ym91bmRhcnk9JHtib2R5LmdldEJvdW5kYXJ5KCl9YDtcblx0fSBlbHNlIGlmIChib2R5IGluc3RhbmNlb2YgU3RyZWFtKSB7XG5cdFx0Ly8gYm9keSBpcyBzdHJlYW1cblx0XHQvLyBjYW4ndCByZWFsbHkgZG8gbXVjaCBhYm91dCB0aGlzXG5cdFx0cmV0dXJuIG51bGw7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gQm9keSBjb25zdHJ1Y3RvciBkZWZhdWx0cyBvdGhlciB0aGluZ3MgdG8gc3RyaW5nXG5cdFx0cmV0dXJuICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIEZldGNoIFN0YW5kYXJkIHRyZWF0cyB0aGlzIGFzIGlmIFwidG90YWwgYnl0ZXNcIiBpcyBhIHByb3BlcnR5IG9uIHRoZSBib2R5LlxuICogRm9yIHVzLCB3ZSBoYXZlIHRvIGV4cGxpY2l0bHkgZ2V0IGl0IHdpdGggYSBmdW5jdGlvbi5cbiAqXG4gKiByZWY6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWJvZHktdG90YWwtYnl0ZXNcbiAqXG4gKiBAcGFyYW0gICBCb2R5ICAgIGluc3RhbmNlICAgSW5zdGFuY2Ugb2YgQm9keVxuICogQHJldHVybiAgTnVtYmVyPyAgICAgICAgICAgIE51bWJlciBvZiBieXRlcywgb3IgbnVsbCBpZiBub3QgcG9zc2libGVcbiAqL1xuZnVuY3Rpb24gZ2V0VG90YWxCeXRlcyhpbnN0YW5jZSkge1xuXHRjb25zdCBib2R5ID0gaW5zdGFuY2UuYm9keTtcblxuXG5cdGlmIChib2R5ID09PSBudWxsKSB7XG5cdFx0Ly8gYm9keSBpcyBudWxsXG5cdFx0cmV0dXJuIDA7XG5cdH0gZWxzZSBpZiAoaXNCbG9iKGJvZHkpKSB7XG5cdFx0cmV0dXJuIGJvZHkuc2l6ZTtcblx0fSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRcdHJldHVybiBib2R5Lmxlbmd0aDtcblx0fSBlbHNlIGlmIChib2R5ICYmIHR5cGVvZiBib2R5LmdldExlbmd0aFN5bmMgPT09ICdmdW5jdGlvbicpIHtcblx0XHQvLyBkZXRlY3QgZm9ybSBkYXRhIGlucHV0IGZyb20gZm9ybS1kYXRhIG1vZHVsZVxuXHRcdGlmIChib2R5Ll9sZW5ndGhSZXRyaWV2ZXJzICYmIGJvZHkuX2xlbmd0aFJldHJpZXZlcnMubGVuZ3RoID09IDAgfHwgLy8gMS54XG5cdFx0Ym9keS5oYXNLbm93bkxlbmd0aCAmJiBib2R5Lmhhc0tub3duTGVuZ3RoKCkpIHtcblx0XHRcdC8vIDIueFxuXHRcdFx0cmV0dXJuIGJvZHkuZ2V0TGVuZ3RoU3luYygpO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fSBlbHNlIHtcblx0XHQvLyBib2R5IGlzIHN0cmVhbVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogV3JpdGUgYSBCb2R5IHRvIGEgTm9kZS5qcyBXcml0YWJsZVN0cmVhbSAoZS5nLiBodHRwLlJlcXVlc3QpIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gICBCb2R5ICAgIGluc3RhbmNlICAgSW5zdGFuY2Ugb2YgQm9keVxuICogQHJldHVybiAgVm9pZFxuICovXG5mdW5jdGlvbiB3cml0ZVRvU3RyZWFtKGRlc3QsIGluc3RhbmNlKSB7XG5cdGNvbnN0IGJvZHkgPSBpbnN0YW5jZS5ib2R5O1xuXG5cblx0aWYgKGJvZHkgPT09IG51bGwpIHtcblx0XHQvLyBib2R5IGlzIG51bGxcblx0XHRkZXN0LmVuZCgpO1xuXHR9IGVsc2UgaWYgKGlzQmxvYihib2R5KSkge1xuXHRcdGJvZHkuc3RyZWFtKCkucGlwZShkZXN0KTtcblx0fSBlbHNlIGlmIChCdWZmZXIuaXNCdWZmZXIoYm9keSkpIHtcblx0XHQvLyBib2R5IGlzIGJ1ZmZlclxuXHRcdGRlc3Qud3JpdGUoYm9keSk7XG5cdFx0ZGVzdC5lbmQoKTtcblx0fSBlbHNlIHtcblx0XHQvLyBib2R5IGlzIHN0cmVhbVxuXHRcdGJvZHkucGlwZShkZXN0KTtcblx0fVxufVxuXG4vLyBleHBvc2UgUHJvbWlzZVxuQm9keS5Qcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG5cbi8qKlxuICogaGVhZGVycy5qc1xuICpcbiAqIEhlYWRlcnMgY2xhc3Mgb2ZmZXJzIGNvbnZlbmllbnQgaGVscGVyc1xuICovXG5cbmNvbnN0IGludmFsaWRUb2tlblJlZ2V4ID0gL1teXFxeX2BhLXpBLVpcXC0wLTkhIyQlJicqKy58fl0vO1xuY29uc3QgaW52YWxpZEhlYWRlckNoYXJSZWdleCA9IC9bXlxcdFxceDIwLVxceDdlXFx4ODAtXFx4ZmZdLztcblxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lKG5hbWUpIHtcblx0bmFtZSA9IGAke25hbWV9YDtcblx0aWYgKGludmFsaWRUb2tlblJlZ2V4LnRlc3QobmFtZSkgfHwgbmFtZSA9PT0gJycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke25hbWV9IGlzIG5vdCBhIGxlZ2FsIEhUVFAgaGVhZGVyIG5hbWVgKTtcblx0fVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVZhbHVlKHZhbHVlKSB7XG5cdHZhbHVlID0gYCR7dmFsdWV9YDtcblx0aWYgKGludmFsaWRIZWFkZXJDaGFyUmVnZXgudGVzdCh2YWx1ZSkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke3ZhbHVlfSBpcyBub3QgYSBsZWdhbCBIVFRQIGhlYWRlciB2YWx1ZWApO1xuXHR9XG59XG5cbi8qKlxuICogRmluZCB0aGUga2V5IGluIHRoZSBtYXAgb2JqZWN0IGdpdmVuIGEgaGVhZGVyIG5hbWUuXG4gKlxuICogUmV0dXJucyB1bmRlZmluZWQgaWYgbm90IGZvdW5kLlxuICpcbiAqIEBwYXJhbSAgIFN0cmluZyAgbmFtZSAgSGVhZGVyIG5hbWVcbiAqIEByZXR1cm4gIFN0cmluZ3xVbmRlZmluZWRcbiAqL1xuZnVuY3Rpb24gZmluZChtYXAsIG5hbWUpIHtcblx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0Zm9yIChjb25zdCBrZXkgaW4gbWFwKSB7XG5cdFx0aWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBuYW1lKSB7XG5cdFx0XHRyZXR1cm4ga2V5O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5jb25zdCBNQVAgPSBTeW1ib2woJ21hcCcpO1xuY2xhc3MgSGVhZGVycyB7XG5cdC8qKlxuICAqIEhlYWRlcnMgY2xhc3NcbiAgKlxuICAqIEBwYXJhbSAgIE9iamVjdCAgaGVhZGVycyAgUmVzcG9uc2UgaGVhZGVyc1xuICAqIEByZXR1cm4gIFZvaWRcbiAgKi9cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0bGV0IGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDtcblxuXHRcdHRoaXNbTUFQXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0XHRpZiAoaW5pdCBpbnN0YW5jZW9mIEhlYWRlcnMpIHtcblx0XHRcdGNvbnN0IHJhd0hlYWRlcnMgPSBpbml0LnJhdygpO1xuXHRcdFx0Y29uc3QgaGVhZGVyTmFtZXMgPSBPYmplY3Qua2V5cyhyYXdIZWFkZXJzKTtcblxuXHRcdFx0Zm9yIChjb25zdCBoZWFkZXJOYW1lIG9mIGhlYWRlck5hbWVzKSB7XG5cdFx0XHRcdGZvciAoY29uc3QgdmFsdWUgb2YgcmF3SGVhZGVyc1toZWFkZXJOYW1lXSkge1xuXHRcdFx0XHRcdHRoaXMuYXBwZW5kKGhlYWRlck5hbWUsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gV2UgZG9uJ3Qgd29ycnkgYWJvdXQgY29udmVydGluZyBwcm9wIHRvIEJ5dGVTdHJpbmcgaGVyZSBhcyBhcHBlbmQoKVxuXHRcdC8vIHdpbGwgaGFuZGxlIGl0LlxuXHRcdGlmIChpbml0ID09IG51bGwpIDsgZWxzZSBpZiAodHlwZW9mIGluaXQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRjb25zdCBtZXRob2QgPSBpbml0W1N5bWJvbC5pdGVyYXRvcl07XG5cdFx0XHRpZiAobWV0aG9kICE9IG51bGwpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBtZXRob2QgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdIZWFkZXIgcGFpcnMgbXVzdCBiZSBpdGVyYWJsZScpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gc2VxdWVuY2U8c2VxdWVuY2U8Qnl0ZVN0cmluZz4+XG5cdFx0XHRcdC8vIE5vdGU6IHBlciBzcGVjIHdlIGhhdmUgdG8gZmlyc3QgZXhoYXVzdCB0aGUgbGlzdHMgdGhlbiBwcm9jZXNzIHRoZW1cblx0XHRcdFx0Y29uc3QgcGFpcnMgPSBbXTtcblx0XHRcdFx0Zm9yIChjb25zdCBwYWlyIG9mIGluaXQpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHBhaXIgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBwYWlyW1N5bWJvbC5pdGVyYXRvcl0gIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0VhY2ggaGVhZGVyIHBhaXIgbXVzdCBiZSBpdGVyYWJsZScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwYWlycy5wdXNoKEFycmF5LmZyb20ocGFpcikpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChjb25zdCBwYWlyIG9mIHBhaXJzKSB7XG5cdFx0XHRcdFx0aWYgKHBhaXIubGVuZ3RoICE9PSAyKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFYWNoIGhlYWRlciBwYWlyIG11c3QgYmUgYSBuYW1lL3ZhbHVlIHR1cGxlJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuYXBwZW5kKHBhaXJbMF0sIHBhaXJbMV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyByZWNvcmQ8Qnl0ZVN0cmluZywgQnl0ZVN0cmluZz5cblx0XHRcdFx0Zm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoaW5pdCkpIHtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IGluaXRba2V5XTtcblx0XHRcdFx0XHR0aGlzLmFwcGVuZChrZXksIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBpbml0aWFsaXplciBtdXN0IGJlIGFuIG9iamVjdCcpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuICAqIFJldHVybiBjb21iaW5lZCBoZWFkZXIgdmFsdWUgZ2l2ZW4gbmFtZVxuICAqXG4gICogQHBhcmFtICAgU3RyaW5nICBuYW1lICBIZWFkZXIgbmFtZVxuICAqIEByZXR1cm4gIE1peGVkXG4gICovXG5cdGdldChuYW1lKSB7XG5cdFx0bmFtZSA9IGAke25hbWV9YDtcblx0XHR2YWxpZGF0ZU5hbWUobmFtZSk7XG5cdFx0Y29uc3Qga2V5ID0gZmluZCh0aGlzW01BUF0sIG5hbWUpO1xuXHRcdGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXNbTUFQXVtrZXldLmpvaW4oJywgJyk7XG5cdH1cblxuXHQvKipcbiAgKiBJdGVyYXRlIG92ZXIgYWxsIGhlYWRlcnNcbiAgKlxuICAqIEBwYXJhbSAgIEZ1bmN0aW9uICBjYWxsYmFjayAgRXhlY3V0ZWQgZm9yIGVhY2ggaXRlbSB3aXRoIHBhcmFtZXRlcnMgKHZhbHVlLCBuYW1lLCB0aGlzQXJnKVxuICAqIEBwYXJhbSAgIEJvb2xlYW4gICB0aGlzQXJnICAgYHRoaXNgIGNvbnRleHQgZm9yIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICogQHJldHVybiAgVm9pZFxuICAqL1xuXHRmb3JFYWNoKGNhbGxiYWNrKSB7XG5cdFx0bGV0IHRoaXNBcmcgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuXHRcdGxldCBwYWlycyA9IGdldEhlYWRlcnModGhpcyk7XG5cdFx0bGV0IGkgPSAwO1xuXHRcdHdoaWxlIChpIDwgcGFpcnMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgX3BhaXJzJGkgPSBwYWlyc1tpXTtcblx0XHRcdGNvbnN0IG5hbWUgPSBfcGFpcnMkaVswXSxcblx0XHRcdCAgICAgIHZhbHVlID0gX3BhaXJzJGlbMV07XG5cblx0XHRcdGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIG5hbWUsIHRoaXMpO1xuXHRcdFx0cGFpcnMgPSBnZXRIZWFkZXJzKHRoaXMpO1xuXHRcdFx0aSsrO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuICAqIE92ZXJ3cml0ZSBoZWFkZXIgdmFsdWVzIGdpdmVuIG5hbWVcbiAgKlxuICAqIEBwYXJhbSAgIFN0cmluZyAgbmFtZSAgIEhlYWRlciBuYW1lXG4gICogQHBhcmFtICAgU3RyaW5nICB2YWx1ZSAgSGVhZGVyIHZhbHVlXG4gICogQHJldHVybiAgVm9pZFxuICAqL1xuXHRzZXQobmFtZSwgdmFsdWUpIHtcblx0XHRuYW1lID0gYCR7bmFtZX1gO1xuXHRcdHZhbHVlID0gYCR7dmFsdWV9YDtcblx0XHR2YWxpZGF0ZU5hbWUobmFtZSk7XG5cdFx0dmFsaWRhdGVWYWx1ZSh2YWx1ZSk7XG5cdFx0Y29uc3Qga2V5ID0gZmluZCh0aGlzW01BUF0sIG5hbWUpO1xuXHRcdHRoaXNbTUFQXVtrZXkgIT09IHVuZGVmaW5lZCA/IGtleSA6IG5hbWVdID0gW3ZhbHVlXTtcblx0fVxuXG5cdC8qKlxuICAqIEFwcGVuZCBhIHZhbHVlIG9udG8gZXhpc3RpbmcgaGVhZGVyXG4gICpcbiAgKiBAcGFyYW0gICBTdHJpbmcgIG5hbWUgICBIZWFkZXIgbmFtZVxuICAqIEBwYXJhbSAgIFN0cmluZyAgdmFsdWUgIEhlYWRlciB2YWx1ZVxuICAqIEByZXR1cm4gIFZvaWRcbiAgKi9cblx0YXBwZW5kKG5hbWUsIHZhbHVlKSB7XG5cdFx0bmFtZSA9IGAke25hbWV9YDtcblx0XHR2YWx1ZSA9IGAke3ZhbHVlfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdHZhbGlkYXRlVmFsdWUodmFsdWUpO1xuXHRcdGNvbnN0IGtleSA9IGZpbmQodGhpc1tNQVBdLCBuYW1lKTtcblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXNbTUFQXVtrZXldLnB1c2godmFsdWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzW01BUF1bbmFtZV0gPSBbdmFsdWVdO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuICAqIENoZWNrIGZvciBoZWFkZXIgbmFtZSBleGlzdGVuY2VcbiAgKlxuICAqIEBwYXJhbSAgIFN0cmluZyAgIG5hbWUgIEhlYWRlciBuYW1lXG4gICogQHJldHVybiAgQm9vbGVhblxuICAqL1xuXHRoYXMobmFtZSkge1xuXHRcdG5hbWUgPSBgJHtuYW1lfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdHJldHVybiBmaW5kKHRoaXNbTUFQXSwgbmFtZSkgIT09IHVuZGVmaW5lZDtcblx0fVxuXG5cdC8qKlxuICAqIERlbGV0ZSBhbGwgaGVhZGVyIHZhbHVlcyBnaXZlbiBuYW1lXG4gICpcbiAgKiBAcGFyYW0gICBTdHJpbmcgIG5hbWUgIEhlYWRlciBuYW1lXG4gICogQHJldHVybiAgVm9pZFxuICAqL1xuXHRkZWxldGUobmFtZSkge1xuXHRcdG5hbWUgPSBgJHtuYW1lfWA7XG5cdFx0dmFsaWRhdGVOYW1lKG5hbWUpO1xuXHRcdGNvbnN0IGtleSA9IGZpbmQodGhpc1tNQVBdLCBuYW1lKTtcblx0XHRpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGRlbGV0ZSB0aGlzW01BUF1ba2V5XTtcblx0XHR9XG5cdH1cblxuXHQvKipcbiAgKiBSZXR1cm4gcmF3IGhlYWRlcnMgKG5vbi1zcGVjIGFwaSlcbiAgKlxuICAqIEByZXR1cm4gIE9iamVjdFxuICAqL1xuXHRyYXcoKSB7XG5cdFx0cmV0dXJuIHRoaXNbTUFQXTtcblx0fVxuXG5cdC8qKlxuICAqIEdldCBhbiBpdGVyYXRvciBvbiBrZXlzLlxuICAqXG4gICogQHJldHVybiAgSXRlcmF0b3JcbiAgKi9cblx0a2V5cygpIHtcblx0XHRyZXR1cm4gY3JlYXRlSGVhZGVyc0l0ZXJhdG9yKHRoaXMsICdrZXknKTtcblx0fVxuXG5cdC8qKlxuICAqIEdldCBhbiBpdGVyYXRvciBvbiB2YWx1ZXMuXG4gICpcbiAgKiBAcmV0dXJuICBJdGVyYXRvclxuICAqL1xuXHR2YWx1ZXMoKSB7XG5cdFx0cmV0dXJuIGNyZWF0ZUhlYWRlcnNJdGVyYXRvcih0aGlzLCAndmFsdWUnKTtcblx0fVxuXG5cdC8qKlxuICAqIEdldCBhbiBpdGVyYXRvciBvbiBlbnRyaWVzLlxuICAqXG4gICogVGhpcyBpcyB0aGUgZGVmYXVsdCBpdGVyYXRvciBvZiB0aGUgSGVhZGVycyBvYmplY3QuXG4gICpcbiAgKiBAcmV0dXJuICBJdGVyYXRvclxuICAqL1xuXHRbU3ltYm9sLml0ZXJhdG9yXSgpIHtcblx0XHRyZXR1cm4gY3JlYXRlSGVhZGVyc0l0ZXJhdG9yKHRoaXMsICdrZXkrdmFsdWUnKTtcblx0fVxufVxuSGVhZGVycy5wcm90b3R5cGUuZW50cmllcyA9IEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShIZWFkZXJzLnByb3RvdHlwZSwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7XG5cdHZhbHVlOiAnSGVhZGVycycsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEhlYWRlcnMucHJvdG90eXBlLCB7XG5cdGdldDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGZvckVhY2g6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRzZXQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRhcHBlbmQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRoYXM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRkZWxldGU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRrZXlzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0dmFsdWVzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0ZW50cmllczogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG5mdW5jdGlvbiBnZXRIZWFkZXJzKGhlYWRlcnMpIHtcblx0bGV0IGtpbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdrZXkrdmFsdWUnO1xuXG5cdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhoZWFkZXJzW01BUF0pLnNvcnQoKTtcblx0cmV0dXJuIGtleXMubWFwKGtpbmQgPT09ICdrZXknID8gZnVuY3Rpb24gKGspIHtcblx0XHRyZXR1cm4gay50b0xvd2VyQ2FzZSgpO1xuXHR9IDoga2luZCA9PT0gJ3ZhbHVlJyA/IGZ1bmN0aW9uIChrKSB7XG5cdFx0cmV0dXJuIGhlYWRlcnNbTUFQXVtrXS5qb2luKCcsICcpO1xuXHR9IDogZnVuY3Rpb24gKGspIHtcblx0XHRyZXR1cm4gW2sudG9Mb3dlckNhc2UoKSwgaGVhZGVyc1tNQVBdW2tdLmpvaW4oJywgJyldO1xuXHR9KTtcbn1cblxuY29uc3QgSU5URVJOQUwgPSBTeW1ib2woJ2ludGVybmFsJyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUhlYWRlcnNJdGVyYXRvcih0YXJnZXQsIGtpbmQpIHtcblx0Y29uc3QgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKEhlYWRlcnNJdGVyYXRvclByb3RvdHlwZSk7XG5cdGl0ZXJhdG9yW0lOVEVSTkFMXSA9IHtcblx0XHR0YXJnZXQsXG5cdFx0a2luZCxcblx0XHRpbmRleDogMFxuXHR9O1xuXHRyZXR1cm4gaXRlcmF0b3I7XG59XG5cbmNvbnN0IEhlYWRlcnNJdGVyYXRvclByb3RvdHlwZSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZih7XG5cdG5leHQoKSB7XG5cdFx0Ly8gaXN0YW5idWwgaWdub3JlIGlmXG5cdFx0aWYgKCF0aGlzIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSAhPT0gSGVhZGVyc0l0ZXJhdG9yUHJvdG90eXBlKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdWYWx1ZSBvZiBgdGhpc2AgaXMgbm90IGEgSGVhZGVyc0l0ZXJhdG9yJyk7XG5cdFx0fVxuXG5cdFx0dmFyIF9JTlRFUk5BTCA9IHRoaXNbSU5URVJOQUxdO1xuXHRcdGNvbnN0IHRhcmdldCA9IF9JTlRFUk5BTC50YXJnZXQsXG5cdFx0ICAgICAga2luZCA9IF9JTlRFUk5BTC5raW5kLFxuXHRcdCAgICAgIGluZGV4ID0gX0lOVEVSTkFMLmluZGV4O1xuXG5cdFx0Y29uc3QgdmFsdWVzID0gZ2V0SGVhZGVycyh0YXJnZXQsIGtpbmQpO1xuXHRcdGNvbnN0IGxlbiA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0aWYgKGluZGV4ID49IGxlbikge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dmFsdWU6IHVuZGVmaW5lZCxcblx0XHRcdFx0ZG9uZTogdHJ1ZVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR0aGlzW0lOVEVSTkFMXS5pbmRleCA9IGluZGV4ICsgMTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZTogdmFsdWVzW2luZGV4XSxcblx0XHRcdGRvbmU6IGZhbHNlXG5cdFx0fTtcblx0fVxufSwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihbXVtTeW1ib2wuaXRlcmF0b3JdKCkpKSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShIZWFkZXJzSXRlcmF0b3JQcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuXHR2YWx1ZTogJ0hlYWRlcnNJdGVyYXRvcicsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbi8qKlxuICogRXhwb3J0IHRoZSBIZWFkZXJzIG9iamVjdCBpbiBhIGZvcm0gdGhhdCBOb2RlLmpzIGNhbiBjb25zdW1lLlxuICpcbiAqIEBwYXJhbSAgIEhlYWRlcnMgIGhlYWRlcnNcbiAqIEByZXR1cm4gIE9iamVjdFxuICovXG5mdW5jdGlvbiBleHBvcnROb2RlQ29tcGF0aWJsZUhlYWRlcnMoaGVhZGVycykge1xuXHRjb25zdCBvYmogPSBPYmplY3QuYXNzaWduKHsgX19wcm90b19fOiBudWxsIH0sIGhlYWRlcnNbTUFQXSk7XG5cblx0Ly8gaHR0cC5yZXF1ZXN0KCkgb25seSBzdXBwb3J0cyBzdHJpbmcgYXMgSG9zdCBoZWFkZXIuIFRoaXMgaGFjayBtYWtlc1xuXHQvLyBzcGVjaWZ5aW5nIGN1c3RvbSBIb3N0IGhlYWRlciBwb3NzaWJsZS5cblx0Y29uc3QgaG9zdEhlYWRlcktleSA9IGZpbmQoaGVhZGVyc1tNQVBdLCAnSG9zdCcpO1xuXHRpZiAoaG9zdEhlYWRlcktleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0b2JqW2hvc3RIZWFkZXJLZXldID0gb2JqW2hvc3RIZWFkZXJLZXldWzBdO1xuXHR9XG5cblx0cmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBIZWFkZXJzIG9iamVjdCBmcm9tIGFuIG9iamVjdCBvZiBoZWFkZXJzLCBpZ25vcmluZyB0aG9zZSB0aGF0IGRvXG4gKiBub3QgY29uZm9ybSB0byBIVFRQIGdyYW1tYXIgcHJvZHVjdGlvbnMuXG4gKlxuICogQHBhcmFtICAgT2JqZWN0ICBvYmogIE9iamVjdCBvZiBoZWFkZXJzXG4gKiBAcmV0dXJuICBIZWFkZXJzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUhlYWRlcnNMZW5pZW50KG9iaikge1xuXHRjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcblx0Zm9yIChjb25zdCBuYW1lIG9mIE9iamVjdC5rZXlzKG9iaikpIHtcblx0XHRpZiAoaW52YWxpZFRva2VuUmVnZXgudGVzdChuYW1lKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmIChBcnJheS5pc0FycmF5KG9ialtuYW1lXSkpIHtcblx0XHRcdGZvciAoY29uc3QgdmFsIG9mIG9ialtuYW1lXSkge1xuXHRcdFx0XHRpZiAoaW52YWxpZEhlYWRlckNoYXJSZWdleC50ZXN0KHZhbCkpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaGVhZGVyc1tNQVBdW25hbWVdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRoZWFkZXJzW01BUF1bbmFtZV0gPSBbdmFsXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRoZWFkZXJzW01BUF1bbmFtZV0ucHVzaCh2YWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaW52YWxpZEhlYWRlckNoYXJSZWdleC50ZXN0KG9ialtuYW1lXSkpIHtcblx0XHRcdGhlYWRlcnNbTUFQXVtuYW1lXSA9IFtvYmpbbmFtZV1dO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gaGVhZGVycztcbn1cblxuY29uc3QgSU5URVJOQUxTJDEgPSBTeW1ib2woJ1Jlc3BvbnNlIGludGVybmFscycpO1xuXG4vLyBmaXggYW4gaXNzdWUgd2hlcmUgXCJTVEFUVVNfQ09ERVNcIiBhcmVuJ3QgYSBuYW1lZCBleHBvcnQgZm9yIG5vZGUgPDEwXG5jb25zdCBTVEFUVVNfQ09ERVMgPSBodHRwLlNUQVRVU19DT0RFUztcblxuLyoqXG4gKiBSZXNwb25zZSBjbGFzc1xuICpcbiAqIEBwYXJhbSAgIFN0cmVhbSAgYm9keSAgUmVhZGFibGUgc3RyZWFtXG4gKiBAcGFyYW0gICBPYmplY3QgIG9wdHMgIFJlc3BvbnNlIG9wdGlvbnNcbiAqIEByZXR1cm4gIFZvaWRcbiAqL1xuY2xhc3MgUmVzcG9uc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRsZXQgYm9keSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblx0XHRsZXQgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cblx0XHRCb2R5LmNhbGwodGhpcywgYm9keSwgb3B0cyk7XG5cblx0XHRjb25zdCBzdGF0dXMgPSBvcHRzLnN0YXR1cyB8fCAyMDA7XG5cdFx0Y29uc3QgaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdHMuaGVhZGVycyk7XG5cblx0XHRpZiAoYm9keSAhPSBudWxsICYmICFoZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcblx0XHRcdGNvbnN0IGNvbnRlbnRUeXBlID0gZXh0cmFjdENvbnRlbnRUeXBlKGJvZHkpO1xuXHRcdFx0aWYgKGNvbnRlbnRUeXBlKSB7XG5cdFx0XHRcdGhlYWRlcnMuYXBwZW5kKCdDb250ZW50LVR5cGUnLCBjb250ZW50VHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpc1tJTlRFUk5BTFMkMV0gPSB7XG5cdFx0XHR1cmw6IG9wdHMudXJsLFxuXHRcdFx0c3RhdHVzLFxuXHRcdFx0c3RhdHVzVGV4dDogb3B0cy5zdGF0dXNUZXh0IHx8IFNUQVRVU19DT0RFU1tzdGF0dXNdLFxuXHRcdFx0aGVhZGVycyxcblx0XHRcdGNvdW50ZXI6IG9wdHMuY291bnRlclxuXHRcdH07XG5cdH1cblxuXHRnZXQgdXJsKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS51cmwgfHwgJyc7XG5cdH1cblxuXHRnZXQgc3RhdHVzKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXM7XG5cdH1cblxuXHQvKipcbiAgKiBDb252ZW5pZW5jZSBwcm9wZXJ0eSByZXByZXNlbnRpbmcgaWYgdGhlIHJlcXVlc3QgZW5kZWQgbm9ybWFsbHlcbiAgKi9cblx0Z2V0IG9rKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXMgPj0gMjAwICYmIHRoaXNbSU5URVJOQUxTJDFdLnN0YXR1cyA8IDMwMDtcblx0fVxuXG5cdGdldCByZWRpcmVjdGVkKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5jb3VudGVyID4gMDtcblx0fVxuXG5cdGdldCBzdGF0dXNUZXh0KCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQxXS5zdGF0dXNUZXh0O1xuXHR9XG5cblx0Z2V0IGhlYWRlcnMoKSB7XG5cdFx0cmV0dXJuIHRoaXNbSU5URVJOQUxTJDFdLmhlYWRlcnM7XG5cdH1cblxuXHQvKipcbiAgKiBDbG9uZSB0aGlzIHJlc3BvbnNlXG4gICpcbiAgKiBAcmV0dXJuICBSZXNwb25zZVxuICAqL1xuXHRjbG9uZSgpIHtcblx0XHRyZXR1cm4gbmV3IFJlc3BvbnNlKGNsb25lKHRoaXMpLCB7XG5cdFx0XHR1cmw6IHRoaXMudXJsLFxuXHRcdFx0c3RhdHVzOiB0aGlzLnN0YXR1cyxcblx0XHRcdHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcblx0XHRcdGhlYWRlcnM6IHRoaXMuaGVhZGVycyxcblx0XHRcdG9rOiB0aGlzLm9rLFxuXHRcdFx0cmVkaXJlY3RlZDogdGhpcy5yZWRpcmVjdGVkXG5cdFx0fSk7XG5cdH1cbn1cblxuQm9keS5taXhJbihSZXNwb25zZS5wcm90b3R5cGUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZXNwb25zZS5wcm90b3R5cGUsIHtcblx0dXJsOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0c3RhdHVzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0b2s6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRyZWRpcmVjdGVkOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0c3RhdHVzVGV4dDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdGhlYWRlcnM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRjbG9uZTogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzcG9uc2UucHJvdG90eXBlLCBTeW1ib2wudG9TdHJpbmdUYWcsIHtcblx0dmFsdWU6ICdSZXNwb25zZScsXG5cdHdyaXRhYmxlOiBmYWxzZSxcblx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbmNvbnN0IElOVEVSTkFMUyQyID0gU3ltYm9sKCdSZXF1ZXN0IGludGVybmFscycpO1xuY29uc3QgVVJMID0gVXJsLlVSTCB8fCB3aGF0d2dVcmwuVVJMO1xuXG4vLyBmaXggYW4gaXNzdWUgd2hlcmUgXCJmb3JtYXRcIiwgXCJwYXJzZVwiIGFyZW4ndCBhIG5hbWVkIGV4cG9ydCBmb3Igbm9kZSA8MTBcbmNvbnN0IHBhcnNlX3VybCA9IFVybC5wYXJzZTtcbmNvbnN0IGZvcm1hdF91cmwgPSBVcmwuZm9ybWF0O1xuXG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIGBuZXcgVVJMYCB0byBoYW5kbGUgYXJiaXRyYXJ5IFVSTHNcbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVybFN0clxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gcGFyc2VVUkwodXJsU3RyKSB7XG5cdC8qXG4gXHRDaGVjayB3aGV0aGVyIHRoZSBVUkwgaXMgYWJzb2x1dGUgb3Igbm90XG4gXHRcdFNjaGVtZTogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjFcbiBcdEFic29sdXRlIFVSTDogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi00LjNcbiAqL1xuXHRpZiAoL15bYS16QS1aXVthLXpBLVpcXGQrXFwtLl0qOi8uZXhlYyh1cmxTdHIpKSB7XG5cdFx0dXJsU3RyID0gbmV3IFVSTCh1cmxTdHIpLnRvU3RyaW5nKCk7XG5cdH1cblxuXHQvLyBGYWxsYmFjayB0byBvbGQgaW1wbGVtZW50YXRpb24gZm9yIGFyYml0cmFyeSBVUkxzXG5cdHJldHVybiBwYXJzZV91cmwodXJsU3RyKTtcbn1cblxuY29uc3Qgc3RyZWFtRGVzdHJ1Y3Rpb25TdXBwb3J0ZWQgPSAnZGVzdHJveScgaW4gU3RyZWFtLlJlYWRhYmxlLnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIFJlcXVlc3QuXG4gKlxuICogQHBhcmFtICAgTWl4ZWQgICBpbnB1dFxuICogQHJldHVybiAgQm9vbGVhblxuICovXG5mdW5jdGlvbiBpc1JlcXVlc3QoaW5wdXQpIHtcblx0cmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGlucHV0W0lOVEVSTkFMUyQyXSA9PT0gJ29iamVjdCc7XG59XG5cbmZ1bmN0aW9uIGlzQWJvcnRTaWduYWwoc2lnbmFsKSB7XG5cdGNvbnN0IHByb3RvID0gc2lnbmFsICYmIHR5cGVvZiBzaWduYWwgPT09ICdvYmplY3QnICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihzaWduYWwpO1xuXHRyZXR1cm4gISEocHJvdG8gJiYgcHJvdG8uY29uc3RydWN0b3IubmFtZSA9PT0gJ0Fib3J0U2lnbmFsJyk7XG59XG5cbi8qKlxuICogUmVxdWVzdCBjbGFzc1xuICpcbiAqIEBwYXJhbSAgIE1peGVkICAgaW5wdXQgIFVybCBvciBSZXF1ZXN0IGluc3RhbmNlXG4gKiBAcGFyYW0gICBPYmplY3QgIGluaXQgICBDdXN0b20gb3B0aW9uc1xuICogQHJldHVybiAgVm9pZFxuICovXG5jbGFzcyBSZXF1ZXN0IHtcblx0Y29uc3RydWN0b3IoaW5wdXQpIHtcblx0XHRsZXQgaW5pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cblx0XHRsZXQgcGFyc2VkVVJMO1xuXG5cdFx0Ly8gbm9ybWFsaXplIGlucHV0XG5cdFx0aWYgKCFpc1JlcXVlc3QoaW5wdXQpKSB7XG5cdFx0XHRpZiAoaW5wdXQgJiYgaW5wdXQuaHJlZikge1xuXHRcdFx0XHQvLyBpbiBvcmRlciB0byBzdXBwb3J0IE5vZGUuanMnIFVybCBvYmplY3RzOyB0aG91Z2ggV0hBVFdHJ3MgVVJMIG9iamVjdHNcblx0XHRcdFx0Ly8gd2lsbCBmYWxsIGludG8gdGhpcyBicmFuY2ggYWxzbyAoc2luY2UgdGhlaXIgYHRvU3RyaW5nKClgIHdpbGwgcmV0dXJuXG5cdFx0XHRcdC8vIGBocmVmYCBwcm9wZXJ0eSBhbnl3YXkpXG5cdFx0XHRcdHBhcnNlZFVSTCA9IHBhcnNlVVJMKGlucHV0LmhyZWYpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gY29lcmNlIGlucHV0IHRvIGEgc3RyaW5nIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHBhcnNlXG5cdFx0XHRcdHBhcnNlZFVSTCA9IHBhcnNlVVJMKGAke2lucHV0fWApO1xuXHRcdFx0fVxuXHRcdFx0aW5wdXQgPSB7fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cGFyc2VkVVJMID0gcGFyc2VVUkwoaW5wdXQudXJsKTtcblx0XHR9XG5cblx0XHRsZXQgbWV0aG9kID0gaW5pdC5tZXRob2QgfHwgaW5wdXQubWV0aG9kIHx8ICdHRVQnO1xuXHRcdG1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0aWYgKChpbml0LmJvZHkgIT0gbnVsbCB8fCBpc1JlcXVlc3QoaW5wdXQpICYmIGlucHV0LmJvZHkgIT09IG51bGwpICYmIChtZXRob2QgPT09ICdHRVQnIHx8IG1ldGhvZCA9PT0gJ0hFQUQnKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUmVxdWVzdCB3aXRoIEdFVC9IRUFEIG1ldGhvZCBjYW5ub3QgaGF2ZSBib2R5Jyk7XG5cdFx0fVxuXG5cdFx0bGV0IGlucHV0Qm9keSA9IGluaXQuYm9keSAhPSBudWxsID8gaW5pdC5ib2R5IDogaXNSZXF1ZXN0KGlucHV0KSAmJiBpbnB1dC5ib2R5ICE9PSBudWxsID8gY2xvbmUoaW5wdXQpIDogbnVsbDtcblxuXHRcdEJvZHkuY2FsbCh0aGlzLCBpbnB1dEJvZHksIHtcblx0XHRcdHRpbWVvdXQ6IGluaXQudGltZW91dCB8fCBpbnB1dC50aW1lb3V0IHx8IDAsXG5cdFx0XHRzaXplOiBpbml0LnNpemUgfHwgaW5wdXQuc2l6ZSB8fCAwXG5cdFx0fSk7XG5cblx0XHRjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzIHx8IGlucHV0LmhlYWRlcnMgfHwge30pO1xuXG5cdFx0aWYgKGlucHV0Qm9keSAhPSBudWxsICYmICFoZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcblx0XHRcdGNvbnN0IGNvbnRlbnRUeXBlID0gZXh0cmFjdENvbnRlbnRUeXBlKGlucHV0Qm9keSk7XG5cdFx0XHRpZiAoY29udGVudFR5cGUpIHtcblx0XHRcdFx0aGVhZGVycy5hcHBlbmQoJ0NvbnRlbnQtVHlwZScsIGNvbnRlbnRUeXBlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRsZXQgc2lnbmFsID0gaXNSZXF1ZXN0KGlucHV0KSA/IGlucHV0LnNpZ25hbCA6IG51bGw7XG5cdFx0aWYgKCdzaWduYWwnIGluIGluaXQpIHNpZ25hbCA9IGluaXQuc2lnbmFsO1xuXG5cdFx0aWYgKHNpZ25hbCAhPSBudWxsICYmICFpc0Fib3J0U2lnbmFsKHNpZ25hbCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNpZ25hbCB0byBiZSBhbiBpbnN0YW5jZW9mIEFib3J0U2lnbmFsJyk7XG5cdFx0fVxuXG5cdFx0dGhpc1tJTlRFUk5BTFMkMl0gPSB7XG5cdFx0XHRtZXRob2QsXG5cdFx0XHRyZWRpcmVjdDogaW5pdC5yZWRpcmVjdCB8fCBpbnB1dC5yZWRpcmVjdCB8fCAnZm9sbG93Jyxcblx0XHRcdGhlYWRlcnMsXG5cdFx0XHRwYXJzZWRVUkwsXG5cdFx0XHRzaWduYWxcblx0XHR9O1xuXG5cdFx0Ly8gbm9kZS1mZXRjaC1vbmx5IG9wdGlvbnNcblx0XHR0aGlzLmZvbGxvdyA9IGluaXQuZm9sbG93ICE9PSB1bmRlZmluZWQgPyBpbml0LmZvbGxvdyA6IGlucHV0LmZvbGxvdyAhPT0gdW5kZWZpbmVkID8gaW5wdXQuZm9sbG93IDogMjA7XG5cdFx0dGhpcy5jb21wcmVzcyA9IGluaXQuY29tcHJlc3MgIT09IHVuZGVmaW5lZCA/IGluaXQuY29tcHJlc3MgOiBpbnB1dC5jb21wcmVzcyAhPT0gdW5kZWZpbmVkID8gaW5wdXQuY29tcHJlc3MgOiB0cnVlO1xuXHRcdHRoaXMuY291bnRlciA9IGluaXQuY291bnRlciB8fCBpbnB1dC5jb3VudGVyIHx8IDA7XG5cdFx0dGhpcy5hZ2VudCA9IGluaXQuYWdlbnQgfHwgaW5wdXQuYWdlbnQ7XG5cdH1cblxuXHRnZXQgbWV0aG9kKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQyXS5tZXRob2Q7XG5cdH1cblxuXHRnZXQgdXJsKCkge1xuXHRcdHJldHVybiBmb3JtYXRfdXJsKHRoaXNbSU5URVJOQUxTJDJdLnBhcnNlZFVSTCk7XG5cdH1cblxuXHRnZXQgaGVhZGVycygpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMl0uaGVhZGVycztcblx0fVxuXG5cdGdldCByZWRpcmVjdCgpIHtcblx0XHRyZXR1cm4gdGhpc1tJTlRFUk5BTFMkMl0ucmVkaXJlY3Q7XG5cdH1cblxuXHRnZXQgc2lnbmFsKCkge1xuXHRcdHJldHVybiB0aGlzW0lOVEVSTkFMUyQyXS5zaWduYWw7XG5cdH1cblxuXHQvKipcbiAgKiBDbG9uZSB0aGlzIHJlcXVlc3RcbiAgKlxuICAqIEByZXR1cm4gIFJlcXVlc3RcbiAgKi9cblx0Y2xvbmUoKSB7XG5cdFx0cmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMpO1xuXHR9XG59XG5cbkJvZHkubWl4SW4oUmVxdWVzdC5wcm90b3R5cGUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWVzdC5wcm90b3R5cGUsIFN5bWJvbC50b1N0cmluZ1RhZywge1xuXHR2YWx1ZTogJ1JlcXVlc3QnLFxuXHR3cml0YWJsZTogZmFsc2UsXG5cdGVudW1lcmFibGU6IGZhbHNlLFxuXHRjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhSZXF1ZXN0LnByb3RvdHlwZSwge1xuXHRtZXRob2Q6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHR1cmw6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRoZWFkZXJzOiB7IGVudW1lcmFibGU6IHRydWUgfSxcblx0cmVkaXJlY3Q6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuXHRjbG9uZTogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG5cdHNpZ25hbDogeyBlbnVtZXJhYmxlOiB0cnVlIH1cbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBSZXF1ZXN0IHRvIE5vZGUuanMgaHR0cCByZXF1ZXN0IG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICAgUmVxdWVzdCAgQSBSZXF1ZXN0IGluc3RhbmNlXG4gKiBAcmV0dXJuICBPYmplY3QgICBUaGUgb3B0aW9ucyBvYmplY3QgdG8gYmUgcGFzc2VkIHRvIGh0dHAucmVxdWVzdFxuICovXG5mdW5jdGlvbiBnZXROb2RlUmVxdWVzdE9wdGlvbnMocmVxdWVzdCkge1xuXHRjb25zdCBwYXJzZWRVUkwgPSByZXF1ZXN0W0lOVEVSTkFMUyQyXS5wYXJzZWRVUkw7XG5cdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXF1ZXN0W0lOVEVSTkFMUyQyXS5oZWFkZXJzKTtcblxuXHQvLyBmZXRjaCBzdGVwIDEuM1xuXHRpZiAoIWhlYWRlcnMuaGFzKCdBY2NlcHQnKSkge1xuXHRcdGhlYWRlcnMuc2V0KCdBY2NlcHQnLCAnKi8qJyk7XG5cdH1cblxuXHQvLyBCYXNpYyBmZXRjaFxuXHRpZiAoIXBhcnNlZFVSTC5wcm90b2NvbCB8fCAhcGFyc2VkVVJMLmhvc3RuYW1lKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT25seSBhYnNvbHV0ZSBVUkxzIGFyZSBzdXBwb3J0ZWQnKTtcblx0fVxuXG5cdGlmICghL15odHRwcz86JC8udGVzdChwYXJzZWRVUkwucHJvdG9jb2wpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT25seSBIVFRQKFMpIHByb3RvY29scyBhcmUgc3VwcG9ydGVkJyk7XG5cdH1cblxuXHRpZiAocmVxdWVzdC5zaWduYWwgJiYgcmVxdWVzdC5ib2R5IGluc3RhbmNlb2YgU3RyZWFtLlJlYWRhYmxlICYmICFzdHJlYW1EZXN0cnVjdGlvblN1cHBvcnRlZCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignQ2FuY2VsbGF0aW9uIG9mIHN0cmVhbWVkIHJlcXVlc3RzIHdpdGggQWJvcnRTaWduYWwgaXMgbm90IHN1cHBvcnRlZCBpbiBub2RlIDwgOCcpO1xuXHR9XG5cblx0Ly8gSFRUUC1uZXR3b3JrLW9yLWNhY2hlIGZldGNoIHN0ZXBzIDIuNC0yLjdcblx0bGV0IGNvbnRlbnRMZW5ndGhWYWx1ZSA9IG51bGw7XG5cdGlmIChyZXF1ZXN0LmJvZHkgPT0gbnVsbCAmJiAvXihQT1NUfFBVVCkkL2kudGVzdChyZXF1ZXN0Lm1ldGhvZCkpIHtcblx0XHRjb250ZW50TGVuZ3RoVmFsdWUgPSAnMCc7XG5cdH1cblx0aWYgKHJlcXVlc3QuYm9keSAhPSBudWxsKSB7XG5cdFx0Y29uc3QgdG90YWxCeXRlcyA9IGdldFRvdGFsQnl0ZXMocmVxdWVzdCk7XG5cdFx0aWYgKHR5cGVvZiB0b3RhbEJ5dGVzID09PSAnbnVtYmVyJykge1xuXHRcdFx0Y29udGVudExlbmd0aFZhbHVlID0gU3RyaW5nKHRvdGFsQnl0ZXMpO1xuXHRcdH1cblx0fVxuXHRpZiAoY29udGVudExlbmd0aFZhbHVlKSB7XG5cdFx0aGVhZGVycy5zZXQoJ0NvbnRlbnQtTGVuZ3RoJywgY29udGVudExlbmd0aFZhbHVlKTtcblx0fVxuXG5cdC8vIEhUVFAtbmV0d29yay1vci1jYWNoZSBmZXRjaCBzdGVwIDIuMTFcblx0aWYgKCFoZWFkZXJzLmhhcygnVXNlci1BZ2VudCcpKSB7XG5cdFx0aGVhZGVycy5zZXQoJ1VzZXItQWdlbnQnLCAnbm9kZS1mZXRjaC8xLjAgKCtodHRwczovL2dpdGh1Yi5jb20vYml0aW5uL25vZGUtZmV0Y2gpJyk7XG5cdH1cblxuXHQvLyBIVFRQLW5ldHdvcmstb3ItY2FjaGUgZmV0Y2ggc3RlcCAyLjE1XG5cdGlmIChyZXF1ZXN0LmNvbXByZXNzICYmICFoZWFkZXJzLmhhcygnQWNjZXB0LUVuY29kaW5nJykpIHtcblx0XHRoZWFkZXJzLnNldCgnQWNjZXB0LUVuY29kaW5nJywgJ2d6aXAsZGVmbGF0ZScpO1xuXHR9XG5cblx0bGV0IGFnZW50ID0gcmVxdWVzdC5hZ2VudDtcblx0aWYgKHR5cGVvZiBhZ2VudCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGFnZW50ID0gYWdlbnQocGFyc2VkVVJMKTtcblx0fVxuXG5cdGlmICghaGVhZGVycy5oYXMoJ0Nvbm5lY3Rpb24nKSAmJiAhYWdlbnQpIHtcblx0XHRoZWFkZXJzLnNldCgnQ29ubmVjdGlvbicsICdjbG9zZScpO1xuXHR9XG5cblx0Ly8gSFRUUC1uZXR3b3JrIGZldGNoIHN0ZXAgNC4yXG5cdC8vIGNodW5rZWQgZW5jb2RpbmcgaXMgaGFuZGxlZCBieSBOb2RlLmpzXG5cblx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHBhcnNlZFVSTCwge1xuXHRcdG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG5cdFx0aGVhZGVyczogZXhwb3J0Tm9kZUNvbXBhdGlibGVIZWFkZXJzKGhlYWRlcnMpLFxuXHRcdGFnZW50XG5cdH0pO1xufVxuXG4vKipcbiAqIGFib3J0LWVycm9yLmpzXG4gKlxuICogQWJvcnRFcnJvciBpbnRlcmZhY2UgZm9yIGNhbmNlbGxlZCByZXF1ZXN0c1xuICovXG5cbi8qKlxuICogQ3JlYXRlIEFib3J0RXJyb3IgaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0gICBTdHJpbmcgICAgICBtZXNzYWdlICAgICAgRXJyb3IgbWVzc2FnZSBmb3IgaHVtYW5cbiAqIEByZXR1cm4gIEFib3J0RXJyb3JcbiAqL1xuZnVuY3Rpb24gQWJvcnRFcnJvcihtZXNzYWdlKSB7XG4gIEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgdGhpcy50eXBlID0gJ2Fib3J0ZWQnO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXG4gIC8vIGhpZGUgY3VzdG9tIGVycm9yIGltcGxlbWVudGF0aW9uIGRldGFpbHMgZnJvbSBlbmQtdXNlcnNcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG59XG5cbkFib3J0RXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuQWJvcnRFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYm9ydEVycm9yO1xuQWJvcnRFcnJvci5wcm90b3R5cGUubmFtZSA9ICdBYm9ydEVycm9yJztcblxuY29uc3QgVVJMJDEgPSBVcmwuVVJMIHx8IHdoYXR3Z1VybC5VUkw7XG5cbi8vIGZpeCBhbiBpc3N1ZSB3aGVyZSBcIlBhc3NUaHJvdWdoXCIsIFwicmVzb2x2ZVwiIGFyZW4ndCBhIG5hbWVkIGV4cG9ydCBmb3Igbm9kZSA8MTBcbmNvbnN0IFBhc3NUaHJvdWdoJDEgPSBTdHJlYW0uUGFzc1Rocm91Z2g7XG5cbmNvbnN0IGlzRG9tYWluT3JTdWJkb21haW4gPSBmdW5jdGlvbiBpc0RvbWFpbk9yU3ViZG9tYWluKGRlc3RpbmF0aW9uLCBvcmlnaW5hbCkge1xuXHRjb25zdCBvcmlnID0gbmV3IFVSTCQxKG9yaWdpbmFsKS5ob3N0bmFtZTtcblx0Y29uc3QgZGVzdCA9IG5ldyBVUkwkMShkZXN0aW5hdGlvbikuaG9zdG5hbWU7XG5cblx0cmV0dXJuIG9yaWcgPT09IGRlc3QgfHwgb3JpZ1tvcmlnLmxlbmd0aCAtIGRlc3QubGVuZ3RoIC0gMV0gPT09ICcuJyAmJiBvcmlnLmVuZHNXaXRoKGRlc3QpO1xufTtcblxuLyoqXG4gKiBGZXRjaCBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSAgIE1peGVkICAgIHVybCAgIEFic29sdXRlIHVybCBvciBSZXF1ZXN0IGluc3RhbmNlXG4gKiBAcGFyYW0gICBPYmplY3QgICBvcHRzICBGZXRjaCBvcHRpb25zXG4gKiBAcmV0dXJuICBQcm9taXNlXG4gKi9cbmZ1bmN0aW9uIGZldGNoKHVybCwgb3B0cykge1xuXG5cdC8vIGFsbG93IGN1c3RvbSBwcm9taXNlXG5cdGlmICghZmV0Y2guUHJvbWlzZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbmF0aXZlIHByb21pc2UgbWlzc2luZywgc2V0IGZldGNoLlByb21pc2UgdG8geW91ciBmYXZvcml0ZSBhbHRlcm5hdGl2ZScpO1xuXHR9XG5cblx0Qm9keS5Qcm9taXNlID0gZmV0Y2guUHJvbWlzZTtcblxuXHQvLyB3cmFwIGh0dHAucmVxdWVzdCBpbnRvIGZldGNoXG5cdHJldHVybiBuZXcgZmV0Y2guUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0Ly8gYnVpbGQgcmVxdWVzdCBvYmplY3Rcblx0XHRjb25zdCByZXF1ZXN0ID0gbmV3IFJlcXVlc3QodXJsLCBvcHRzKTtcblx0XHRjb25zdCBvcHRpb25zID0gZ2V0Tm9kZVJlcXVlc3RPcHRpb25zKHJlcXVlc3QpO1xuXG5cdFx0Y29uc3Qgc2VuZCA9IChvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6JyA/IGh0dHBzIDogaHR0cCkucmVxdWVzdDtcblx0XHRjb25zdCBzaWduYWwgPSByZXF1ZXN0LnNpZ25hbDtcblxuXHRcdGxldCByZXNwb25zZSA9IG51bGw7XG5cblx0XHRjb25zdCBhYm9ydCA9IGZ1bmN0aW9uIGFib3J0KCkge1xuXHRcdFx0bGV0IGVycm9yID0gbmV3IEFib3J0RXJyb3IoJ1RoZSB1c2VyIGFib3J0ZWQgYSByZXF1ZXN0LicpO1xuXHRcdFx0cmVqZWN0KGVycm9yKTtcblx0XHRcdGlmIChyZXF1ZXN0LmJvZHkgJiYgcmVxdWVzdC5ib2R5IGluc3RhbmNlb2YgU3RyZWFtLlJlYWRhYmxlKSB7XG5cdFx0XHRcdHJlcXVlc3QuYm9keS5kZXN0cm95KGVycm9yKTtcblx0XHRcdH1cblx0XHRcdGlmICghcmVzcG9uc2UgfHwgIXJlc3BvbnNlLmJvZHkpIHJldHVybjtcblx0XHRcdHJlc3BvbnNlLmJvZHkuZW1pdCgnZXJyb3InLCBlcnJvcik7XG5cdFx0fTtcblxuXHRcdGlmIChzaWduYWwgJiYgc2lnbmFsLmFib3J0ZWQpIHtcblx0XHRcdGFib3J0KCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgYWJvcnRBbmRGaW5hbGl6ZSA9IGZ1bmN0aW9uIGFib3J0QW5kRmluYWxpemUoKSB7XG5cdFx0XHRhYm9ydCgpO1xuXHRcdFx0ZmluYWxpemUoKTtcblx0XHR9O1xuXG5cdFx0Ly8gc2VuZCByZXF1ZXN0XG5cdFx0Y29uc3QgcmVxID0gc2VuZChvcHRpb25zKTtcblx0XHRsZXQgcmVxVGltZW91dDtcblxuXHRcdGlmIChzaWduYWwpIHtcblx0XHRcdHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0QW5kRmluYWxpemUpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGZpbmFsaXplKCkge1xuXHRcdFx0cmVxLmFib3J0KCk7XG5cdFx0XHRpZiAoc2lnbmFsKSBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFuZEZpbmFsaXplKTtcblx0XHRcdGNsZWFyVGltZW91dChyZXFUaW1lb3V0KTtcblx0XHR9XG5cblx0XHRpZiAocmVxdWVzdC50aW1lb3V0KSB7XG5cdFx0XHRyZXEub25jZSgnc29ja2V0JywgZnVuY3Rpb24gKHNvY2tldCkge1xuXHRcdFx0XHRyZXFUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmVqZWN0KG5ldyBGZXRjaEVycm9yKGBuZXR3b3JrIHRpbWVvdXQgYXQ6ICR7cmVxdWVzdC51cmx9YCwgJ3JlcXVlc3QtdGltZW91dCcpKTtcblx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHR9LCByZXF1ZXN0LnRpbWVvdXQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHtcblx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgcmVxdWVzdCB0byAke3JlcXVlc3QudXJsfSBmYWlsZWQsIHJlYXNvbjogJHtlcnIubWVzc2FnZX1gLCAnc3lzdGVtJywgZXJyKSk7XG5cdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdH0pO1xuXG5cdFx0cmVxLm9uKCdyZXNwb25zZScsIGZ1bmN0aW9uIChyZXMpIHtcblx0XHRcdGNsZWFyVGltZW91dChyZXFUaW1lb3V0KTtcblxuXHRcdFx0Y29uc3QgaGVhZGVycyA9IGNyZWF0ZUhlYWRlcnNMZW5pZW50KHJlcy5oZWFkZXJzKTtcblxuXHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDVcblx0XHRcdGlmIChmZXRjaC5pc1JlZGlyZWN0KHJlcy5zdGF0dXNDb2RlKSkge1xuXHRcdFx0XHQvLyBIVFRQIGZldGNoIHN0ZXAgNS4yXG5cdFx0XHRcdGNvbnN0IGxvY2F0aW9uID0gaGVhZGVycy5nZXQoJ0xvY2F0aW9uJyk7XG5cblx0XHRcdFx0Ly8gSFRUUCBmZXRjaCBzdGVwIDUuM1xuXHRcdFx0XHRsZXQgbG9jYXRpb25VUkwgPSBudWxsO1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGxvY2F0aW9uVVJMID0gbG9jYXRpb24gPT09IG51bGwgPyBudWxsIDogbmV3IFVSTCQxKGxvY2F0aW9uLCByZXF1ZXN0LnVybCkudG9TdHJpbmcoKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0Ly8gZXJyb3IgaGVyZSBjYW4gb25seSBiZSBpbnZhbGlkIFVSTCBpbiBMb2NhdGlvbjogaGVhZGVyXG5cdFx0XHRcdFx0Ly8gZG8gbm90IHRocm93IHdoZW4gb3B0aW9ucy5yZWRpcmVjdCA9PSBtYW51YWxcblx0XHRcdFx0XHQvLyBsZXQgdGhlIHVzZXIgZXh0cmFjdCB0aGUgZXJyb3JuZW91cyByZWRpcmVjdCBVUkxcblx0XHRcdFx0XHRpZiAocmVxdWVzdC5yZWRpcmVjdCAhPT0gJ21hbnVhbCcpIHtcblx0XHRcdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgdXJpIHJlcXVlc3RlZCByZXNwb25kcyB3aXRoIGFuIGludmFsaWQgcmVkaXJlY3QgVVJMOiAke2xvY2F0aW9ufWAsICdpbnZhbGlkLXJlZGlyZWN0JykpO1xuXHRcdFx0XHRcdFx0ZmluYWxpemUoKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIVFRQIGZldGNoIHN0ZXAgNS41XG5cdFx0XHRcdHN3aXRjaCAocmVxdWVzdC5yZWRpcmVjdCkge1xuXHRcdFx0XHRcdGNhc2UgJ2Vycm9yJzpcblx0XHRcdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcihgdXJpIHJlcXVlc3RlZCByZXNwb25kcyB3aXRoIGEgcmVkaXJlY3QsIHJlZGlyZWN0IG1vZGUgaXMgc2V0IHRvIGVycm9yOiAke3JlcXVlc3QudXJsfWAsICduby1yZWRpcmVjdCcpKTtcblx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0Y2FzZSAnbWFudWFsJzpcblx0XHRcdFx0XHRcdC8vIG5vZGUtZmV0Y2gtc3BlY2lmaWMgc3RlcDogbWFrZSBtYW51YWwgcmVkaXJlY3QgYSBiaXQgZWFzaWVyIHRvIHVzZSBieSBzZXR0aW5nIHRoZSBMb2NhdGlvbiBoZWFkZXIgdmFsdWUgdG8gdGhlIHJlc29sdmVkIFVSTC5cblx0XHRcdFx0XHRcdGlmIChsb2NhdGlvblVSTCAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHQvLyBoYW5kbGUgY29ycnVwdGVkIGhlYWRlclxuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGhlYWRlcnMuc2V0KCdMb2NhdGlvbicsIGxvY2F0aW9uVVJMKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gaXN0YW5idWwgaWdub3JlIG5leHQ6IG5vZGVqcyBzZXJ2ZXIgcHJldmVudCBpbnZhbGlkIHJlc3BvbnNlIGhlYWRlcnMsIHdlIGNhbid0IHRlc3QgdGhpcyB0aHJvdWdoIG5vcm1hbCByZXF1ZXN0XG5cdFx0XHRcdFx0XHRcdFx0cmVqZWN0KGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJ2ZvbGxvdyc6XG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgMlxuXHRcdFx0XHRcdFx0aWYgKGxvY2F0aW9uVVJMID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBIVFRQLXJlZGlyZWN0IGZldGNoIHN0ZXAgNVxuXHRcdFx0XHRcdFx0aWYgKHJlcXVlc3QuY291bnRlciA+PSByZXF1ZXN0LmZvbGxvdykge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QobmV3IEZldGNoRXJyb3IoYG1heGltdW0gcmVkaXJlY3QgcmVhY2hlZCBhdDogJHtyZXF1ZXN0LnVybH1gLCAnbWF4LXJlZGlyZWN0JykpO1xuXHRcdFx0XHRcdFx0XHRmaW5hbGl6ZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEhUVFAtcmVkaXJlY3QgZmV0Y2ggc3RlcCA2IChjb3VudGVyIGluY3JlbWVudClcblx0XHRcdFx0XHRcdC8vIENyZWF0ZSBhIG5ldyBSZXF1ZXN0IG9iamVjdC5cblx0XHRcdFx0XHRcdGNvbnN0IHJlcXVlc3RPcHRzID0ge1xuXHRcdFx0XHRcdFx0XHRoZWFkZXJzOiBuZXcgSGVhZGVycyhyZXF1ZXN0LmhlYWRlcnMpLFxuXHRcdFx0XHRcdFx0XHRmb2xsb3c6IHJlcXVlc3QuZm9sbG93LFxuXHRcdFx0XHRcdFx0XHRjb3VudGVyOiByZXF1ZXN0LmNvdW50ZXIgKyAxLFxuXHRcdFx0XHRcdFx0XHRhZ2VudDogcmVxdWVzdC5hZ2VudCxcblx0XHRcdFx0XHRcdFx0Y29tcHJlc3M6IHJlcXVlc3QuY29tcHJlc3MsXG5cdFx0XHRcdFx0XHRcdG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG5cdFx0XHRcdFx0XHRcdGJvZHk6IHJlcXVlc3QuYm9keSxcblx0XHRcdFx0XHRcdFx0c2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcblx0XHRcdFx0XHRcdFx0dGltZW91dDogcmVxdWVzdC50aW1lb3V0LFxuXHRcdFx0XHRcdFx0XHRzaXplOiByZXF1ZXN0LnNpemVcblx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdGlmICghaXNEb21haW5PclN1YmRvbWFpbihyZXF1ZXN0LnVybCwgbG9jYXRpb25VUkwpKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoY29uc3QgbmFtZSBvZiBbJ2F1dGhvcml6YXRpb24nLCAnd3d3LWF1dGhlbnRpY2F0ZScsICdjb29raWUnLCAnY29va2llMiddKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVxdWVzdE9wdHMuaGVhZGVycy5kZWxldGUobmFtZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDlcblx0XHRcdFx0XHRcdGlmIChyZXMuc3RhdHVzQ29kZSAhPT0gMzAzICYmIHJlcXVlc3QuYm9keSAmJiBnZXRUb3RhbEJ5dGVzKHJlcXVlc3QpID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdHJlamVjdChuZXcgRmV0Y2hFcnJvcignQ2Fubm90IGZvbGxvdyByZWRpcmVjdCB3aXRoIGJvZHkgYmVpbmcgYSByZWFkYWJsZSBzdHJlYW0nLCAndW5zdXBwb3J0ZWQtcmVkaXJlY3QnKSk7XG5cdFx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDExXG5cdFx0XHRcdFx0XHRpZiAocmVzLnN0YXR1c0NvZGUgPT09IDMwMyB8fCAocmVzLnN0YXR1c0NvZGUgPT09IDMwMSB8fCByZXMuc3RhdHVzQ29kZSA9PT0gMzAyKSAmJiByZXF1ZXN0Lm1ldGhvZCA9PT0gJ1BPU1QnKSB7XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RPcHRzLm1ldGhvZCA9ICdHRVQnO1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0cy5ib2R5ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0T3B0cy5oZWFkZXJzLmRlbGV0ZSgnY29udGVudC1sZW5ndGgnKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSFRUUC1yZWRpcmVjdCBmZXRjaCBzdGVwIDE1XG5cdFx0XHRcdFx0XHRyZXNvbHZlKGZldGNoKG5ldyBSZXF1ZXN0KGxvY2F0aW9uVVJMLCByZXF1ZXN0T3B0cykpKTtcblx0XHRcdFx0XHRcdGZpbmFsaXplKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJlcGFyZSByZXNwb25zZVxuXHRcdFx0cmVzLm9uY2UoJ2VuZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKHNpZ25hbCkgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRBbmRGaW5hbGl6ZSk7XG5cdFx0XHR9KTtcblx0XHRcdGxldCBib2R5ID0gcmVzLnBpcGUobmV3IFBhc3NUaHJvdWdoJDEoKSk7XG5cblx0XHRcdGNvbnN0IHJlc3BvbnNlX29wdGlvbnMgPSB7XG5cdFx0XHRcdHVybDogcmVxdWVzdC51cmwsXG5cdFx0XHRcdHN0YXR1czogcmVzLnN0YXR1c0NvZGUsXG5cdFx0XHRcdHN0YXR1c1RleHQ6IHJlcy5zdGF0dXNNZXNzYWdlLFxuXHRcdFx0XHRoZWFkZXJzOiBoZWFkZXJzLFxuXHRcdFx0XHRzaXplOiByZXF1ZXN0LnNpemUsXG5cdFx0XHRcdHRpbWVvdXQ6IHJlcXVlc3QudGltZW91dCxcblx0XHRcdFx0Y291bnRlcjogcmVxdWVzdC5jb3VudGVyXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBIVFRQLW5ldHdvcmsgZmV0Y2ggc3RlcCAxMi4xLjEuM1xuXHRcdFx0Y29uc3QgY29kaW5ncyA9IGhlYWRlcnMuZ2V0KCdDb250ZW50LUVuY29kaW5nJyk7XG5cblx0XHRcdC8vIEhUVFAtbmV0d29yayBmZXRjaCBzdGVwIDEyLjEuMS40OiBoYW5kbGUgY29udGVudCBjb2RpbmdzXG5cblx0XHRcdC8vIGluIGZvbGxvd2luZyBzY2VuYXJpb3Mgd2UgaWdub3JlIGNvbXByZXNzaW9uIHN1cHBvcnRcblx0XHRcdC8vIDEuIGNvbXByZXNzaW9uIHN1cHBvcnQgaXMgZGlzYWJsZWRcblx0XHRcdC8vIDIuIEhFQUQgcmVxdWVzdFxuXHRcdFx0Ly8gMy4gbm8gQ29udGVudC1FbmNvZGluZyBoZWFkZXJcblx0XHRcdC8vIDQuIG5vIGNvbnRlbnQgcmVzcG9uc2UgKDIwNClcblx0XHRcdC8vIDUuIGNvbnRlbnQgbm90IG1vZGlmaWVkIHJlc3BvbnNlICgzMDQpXG5cdFx0XHRpZiAoIXJlcXVlc3QuY29tcHJlc3MgfHwgcmVxdWVzdC5tZXRob2QgPT09ICdIRUFEJyB8fCBjb2RpbmdzID09PSBudWxsIHx8IHJlcy5zdGF0dXNDb2RlID09PSAyMDQgfHwgcmVzLnN0YXR1c0NvZGUgPT09IDMwNCkge1xuXHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZV9vcHRpb25zKTtcblx0XHRcdFx0cmVzb2x2ZShyZXNwb25zZSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIE5vZGUgdjYrXG5cdFx0XHQvLyBCZSBsZXNzIHN0cmljdCB3aGVuIGRlY29kaW5nIGNvbXByZXNzZWQgcmVzcG9uc2VzLCBzaW5jZSBzb21ldGltZXNcblx0XHRcdC8vIHNlcnZlcnMgc2VuZCBzbGlnaHRseSBpbnZhbGlkIHJlc3BvbnNlcyB0aGF0IGFyZSBzdGlsbCBhY2NlcHRlZFxuXHRcdFx0Ly8gYnkgY29tbW9uIGJyb3dzZXJzLlxuXHRcdFx0Ly8gQWx3YXlzIHVzaW5nIFpfU1lOQ19GTFVTSCBpcyB3aGF0IGNVUkwgZG9lcy5cblx0XHRcdGNvbnN0IHpsaWJPcHRpb25zID0ge1xuXHRcdFx0XHRmbHVzaDogemxpYi5aX1NZTkNfRkxVU0gsXG5cdFx0XHRcdGZpbmlzaEZsdXNoOiB6bGliLlpfU1lOQ19GTFVTSFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZm9yIGd6aXBcblx0XHRcdGlmIChjb2RpbmdzID09ICdnemlwJyB8fCBjb2RpbmdzID09ICd4LWd6aXAnKSB7XG5cdFx0XHRcdGJvZHkgPSBib2R5LnBpcGUoemxpYi5jcmVhdGVHdW56aXAoemxpYk9wdGlvbnMpKTtcblx0XHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2Vfb3B0aW9ucyk7XG5cdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIGZvciBkZWZsYXRlXG5cdFx0XHRpZiAoY29kaW5ncyA9PSAnZGVmbGF0ZScgfHwgY29kaW5ncyA9PSAneC1kZWZsYXRlJykge1xuXHRcdFx0XHQvLyBoYW5kbGUgdGhlIGluZmFtb3VzIHJhdyBkZWZsYXRlIHJlc3BvbnNlIGZyb20gb2xkIHNlcnZlcnNcblx0XHRcdFx0Ly8gYSBoYWNrIGZvciBvbGQgSUlTIGFuZCBBcGFjaGUgc2VydmVyc1xuXHRcdFx0XHRjb25zdCByYXcgPSByZXMucGlwZShuZXcgUGFzc1Rocm91Z2gkMSgpKTtcblx0XHRcdFx0cmF3Lm9uY2UoJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcblx0XHRcdFx0XHQvLyBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNzUxOTgyOFxuXHRcdFx0XHRcdGlmICgoY2h1bmtbMF0gJiAweDBGKSA9PT0gMHgwOCkge1xuXHRcdFx0XHRcdFx0Ym9keSA9IGJvZHkucGlwZSh6bGliLmNyZWF0ZUluZmxhdGUoKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGJvZHkgPSBib2R5LnBpcGUoemxpYi5jcmVhdGVJbmZsYXRlUmF3KCkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXNwb25zZSA9IG5ldyBSZXNwb25zZShib2R5LCByZXNwb25zZV9vcHRpb25zKTtcblx0XHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZm9yIGJyXG5cdFx0XHRpZiAoY29kaW5ncyA9PSAnYnInICYmIHR5cGVvZiB6bGliLmNyZWF0ZUJyb3RsaURlY29tcHJlc3MgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Ym9keSA9IGJvZHkucGlwZSh6bGliLmNyZWF0ZUJyb3RsaURlY29tcHJlc3MoKSk7XG5cdFx0XHRcdHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKGJvZHksIHJlc3BvbnNlX29wdGlvbnMpO1xuXHRcdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UsIHVzZSByZXNwb25zZSBhcy1pc1xuXHRcdFx0cmVzcG9uc2UgPSBuZXcgUmVzcG9uc2UoYm9keSwgcmVzcG9uc2Vfb3B0aW9ucyk7XG5cdFx0XHRyZXNvbHZlKHJlc3BvbnNlKTtcblx0XHR9KTtcblxuXHRcdHdyaXRlVG9TdHJlYW0ocmVxLCByZXF1ZXN0KTtcblx0fSk7XG59XG4vKipcbiAqIFJlZGlyZWN0IGNvZGUgbWF0Y2hpbmdcbiAqXG4gKiBAcGFyYW0gICBOdW1iZXIgICBjb2RlICBTdGF0dXMgY29kZVxuICogQHJldHVybiAgQm9vbGVhblxuICovXG5mZXRjaC5pc1JlZGlyZWN0ID0gZnVuY3Rpb24gKGNvZGUpIHtcblx0cmV0dXJuIGNvZGUgPT09IDMwMSB8fCBjb2RlID09PSAzMDIgfHwgY29kZSA9PT0gMzAzIHx8IGNvZGUgPT09IDMwNyB8fCBjb2RlID09PSAzMDg7XG59O1xuXG4vLyBleHBvc2UgUHJvbWlzZVxuZmV0Y2guUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xuXG5leHBvcnQgZGVmYXVsdCBmZXRjaDtcbmV4cG9ydCB7IEhlYWRlcnMsIFJlcXVlc3QsIFJlc3BvbnNlLCBGZXRjaEVycm9yIH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29udmVyc2lvbnMgPSByZXF1aXJlKFwid2ViaWRsLWNvbnZlcnNpb25zXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcbmNvbnN0IEltcGwgPSByZXF1aXJlKFwiLi8vVVJMLWltcGwuanNcIik7XG5cbmNvbnN0IGltcGwgPSB1dGlscy5pbXBsU3ltYm9sO1xuXG5mdW5jdGlvbiBVUkwodXJsKSB7XG4gIGlmICghdGhpcyB8fCB0aGlzW2ltcGxdIHx8ICEodGhpcyBpbnN0YW5jZW9mIFVSTCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnVVJMJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgRE9NIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdVUkwnOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSBcIiArIGFyZ3VtZW50cy5sZW5ndGggKyBcIiBwcmVzZW50LlwiKTtcbiAgfVxuICBjb25zdCBhcmdzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAmJiBpIDwgMjsgKytpKSB7XG4gICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgfVxuICBhcmdzWzBdID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oYXJnc1swXSk7XG4gIGlmIChhcmdzWzFdICE9PSB1bmRlZmluZWQpIHtcbiAgYXJnc1sxXSA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKGFyZ3NbMV0pO1xuICB9XG5cbiAgbW9kdWxlLmV4cG9ydHMuc2V0dXAodGhpcywgYXJncyk7XG59XG5cblVSTC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICBpZiAoIXRoaXMgfHwgIW1vZHVsZS5leHBvcnRzLmlzKHRoaXMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgaW52b2NhdGlvblwiKTtcbiAgfVxuICBjb25zdCBhcmdzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAmJiBpIDwgMDsgKytpKSB7XG4gICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgfVxuICByZXR1cm4gdGhpc1tpbXBsXS50b0pTT04uYXBwbHkodGhpc1tpbXBsXSwgYXJncyk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwiaHJlZlwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5ocmVmO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLmhyZWYgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5VUkwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoIXRoaXMgfHwgIW1vZHVsZS5leHBvcnRzLmlzKHRoaXMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIklsbGVnYWwgaW52b2NhdGlvblwiKTtcbiAgfVxuICByZXR1cm4gdGhpcy5ocmVmO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwib3JpZ2luXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLm9yaWdpbjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwicHJvdG9jb2xcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0ucHJvdG9jb2w7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0ucHJvdG9jb2wgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJ1c2VybmFtZVwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS51c2VybmFtZTtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS51c2VybmFtZSA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcInBhc3N3b3JkXCIsIHtcbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzW2ltcGxdLnBhc3N3b3JkO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLnBhc3N3b3JkID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwiaG9zdFwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5ob3N0O1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLmhvc3QgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJob3N0bmFtZVwiLCB7XG4gIGdldCgpIHtcbiAgICByZXR1cm4gdGhpc1tpbXBsXS5ob3N0bmFtZTtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5ob3N0bmFtZSA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcInBvcnRcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0ucG9ydDtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5wb3J0ID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFVSTC5wcm90b3R5cGUsIFwicGF0aG5hbWVcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0ucGF0aG5hbWU7XG4gIH0sXG4gIHNldChWKSB7XG4gICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYpO1xuICAgIHRoaXNbaW1wbF0ucGF0aG5hbWUgPSBWO1xuICB9LFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBjb25maWd1cmFibGU6IHRydWVcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVVJMLnByb3RvdHlwZSwgXCJzZWFyY2hcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0uc2VhcmNoO1xuICB9LFxuICBzZXQoVikge1xuICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWKTtcbiAgICB0aGlzW2ltcGxdLnNlYXJjaCA9IFY7XG4gIH0sXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShVUkwucHJvdG90eXBlLCBcImhhc2hcIiwge1xuICBnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXNbaW1wbF0uaGFzaDtcbiAgfSxcbiAgc2V0KFYpIHtcbiAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oVik7XG4gICAgdGhpc1tpbXBsXS5oYXNoID0gVjtcbiAgfSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXMob2JqKSB7XG4gICAgcmV0dXJuICEhb2JqICYmIG9ialtpbXBsXSBpbnN0YW5jZW9mIEltcGwuaW1wbGVtZW50YXRpb247XG4gIH0sXG4gIGNyZWF0ZShjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKSB7XG4gICAgbGV0IG9iaiA9IE9iamVjdC5jcmVhdGUoVVJMLnByb3RvdHlwZSk7XG4gICAgdGhpcy5zZXR1cChvYmosIGNvbnN0cnVjdG9yQXJncywgcHJpdmF0ZURhdGEpO1xuICAgIHJldHVybiBvYmo7XG4gIH0sXG4gIHNldHVwKG9iaiwgY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSkge1xuICAgIGlmICghcHJpdmF0ZURhdGEpIHByaXZhdGVEYXRhID0ge307XG4gICAgcHJpdmF0ZURhdGEud3JhcHBlciA9IG9iajtcblxuICAgIG9ialtpbXBsXSA9IG5ldyBJbXBsLmltcGxlbWVudGF0aW9uKGNvbnN0cnVjdG9yQXJncywgcHJpdmF0ZURhdGEpO1xuICAgIG9ialtpbXBsXVt1dGlscy53cmFwcGVyU3ltYm9sXSA9IG9iajtcbiAgfSxcbiAgaW50ZXJmYWNlOiBVUkwsXG4gIGV4cG9zZToge1xuICAgIFdpbmRvdzogeyBVUkw6IFVSTCB9LFxuICAgIFdvcmtlcjogeyBVUkw6IFVSTCB9XG4gIH1cbn07XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgY29udmVyc2lvbnMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gY29udmVyc2lvbnM7XG5cbmZ1bmN0aW9uIHNpZ24oeCkge1xuICAgIHJldHVybiB4IDwgMCA/IC0xIDogMTtcbn1cblxuZnVuY3Rpb24gZXZlblJvdW5kKHgpIHtcbiAgICAvLyBSb3VuZCB4IHRvIHRoZSBuZWFyZXN0IGludGVnZXIsIGNob29zaW5nIHRoZSBldmVuIGludGVnZXIgaWYgaXQgbGllcyBoYWxmd2F5IGJldHdlZW4gdHdvLlxuICAgIGlmICgoeCAlIDEpID09PSAwLjUgJiYgKHggJiAxKSA9PT0gMCkgeyAvLyBbZXZlbiBudW1iZXJdLjU7IHJvdW5kIGRvd24gKGkuZS4gZmxvb3IpXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTnVtYmVyQ29udmVyc2lvbihiaXRMZW5ndGgsIHR5cGVPcHRzKSB7XG4gICAgaWYgKCF0eXBlT3B0cy51bnNpZ25lZCkge1xuICAgICAgICAtLWJpdExlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgbG93ZXJCb3VuZCA9IHR5cGVPcHRzLnVuc2lnbmVkID8gMCA6IC1NYXRoLnBvdygyLCBiaXRMZW5ndGgpO1xuICAgIGNvbnN0IHVwcGVyQm91bmQgPSBNYXRoLnBvdygyLCBiaXRMZW5ndGgpIC0gMTtcblxuICAgIGNvbnN0IG1vZHVsb1ZhbCA9IHR5cGVPcHRzLm1vZHVsb0JpdExlbmd0aCA/IE1hdGgucG93KDIsIHR5cGVPcHRzLm1vZHVsb0JpdExlbmd0aCkgOiBNYXRoLnBvdygyLCBiaXRMZW5ndGgpO1xuICAgIGNvbnN0IG1vZHVsb0JvdW5kID0gdHlwZU9wdHMubW9kdWxvQml0TGVuZ3RoID8gTWF0aC5wb3coMiwgdHlwZU9wdHMubW9kdWxvQml0TGVuZ3RoIC0gMSkgOiBNYXRoLnBvdygyLCBiaXRMZW5ndGggLSAxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihWLCBvcHRzKSB7XG4gICAgICAgIGlmICghb3B0cykgb3B0cyA9IHt9O1xuXG4gICAgICAgIGxldCB4ID0gK1Y7XG5cbiAgICAgICAgaWYgKG9wdHMuZW5mb3JjZVJhbmdlKSB7XG4gICAgICAgICAgICBpZiAoIU51bWJlci5pc0Zpbml0ZSh4KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBpcyBub3QgYSBmaW5pdGUgbnVtYmVyXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB4ID0gc2lnbih4KSAqIE1hdGguZmxvb3IoTWF0aC5hYnMoeCkpO1xuICAgICAgICAgICAgaWYgKHggPCBsb3dlckJvdW5kIHx8IHggPiB1cHBlckJvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IGlzIG5vdCBpbiBieXRlIHJhbmdlXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oeCkgJiYgb3B0cy5jbGFtcCkge1xuICAgICAgICAgICAgeCA9IGV2ZW5Sb3VuZCh4KTtcblxuICAgICAgICAgICAgaWYgKHggPCBsb3dlckJvdW5kKSB4ID0gbG93ZXJCb3VuZDtcbiAgICAgICAgICAgIGlmICh4ID4gdXBwZXJCb3VuZCkgeCA9IHVwcGVyQm91bmQ7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKHgpIHx8IHggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgeCA9IHNpZ24oeCkgKiBNYXRoLmZsb29yKE1hdGguYWJzKHgpKTtcbiAgICAgICAgeCA9IHggJSBtb2R1bG9WYWw7XG5cbiAgICAgICAgaWYgKCF0eXBlT3B0cy51bnNpZ25lZCAmJiB4ID49IG1vZHVsb0JvdW5kKSB7XG4gICAgICAgICAgICByZXR1cm4geCAtIG1vZHVsb1ZhbDtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlT3B0cy51bnNpZ25lZCkge1xuICAgICAgICAgICAgaWYgKHggPCAwKSB7XG4gICAgICAgICAgICAgIHggKz0gbW9kdWxvVmFsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh4ID09PSAtMCkgeyAvLyBkb24ndCByZXR1cm4gbmVnYXRpdmUgemVyb1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbn1cblxuY29udmVyc2lvbnNbXCJ2b2lkXCJdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5jb252ZXJzaW9uc1tcImJvb2xlYW5cIl0gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuICEhdmFsO1xufTtcblxuY29udmVyc2lvbnNbXCJieXRlXCJdID0gY3JlYXRlTnVtYmVyQ29udmVyc2lvbig4LCB7IHVuc2lnbmVkOiBmYWxzZSB9KTtcbmNvbnZlcnNpb25zW1wib2N0ZXRcIl0gPSBjcmVhdGVOdW1iZXJDb252ZXJzaW9uKDgsIHsgdW5zaWduZWQ6IHRydWUgfSk7XG5cbmNvbnZlcnNpb25zW1wic2hvcnRcIl0gPSBjcmVhdGVOdW1iZXJDb252ZXJzaW9uKDE2LCB7IHVuc2lnbmVkOiBmYWxzZSB9KTtcbmNvbnZlcnNpb25zW1widW5zaWduZWQgc2hvcnRcIl0gPSBjcmVhdGVOdW1iZXJDb252ZXJzaW9uKDE2LCB7IHVuc2lnbmVkOiB0cnVlIH0pO1xuXG5jb252ZXJzaW9uc1tcImxvbmdcIl0gPSBjcmVhdGVOdW1iZXJDb252ZXJzaW9uKDMyLCB7IHVuc2lnbmVkOiBmYWxzZSB9KTtcbmNvbnZlcnNpb25zW1widW5zaWduZWQgbG9uZ1wiXSA9IGNyZWF0ZU51bWJlckNvbnZlcnNpb24oMzIsIHsgdW5zaWduZWQ6IHRydWUgfSk7XG5cbmNvbnZlcnNpb25zW1wibG9uZyBsb25nXCJdID0gY3JlYXRlTnVtYmVyQ29udmVyc2lvbigzMiwgeyB1bnNpZ25lZDogZmFsc2UsIG1vZHVsb0JpdExlbmd0aDogNjQgfSk7XG5jb252ZXJzaW9uc1tcInVuc2lnbmVkIGxvbmcgbG9uZ1wiXSA9IGNyZWF0ZU51bWJlckNvbnZlcnNpb24oMzIsIHsgdW5zaWduZWQ6IHRydWUsIG1vZHVsb0JpdExlbmd0aDogNjQgfSk7XG5cbmNvbnZlcnNpb25zW1wiZG91YmxlXCJdID0gZnVuY3Rpb24gKFYpIHtcbiAgICBjb25zdCB4ID0gK1Y7XG5cbiAgICBpZiAoIU51bWJlci5pc0Zpbml0ZSh4KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgaXMgbm90IGEgZmluaXRlIGZsb2F0aW5nLXBvaW50IHZhbHVlXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB4O1xufTtcblxuY29udmVyc2lvbnNbXCJ1bnJlc3RyaWN0ZWQgZG91YmxlXCJdID0gZnVuY3Rpb24gKFYpIHtcbiAgICBjb25zdCB4ID0gK1Y7XG5cbiAgICBpZiAoaXNOYU4oeCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IGlzIE5hTlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4geDtcbn07XG5cbi8vIG5vdCBxdWl0ZSB2YWxpZCwgYnV0IGdvb2QgZW5vdWdoIGZvciBKU1xuY29udmVyc2lvbnNbXCJmbG9hdFwiXSA9IGNvbnZlcnNpb25zW1wiZG91YmxlXCJdO1xuY29udmVyc2lvbnNbXCJ1bnJlc3RyaWN0ZWQgZmxvYXRcIl0gPSBjb252ZXJzaW9uc1tcInVucmVzdHJpY3RlZCBkb3VibGVcIl07XG5cbmNvbnZlcnNpb25zW1wiRE9NU3RyaW5nXCJdID0gZnVuY3Rpb24gKFYsIG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcblxuICAgIGlmIChvcHRzLnRyZWF0TnVsbEFzRW1wdHlTdHJpbmcgJiYgViA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gU3RyaW5nKFYpO1xufTtcblxuY29udmVyc2lvbnNbXCJCeXRlU3RyaW5nXCJdID0gZnVuY3Rpb24gKFYsIG9wdHMpIHtcbiAgICBjb25zdCB4ID0gU3RyaW5nKFYpO1xuICAgIGxldCBjID0gdW5kZWZpbmVkO1xuICAgIGZvciAobGV0IGkgPSAwOyAoYyA9IHguY29kZVBvaW50QXQoaSkpICE9PSB1bmRlZmluZWQ7ICsraSkge1xuICAgICAgICBpZiAoYyA+IDI1NSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IGlzIG5vdCBhIHZhbGlkIGJ5dGVzdHJpbmdcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geDtcbn07XG5cbmNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdID0gZnVuY3Rpb24gKFYpIHtcbiAgICBjb25zdCBTID0gU3RyaW5nKFYpO1xuICAgIGNvbnN0IG4gPSBTLmxlbmd0aDtcbiAgICBjb25zdCBVID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgY29uc3QgYyA9IFMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+IDB4REZGRikge1xuICAgICAgICAgICAgVS5wdXNoKFN0cmluZy5mcm9tQ29kZVBvaW50KGMpKTtcbiAgICAgICAgfSBlbHNlIGlmICgweERDMDAgPD0gYyAmJiBjIDw9IDB4REZGRikge1xuICAgICAgICAgICAgVS5wdXNoKFN0cmluZy5mcm9tQ29kZVBvaW50KDB4RkZGRCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGkgPT09IG4gLSAxKSB7XG4gICAgICAgICAgICAgICAgVS5wdXNoKFN0cmluZy5mcm9tQ29kZVBvaW50KDB4RkZGRCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gUy5jaGFyQ29kZUF0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAoMHhEQzAwIDw9IGQgJiYgZCA8PSAweERGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGMgJiAweDNGRjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYiA9IGQgJiAweDNGRjtcbiAgICAgICAgICAgICAgICAgICAgVS5wdXNoKFN0cmluZy5mcm9tQ29kZVBvaW50KCgyIDw8IDE1KSArICgyIDw8IDkpICogYSArIGIpKTtcbiAgICAgICAgICAgICAgICAgICAgKytpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIFUucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludCgweEZGRkQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gVS5qb2luKCcnKTtcbn07XG5cbmNvbnZlcnNpb25zW1wiRGF0ZVwiXSA9IGZ1bmN0aW9uIChWLCBvcHRzKSB7XG4gICAgaWYgKCEoViBpbnN0YW5jZW9mIERhdGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBpcyBub3QgYSBEYXRlIG9iamVjdFwiKTtcbiAgICB9XG4gICAgaWYgKGlzTmFOKFYpKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFY7XG59O1xuXG5jb252ZXJzaW9uc1tcIlJlZ0V4cFwiXSA9IGZ1bmN0aW9uIChWLCBvcHRzKSB7XG4gICAgaWYgKCEoViBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcbiAgICAgICAgViA9IG5ldyBSZWdFeHAoVik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFY7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzLm1peGluID0gZnVuY3Rpb24gbWl4aW4odGFyZ2V0LCBzb3VyY2UpIHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleXNbaV0sIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXlzW2ldKSk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLndyYXBwZXJTeW1ib2wgPSBTeW1ib2woXCJ3cmFwcGVyXCIpO1xubW9kdWxlLmV4cG9ydHMuaW1wbFN5bWJvbCA9IFN5bWJvbChcImltcGxcIik7XG5cbm1vZHVsZS5leHBvcnRzLndyYXBwZXJGb3JJbXBsID0gZnVuY3Rpb24gKGltcGwpIHtcbiAgcmV0dXJuIGltcGxbbW9kdWxlLmV4cG9ydHMud3JhcHBlclN5bWJvbF07XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pbXBsRm9yV3JhcHBlciA9IGZ1bmN0aW9uICh3cmFwcGVyKSB7XG4gIHJldHVybiB3cmFwcGVyW21vZHVsZS5leHBvcnRzLmltcGxTeW1ib2xdO1xufTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB1c20gPSByZXF1aXJlKFwiLi91cmwtc3RhdGUtbWFjaGluZVwiKTtcblxuZXhwb3J0cy5pbXBsZW1lbnRhdGlvbiA9IGNsYXNzIFVSTEltcGwge1xuICBjb25zdHJ1Y3Rvcihjb25zdHJ1Y3RvckFyZ3MpIHtcbiAgICBjb25zdCB1cmwgPSBjb25zdHJ1Y3RvckFyZ3NbMF07XG4gICAgY29uc3QgYmFzZSA9IGNvbnN0cnVjdG9yQXJnc1sxXTtcblxuICAgIGxldCBwYXJzZWRCYXNlID0gbnVsbDtcbiAgICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJzZWRCYXNlID0gdXNtLmJhc2ljVVJMUGFyc2UoYmFzZSk7XG4gICAgICBpZiAocGFyc2VkQmFzZSA9PT0gXCJmYWlsdXJlXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYmFzZSBVUkxcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcGFyc2VkVVJMID0gdXNtLmJhc2ljVVJMUGFyc2UodXJsLCB7IGJhc2VVUkw6IHBhcnNlZEJhc2UgfSk7XG4gICAgaWYgKHBhcnNlZFVSTCA9PT0gXCJmYWlsdXJlXCIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIFVSTFwiKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cmwgPSBwYXJzZWRVUkw7XG5cbiAgICAvLyBUT0RPOiBxdWVyeSBzdHVmZlxuICB9XG5cbiAgZ2V0IGhyZWYoKSB7XG4gICAgcmV0dXJuIHVzbS5zZXJpYWxpemVVUkwodGhpcy5fdXJsKTtcbiAgfVxuXG4gIHNldCBocmVmKHYpIHtcbiAgICBjb25zdCBwYXJzZWRVUkwgPSB1c20uYmFzaWNVUkxQYXJzZSh2KTtcbiAgICBpZiAocGFyc2VkVVJMID09PSBcImZhaWx1cmVcIikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgVVJMXCIpO1xuICAgIH1cblxuICAgIHRoaXMuX3VybCA9IHBhcnNlZFVSTDtcbiAgfVxuXG4gIGdldCBvcmlnaW4oKSB7XG4gICAgcmV0dXJuIHVzbS5zZXJpYWxpemVVUkxPcmlnaW4odGhpcy5fdXJsKTtcbiAgfVxuXG4gIGdldCBwcm90b2NvbCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsLnNjaGVtZSArIFwiOlwiO1xuICB9XG5cbiAgc2V0IHByb3RvY29sKHYpIHtcbiAgICB1c20uYmFzaWNVUkxQYXJzZSh2ICsgXCI6XCIsIHsgdXJsOiB0aGlzLl91cmwsIHN0YXRlT3ZlcnJpZGU6IFwic2NoZW1lIHN0YXJ0XCIgfSk7XG4gIH1cblxuICBnZXQgdXNlcm5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VybC51c2VybmFtZTtcbiAgfVxuXG4gIHNldCB1c2VybmFtZSh2KSB7XG4gICAgaWYgKHVzbS5jYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0KHRoaXMuX3VybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1c20uc2V0VGhlVXNlcm5hbWUodGhpcy5fdXJsLCB2KTtcbiAgfVxuXG4gIGdldCBwYXNzd29yZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdXJsLnBhc3N3b3JkO1xuICB9XG5cbiAgc2V0IHBhc3N3b3JkKHYpIHtcbiAgICBpZiAodXNtLmNhbm5vdEhhdmVBVXNlcm5hbWVQYXNzd29yZFBvcnQodGhpcy5fdXJsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVzbS5zZXRUaGVQYXNzd29yZCh0aGlzLl91cmwsIHYpO1xuICB9XG5cbiAgZ2V0IGhvc3QoKSB7XG4gICAgY29uc3QgdXJsID0gdGhpcy5fdXJsO1xuXG4gICAgaWYgKHVybC5ob3N0ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICBpZiAodXJsLnBvcnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB1c20uc2VyaWFsaXplSG9zdCh1cmwuaG9zdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzbS5zZXJpYWxpemVIb3N0KHVybC5ob3N0KSArIFwiOlwiICsgdXNtLnNlcmlhbGl6ZUludGVnZXIodXJsLnBvcnQpO1xuICB9XG5cbiAgc2V0IGhvc3Qodikge1xuICAgIGlmICh0aGlzLl91cmwuY2Fubm90QmVBQmFzZVVSTCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVzbS5iYXNpY1VSTFBhcnNlKHYsIHsgdXJsOiB0aGlzLl91cmwsIHN0YXRlT3ZlcnJpZGU6IFwiaG9zdFwiIH0pO1xuICB9XG5cbiAgZ2V0IGhvc3RuYW1lKCkge1xuICAgIGlmICh0aGlzLl91cmwuaG9zdCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzbS5zZXJpYWxpemVIb3N0KHRoaXMuX3VybC5ob3N0KTtcbiAgfVxuXG4gIHNldCBob3N0bmFtZSh2KSB7XG4gICAgaWYgKHRoaXMuX3VybC5jYW5ub3RCZUFCYXNlVVJMKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdXNtLmJhc2ljVVJMUGFyc2UodiwgeyB1cmw6IHRoaXMuX3VybCwgc3RhdGVPdmVycmlkZTogXCJob3N0bmFtZVwiIH0pO1xuICB9XG5cbiAgZ2V0IHBvcnQoKSB7XG4gICAgaWYgKHRoaXMuX3VybC5wb3J0ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdXNtLnNlcmlhbGl6ZUludGVnZXIodGhpcy5fdXJsLnBvcnQpO1xuICB9XG5cbiAgc2V0IHBvcnQodikge1xuICAgIGlmICh1c20uY2Fubm90SGF2ZUFVc2VybmFtZVBhc3N3b3JkUG9ydCh0aGlzLl91cmwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHYgPT09IFwiXCIpIHtcbiAgICAgIHRoaXMuX3VybC5wb3J0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdXNtLmJhc2ljVVJMUGFyc2UodiwgeyB1cmw6IHRoaXMuX3VybCwgc3RhdGVPdmVycmlkZTogXCJwb3J0XCIgfSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHBhdGhuYW1lKCkge1xuICAgIGlmICh0aGlzLl91cmwuY2Fubm90QmVBQmFzZVVSTCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3VybC5wYXRoWzBdO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl91cmwucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiBcIi9cIiArIHRoaXMuX3VybC5wYXRoLmpvaW4oXCIvXCIpO1xuICB9XG5cbiAgc2V0IHBhdGhuYW1lKHYpIHtcbiAgICBpZiAodGhpcy5fdXJsLmNhbm5vdEJlQUJhc2VVUkwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl91cmwucGF0aCA9IFtdO1xuICAgIHVzbS5iYXNpY1VSTFBhcnNlKHYsIHsgdXJsOiB0aGlzLl91cmwsIHN0YXRlT3ZlcnJpZGU6IFwicGF0aCBzdGFydFwiIH0pO1xuICB9XG5cbiAgZ2V0IHNlYXJjaCgpIHtcbiAgICBpZiAodGhpcy5fdXJsLnF1ZXJ5ID09PSBudWxsIHx8IHRoaXMuX3VybC5xdWVyeSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiP1wiICsgdGhpcy5fdXJsLnF1ZXJ5O1xuICB9XG5cbiAgc2V0IHNlYXJjaCh2KSB7XG4gICAgLy8gVE9ETzogcXVlcnkgc3R1ZmZcblxuICAgIGNvbnN0IHVybCA9IHRoaXMuX3VybDtcblxuICAgIGlmICh2ID09PSBcIlwiKSB7XG4gICAgICB1cmwucXVlcnkgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGlucHV0ID0gdlswXSA9PT0gXCI/XCIgPyB2LnN1YnN0cmluZygxKSA6IHY7XG4gICAgdXJsLnF1ZXJ5ID0gXCJcIjtcbiAgICB1c20uYmFzaWNVUkxQYXJzZShpbnB1dCwgeyB1cmwsIHN0YXRlT3ZlcnJpZGU6IFwicXVlcnlcIiB9KTtcbiAgfVxuXG4gIGdldCBoYXNoKCkge1xuICAgIGlmICh0aGlzLl91cmwuZnJhZ21lbnQgPT09IG51bGwgfHwgdGhpcy5fdXJsLmZyYWdtZW50ID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gXCIjXCIgKyB0aGlzLl91cmwuZnJhZ21lbnQ7XG4gIH1cblxuICBzZXQgaGFzaCh2KSB7XG4gICAgaWYgKHYgPT09IFwiXCIpIHtcbiAgICAgIHRoaXMuX3VybC5mcmFnbWVudCA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXQgPSB2WzBdID09PSBcIiNcIiA/IHYuc3Vic3RyaW5nKDEpIDogdjtcbiAgICB0aGlzLl91cmwuZnJhZ21lbnQgPSBcIlwiO1xuICAgIHVzbS5iYXNpY1VSTFBhcnNlKGlucHV0LCB7IHVybDogdGhpcy5fdXJsLCBzdGF0ZU92ZXJyaWRlOiBcImZyYWdtZW50XCIgfSk7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuaHJlZjtcbiAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgcHVueWNvZGUgPSByZXF1aXJlKFwicHVueWNvZGVcIik7XG52YXIgbWFwcGluZ1RhYmxlID0gcmVxdWlyZShcIi4vbGliL21hcHBpbmdUYWJsZS5qc29uXCIpO1xuXG52YXIgUFJPQ0VTU0lOR19PUFRJT05TID0ge1xuICBUUkFOU0lUSU9OQUw6IDAsXG4gIE5PTlRSQU5TSVRJT05BTDogMVxufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplKHN0cikgeyAvLyBmaXggYnVnIGluIHY4XG4gIHJldHVybiBzdHIuc3BsaXQoJ1xcdTAwMDAnKS5tYXAoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMubm9ybWFsaXplKCdORkMnKTsgfSkuam9pbignXFx1MDAwMCcpO1xufVxuXG5mdW5jdGlvbiBmaW5kU3RhdHVzKHZhbCkge1xuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgZW5kID0gbWFwcGluZ1RhYmxlLmxlbmd0aCAtIDE7XG5cbiAgd2hpbGUgKHN0YXJ0IDw9IGVuZCkge1xuICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChzdGFydCArIGVuZCkgLyAyKTtcblxuICAgIHZhciB0YXJnZXQgPSBtYXBwaW5nVGFibGVbbWlkXTtcbiAgICBpZiAodGFyZ2V0WzBdWzBdIDw9IHZhbCAmJiB0YXJnZXRbMF1bMV0gPj0gdmFsKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0WzBdWzBdID4gdmFsKSB7XG4gICAgICBlbmQgPSBtaWQgLSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydCA9IG1pZCArIDE7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciByZWdleEFzdHJhbFN5bWJvbHMgPSAvW1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nO1xuXG5mdW5jdGlvbiBjb3VudFN5bWJvbHMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmdcbiAgICAvLyByZXBsYWNlIGV2ZXJ5IHN1cnJvZ2F0ZSBwYWlyIHdpdGggYSBCTVAgc3ltYm9sXG4gICAgLnJlcGxhY2UocmVnZXhBc3RyYWxTeW1ib2xzLCAnXycpXG4gICAgLy8gdGhlbiBnZXQgdGhlIGxlbmd0aFxuICAgIC5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG1hcENoYXJzKGRvbWFpbl9uYW1lLCB1c2VTVEQzLCBwcm9jZXNzaW5nX29wdGlvbikge1xuICB2YXIgaGFzRXJyb3IgPSBmYWxzZTtcbiAgdmFyIHByb2Nlc3NlZCA9IFwiXCI7XG5cbiAgdmFyIGxlbiA9IGNvdW50U3ltYm9scyhkb21haW5fbmFtZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgY29kZVBvaW50ID0gZG9tYWluX25hbWUuY29kZVBvaW50QXQoaSk7XG4gICAgdmFyIHN0YXR1cyA9IGZpbmRTdGF0dXMoY29kZVBvaW50KTtcblxuICAgIHN3aXRjaCAoc3RhdHVzWzFdKSB7XG4gICAgICBjYXNlIFwiZGlzYWxsb3dlZFwiOlxuICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgIHByb2Nlc3NlZCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpZ25vcmVkXCI6XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1hcHBlZFwiOlxuICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLCBzdGF0dXNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJkZXZpYXRpb25cIjpcbiAgICAgICAgaWYgKHByb2Nlc3Npbmdfb3B0aW9uID09PSBQUk9DRVNTSU5HX09QVElPTlMuVFJBTlNJVElPTkFMKSB7XG4gICAgICAgICAgcHJvY2Vzc2VkICs9IFN0cmluZy5mcm9tQ29kZVBvaW50LmFwcGx5KFN0cmluZywgc3RhdHVzWzJdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ2YWxpZFwiOlxuICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGlzYWxsb3dlZF9TVEQzX21hcHBlZFwiOlxuICAgICAgICBpZiAodXNlU1REMykge1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY29kZVBvaW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzZWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQuYXBwbHkoU3RyaW5nLCBzdGF0dXNbMl0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRpc2FsbG93ZWRfU1REM192YWxpZFwiOlxuICAgICAgICBpZiAodXNlU1REMykge1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3NlZCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlUG9pbnQpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0cmluZzogcHJvY2Vzc2VkLFxuICAgIGVycm9yOiBoYXNFcnJvclxuICB9O1xufVxuXG52YXIgY29tYmluaW5nTWFya3NSZWdleCA9IC9bXFx1MDMwMC1cXHUwMzZGXFx1MDQ4My1cXHUwNDg5XFx1MDU5MS1cXHUwNUJEXFx1MDVCRlxcdTA1QzFcXHUwNUMyXFx1MDVDNFxcdTA1QzVcXHUwNUM3XFx1MDYxMC1cXHUwNjFBXFx1MDY0Qi1cXHUwNjVGXFx1MDY3MFxcdTA2RDYtXFx1MDZEQ1xcdTA2REYtXFx1MDZFNFxcdTA2RTdcXHUwNkU4XFx1MDZFQS1cXHUwNkVEXFx1MDcxMVxcdTA3MzAtXFx1MDc0QVxcdTA3QTYtXFx1MDdCMFxcdTA3RUItXFx1MDdGM1xcdTA4MTYtXFx1MDgxOVxcdTA4MUItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyRFxcdTA4NTktXFx1MDg1QlxcdTA4RTQtXFx1MDkwM1xcdTA5M0EtXFx1MDkzQ1xcdTA5M0UtXFx1MDk0RlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk4MS1cXHUwOTgzXFx1MDlCQ1xcdTA5QkUtXFx1MDlDNFxcdTA5QzdcXHUwOUM4XFx1MDlDQi1cXHUwOUNEXFx1MDlEN1xcdTA5RTJcXHUwOUUzXFx1MEEwMS1cXHUwQTAzXFx1MEEzQ1xcdTBBM0UtXFx1MEE0MlxcdTBBNDdcXHUwQTQ4XFx1MEE0Qi1cXHUwQTREXFx1MEE1MVxcdTBBNzBcXHUwQTcxXFx1MEE3NVxcdTBBODEtXFx1MEE4M1xcdTBBQkNcXHUwQUJFLVxcdTBBQzVcXHUwQUM3LVxcdTBBQzlcXHUwQUNCLVxcdTBBQ0RcXHUwQUUyXFx1MEFFM1xcdTBCMDEtXFx1MEIwM1xcdTBCM0NcXHUwQjNFLVxcdTBCNDRcXHUwQjQ3XFx1MEI0OFxcdTBCNEItXFx1MEI0RFxcdTBCNTZcXHUwQjU3XFx1MEI2MlxcdTBCNjNcXHUwQjgyXFx1MEJCRS1cXHUwQkMyXFx1MEJDNi1cXHUwQkM4XFx1MEJDQS1cXHUwQkNEXFx1MEJEN1xcdTBDMDAtXFx1MEMwM1xcdTBDM0UtXFx1MEM0NFxcdTBDNDYtXFx1MEM0OFxcdTBDNEEtXFx1MEM0RFxcdTBDNTVcXHUwQzU2XFx1MEM2MlxcdTBDNjNcXHUwQzgxLVxcdTBDODNcXHUwQ0JDXFx1MENCRS1cXHUwQ0M0XFx1MENDNi1cXHUwQ0M4XFx1MENDQS1cXHUwQ0NEXFx1MENENVxcdTBDRDZcXHUwQ0UyXFx1MENFM1xcdTBEMDEtXFx1MEQwM1xcdTBEM0UtXFx1MEQ0NFxcdTBENDYtXFx1MEQ0OFxcdTBENEEtXFx1MEQ0RFxcdTBENTdcXHUwRDYyXFx1MEQ2M1xcdTBEODJcXHUwRDgzXFx1MERDQVxcdTBEQ0YtXFx1MERENFxcdTBERDZcXHUwREQ4LVxcdTBEREZcXHUwREYyXFx1MERGM1xcdTBFMzFcXHUwRTM0LVxcdTBFM0FcXHUwRTQ3LVxcdTBFNEVcXHUwRUIxXFx1MEVCNC1cXHUwRUI5XFx1MEVCQlxcdTBFQkNcXHUwRUM4LVxcdTBFQ0RcXHUwRjE4XFx1MEYxOVxcdTBGMzVcXHUwRjM3XFx1MEYzOVxcdTBGM0VcXHUwRjNGXFx1MEY3MS1cXHUwRjg0XFx1MEY4NlxcdTBGODdcXHUwRjhELVxcdTBGOTdcXHUwRjk5LVxcdTBGQkNcXHUwRkM2XFx1MTAyQi1cXHUxMDNFXFx1MTA1Ni1cXHUxMDU5XFx1MTA1RS1cXHUxMDYwXFx1MTA2Mi1cXHUxMDY0XFx1MTA2Ny1cXHUxMDZEXFx1MTA3MS1cXHUxMDc0XFx1MTA4Mi1cXHUxMDhEXFx1MTA4RlxcdTEwOUEtXFx1MTA5RFxcdTEzNUQtXFx1MTM1RlxcdTE3MTItXFx1MTcxNFxcdTE3MzItXFx1MTczNFxcdTE3NTJcXHUxNzUzXFx1MTc3MlxcdTE3NzNcXHUxN0I0LVxcdTE3RDNcXHUxN0REXFx1MTgwQi1cXHUxODBEXFx1MThBOVxcdTE5MjAtXFx1MTkyQlxcdTE5MzAtXFx1MTkzQlxcdTE5QjAtXFx1MTlDMFxcdTE5QzhcXHUxOUM5XFx1MUExNy1cXHUxQTFCXFx1MUE1NS1cXHUxQTVFXFx1MUE2MC1cXHUxQTdDXFx1MUE3RlxcdTFBQjAtXFx1MUFCRVxcdTFCMDAtXFx1MUIwNFxcdTFCMzQtXFx1MUI0NFxcdTFCNkItXFx1MUI3M1xcdTFCODAtXFx1MUI4MlxcdTFCQTEtXFx1MUJBRFxcdTFCRTYtXFx1MUJGM1xcdTFDMjQtXFx1MUMzN1xcdTFDRDAtXFx1MUNEMlxcdTFDRDQtXFx1MUNFOFxcdTFDRURcXHUxQ0YyLVxcdTFDRjRcXHUxQ0Y4XFx1MUNGOVxcdTFEQzAtXFx1MURGNVxcdTFERkMtXFx1MURGRlxcdTIwRDAtXFx1MjBGMFxcdTJDRUYtXFx1MkNGMVxcdTJEN0ZcXHUyREUwLVxcdTJERkZcXHUzMDJBLVxcdTMwMkZcXHUzMDk5XFx1MzA5QVxcdUE2NkYtXFx1QTY3MlxcdUE2NzQtXFx1QTY3RFxcdUE2OUZcXHVBNkYwXFx1QTZGMVxcdUE4MDJcXHVBODA2XFx1QTgwQlxcdUE4MjMtXFx1QTgyN1xcdUE4ODBcXHVBODgxXFx1QThCNC1cXHVBOEM0XFx1QThFMC1cXHVBOEYxXFx1QTkyNi1cXHVBOTJEXFx1QTk0Ny1cXHVBOTUzXFx1QTk4MC1cXHVBOTgzXFx1QTlCMy1cXHVBOUMwXFx1QTlFNVxcdUFBMjktXFx1QUEzNlxcdUFBNDNcXHVBQTRDXFx1QUE0RFxcdUFBN0ItXFx1QUE3RFxcdUFBQjBcXHVBQUIyLVxcdUFBQjRcXHVBQUI3XFx1QUFCOFxcdUFBQkVcXHVBQUJGXFx1QUFDMVxcdUFBRUItXFx1QUFFRlxcdUFBRjVcXHVBQUY2XFx1QUJFMy1cXHVBQkVBXFx1QUJFQ1xcdUFCRURcXHVGQjFFXFx1RkUwMC1cXHVGRTBGXFx1RkUyMC1cXHVGRTJEXXxcXHVEODAwW1xcdURERkRcXHVERUUwXFx1REY3Ni1cXHVERjdBXXxcXHVEODAyW1xcdURFMDEtXFx1REUwM1xcdURFMDVcXHVERTA2XFx1REUwQy1cXHVERTBGXFx1REUzOC1cXHVERTNBXFx1REUzRlxcdURFRTVcXHVERUU2XXxcXHVEODA0W1xcdURDMDAtXFx1REMwMlxcdURDMzgtXFx1REM0NlxcdURDN0YtXFx1REM4MlxcdURDQjAtXFx1RENCQVxcdUREMDAtXFx1REQwMlxcdUREMjctXFx1REQzNFxcdURENzNcXHVERDgwLVxcdUREODJcXHVEREIzLVxcdUREQzBcXHVERTJDLVxcdURFMzdcXHVERURGLVxcdURFRUFcXHVERjAxLVxcdURGMDNcXHVERjNDXFx1REYzRS1cXHVERjQ0XFx1REY0N1xcdURGNDhcXHVERjRCLVxcdURGNERcXHVERjU3XFx1REY2MlxcdURGNjNcXHVERjY2LVxcdURGNkNcXHVERjcwLVxcdURGNzRdfFxcdUQ4MDVbXFx1RENCMC1cXHVEQ0MzXFx1RERBRi1cXHVEREI1XFx1RERCOC1cXHVEREMwXFx1REUzMC1cXHVERTQwXFx1REVBQi1cXHVERUI3XXxcXHVEODFBW1xcdURFRjAtXFx1REVGNFxcdURGMzAtXFx1REYzNl18XFx1RDgxQltcXHVERjUxLVxcdURGN0VcXHVERjhGLVxcdURGOTJdfFxcdUQ4MkZbXFx1REM5RFxcdURDOUVdfFxcdUQ4MzRbXFx1REQ2NS1cXHVERDY5XFx1REQ2RC1cXHVERDcyXFx1REQ3Qi1cXHVERDgyXFx1REQ4NS1cXHVERDhCXFx1RERBQS1cXHVEREFEXFx1REU0Mi1cXHVERTQ0XXxcXHVEODNBW1xcdURDRDAtXFx1RENENl18XFx1REI0MFtcXHVERDAwLVxcdURERUZdLztcblxuZnVuY3Rpb24gdmFsaWRhdGVMYWJlbChsYWJlbCwgcHJvY2Vzc2luZ19vcHRpb24pIHtcbiAgaWYgKGxhYmVsLnN1YnN0cigwLCA0KSA9PT0gXCJ4bi0tXCIpIHtcbiAgICBsYWJlbCA9IHB1bnljb2RlLnRvVW5pY29kZShsYWJlbCk7XG4gICAgcHJvY2Vzc2luZ19vcHRpb24gPSBQUk9DRVNTSU5HX09QVElPTlMuTk9OVFJBTlNJVElPTkFMO1xuICB9XG5cbiAgdmFyIGVycm9yID0gZmFsc2U7XG5cbiAgaWYgKG5vcm1hbGl6ZShsYWJlbCkgIT09IGxhYmVsIHx8XG4gICAgICAobGFiZWxbM10gPT09IFwiLVwiICYmIGxhYmVsWzRdID09PSBcIi1cIikgfHxcbiAgICAgIGxhYmVsWzBdID09PSBcIi1cIiB8fCBsYWJlbFtsYWJlbC5sZW5ndGggLSAxXSA9PT0gXCItXCIgfHxcbiAgICAgIGxhYmVsLmluZGV4T2YoXCIuXCIpICE9PSAtMSB8fFxuICAgICAgbGFiZWwuc2VhcmNoKGNvbWJpbmluZ01hcmtzUmVnZXgpID09PSAwKSB7XG4gICAgZXJyb3IgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGxlbiA9IGNvdW50U3ltYm9scyhsYWJlbCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgc3RhdHVzID0gZmluZFN0YXR1cyhsYWJlbC5jb2RlUG9pbnRBdChpKSk7XG4gICAgaWYgKChwcm9jZXNzaW5nID09PSBQUk9DRVNTSU5HX09QVElPTlMuVFJBTlNJVElPTkFMICYmIHN0YXR1c1sxXSAhPT0gXCJ2YWxpZFwiKSB8fFxuICAgICAgICAocHJvY2Vzc2luZyA9PT0gUFJPQ0VTU0lOR19PUFRJT05TLk5PTlRSQU5TSVRJT05BTCAmJlxuICAgICAgICAgc3RhdHVzWzFdICE9PSBcInZhbGlkXCIgJiYgc3RhdHVzWzFdICE9PSBcImRldmlhdGlvblwiKSkge1xuICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBsYWJlbDogbGFiZWwsXG4gICAgZXJyb3I6IGVycm9yXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NpbmcoZG9tYWluX25hbWUsIHVzZVNURDMsIHByb2Nlc3Npbmdfb3B0aW9uKSB7XG4gIHZhciByZXN1bHQgPSBtYXBDaGFycyhkb21haW5fbmFtZSwgdXNlU1REMywgcHJvY2Vzc2luZ19vcHRpb24pO1xuICByZXN1bHQuc3RyaW5nID0gbm9ybWFsaXplKHJlc3VsdC5zdHJpbmcpO1xuXG4gIHZhciBsYWJlbHMgPSByZXN1bHQuc3RyaW5nLnNwbGl0KFwiLlwiKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyArK2kpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIHZhbGlkYXRpb24gPSB2YWxpZGF0ZUxhYmVsKGxhYmVsc1tpXSk7XG4gICAgICBsYWJlbHNbaV0gPSB2YWxpZGF0aW9uLmxhYmVsO1xuICAgICAgcmVzdWx0LmVycm9yID0gcmVzdWx0LmVycm9yIHx8IHZhbGlkYXRpb24uZXJyb3I7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICByZXN1bHQuZXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgc3RyaW5nOiBsYWJlbHMuam9pbihcIi5cIiksXG4gICAgZXJyb3I6IHJlc3VsdC5lcnJvclxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cy50b0FTQ0lJID0gZnVuY3Rpb24oZG9tYWluX25hbWUsIHVzZVNURDMsIHByb2Nlc3Npbmdfb3B0aW9uLCB2ZXJpZnlEbnNMZW5ndGgpIHtcbiAgdmFyIHJlc3VsdCA9IHByb2Nlc3NpbmcoZG9tYWluX25hbWUsIHVzZVNURDMsIHByb2Nlc3Npbmdfb3B0aW9uKTtcbiAgdmFyIGxhYmVscyA9IHJlc3VsdC5zdHJpbmcuc3BsaXQoXCIuXCIpO1xuICBsYWJlbHMgPSBsYWJlbHMubWFwKGZ1bmN0aW9uKGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHB1bnljb2RlLnRvQVNDSUkobCk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICByZXN1bHQuZXJyb3IgPSB0cnVlO1xuICAgICAgcmV0dXJuIGw7XG4gICAgfVxuICB9KTtcblxuICBpZiAodmVyaWZ5RG5zTGVuZ3RoKSB7XG4gICAgdmFyIHRvdGFsID0gbGFiZWxzLnNsaWNlKDAsIGxhYmVscy5sZW5ndGggLSAxKS5qb2luKFwiLlwiKS5sZW5ndGg7XG4gICAgaWYgKHRvdGFsLmxlbmd0aCA+IDI1MyB8fCB0b3RhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJlc3VsdC5lcnJvciA9IHRydWU7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaT0wOyBpIDwgbGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAobGFiZWxzLmxlbmd0aCA+IDYzIHx8IGxhYmVscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVzdWx0LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHJlc3VsdC5lcnJvcikgcmV0dXJuIG51bGw7XG4gIHJldHVybiBsYWJlbHMuam9pbihcIi5cIik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy50b1VuaWNvZGUgPSBmdW5jdGlvbihkb21haW5fbmFtZSwgdXNlU1REMykge1xuICB2YXIgcmVzdWx0ID0gcHJvY2Vzc2luZyhkb21haW5fbmFtZSwgdXNlU1REMywgUFJPQ0VTU0lOR19PUFRJT05TLk5PTlRSQU5TSVRJT05BTCk7XG5cbiAgcmV0dXJuIHtcbiAgICBkb21haW46IHJlc3VsdC5zdHJpbmcsXG4gICAgZXJyb3I6IHJlc3VsdC5lcnJvclxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMuUFJPQ0VTU0lOR19PUFRJT05TID0gUFJPQ0VTU0lOR19PUFRJT05TO1xuIiwiLy9jb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG4vL2NvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcblxuY29uc3QgZmV0Y2ggPSByZXF1aXJlKFwiLi4vZmV0Y2hcIik7XG5cbmV4cG9ydHMud29yZHNBcGlEaWN0aW9uYXJ5ID0gYXN5bmMgZnVuY3Rpb24od29yZCkge1xuICAgIGxldCB1cmwgPSBgaHR0cHM6Ly93b3Jkc2FwaXYxLnAucmFwaWRhcGkuY29tL3dvcmRzLyR7d29yZH1gO1xuXG4gICAgLy8gc2VuZCByZXF1ZXN0IHRvIHRoZSBXb3Jkc0FQSVxuICAgIC8qY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyh7XG4gICAgICAgIFwibWV0aG9kXCI6XCJHRVRcIixcbiAgICAgICAgdXJsLFxuICAgICAgICBcImhlYWRlcnNcIjp7XG4gICAgICAgIFwiY29udGVudC10eXBlXCI6XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIixcbiAgICAgICAgXCJ4LXJhcGlkYXBpLWhvc3RcIjpcIndvcmRzYXBpdjEucC5yYXBpZGFwaS5jb21cIixcbiAgICAgICAgXCJ4LXJhcGlkYXBpLWtleVwiOnByb2Nlc3MuZW52LlJBUElEQVBJX0tFWVxuICAgICAgICB9XG4gICAgICB9KTsqL1xuXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2guZmV0Y2hKc29uKHVybCxcbiAgICAgIHtcbiAgICAgICAgXCJtZXRob2RcIjpcIkdFVFwiLFxuICAgICAgICBcImNvbnRlbnQtdHlwZVwiOlwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXG4gICAgICAgIFwieC1yYXBpZGFwaS1ob3N0XCI6XCJ3b3Jkc2FwaXYxLnAucmFwaWRhcGkuY29tXCIsXG4gICAgICAgIFwieC1yYXBpZGFwaS1rZXlcIjpwcm9jZXNzLmVudi5SQVBJREFQSV9LRVlcbiAgICAgIH0sXG4gICAgICB7d29yZH1cbiAgICApO1xuICAgIFxuICAgIHJldHVybiByZXNwb25zZTtcbn07IiwiZXhwb3J0IGNvbnN0IE15V29yZHMgPSB7XG4gICAgXCJjcmFwXCI6IDEsXG4gICAgXCJkZWFyXCI6IDEsXG4gICAgXCJkdW1iXCI6IDEsXG4gICAgXCJmcmVha1wiOiAxLFxuICAgIFwiamFja1wiOiAxLFxuICAgIFwiYm9iXCI6IDEsXG4gICAgXCJqZXJrXCI6IDEsXG4gICAgXCJqZXJyeVwiOiAxLFxuICAgIFwiamltbXlcIjogMSxcbiAgICBcImxlZVwiOiAxLFxuICAgIFwibWlrZVwiOiAxLFxuICAgIFwibmlja1wiOiAxLFxuICAgIFwibnV0c1wiOiAxLFxuICAgIFwicGlzc1wiOiAxLFxuICAgIFwicm9nZXJcIjogMSxcbiAgICBcInNhbVwiOiAxLFxuXG4gICAgXCJib29cIjogMSxcbiAgICBcImJ1Y2tcIjogMSxcbiAgICBcImJ1c3RcIjogMSxcbiAgICBcImJ1dHRcIjogMSxcbiAgICBcImNhcnRlclwiOiAxLFxuICAgIFwiY2hpbGxcIjogMSxcbiAgICBcImNodWNrXCI6IDEsXG4gICAgXCJjbG9zZXRcIjogMSxcbiAgICBcImNvY2tcIjogMSxcbiAgICBcImNva2VcIjogMSxcbiAgICBcImNvc1wiOiAxLFxuICAgIFwiY3JhbmVcIjogMSxcbiAgICBcImNydXNoXCI6IDEsXG4gICAgXCJjdW50XCI6IDEsXG4gICAgXCJkZWFuXCI6IDEsXG4gICAgXCJkZWNlbnRcIjogMSxcbiAgICBcImRlc2VydFwiOiAxLFxuICAgIFwiZG9sbFwiOiAxLFxuICAgIFwiZG9uZ1wiOiAxLFxuICAgIFwiZG93bnRvd25cIjogMSxcbiAgICBcImRyYWdcIjogMSxcbiAgICBcImR1Y2tcIjogMSxcbiAgICBcImR1bXBcIjogMSxcbiAgICBcImVzdGF0ZVwiOiAxLFxuICAgIFwiZmFidWxvdXNcIjogMSxcbiAgICBcImZpbHRoeVwiOiAxLFxuICAgIFwiZm9ydGhcIjogMSxcbiAgICBcImhhaWxcIjogMSxcbiAgICBcImhvcFwiOiAxLFxuICAgIFwiamF5XCI6IDEsXG4gICAgXCJrZW5cIjogMSxcbiAgICBcImtpdHR5XCI6IDEsXG4gICAgXCJtYWlkXCI6IDEsXG4gICAgXCJtYXlvclwiOiAxLFxuICAgIFwibW9yb25cIjogMSxcbiAgICBcIm5hdWdodHlcIjogMSxcbiAgICBcIm5hc3R5XCI6IDEsXG4gICAgXCJwZW5zXCI6IDEsXG4gICAgXCJwb3RcIjogMSxcbiAgICBcInByZWNpb3VzXCI6IDEsXG4gICAgXCJwcmlja1wiOiAxLFxuICAgIFwicHJpbmNpcGFsXCI6IDEsXG4gICAgXCJwcm9cIjogMSxcbiAgICBcInB1bmNoXCI6IDEsXG4gICAgXCJwdW5rXCI6IDEsXG4gICAgXCJwdXJzZVwiOiAxLFxuICAgIFwicmFqXCI6IDEsXG4gICAgXCJyYW1cIjogMSxcbiAgICBcInJlYWxpc2VcIjogMSxcbiAgICBcInJlY2FsbFwiOiAxLFxuICAgIFwicmlja1wiOiAxLFxuICAgIFwicmlwXCI6IDEsXG4gICAgXCJydWJiaXNoXCI6IDEsXG4gICAgXCJydWRlXCI6IDEsXG4gICAgXCJzYWxseVwiOiAxLFxuICAgIFwic2VhbFwiOiAxLFxuICAgIFwic2VydmFudFwiOiAxLFxuICAgIFwic2hvcmVcIjogMSxcbiAgICBcInNsdXRcIjogMSxcbiAgICBcInN0cnVja1wiOiAxLFxuICAgIFwic3VlXCI6IDEsXG4gICAgXCJ0ZWFyc1wiOiAxLFxuICAgIFwidGVhclwiOiAxLFxuICAgIFwidGlwXCI6IDEsXG4gICAgXCJ0b2FzdFwiOiAxLFxuICAgIFwidHJpZ2dlclwiOiAxLFxuICAgIFwidHJ1bmtcIjogMSxcbiAgICBcInZpY2VcIjogMSxcbiAgICBcIndhbGxldFwiOiAxLFxuICAgIFwid2FudGluZ1wiOiAxLFxuICAgIFwid29vXCI6IDEsXG5cbiAgICBcImFpbFwiOiAxLFxuICAgIFwiYWxhc1wiOiAxLFxuICAgIFwiYW1iZXJcIjogMSxcbiAgICBcImFyeWFuXCI6IDEsXG4gICAgXCJhc3NhdWx0XCI6IDEsXG4gICAgXCJhc3lsdW1cIjogMSxcbiAgICBcImF0dGljXCI6IDEsXG4gICAgXCJhdWRpdGlvblwiOiAxLFxuICAgIFwiYXV0b1wiOiAxLFxuICAgIFwiYXZlbmdlXCI6IDEsXG4gICAgXCJhdHRhY2hlZFwiOiAxLFxuICAgIFwiYmFjaGVsb3JcIjogMSxcbiAgICBcImJhY2tlZFwiOiAxLFxuICAgIFwiYmFja3VwXCI6IDEsXG4gICAgXCJiYWNreWFyZFwiOiAxLFxuICAgIFwiYmFpbFwiOiAxLFxuICAgIFwiYmFpdFwiOiAxLFxuICAgIFwiYmFuZ2luZ1wiOiAxLFxuICAgIFwiYmFya1wiOiAxLFxuICAgIFwiYmFyblwiOiAxLFxuICAgIFwiYmVhcmluZ1wiOiAxLFxuICAgIFwiYmxpbmtcIjogMSxcbiAgICBcImJsaXNzXCI6IDEsXG4gICAgXCJibG9rZVwiOiAxLFxuICAgIFwiYm9sbG9ja3NcIjogMSxcbiAgICBcImJvbHRcIjogMSxcbiAgICBcImJvb3RoXCI6IDEsXG4gICAgXCJib290eVwiOiAxLFxuICAgIFwiYm9vemVcIjogMSxcbiAgICBcImJvcmVcIjogMSxcbiAgICBcImJvdXRcIjogMSxcbiAgICBcImJyYXRcIjogMSxcbiAgICBcImJyZWFzdFwiOiAxLFxuICAgIFwiYnJlZXplXCI6IDEsXG4gICAgXCJicmliZVwiOiAxLFxuICAgIFwiYnVkXCI6IDEsXG4gICAgXCJidWdnZXJcIjogMSxcbiAgICBcImJ1bGx5XCI6IDEsXG4gICAgXCJidW1wXCI6IDEsXG4gICAgXCJidW5cIjogMSxcbiAgICBcImJ1c3RlZFwiOiAxLFxuICAgIFwiY2FmZVwiOiAxLFxuICAgIFwiY2FsXCI6IDEsXG4gICAgXCJjYW5lXCI6IDEsXG4gICAgXCJjYW50XCI6IDEsXG4gICAgXCJjYXJyaWFnZVwiOiAxLFxuICAgIFwiY2FzZXlcIjogMSxcbiAgICBcImNoYWRcIjogMSxcbiAgICBcImNoYW1wXCI6IDEsXG4gICAgXCJjaGFudGluZ1wiOiAxLFxuICAgIFwiY2hhcFwiOiAxLFxuICAgIFwiY2hhdHRlclwiOiAxLFxuICAgIFwiY2hvaXJcIjogMSxcbiAgICBcImNob2tlXCI6IDEsXG4gICAgXCJjaG9wcGVyXCI6IDEsXG4gICAgXCJjaG9ydXNcIjogMSxcbiAgICBcImNob3dcIjogMSxcbiAgICBcImNsYW5cIjogMSxcbiAgICBcImNsYXBcIjogMSxcbiAgICBcImNsYXNzeVwiOiAxLFxuICAgIFwiY2xheVwiOiAxLFxuICAgIFwiY2xlcmtcIjogMSxcbiAgICBcImNsaXBcIjogMSxcbiAgICBcImNvZmZpblwiOiAxLFxuICAgIFwiY29sZVwiOiAxLFxuICAgIFwiY29sbGVjdG9yXCI6IDEsXG4gICAgXCJjb2xvbnlcIjogMSxcbiAgICBcImNvbW1pc3Npb25lclwiOiAxLFxuICAgIFwiY29tcGFuaW9uXCI6IDEsXG4gICAgXCJjb29wZXJcIjogMSxcbiAgICBcImNvcmRcIjogMSxcbiAgICBcImRhbGVcIjogMSxcbiAgICBcImRhcm5cIjogMSxcbiAgICBcImRlY2tcIjogMSxcbiAgICBcImRlZWRcIjogMSxcbiAgICBcImRlZXJcIjogMSxcbiAgICBcImRlbGlnaHRcIjogMSxcbiAgICBcImRlblwiOiAxLFxuICAgIFwiZGVwdXR5XCI6IDEsXG4gICAgXCJkZXRlbnRpb25cIjogMSxcbiAgICBcImRldm90ZWRcIjogMSxcbiAgICBcImRpbWVcIjogMSxcbiAgICBcImRpbmdcIjogMSxcbiAgICBcImRpcFwiOiAxLFxuICAgIFwiZGlzZ3Vpc2VcIjogMSxcbiAgICBcImRpc3RyZXNzXCI6IDEsXG4gICAgXCJkaXN0cmFjdFwiOiAxLFxuICAgIFwiZGlzdHVyYmluZ1wiOiAxLFxuICAgIFwiZGl0Y2hcIjogMSxcbiAgICBcImRvbGx5XCI6IDEsXG4gICAgXCJkb29tZWRcIjogMSxcbiAgICBcImRvdWdoXCI6IDEsXG4gICAgXCJkcmFmdFwiOiAxLFxuICAgIFwiZHViXCI6IDEsXG4gICAgXCJkdWdcIjogMSxcbiAgICBcImVzdGhlclwiOiAxLFxuICAgIFwiZXllZFwiOiAxLFxuICAgIFwiZmFnXCI6IDEsXG4gICAgXCJmYXRzb1wiOiAxLFxuICAgIFwiZmF0dHlcIjogMSxcbiAgICBcImZlYXN0XCI6IDEsXG4gICAgXCJmb2xkXCI6IDEsXG4gICAgXCJmb25kXCI6IDEsXG4gICAgXCJmb290YWdlXCI6IDEsXG4gICAgXCJmb3JlbWFuXCI6IDEsXG4gICAgXCJmb3N0ZXJcIjogMSxcbiAgICBcImZyYWdyYW5jZVwiOiAxLFxuICAgIFwiZnJlYWt5XCI6IDEsXG4gICAgXCJmdXNzXCI6IDEsXG4gICAgXCJnYWxcIjogMSxcbiAgICBcImdlZVwiOiAxLFxuICAgIFwiZ2VudWluZVwiOiAxLFxuICAgIFwiZ2hldHRvXCI6IDEsXG4gICAgXCJnaWdcIjogMSxcbiAgICBcImdsdWVcIjogMSxcbiAgICBcImdvYXRcIjogMSxcbiAgICBcImdvb3NlXCI6IDEsXG4gICAgXCJncmFpblwiOiAxLFxuICAgIFwiZ3Jhc3BcIjogMSxcbiAgICBcImdyb29tXCI6IDEsXG4gICAgXCJncm93bGluZ1wiOiAxLFxuICAgIFwiZ3VpbHRcIjogMSxcbiAgICBcImd1bVwiOiAxLFxuICAgIFwiaGFua1wiOiAxLFxuICAgIFwiaGFycGVyXCI6IDEsXG4gICAgXCJoYXRjaFwiOiAxLFxuICAgIFwiaGF1bFwiOiAxLFxuICAgIFwiaGF1bnRlZFwiOiAxLFxuICAgIFwiaGF3a1wiOiAxLFxuICAgIFwiaGF5XCI6IDEsXG4gICAgXCJoZWF0aGVyXCI6IDEsXG4gICAgXCJoZWN0b3JcIjogMSxcbiAgICBcImhlbmNlXCI6IDEsXG4gICAgXCJoZXJlYnlcIjogMSxcbiAgICBcImhpbnRcIjogMSxcbiAgICBcImhvbWVyXCI6IDEsXG4gICAgXCJob21pY2lkZVwiOiAxLFxuICAgIFwiaG9va2VkXCI6IDEsXG4gICAgXCJob29rZXJcIjogMSxcbiAgICBcImhvcm55XCI6IDEsXG4gICAgXCJob3dkeVwiOiAxLFxuICAgIFwiaHVnaGVzXCI6IDEsXG4gICAgXCJodW1cIjogMSxcbiAgICBcImh1bmdlclwiOiAxLFxuICAgIFwiaHVzaFwiOiAxLFxuICAgIFwiaHV0XCI6IDEsXG4gICAgXCJpbm5cIjogMSxcbiAgICBcImlubmVyXCI6IDEsXG4gICAgXCJpbnRhY3RcIjogMSxcbiAgICBcImludGltYXRlXCI6IDEsXG4gICAgXCJpcnJlc3BvbnNpYmxlXCI6IDEsXG4gICAgXCJpc3N1ZWRcIjogMSxcbiAgICBcImphZGVcIjogMSxcbiAgICBcImphbml0b3JcIjogMSxcbiAgICBcImplbGx5XCI6IDEsXG4gICAgXCJqZXJzZXlcIjogMSxcbiAgICBcImpvbGx5XCI6IDEsXG4gICAgXCJqdW5raWVcIjogMSxcbiAgICBcImtlZW5cIjogMSxcbiAgICBcImtpZG5leVwiOiAxLFxuICAgIFwia2hhblwiOiAxLFxuICAgIFwia25pdmVzXCI6IDEsXG4gICAgXCJrbm90XCI6IDEsXG4gICAgXCJsYW5jZVwiOiAxLFxuICAgIFwibGFuZVwiOiAxLFxuICAgIFwibGFwXCI6IDEsXG4gICAgXCJsYXduXCI6IDEsXG4gICAgXCJsZWFuXCI6IDEsXG4gICAgXCJsZWFwXCI6IDEsXG4gICAgXCJsZWF0aGVyXCI6IDEsXG4gICAgXCJsaW5nXCI6IDEsXG4gICAgXCJsaXRcIjogMSxcbiAgICBcImxpdmVyXCI6IDEsXG4gICAgXCJsb2Fkc1wiOiAxLFxuICAgIFwibG9ic3RlclwiOiAxLFxuICAgIFwibG9ja2VyXCI6IDEsXG4gICAgXCJsb2RnZVwiOiAxLFxuICAgIFwibG9nXCI6IDEsXG4gICAgXCJsb3VuZ2VcIjogMSxcbiAgICBcImx1bmdcIjogMSxcbiAgICBcIm1hbGxcIjogMSxcbiAgICBcIm1hbnNpb25cIjogMSxcbiAgICBcIm1hcmNcIjogMSxcbiAgICBcIm1hcmluZVwiOiAxLFxuICAgIFwibWFzb25cIjogMSxcbiAgICBcIm1hdHRyZXNzXCI6IDEsXG4gICAgXCJtaXN0cmVzc1wiOiAxLFxuICAgIFwibW9iXCI6IDEsXG4gICAgXCJtb2xlXCI6IDEsXG4gICAgXCJtb21tYVwiOiAxLFxuICAgIFwibW9yZ3VlXCI6IDEsXG4gICAgXCJtb3RpdmVcIjogMSxcbiAgICBcIm1vdW50XCI6IDEsXG4gICAgXCJtb3VybmluZ1wiOiAxLFxuICAgIFwibXVmZmxlZFwiOiAxLFxuICAgIFwibXVnXCI6IDEsXG4gICAgXCJuYXBcIjogMSxcbiAgICBcIm5lYXRcIjogMSxcbiAgICBcIm5lZ3JvXCI6IDEsXG4gICAgXCJub3JtYW5cIjogMSxcbiAgICBcIm5vdGlvblwiOiAxLFxuICAgIFwibnVuXCI6IDEsXG4gICAgXCJudXRcIjogMSxcbiAgICBcIm9saXZlXCI6IDEsXG4gICAgXCJvcHBvc2VkXCI6IDEsXG4gICAgXCJvcmNoZXN0cmFcIjogMSxcbiAgICBcIm91dGZpdFwiOiAxLFxuICAgIFwib3hcIjogMSxcbiAgICBcInBhZFwiOiAxLFxuICAgIFwicGFsbVwiOiAxLFxuICAgIFwicGFudGllc1wiOiAxLFxuICAgIFwicGFyb2xlXCI6IDEsXG4gICAgXCJwYXRcIjogMSxcbiAgICBcInBhc3RhXCI6IDEsXG4gICAgXCJwZWVrXCI6IDEsXG4gICAgXCJwZXR0eVwiOiAxLFxuICAgIFwicGllclwiOiAxLFxuICAgIFwicGlnZ3lcIjogMSxcbiAgICBcInBpbGxcIjogMSxcbiAgICBcInBpbXBcIjogMSxcbiAgICBcInBpbmNoXCI6IDEsXG4gICAgXCJwaW5lXCI6IDEsXG4gICAgXCJwaW5nXCI6IDEsXG4gICAgXCJwaW5zXCI6IDEsXG4gICAgXCJwbGVkZ2VcIjogMSxcbiAgICBcInBva2VcIjogMSxcbiAgICBcInBva2VyXCI6IDEsXG4gICAgXCJwb25kXCI6IDEsXG4gICAgXCJwb29wXCI6IDEsXG4gICAgXCJwb3BwaW5nXCI6IDEsXG4gICAgXCJwb3JjaFwiOiAxLFxuICAgIFwicG9ydGVyXCI6IDEsXG4gICAgXCJwb3VuZGluZ1wiOiAxLFxuICAgIFwicHJvYmF0aW9uXCI6IDEsXG4gICAgXCJwcm9tXCI6IDEsXG4gICAgXCJwdWZmXCI6IDEsXG4gICAgXCJwdWtlXCI6IDEsXG4gICAgXCJwdXJzdWVcIjogMSxcbiAgICBcInB1cnN1aXRcIjogMSxcbiAgICBcInF1ZXN0XCI6IDEsXG4gICAgXCJyYWNrXCI6IDEsXG4gICAgXCJyYWNrZXRcIjogMSxcbiAgICBcInJhcFwiOiAxLFxuICAgIFwicmFzY2FsXCI6IDEsXG4gICAgXCJyYXNoXCI6IDEsXG4gICAgXCJyZWVkXCI6IDEsXG4gICAgXCJyZWZ1Z2VcIjogMSxcbiAgICBcInJlbGlldmVkXCI6IDEsXG4gICAgXCJyZXByZXNlbnRcIjogMSxcbiAgICBcInJlc2VydmF0aW9uc1wiOiAxLFxuICAgIFwicmVzb3J0XCI6IDEsXG4gICAgXCJyZXNwZWN0ZWRcIjogMSxcbiAgICBcInJldGFyZFwiOiAxLFxuICAgIFwicmV0aXJlXCI6IDEsXG4gICAgXCJyZXVuaW9uXCI6IDEsXG4gICAgXCJyb2FyaW5nXCI6IDEsXG4gICAgXCJyb2FzdFwiOiAxLFxuICAgIFwicm9iZVwiOiAxLFxuICAgIFwicm9kXCI6IDEsXG4gICAgXCJyb2d1ZVwiOiAxLFxuICAgIFwicnViXCI6IDEsXG4gICAgXCJydWJ5XCI6IDEsXG4gICAgXCJydWdcIjogMSxcbiAgICBcInJ1bVwiOiAxLFxuICAgIFwicnVtYmxpbmdcIjogMSxcbiAgICBcInJ1bW9yXCI6IDEsXG4gICAgXCJydXNoZWRcIjogMSxcbiAgICBcInJ1c3R5XCI6IDEsXG4gICAgXCJzYWx1dGVcIjogMSxcbiAgICBcInNhdXNhZ2VcIjogMSxcbiAgICBcInNjYW1cIjogMSxcbiAgICBcInNjYW5cIjogMSxcbiAgICBcInNjYXJmXCI6IDEsXG4gICAgXCJzY2F0dGVyZWRcIjogMSxcbiAgICBcInNjb3RjaFwiOiAxLFxuICAgIFwic2NvdW5kcmVsXCI6IDEsXG4gICAgXCJzY291dFwiOiAxLFxuICAgIFwic2NyZWVjaGluZ1wiOiAxLFxuICAgIFwic2NyZXdpbmdcIjogMSxcbiAgICBcInNjdW1cIjogMSxcbiAgICBcInNlYXRlZFwiOiAxLFxuICAgIFwic2VpemVcIjogMSxcbiAgICBcInNlcnZpbmdcIjogMSxcbiAgICBcInNld1wiOiAxLFxuICAgIFwic2hhZnRcIjogMSxcbiAgICBcInNoYWxsb3dcIjogMSxcbiAgICBcInNoYW5rYXJcIjogMSxcbiAgICBcInNoZWRcIjogMSxcbiAgICBcInNoZWV0XCI6IDEsXG4gICAgXCJzaGVsbFwiOiAxLFxuICAgIFwic2hlcGhlcmRcIjogMSxcbiAgICBcInNoaWVsZFwiOiAxLFxuICAgIFwic2hpblwiOiAxLFxuICAgIFwic2hvdmVcIjogMSxcbiAgICBcInNob3ZlbFwiOiAxLFxuICAgIFwic2hyaW1wXCI6IDEsXG4gICAgXCJzaHV0dGxlXCI6IDEsXG4gICAgXCJzaXBcIjogMSxcbiAgICBcInNpcmVcIjogMSxcbiAgICBcInNpcmVuXCI6IDEsXG4gICAgXCJzaXNzeVwiOiAxLFxuICAgIFwic2thdGVcIjogMSxcbiAgICBcInNraW5ueVwiOiAxLFxuICAgIFwic2xhbVwiOiAxLFxuICAgIFwic2xpbVwiOiAxLFxuICAgIFwic2xpdFwiOiAxLFxuICAgIFwic21hY2tcIjogMSxcbiAgICBcInNtYXNoXCI6IDEsXG4gICAgXCJzbmFja1wiOiAxLFxuICAgIFwic25hcFwiOiAxLFxuICAgIFwic29maWFcIjogMSxcbiAgICBcInNvbGl0YXJ5XCI6IDEsXG4gICAgXCJzb2xvbW9uXCI6IDEsXG4gICAgXCJzb25ueVwiOiAxLFxuICAgIFwic29yZVwiOiAxLFxuICAgIFwic3BhXCI6IDEsXG4gICAgXCJzcGVybVwiOiAxLFxuICAgIFwic3Bpa2VcIjogMSxcbiAgICBcInNwaWxsXCI6IDEsXG4gICAgXCJzcGluXCI6IDEsXG4gICAgXCJzcGluZVwiOiAxLFxuICAgIFwic3BpdGVcIjogMSxcbiAgICBcInNwbGVuZGlkXCI6IDEsXG4gICAgXCJzcG9pbFwiOiAxLFxuICAgIFwic3BvdHRlZFwiOiAxLFxuICAgIFwic3BvdHNcIjogMSxcbiAgICBcInNwcmVhZGluZ1wiOiAxLFxuICAgIFwic3ByaW5nc1wiOiAxLFxuICAgIFwic3F1ZWV6ZVwiOiAxLFxuICAgIFwic3RhaW5cIjogMSxcbiAgICBcInN0YWtlXCI6IDEsXG4gICAgXCJzdGFsbFwiOiAxLFxuICAgIFwic3Rld1wiOiAxLFxuICAgIFwic3RpZmZcIjogMSxcbiAgICBcInN0aW5nXCI6IDEsXG4gICAgXCJzdGl0Y2hcIjogMSxcbiAgICBcInN0b25lZFwiOiAxLFxuICAgIFwic3RvdmVcIjogMSxcbiAgICBcInN0cmFpZ2h0ZW5cIjogMSxcbiAgICBcInN0cmF3XCI6IDEsXG4gICAgXCJzdHJheVwiOiAxLFxuICAgIFwic3RyZWFtXCI6IDEsXG4gICAgXCJzdHJlc3NlZFwiOiAxLFxuICAgIFwic3RyaW5nc1wiOiAxLFxuICAgIFwic3R1ZFwiOiAxLFxuICAgIFwic3R1ZmZlZFwiOiAxLFxuICAgIFwic3R1bnRcIjogMSxcbiAgICBcInN1YlwiOiAxLFxuICAgIFwic3Vja2VyXCI6IDEsXG4gICAgXCJzdWl0ZVwiOiAxLFxuICAgIFwic3VpdGVzXCI6IDEsXG4gICAgXCJzdXByZW1lXCI6IDEsXG4gICAgXCJzdXJnZW9uXCI6IDEsXG4gICAgXCJzdXJ2ZWlsbGFuY2VcIjogMSxcbiAgICBcInN3ZWxsXCI6IDEsXG4gICAgXCJzd29yblwiOiAxLFxuICAgIFwidGFuXCI6IDEsXG4gICAgXCJ0YW5nXCI6IDEsXG4gICAgXCJ0YXBcIjogMSxcbiAgICBcInRlYXJpbmdcIjogMSxcbiAgICBcInRlYXNlXCI6IDEsXG4gICAgXCJ0ZWRkeVwiOiAxLFxuICAgIFwidGVtcHRhdGlvblwiOiAxLFxuICAgIFwidGVuZGVyXCI6IDEsXG4gICAgXCJ0ZW5zZVwiOiAxLFxuICAgIFwidGVybWluYWxcIjogMSxcbiAgICBcInRlc3RhbWVudFwiOiAxLFxuICAgIFwidGhlYXRyZVwiOiAxLFxuICAgIFwidGhlZnRcIjogMSxcbiAgICBcInRocmlsbFwiOiAxLFxuICAgIFwidGhyb25lXCI6IDEsXG4gICAgXCJ0aWNrXCI6IDEsXG4gICAgXCJ0aWRlXCI6IDEsXG4gICAgXCJ0aWR5XCI6IDEsXG4gICAgXCJ0aWZmYW55XCI6IDEsXG4gICAgXCJ0aWxcIjogMSxcbiAgICBcInRpblwiOiAxLFxuICAgIFwidGlyZVwiOiAxLFxuICAgIFwidGlzc3VlXCI6IDEsXG4gICAgXCJ0b2VcIjogMSxcbiAgICBcInRvcHNcIjogMSxcbiAgICBcInRvcmNoXCI6IDEsXG4gICAgXCJ0b3NzXCI6IDEsXG4gICAgXCJ0cmFpbFwiOiAxLFxuICAgIFwidHJlbWVuZG91c1wiOiAxLFxuICAgIFwidHJleVwiOiAxLFxuICAgIFwidHViXCI6IDEsXG4gICAgXCJ0dWJlXCI6IDEsXG4gICAgXCJ0dWNrXCI6IDEsXG4gICAgXCJ0dWNrZXJcIjogMSxcbiAgICBcInR1bW15XCI6IDEsXG4gICAgXCJ0dXJuZXJcIjogMSxcbiAgICBcInR1cnRsZVwiOiAxLFxuICAgIFwidHdpc3RcIjogMSxcbiAgICBcInVuZGVyY292ZXJcIjogMSxcbiAgICBcInVudGllXCI6IDEsXG4gICAgXCJ1cmluZVwiOiAxLFxuICAgIFwidmFpblwiOiAxLFxuICAgIFwidmF1bHRcIjogMSxcbiAgICBcInZlaWxcIjogMSxcbiAgICBcInZldFwiOiAxLFxuICAgIFwid2FkZVwiOiAxLFxuICAgIFwid2FuXCI6IDEsXG4gICAgXCJ3YW5kZXJcIjogMSxcbiAgICBcIndhcmRcIjogMSxcbiAgICBcIndhcnJlblwiOiAxLFxuICAgIFwid2F4XCI6IDEsXG4gICAgXCJ3ZWVcIjogMSxcbiAgICBcIndlZWRcIjogMSxcbiAgICBcIndlbGxzXCI6IDEsXG4gICAgXCJ3aGFja1wiOiAxLFxuICAgIFwid2hlZWxzXCI6IDEsXG4gICAgXCJ3aGlwXCI6IDEsXG4gICAgXCJ3aGlycmluZ1wiOiAxLFxuICAgIFwid2hpc3BlclwiOiAxLFxuICAgIFwid2hpc3RsaW5nXCI6IDEsXG4gICAgXCJ3aWNrZWRcIjogMSxcbiAgICBcIndpdFwiOiAxLFxuICAgIFwid29udFwiOiAxLFxuICAgIFwid29ya3Nob3BcIjogMSxcbiAgICBcIndvcm5cIjogMSxcbiAgICBcIndvcnRobGVzc1wiOiAxLFxuICAgIFwid29ydGh5XCI6IDEsXG4gICAgXCJ3cmVja1wiOiAxLFxuICAgIFwid3Jlc3RsaW5nXCI6IDEsXG4gICAgXCJ5ZWFcIjogMSxcbiAgICBcInllbGxcIjogMSxcbiAgICBcInl1bW15XCI6IDEsXG4gICAgXCJ6aXBcIjogMSxcblxuXG4gICAgXCJhYmlkZVwiOiAxLFxuICAgIFwiYWNhZGVtaWNzXCI6IDEsXG4gICAgXCJhY2NvbXBsaWNlXCI6IDEsXG4gICAgXCJhY2N1c3RvbWVkXCI6IDEsXG4gICAgXCJhY3F1YWludGFuY2VcIjogMSxcbiAgICBcImFkZGljdGlvblwiOiAxLFxuICAgIFwiYWVyaWFsXCI6IDEsXG4gICAgXCJhZmZpcm1hdGl2ZVwiOiAxLFxuICAgIFwiYWdpbmdcIjogMSxcbiAgICBcImFpcmJvcm5lXCI6IDEsXG4gICAgXCJhbGxlZ2lhbmNlXCI6IDEsXG4gICAgXCJhbGxvd2FuY2VcIjogMSxcbiAgICBcImFsdGVybmF0ZVwiOiAxLFxuICAgIFwiYW1lbmRtZW50XCI6IDEsXG4gICAgXCJhbW11bml0aW9uXCI6IDEsXG4gICAgXCJhbmd1aXNoXCI6IDEsXG4gICAgXCJhcHBlYWxpbmdcIjogMSxcbiAgICBcImFwcGxhdWRcIjogMSxcbiAgICBcImFwcHJlbnRpY2VcIjogMSxcbiAgICBcImFyY1wiOiAxLFxuICAgIFwiYXJjaFwiOiAxLFxuICAgIFwiYXJvdXNlZFwiOiAxLFxuICAgIFwiYXJ0ZXJ5XCI6IDEsXG4gICAgXCJhcnRpbGxlcnlcIjogMSxcbiAgICBcImFzaHRyYXlcIjogMSxcbiAgICBcImFzc2V0XCI6IDEsXG4gICAgXCJhc3RyYXlcIjogMSxcbiAgICBcImF1c3BpY2lvdXNcIjogMSxcbiAgICBcImJhYmJsaW5nXCI6IDEsXG4gICAgXCJiYW5xdWV0XCI6IDEsXG4gICAgXCJiYXJiXCI6IDEsXG4gICAgXCJiYXJnZVwiOiAxLFxuICAgIFwiYmFzaFwiOiAxLFxuICAgIFwiYmFzaWxcIjogMSxcbiAgICBcImJhdGh0dWJcIjogMSxcbiAgICBcImJhdG9uXCI6IDEsXG4gICAgXCJiYXR0YWxpb25cIjogMSxcbiAgICBcImJhdHRlclwiOiAxLFxuICAgIFwiYmVhZHNcIjogMSxcbiAgICBcImJlYXRsZXNcIjogMSxcbiAgICBcImJlYXVcIjogMSxcbiAgICBcImJlYXZlclwiOiAxLFxuICAgIFwiYmVja1wiOiAxLFxuICAgIFwiYmVldGxlXCI6IDEsXG4gICAgXCJiZWdnYXJcIjogMSxcbiAgICBcImJlbGxlXCI6IDEsXG4gICAgXCJiZW5kZXJcIjogMSxcbiAgICBcImJlcnJ5XCI6IDEsXG4gICAgXCJiZXlcIjogMSxcbiAgICBcImJpcmRpZVwiOiAxLFxuICAgIFwiYmxhZGRlclwiOiAxLFxuICAgIFwiYmxhcmluZ1wiOiAxLFxuICAgIFwiYmxhc3RlZFwiOiAxLFxuICAgIFwiYmxhemVcIjogMSxcbiAgICBcImJsZWVwXCI6IDEsXG4gICAgXCJibGVuZFwiOiAxLFxuICAgIFwiYmxpbmRlZFwiOiAxLFxuICAgIFwiYmxpbmdcIjogMSxcbiAgICBcImJsaXp6YXJkXCI6IDEsXG4gICAgXCJibG9vZGVkXCI6IDEsXG4gICAgXCJibG9vZHNoZWRcIjogMSxcbiAgICBcImJsb3Nzb21cIjogMSxcbiAgICBcImJsb3VzZVwiOiAxLFxuICAgIFwiYmxvd2pvYlwiOiAxLFxuICAgIFwiYmx1ZmZcIjogMSxcbiAgICBcImJsdW50XCI6IDEsXG4gICAgXCJibHVyXCI6IDEsXG4gICAgXCJibHVzaFwiOiAxLFxuICAgIFwiYm9hclwiOiAxLFxuICAgIFwiYm9uZXJcIjogMSxcbiAgICBcImJvb2JcIjogMSxcbiAgICBcImJvb25cIjogMSxcbiAgICBcImJvdW50eVwiOiAxLFxuICAgIFwiYm91cXVldFwiOiAxLFxuICAgIFwiYm91cmdlb2lzXCI6IDEsXG4gICAgXCJib3dsc1wiOiAxLFxuICAgIFwiYnJhY2VcIjogMSxcbiAgICBcImJyYWdcIjogMSxcbiAgICBcImJyZWFrZXJcIjogMSxcbiAgICBcImJyZXRocmVuXCI6IDEsXG4gICAgXCJicmV3XCI6IDEsXG4gICAgXCJicmllZmluZ1wiOiAxLFxuICAgIFwiYnJpbmtcIjogMSxcbiAgICBcImJyb29rc1wiOiAxLFxuICAgIFwiYnJvb21cIjogMSxcbiAgICBcImJyb3RoZWxcIjogMSxcbiAgICBcImJydWlzZVwiOiAxLFxuICAgIFwiYnJ1bmV0dGVcIjogMSxcbiAgICBcImJydXRlXCI6IDEsXG4gICAgXCJidWNrbGVcIjogMSxcbiAgICBcImJ1ZGdlXCI6IDEsXG4gICAgXCJidWZmXCI6IDEsXG4gICAgXCJidWZmZXRcIjogMSxcbiAgICBcImJ1bGJcIjogMSxcbiAgICBcImJ1bGxldGluXCI6IDEsXG4gICAgXCJidWxseWluZ1wiOiAxLFxuICAgIFwiYnVtbWVyXCI6IDEsXG4gICAgXCJidW1wZXJcIjogMSxcbiAgICBcImJ1bmtcIjogMSxcbiAgICBcImJ1bnNcIjogMSxcbiAgICBcImJ1cmtlXCI6IDEsXG4gICAgXCJidXRsZXJcIjogMSxcbiAgICBcImJ1dHRvY2tzXCI6IDEsXG4gICAgXCJjYWluXCI6IDEsXG4gICAgXCJjYW1cIjogMSxcbiAgICBcImNhbm5lZFwiOiAxLFxuICAgIFwiY2FyZGlhY1wiOiAxLFxuICAgIFwiY2FyZGluYWxcIjogMSxcbiAgICBcImNhcmVzc1wiOiAxLFxuICAgIFwiY2FyZXRha2VyXCI6IDEsXG4gICAgXCJjYXJtaW5lXCI6IDEsXG4gICAgXCJjYXJ2ZVwiOiAxLFxuICAgIFwiY2FzdGVcIjogMSxcbiAgICBcImNhdmFscnlcIjogMSxcbiAgICBcImNhdml0eVwiOiAxLFxuICAgIFwiY2VsZXN0aWFsXCI6IDEsXG4gICAgXCJjZXJlYWxcIjogMSxcbiAgICBcImNlcmVicmFsXCI6IDEsXG4gICAgXCJjaGFsa1wiOiAxLFxuICAgIFwiY2hhbmNlbGxvclwiOiAxLFxuICAgIFwiY2hhbnRcIjogMSxcbiAgICBcImNoYXBsaW5cIjogMSxcbiAgICBcImNoYXJjb2FsXCI6IDEsXG4gICAgXCJjaGFydGVyXCI6IDEsXG4gICAgXCJjaGVla3lcIjogMSxcbiAgICBcImNoZWVyZnVsXCI6IDEsXG4gICAgXCJjaGVlcmxlYWRlclwiOiAxLFxuICAgIFwiY2hlcmlzaFwiOiAxLFxuICAgIFwiY2hpY1wiOiAxLFxuICAgIFwiY2hpbGxpbmdcIjogMSxcbiAgICBcImNoaWxseVwiOiAxLFxuICAgIFwiY2hpbW5leVwiOiAxLFxuICAgIFwiY2hpbXBcIjogMSxcbiAgICBcImNoaXRcIjogMSxcbiAgICBcImNob3BwZWRcIjogMSxcbiAgICBcImNodWJieVwiOiAxLFxuICAgIFwiY2h1bXBcIjogMSxcbiAgICBcImNodW5rXCI6IDEsXG4gICAgXCJjaW5kZXJlbGxhXCI6IDEsXG4gICAgXCJjbGFtXCI6IDEsXG4gICAgXCJjbGFuZ2luZ1wiOiAxLFxuICAgIFwiY2xhcHBpbmdcIjogMSxcbiAgICBcImNsYXJpdHlcIjogMSxcbiAgICBcImNsYXJpZnlcIjogMSxcbiAgICBcImNsYXNoXCI6IDEsXG4gICAgXCJjbGF1c2VcIjogMSxcbiAgICBcImNsYXdcIjogMSxcbiAgICBcImNsZWFuZXJzXCI6IDEsXG4gICAgXCJjbGVhbnNlXCI6IDEsXG4gICAgXCJjbGVhcmFuY2VcIjogMSxcbiAgICBcImNsaW1heFwiOiAxLFxuICAgIFwiY2xpbmdcIjogMSxcbiAgICBcImNsb3N1cmVcIjogMSxcbiAgICBcImNsdXRjaFwiOiAxLFxuICAgIFwiY29ja3BpdFwiOiAxLFxuICAgIFwiY29ja3lcIjogMSxcbiAgICBcImNvZFwiOiAxLFxuICAgIFwiY29sbGF0ZXJhbFwiOiAxLFxuICAgIFwiY29sbGllclwiOiAxLFxuICAgIFwiY29sbGlzaW9uXCI6IDEsXG4gICAgXCJjb2xvZ25lXCI6IDEsXG4gICAgXCJjb21iXCI6IDEsXG4gICAgXCJjb21lYmFja1wiOiAxLFxuICAgIFwiY29tZnlcIjogMSxcbiAgICBcImNvbW1lbmNlXCI6IDEsXG4gICAgXCJjb21tb3Rpb25cIjogMSxcbiAgICBcImNvbW11bmlvblwiOiAxLFxuICAgIFwiY29tcGFydG1lbnRcIjogMSxcbiAgICBcImNvbXBldGluZ1wiOiAxLFxuICAgIFwiY29tcG91bmRcIjogMSxcbiAgICBcImNvbXByZWhlbmRcIjogMSxcbiAgICBcImNvbmNlYWxcIjogMSxcbiAgICBcImNvbmN1YmluZVwiOiAxLFxuICAgIFwiY29uY3Vzc2lvblwiOiAxLFxuICAgIFwiY29uZGVtblwiOiAxLFxuICAgIFwiY29uZG9cIjogMSxcbiAgICBcImNvbmVcIjogMSxcbiAgICBcImNvbnNpZGVyYXRlXCI6IDEsXG4gICAgXCJjb25zb2xhdGlvblwiOiAxLFxuICAgIFwiY29uc29sZVwiOiAxLFxuICAgIFwiY29uc3RhYmxlXCI6IDEsXG4gICAgXCJjb25zdWx0XCI6IDEsXG4gICAgXCJjb250YWdpb3VzXCI6IDEsXG4gICAgXCJjb250YW1pbmF0ZWRcIjogMSxcbiAgICBcImNvbnRlbXBvcmFyeVwiOiAxLFxuICAgIFwiY29udGVtcHRcIjogMSxcbiAgICBcImNvbnRlc3RhbnRcIjogMSxcbiAgICBcImNvbnZleVwiOiAxLFxuICAgIFwiY29udmljdFwiOiAxLFxuICAgIFwiY29vXCI6IDEsXG4gICAgXCJjb29wXCI6IDEsXG4gICAgXCJjb3BwZXJcIjogMSxcbiAgICBcImNvcmFsXCI6IDEsXG4gICAgXCJjb3JrXCI6IDEsXG4gICAgXCJjb3JreVwiOiAxLFxuICAgIFwiY29ycnVwdGVkXCI6IDEsXG4gICAgXCJjb3RcIjogMSxcbiAgICBcImNvdW50ZXJmZWl0XCI6IDEsXG4gICAgXCJjb3VwXCI6IDEsXG4gICAgXCJjb3VyaWVyXCI6IDEsXG4gICAgXCJjb3VydGhvdXNlXCI6IDEsXG4gICAgXCJjb3VydHJvb21cIjogMSxcbiAgICBcImNvdXJ0eWFyZFwiOiAxLFxuICAgIFwiY294XCI6IDEsXG4gICAgXCJjb3lvdGVcIjogMSxcbiAgICBcImNvenlcIjogMSxcbiAgICBcImNyYWNrZXJcIjogMSxcbiAgICBcImNyYWNrbGluZ1wiOiAxLFxuICAgIFwiY3JhZGxlXCI6IDEsXG4gICAgXCJjcmFmdFwiOiAxLFxuICAgIFwiY3JhbXBcIjogMSxcbiAgICBcImNyYW5rXCI6IDEsXG4gICAgXCJjcmFwcHlcIjogMSxcbiAgICBcImNyYXRlXCI6IDEsXG4gICAgXCJjcmF0ZXJcIjogMSxcbiAgICBcImNyZWFraW5nXCI6IDEsXG4gICAgXCJjcmVlcHNcIjogMSxcbiAgICBcImNyaWJcIjogMSxcbiAgICBcImNyaXBwbGVcIjogMSxcbiAgICBcImNyaXBwbGVkXCI6IDEsXG4gICAgXCJjcmlzcFwiOiAxLFxuICAgIFwiY3Jvb2tcIjogMSxcbiAgICBcImNyb29rZWRcIjogMSxcbiAgICBcImNyb3BcIjogMSxcbiAgICBcImNyb3RjaFwiOiAxLFxuICAgIFwiY3J1ZGVcIjogMSxcbiAgICBcImNydW5jaFwiOiAxLFxuICAgIFwiY3J1c2hpbmdcIjogMSxcbiAgICBcImNydXN0XCI6IDEsXG4gICAgXCJjcnV0Y2hcIjogMSxcbiAgICBcImN1YlwiOiAxLFxuICAgIFwiY3ViZVwiOiAxLFxuICAgIFwiY3Vja29vXCI6IDEsXG4gICAgXCJjdWRkbGVcIjogMSxcbiAgICBcImN1ZmZcIjogMSxcbiAgICBcImN1bHByaXRcIjogMSxcbiAgICBcImN1bVwiOiAxLFxuICAgIFwiY3VubmluZ1wiOiAxLFxuICAgIFwiY3VwYm9hcmRcIjogMSxcbiAgICBcImN1cmJcIjogMSxcbiAgICBcImN1cmZld1wiOiAxLFxuICAgIFwiY3VybHlcIjogMSxcbiAgICBcImN1dHRlclwiOiAxLFxuICAgIFwiZGFmdFwiOiAxLFxuICAgIFwiZGFnZ2VyXCI6IDEsXG4gICAgXCJkYWlyeVwiOiAxLFxuICAgIFwiZGFtcFwiOiAxLFxuICAgIFwiZGFuZHlcIjogMSxcbiAgICBcImRhbmlzaFwiOiAxLFxuICAgIFwiZGFyaW5nXCI6IDEsXG4gICAgXCJkYXl0aW1lXCI6IDEsXG4gICAgXCJkZWJyaXNcIjogMSxcbiAgICBcImRlYnV0XCI6IDEsXG4gICAgXCJkZWNheVwiOiAxLFxuICAgIFwiZGVjZWl2ZVwiOiAxLFxuICAgIFwiZGVjaXNpdmVcIjogMSxcbiAgICBcImRlY2xpbmVcIjogMSxcbiAgICBcImRlY3JlZVwiOiAxLFxuICAgIFwiZGVmZWN0XCI6IDEsXG4gICAgXCJkZWZpbml0ZVwiOiAxLFxuICAgIFwiZGVmeVwiOiAxLFxuICAgIFwiZGVsaWdodGZ1bFwiOiAxLFxuICAgIFwiZGVtb2xpdGlvblwiOiAxLFxuICAgIFwiZGVuaWFsXCI6IDEsXG4gICAgXCJkZW50XCI6IDEsXG4gICAgXCJkZXBhcnRlZFwiOiAxLFxuICAgIFwiZGVwdFwiOiAxLFxuICAgIFwiZGVwdGhzXCI6IDEsXG4gICAgXCJkZXNjZW50XCI6IDEsXG4gICAgXCJkZXNwaWNhYmxlXCI6IDEsXG4gICAgXCJkZXNwaXNlXCI6IDEsXG4gICAgXCJkZXRvdXJcIjogMSxcbiAgICBcImRldm90ZVwiOiAxLFxuICAgIFwiZGV2b3VyXCI6IDEsXG4gICAgXCJkZXdcIjogMSxcbiAgICBcImRpYXBlclwiOiAxLFxuICAgIFwiZGlhcnJoZWFcIjogMSxcbiAgICBcImRpZ3NcIjogMSxcbiAgICBcImRpbVwiOiAxLFxuICAgIFwiZGluZVwiOiAxLFxuICAgIFwiZGlyZVwiOiAxLFxuICAgIFwiZGlya1wiOiAxLFxuICAgIFwiZGlzY2hhcmdlXCI6IDEsXG4gICAgXCJkaXNjaXBsZVwiOiAxLFxuICAgIFwiZGlzY3JldGlvblwiOiAxLFxuICAgIFwiZGlzZ3Vpc2VkXCI6IDEsXG4gICAgXCJkaXNndXN0XCI6IDEsXG4gICAgXCJkaXNndXN0ZWRcIjogMSxcbiAgICBcImRpc21pc3NcIjogMSxcbiAgICBcImRpc3BhdGNoXCI6IDEsXG4gICAgXCJkaXNwb3NhbFwiOiAxLFxuICAgIFwiZGlzcG9zZVwiOiAxLFxuICAgIFwiZGlzcmVzcGVjdFwiOiAxLFxuICAgIFwiZGlzdGluZ3Vpc2hcIjogMSxcbiAgICBcImRpc3RvcnRlZFwiOiAxLFxuICAgIFwiZGlzdHJhY3Rpb25cIjogMSxcbiAgICBcImRpc3R1cmJhbmNlXCI6IDEsXG4gICAgXCJkaXZlcnNpb25cIjogMSxcbiAgICBcImRvZGdlXCI6IDEsXG4gICAgXCJkb2VcIjogMSxcbiAgICBcImRvbHBoaW5cIjogMSxcbiAgICBcImRvbWFpblwiOiAxLFxuICAgIFwiZG9tZVwiOiAxLFxuICAgIFwiZG9taW5pY1wiOiAxLFxuICAgIFwiZG9vbVwiOiAxLFxuICAgIFwiZG9vcm1hblwiOiAxLFxuICAgIFwiZG9vcnN0ZXBcIjogMSxcbiAgICBcImRvb3J3YXlcIjogMSxcbiAgICBcImRvcmlhblwiOiAxLFxuICAgIFwiZG9ya1wiOiAxLFxuICAgIFwiZG9ybVwiOiAxLFxuICAgIFwiZG9yeVwiOiAxLFxuICAgIFwiZG93bmhpbGxcIjogMSxcbiAgICBcImRvd3J5XCI6IDEsXG4gICAgXCJkcmFrZVwiOiAxLFxuICAgIFwiZHJhd2Vyc1wiOiAxLFxuICAgIFwiZHJlYWRcIjogMSxcbiAgICBcImRyZWFtZXJcIjogMSxcbiAgICBcImRyZW5jaGVkXCI6IDEsXG4gICAgXCJkcmVzc2VyXCI6IDEsXG4gICAgXCJkcmlmdGluZ1wiOiAxLFxuICAgIFwiZHJpbGxpbmdcIjogMSxcbiAgICBcImRyaXBcIjogMSxcbiAgICBcImRyb3VnaHRcIjogMSxcbiAgICBcImR1Y2hlc3NcIjogMSxcbiAgICBcImR1Y3RcIjogMSxcbiAgICBcImR1ZWxcIjogMSxcbiAgICBcImR1bXBzdGVyXCI6IDEsXG4gICAgXCJkdW5nXCI6IDEsXG4gICAgXCJkdW5nZW9uXCI6IDEsXG4gICAgXCJkdXNrXCI6IDEsXG4gICAgXCJkd2VsbFwiOiAxLFxuICAgIFwiZHllXCI6IDEsXG4gICAgXCJkeWtlXCI6IDEsXG4gICAgXCJlY2NlbnRyaWNcIjogMSxcbiAgICBcImVkZHlcIjogMSxcbiAgICBcImVtZXJnZVwiOiAxLFxuICAgIFwiZW1wcmVzc1wiOiAxLFxuICAgIFwiZW5kYW5nZXJlZFwiOiAxLFxuICAgIFwiZW5saWdodGVubWVudFwiOiAxLFxuICAgIFwiZXhjcmVtZW50XCI6IDEsXG4gICAgXCJleGlsZVwiOiAxLFxuICAgIFwiZXhwZWxcIjogMSxcbiAgICBcImV4cGVydGlzZVwiOiAxLFxuICAgIFwiZXhwbG9pdFwiOiAxLFxuICAgIFwiZXhwb3N1cmVcIjogMSxcbiAgICBcImV4cXVpc2l0ZVwiOiAxLFxuICAgIFwiZXh0aW5jdFwiOiAxLFxuICAgIFwiZXllc2lnaHRcIjogMSxcbiAgICBcImZhbmdcIjogMSxcbiAgICBcImZlcm9jaW91c1wiOiAxLFxuICAgIFwiZmllcnlcIjogMSxcbiAgICBcImZpbHRoXCI6IDEsXG4gICAgXCJmaW5cIjogMSxcbiAgICBcImZpbmNoXCI6IDEsXG4gICAgXCJmbGFua1wiOiAxLFxuICAgIFwiZmxhcFwiOiAxLFxuICAgIFwiZmxhcmVcIjogMSxcbiAgICBcImZsYXRzXCI6IDEsXG4gICAgXCJmbGF0dGVyXCI6IDEsXG4gICAgXCJmbGlja1wiOiAxLFxuICAgIFwiZmxpbmdcIjogMSxcbiAgICBcImZsaW50XCI6IDEsXG4gICAgXCJmbGlydFwiOiAxLFxuICAgIFwiZmxvY2tcIjogMSxcbiAgICBcImZsb3BcIjogMSxcbiAgICBcImZsb3JhXCI6IDEsXG4gICAgXCJmbG91clwiOiAxLFxuICAgIFwiZmx1ZmZ5XCI6IDEsXG4gICAgXCJmbHVzaGVkXCI6IDEsXG4gICAgXCJmbHV0ZVwiOiAxLFxuICAgIFwiZm9lXCI6IDEsXG4gICAgXCJmb3JlbW9zdFwiOiAxLFxuICAgIFwiZm9yZmVpdFwiOiAxLFxuICAgIFwiZm9yZ2VkXCI6IDEsXG4gICAgXCJmb3JtYXRpb25cIjogMSxcbiAgICBcImZvdW5kZXJcIjogMSxcbiAgICBcImZyYWN0dXJlXCI6IDEsXG4gICAgXCJmcmFtZWRcIjogMSxcbiAgICBcImZyYXRlcm5pdHlcIjogMSxcbiAgICBcImZyZWV3YXlcIjogMSxcbiAgICBcImZyZXNoZW5cIjogMSxcbiAgICBcImZyZXNobWFuXCI6IDEsXG4gICAgXCJmcmlnaHRcIjogMSxcbiAgICBcImZ1ZGdlXCI6IDEsXG4gICAgXCJmdWdpdGl2ZVwiOiAxLFxuICAgIFwiZnVsbGVyXCI6IDEsXG4gICAgXCJmdW5rXCI6IDEsXG4gICAgXCJmdW5reVwiOiAxLFxuICAgIFwiZnVzZVwiOiAxLFxuICAgIFwiZnV6enlcIjogMSxcbiAgICBcImdhZGdldFwiOiAxLFxuICAgIFwiZ2FnXCI6IDEsXG4gICAgXCJnYWxlXCI6IDEsXG4gICAgXCJnYXJyaXNvblwiOiAxLFxuICAgIFwiZ2FzcFwiOiAxLFxuICAgIFwiZ2F1Z2VcIjogMSxcbiAgICBcImdlZWtcIjogMSxcbiAgICBcImdlZXplclwiOiAxLFxuICAgIFwiZ2VsXCI6IDEsXG4gICAgXCJnZW1cIjogMSxcbiAgICBcImdlbnJlXCI6IDEsXG4gICAgXCJnZW51aW5lbHlcIjogMSxcbiAgICBcImdldGF3YXlcIjogMSxcbiAgICBcImdpZGR5XCI6IDEsXG4gICAgXCJnbGVuXCI6IDEsXG4gICAgXCJnbGl0dGVyXCI6IDEsXG4gICAgXCJnbG9vbXlcIjogMSxcbiAgICBcImdsb3dpbmdcIjogMSxcbiAgICBcImdvZGRhbVwiOiAxLFxuICAgIFwiZ29vXCI6IDEsXG4gICAgXCJnb29keVwiOiAxLFxuICAgIFwiZ29vZnlcIjogMSxcbiAgICBcImdvb25cIjogMSxcbiAgICBcImdvcmVcIjogMSxcbiAgICBcImdvd25cIjogMSxcbiAgICBcImdyYWNpb3VzXCI6IDEsXG4gICAgXCJncmFpbFwiOiAxLFxuICAgIFwiZ3JhbXBzXCI6IDEsXG4gICAgXCJncmF2ZXlhcmRcIjogMSxcbiAgICBcImdyYXZ5XCI6IDEsXG4gICAgXCJncmVhc2VcIjogMSxcbiAgICBcImdyb3ZlXCI6IDEsXG4gICAgXCJncnViXCI6IDEsXG4gICAgXCJncnVkZ2VcIjogMSxcbiAgICBcImdydW1weVwiOiAxLFxuICAgIFwiZ3J1bnRcIjogMSxcbiAgICBcImd1bGZcIjogMSxcbiAgICBcImd1dHRlclwiOiAxLFxuICAgIFwiaGFnXCI6IDEsXG4gICAgXCJoYWxlXCI6IDEsXG4gICAgXCJoYWxsb3dlZFwiOiAxLFxuICAgIFwiaGFtbGV0XCI6IDEsXG4gICAgXCJoYXJkeVwiOiAxLFxuICAgIFwiaGFyZVwiOiAxLFxuICAgIFwiaGFua3NcIjogMSxcbiAgICBcImhhcmFzc21lbnRcIjogMSxcbiAgICBcImhhc2hcIjogMSxcbiAgICBcImhhc3R5XCI6IDEsXG4gICAgXCJoYXVudFwiOiAxLFxuICAgIFwiaGF2YW5hXCI6IDEsXG4gICAgXCJoYXZvY1wiOiAxLFxuICAgIFwiaGVhZG1hc3RlclwiOiAxLFxuICAgIFwiaGVhdmVcIjogMSxcbiAgICBcImhlZWRcIjogMSxcbiAgICBcImhlZWxcIjogMSxcbiAgICBcImhlblwiOiAxLFxuICAgIFwiaGlja1wiOiAxLFxuICAgIFwiaGlkZW91c1wiOiAxLFxuICAgIFwiaGlkZW91dFwiOiAxLFxuICAgIFwiaGlzc2luZ1wiOiAxLFxuICAgIFwiaGl0Y2hcIjogMSxcbiAgICBcImhvYXhcIjogMSxcbiAgICBcImhvZ1wiOiAxLFxuICAgIFwiaG9sbGVyXCI6IDEsXG4gICAgXCJob21vXCI6IDEsXG4gICAgXCJob25rXCI6IDEsXG4gICAgXCJob292ZXJcIjogMSxcbiAgICBcImhvcGVmdWxcIjogMSxcbiAgICBcImhvcHBlclwiOiAxLFxuICAgIFwiaG9zZVwiOiAxLFxuICAgIFwiaG91bmRcIjogMSxcbiAgICBcImhvdXNld2lmZVwiOiAxLFxuICAgIFwiaG93bFwiOiAxLFxuICAgIFwiaHViXCI6IDEsXG4gICAgXCJodWdnaW5nXCI6IDEsXG4gICAgXCJodWxsXCI6IDEsXG4gICAgXCJodW1wXCI6IDEsXG4gICAgXCJodW5jaFwiOiAxLFxuICAgIFwiaHVua1wiOiAxLFxuICAgIFwiaHVycmFoXCI6IDEsXG4gICAgXCJodXN0bGVcIjogMSxcbiAgICBcImh1dGNoXCI6IDEsXG4gICAgXCJoeXBvY3JpdGVcIjogMSxcbiAgICBcImlkaW90aWNcIjogMSxcbiAgICBcImlkbGVcIjogMSxcbiAgICBcImlnbm9yYW5jZVwiOiAxLFxuICAgIFwiaWxsaXRlcmF0ZVwiOiAxLFxuICAgIFwiaW1iZWNpbGVcIjogMSxcbiAgICBcImltbWVuc2VcIjogMSxcbiAgICBcImltbWF0dXJlXCI6IDEsXG4gICAgXCJpbXBvc2VcIjogMSxcbiAgICBcImluY2FwYWJsZVwiOiAxLFxuICAgIFwiaW5jZW5zZVwiOiAxLFxuICAgIFwiaW5jbGluZWRcIjogMSxcbiAgICBcImluZGV4XCI6IDEsXG4gICAgXCJpbmR1bGdlXCI6IDEsXG4gICAgXCJpbmZlcmlvclwiOiAxLFxuICAgIFwiaW5maXJtYXJ5XCI6IDEsXG4gICAgXCJpbmZsdWVudGlhbFwiOiAxLFxuICAgIFwiaW5mb3JtYW50XCI6IDEsXG4gICAgXCJpbmZvcm1lclwiOiAxLFxuICAgIFwiaW5pdGlhdGl2ZVwiOiAxLFxuICAgIFwiaW5qdXN0aWNlXCI6IDEsXG4gICAgXCJpbm1hdGVcIjogMSxcbiAgICBcImlucXVpcnlcIjogMSxcbiAgICBcImluc29sZW50XCI6IDEsXG4gICAgXCJpbnNvbW5pYVwiOiAxLFxuICAgIFwiaW50ZW50XCI6IDEsXG4gICAgXCJpbnRlcmNlcHRcIjogMSxcbiAgICBcImludGVyY291cnNlXCI6IDEsXG4gICAgXCJpbnRlcm5cIjogMSxcbiAgICBcImludGVycm9nYXRlXCI6IDEsXG4gICAgXCJpbnRlcnZlbmVcIjogMSxcbiAgICBcImludGltYWN5XCI6IDEsXG4gICAgXCJpbnRyaWd1aW5nXCI6IDEsXG4gICAgXCJpbnR1aXRpb25cIjogMSxcbiAgICBcImludmFkZVwiOiAxLFxuICAgIFwiaXJyaXRhdGVkXCI6IDEsXG4gICAgXCJpdGNoXCI6IDEsXG4gICAgXCJqYW1tZWRcIjogMSxcbiAgICBcImphc3BlclwiOiAxLFxuICAgIFwiamVya2luZ1wiOiAxLFxuICAgIFwiamlueFwiOiAxLFxuICAgIFwiam9nXCI6IDEsXG4gICAgXCJqb25haFwiOiAxLFxuICAgIFwiam95ZnVsXCI6IDEsXG4gICAgXCJqdW1ib1wiOiAxLFxuICAgIFwianVtcGVyXCI6IDEsXG4gICAgXCJqdXJpc2RpY3Rpb25cIjogMSxcbiAgICBcImp1c3RpZmllZFwiOiAxLFxuXG5cbiAgICBcImphYlwiOiAxLFxuICAgIFwia2VlcGVyXCI6IDEsXG4gICAgXCJrZXR0bGVcIjogMSxcbiAgICBcImtpblwiOiAxLFxuICAgIFwia2lua3lcIjogMSxcbiAgICBcImtpcmtcIjogMSxcbiAgICBcImtpdGVcIjogMSxcbiAgICBcImtpdHRlblwiOiAxLFxuICAgIFwia25pdFwiOiAxLFxuICAgIFwia25vYlwiOiAxLFxuICAgIFwibGFjZVwiOiAxLFxuICAgIFwibGFkZW5cIjogMSxcbiAgICBcImxhaXJcIjogMSxcbiAgICBcImxha2hcIjogMSxcbiAgICBcImxhbVwiOiAxLFxuICAgIFwibGF1cmVsXCI6IDEsXG4gICAgXCJsZWFcIjogMSxcbiAgICBcImxlYXNoXCI6IDEsXG4gICAgXCJsZWJhbm9uXCI6IDEsXG4gICAgXCJsZWZ0eVwiOiAxLFxuICAgIFwibGVnaW9uXCI6IDEsXG4gICAgXCJsZWlcIjogMSxcbiAgICBcImxldmVyXCI6IDEsXG4gICAgXCJsaWFpc29uXCI6IDEsXG4gICAgXCJsaWNraW5nXCI6IDEsXG4gICAgXCJsaWRcIjogMSxcbiAgICBcImxpbWJcIjogMSxcbiAgICBcImxpbWVcIjogMSxcbiAgICBcImxpbXBcIjogMSxcbiAgICBcImxpbmdlcmllXCI6IDEsXG4gICAgXCJsaW5pbmdcIjogMSxcbiAgICBcImxpc2JvblwiOiAxLFxuICAgIFwibGl0ZXJhcnlcIjogMSxcbiAgICBcImxpdHRlclwiOiAxLFxuICAgIFwibGl2XCI6IDEsXG4gICAgXCJsb2FmXCI6IDEsXG4gICAgXCJsb2NraW5nXCI6IDEsXG4gICAgXCJsb2Z0XCI6IDEsXG4gICAgXCJsb25lXCI6IDEsXG4gICAgXCJsb25lc29tZVwiOiAxLFxuICAgIFwibG9vXCI6IDEsXG4gICAgXCJsb29rb3V0XCI6IDEsXG4gICAgXCJsb29wXCI6IDEsXG4gICAgXCJsb290XCI6IDEsXG4gICAgXCJsb3Jkc2hpcFwiOiAxLFxuICAgIFwibG90aW9uXCI6IDEsXG4gICAgXCJsdW1wXCI6IDEsXG4gICAgXCJsdXJlXCI6IDEsXG4gICAgXCJseW5jaFwiOiAxLFxuICAgIFwibWFlc3Ryb1wiOiAxLFxuICAgIFwibWFnaXN0cmF0ZVwiOiAxLFxuICAgIFwibWFtbW90aFwiOiAxLFxuICAgIFwibWFuaWZlc3RcIjogMSxcbiAgICBcIm1hbm9yXCI6IDEsXG4gICAgXCJtYW51c2NyaXB0XCI6IDEsXG4gICAgXCJtYXBsZVwiOiAxLFxuICAgIFwibWFyY2hpbmdcIjogMSxcbiAgICBcIm1hcmVcIjogMSxcbiAgICBcIm1hcnF1aXNcIjogMSxcbiAgICBcIm1hcnJvd1wiOiAxLFxuICAgIFwibWFyc2hcIjogMSxcbiAgICBcIm1hcnRcIjogMSxcbiAgICBcIm1hdFwiOiAxLFxuICAgIFwibWF0aW5nXCI6IDEsXG4gICAgXCJtYXloZW1cIjogMSxcbiAgICBcIm1hemVcIjogMSxcbiAgICBcIm1lY2NhXCI6IDEsXG4gICAgXCJtZWRpZXZhbFwiOiAxLFxuICAgIFwibWVsb25cIjogMSxcbiAgICBcIm1lbW9cIjogMSxcbiAgICBcIm1lbW9yaXplXCI6IDEsXG4gICAgXCJtZW5hY2VcIjogMSxcbiAgICBcIm1lbmRcIjogMSxcbiAgICBcIm1lcmNoYW5kaXNlXCI6IDEsXG4gICAgXCJtZXJjdXJ5XCI6IDEsXG4gICAgXCJtZXJnZXJcIjogMSxcbiAgICBcIm1lcml0XCI6IDEsXG4gICAgXCJtaWRnZXRcIjogMSxcbiAgICBcIm1pZHN0XCI6IDEsXG4gICAgXCJtaWxcIjogMSxcbiAgICBcIm1pbnRcIjogMSxcbiAgICBcIm1pcmFjdWxvdXNcIjogMSxcbiAgICBcIm1pc2NoaWVmXCI6IDEsXG4gICAgXCJtaXNjaGlldm91c1wiOiAxLFxuICAgIFwibWlzc3VzXCI6IDEsXG4gICAgXCJtaXN0XCI6IDEsXG4gICAgXCJtb2NrXCI6IDEsXG4gICAgXCJtb2Rlc3R5XCI6IDEsXG4gICAgXCJtb2lzdFwiOiAxLFxuICAgIFwibW9sZFwiOiAxLFxuICAgIFwibW9uYXN0ZXJ5XCI6IDEsXG4gICAgXCJtb25zdHJvdXNcIjogMSxcbiAgICBcIm1vb1wiOiAxLFxuICAgIFwibW9vZHlcIjogMSxcbiAgICBcIm1vcFwiOiAxLFxuICAgIFwibW9yZW92ZXJcIjogMSxcbiAgICBcIm1vc3NcIjogMSxcbiAgICBcIm1vdXJuXCI6IDEsXG4gICAgXCJtdXR0ZXJpbmdcIjogMSxcbiAgICBcIm5hZ1wiOiAxLFxuICAgIFwibmF1c2VvdXNcIjogMSxcbiAgICBcIm5lZ2xlY3RcIjogMSxcbiAgICBcIm5lcmRcIjogMSxcbiAgICBcIm5pbFwiOiAxLFxuICAgIFwibmlwcGxlXCI6IDEsXG4gICAgXCJub2RcIjogMSxcbiAgICBcIm5vbmV0aGVsZXNzXCI6IDEsXG4gICAgXCJub3N5XCI6IDEsXG4gICAgXCJub3RjaFwiOiAxLFxuICAgIFwibnVpc2FuY2VcIjogMSxcbiAgICBcIm51bWJcIjogMSxcbiAgICBcIm51cnNlcnlcIjogMSxcbiAgICBcIm9ha1wiOiAxLFxuICAgIFwib2JlZGllbnRcIjogMSxcbiAgICBcIm9ic2N1cmVcIjogMSxcbiAgICBcIm9jY2FzaW9uc1wiOiAxLFxuICAgIFwib2ZmZW5kZXJcIjogMSxcbiAgICBcIm9rZXlcIjogMSxcbiAgICBcIm9wcHJlc3Npb25cIjogMSxcbiAgICBcIm91bmNlXCI6IDEsXG4gICAgXCJvdmVyZG9cIjogMSxcbiAgICBcIm92ZXJoZWFkXCI6IDEsXG4gICAgXCJveXN0ZXJcIjogMSxcbiAgICBcInBhY3RcIjogMSxcbiAgICBcInBhZGRsZVwiOiAxLFxuICAgIFwicGFsbWVyXCI6IDEsXG4gICAgXCJwYW5jYWtlXCI6IDEsXG4gICAgXCJwYW50aGVyXCI6IDEsXG4gICAgXCJwYXJcIjogMSxcbiAgICBcInBhcmFcIjogMSxcbiAgICBcInBhcmFjaHV0ZVwiOiAxLFxuICAgIFwicGFyY2VsXCI6IDEsXG4gICAgXCJwYXJpc2hcIjogMSxcbiAgICBcInBhcmxvclwiOiAxLFxuICAgIFwicGFydGVkXCI6IDEsXG4gICAgXCJwYXJ0aW5nXCI6IDEsXG4gICAgXCJwYXNcIjogMSxcbiAgICBcInBhc3RlXCI6IDEsXG4gICAgXCJwYXRlbnRcIjogMSxcbiAgICBcInBhdHJvblwiOiAxLFxuICAgIFwicGF0dHlcIjogMSxcbiAgICBcInBhdXNlXCI6IDEsXG4gICAgXCJwYXdcIjogMSxcbiAgICBcInBhd25cIjogMSxcbiAgICBcInBheWJhY2tcIjogMSxcbiAgICBcInBheXJvbGxcIjogMSxcbiAgICBcInBlYXNcIjogMSxcbiAgICBcInBlYXNhbnRcIjogMSxcbiAgICBcInBlY2tcIjogMSxcbiAgICBcInBlY3VsaWFyXCI6IDEsXG4gICAgXCJwZWVsXCI6IDEsXG4gICAgXCJwZWVwXCI6IDEsXG4gICAgXCJwZWVyXCI6IDEsXG4gICAgXCJwZWdcIjogMSxcbiAgICBcInBlbmV0cmF0ZVwiOiAxLFxuICAgIFwicGVudGhvdXNlXCI6IDEsXG4gICAgXCJwZXJpc2hcIjogMSxcbiAgICBcInBlcnZlcnRlZFwiOiAxLFxuICAgIFwicGVzdFwiOiAxLFxuICAgIFwicGhhcm1hY2V1dGljYWxcIjogMSxcbiAgICBcInBoZW5vbWVuYWxcIjogMSxcbiAgICBcInBob2ViZVwiOiAxLFxuICAgIFwicGhvbnlcIjogMSxcbiAgICBcInBoeXNpY2lhblwiOiAxLFxuICAgIFwicGlja2xlXCI6IDEsXG4gICAgXCJwaWNrdXBcIjogMSxcbiAgICBcInBpY2t5XCI6IDEsXG4gICAgXCJwaWVyY2VcIjogMSxcbiAgICBcInBpZ2xldFwiOiAxLFxuICAgIFwicGlrZVwiOiAxLFxuICAgIFwicGlsZXNcIjogMSxcbiAgICBcInBpcGVyXCI6IDEsXG4gICAgXCJwaXRjaGVyXCI6IDEsXG4gICAgXCJwaXRpZnVsXCI6IDEsXG4gICAgXCJwbGFudGluZ1wiOiAxLFxuICAgIFwicGxhc3RlclwiOiAxLFxuICAgIFwicGxhdG9cIjogMSxcbiAgICBcInBsYXRvb25cIjogMSxcbiAgICBcInBsZWFcIjogMSxcbiAgICBcInBsZWFkXCI6IDEsXG4gICAgXCJwbHVja1wiOiAxLFxuICAgIFwicGx1bVwiOiAxLFxuICAgIFwicGx1bWJpbmdcIjogMSxcbiAgICBcInBva2luZ1wiOiAxLFxuICAgIFwicG9sYXJcIjogMSxcbiAgICBcInBvb2ZcIjogMSxcbiAgICBcInBvb2xzXCI6IDEsXG4gICAgXCJwb3JyaWRnZVwiOiAxLFxuICAgIFwicG9zaFwiOiAxLFxuICAgIFwicG9zdHBvbmVcIjogMSxcbiAgICBcInBvc3R1cmVcIjogMSxcbiAgICBcInBvdGlvblwiOiAxLFxuICAgIFwicHJhY3RpY2VkXCI6IDEsXG4gICAgXCJwcmFua1wiOiAxLFxuICAgIFwicHJlYWNoXCI6IDEsXG4gICAgXCJwcmVjaW5jdFwiOiAxLFxuICAgIFwicHJlanVkaWNlXCI6IDEsXG4gICAgXCJwcmVsaW1pbmFyeVwiOiAxLFxuICAgIFwicHJlbWF0dXJlXCI6IDEsXG4gICAgXCJwcmVtaWVyZVwiOiAxLFxuICAgIFwicHJlbWlzZXNcIjogMSxcbiAgICBcInByZXBcIjogMSxcbiAgICBcInByZXNlcnZlZFwiOiAxLFxuICAgIFwicHJldmFpbFwiOiAxLFxuICAgIFwicHJvYmVcIjogMSxcbiAgICBcInByb2NlZWRpbmdzXCI6IDEsXG4gICAgXCJwcm9jZXNzaW9uXCI6IDEsXG4gICAgXCJwcm9mb3VuZFwiOiAxLFxuICAgIFwicHJvaGliaXRlZFwiOiAxLFxuICAgIFwicHJvbm91bmNlZFwiOiAxLFxuICAgIFwicHJvcFwiOiAxLFxuICAgIFwicHJvcG9zaXRpb25cIjogMSxcbiAgICBcInByb3BzXCI6IDEsXG4gICAgXCJwcm9zcGVjdFwiOiAxLFxuICAgIFwicHJvc3BlclwiOiAxLFxuICAgIFwicHJvc3Blcml0eVwiOiAxLFxuICAgIFwicHJvc3RhdGVcIjogMSxcbiAgICBcInByeVwiOiAxLFxuICAgIFwicHVscFwiOiAxLFxuICAgIFwicHVwXCI6IDEsXG4gICAgXCJwdXBpbFwiOiAxLFxuICAgIFwicHVyaXR5XCI6IDEsXG4gICAgXCJwdXNzeWNhdFwiOiAxLFxuICAgIFwicXVhY2tcIjogMSxcbiAgICBcInF1YXJyeVwiOiAxLFxuICAgIFwicXVhcnRlcmJhY2tcIjogMSxcbiAgICBcInF1aWRcIjogMSxcbiAgICBcInF1aXRzXCI6IDEsXG4gICAgXCJyYWNlclwiOiAxLFxuICAgIFwicmFjaWFsXCI6IDEsXG4gICAgXCJyYWZ0XCI6IDEsXG4gICAgXCJyYWdcIjogMSxcbiAgICBcInJha2VcIjogMSxcbiAgICBcInJhcGlzdFwiOiAxLFxuICAgIFwicmFzcGJlcnJ5XCI6IDEsXG4gICAgXCJyYXRlZFwiOiAxLFxuICAgIFwicmF0dGxlXCI6IDEsXG4gICAgXCJyYXZlXCI6IDEsXG4gICAgXCJyYXZlblwiOiAxLFxuICAgIFwicmVhbG1cIjogMSxcbiAgICBcInJlY2l0ZVwiOiAxLFxuICAgIFwicmVja2xlc3NcIjogMSxcbiAgICBcInJlZGVlbVwiOiAxLFxuICAgIFwicmVkaGVhZFwiOiAxLFxuICAgIFwicmVlZlwiOiAxLFxuICAgIFwicmVlbFwiOiAxLFxuICAgIFwicmVmaW5lZFwiOiAxLFxuICAgIFwicmVmb3JtXCI6IDEsXG4gICAgXCJyZWlnblwiOiAxLFxuICAgIFwicmVsYXlcIjogMSxcbiAgICBcInJlbWVkeVwiOiAxLFxuICAgIFwicmVub3duZWRcIjogMSxcbiAgICBcInJlcFwiOiAxLFxuICAgIFwicmVzZW1ibGVcIjogMSxcbiAgICBcInJlc3Ryb29tXCI6IDEsXG4gICAgXCJyZXZlbGF0aW9uXCI6IDEsXG4gICAgXCJyZXZpdmVcIjogMSxcbiAgICBcInJoeW1lXCI6IDEsXG4gICAgXCJyaWJcIjogMSxcbiAgICBcInJpYmJvblwiOiAxLFxuICAgIFwicmlkZGxlXCI6IDEsXG4gICAgXCJyaWRnZVwiOiAxLFxuICAgIFwicmlmdFwiOiAxLFxuICAgIFwicmlnXCI6IDEsXG4gICAgXCJyaWdnZWRcIjogMSxcbiAgICBcInJpbVwiOiAxLFxuICAgIFwicmluc2VcIjogMSxcbiAgICBcInJpcGVcIjogMSxcbiAgICBcInJpdGVcIjogMSxcbiAgICBcInJvYW1cIjogMSxcbiAgICBcInJvYXJcIjogMSxcbiAgICBcInJvY2tlclwiOiAxLFxuICAgIFwicm9sbGVyXCI6IDEsXG4gICAgXCJyb29zdGVyXCI6IDEsXG4gICAgXCJyb3VnZVwiOiAxLFxuICAgIFwicm92ZXJcIjogMSxcbiAgICBcInJveWFsdHlcIjogMSxcbiAgICBcInJ1YmJpbmdcIjogMSxcbiAgICBcInJ1YmJsZVwiOiAxLFxuICAgIFwicnVuYXdheVwiOiAxLFxuICAgIFwicnVud2F5XCI6IDEsXG4gICAgXCJydXN0XCI6IDEsXG4gICAgXCJydXN0bGluZ1wiOiAxLFxuICAgIFwic2FkZGxlXCI6IDEsXG4gICAgXCJzYWdlXCI6IDEsXG4gICAgXCJzYW1pXCI6IDEsXG4gICAgXCJzYW5kc1wiOiAxLFxuICAgIFwic2FuZVwiOiAxLFxuICAgIFwic2F3eWVyXCI6IDEsXG4gICAgXCJzY2FsZXNcIjogMSxcbiAgICBcInNjYW5uZXJcIjogMSxcbiAgICBcInNjYXJsZXRcIjogMSxcbiAgICBcInNjaG9sYXJcIjogMSxcbiAgICBcInNjb2xkXCI6IDEsXG4gICAgXCJzY29vcFwiOiAxLFxuICAgIFwic2Nvb3RcIjogMSxcbiAgICBcInNjb3RcIjogMSxcbiAgICBcInNjcmFtXCI6IDEsXG4gICAgXCJzY3JhcFwiOiAxLFxuICAgIFwic2NyYXBlXCI6IDEsXG4gICAgXCJzY3JhdGNoaW5nXCI6IDEsXG4gICAgXCJzY3JlZWNoXCI6IDEsXG4gICAgXCJzY3JlZW5pbmdcIjogMSxcbiAgICBcInNjcm9sbFwiOiAxLFxuICAgIFwic2NydWJcIjogMSxcblxuICAgIFwic2N1bHB0dXJlXCI6IDEsXG4gICAgXCJzZWFmb29kXCI6IDEsXG4gICAgXCJzZWNyZWN5XCI6IDEsXG4gICAgXCJzZWR1Y2VcIjogMSxcbiAgICBcInNlaXp1cmVcIjogMSxcbiAgICBcInNlbGRvbVwiOiAxLFxuICAgIFwic2VtZW5cIjogMSxcbiAgICBcInNlbnNhdGlvbmFsXCI6IDEsXG4gICAgXCJzZW50aW1lbnRcIjogMSxcbiAgICBcInNlcmdlXCI6IDEsXG4gICAgXCJzZXJtb25cIjogMSxcbiAgICBcInNlcnVtXCI6IDEsXG4gICAgXCJzZXJ2ZXJcIjogMSxcbiAgICBcInNlc3Npb25zXCI6IDEsXG4gICAgXCJzZXR1cFwiOiAxLFxuICAgIFwic2V2ZXJlZFwiOiAxLFxuICAgIFwic2V3ZXJcIjogMSxcbiAgICBcInNld2luZ1wiOiAxLFxuICAgIFwic2hhY2tcIjogMSxcbiAgICBcInNoYWRlc1wiOiAxLFxuICAgIFwic2hhZHlcIjogMSxcbiAgICBcInNoYWdcIjogMSxcbiAgICBcInNoYWdneVwiOiAxLFxuICAgIFwic2hhaFwiOiAxLFxuICAgIFwic2hha3lcIjogMSxcbiAgICBcInNoYW1cIjogMSxcbiAgICBcInNoYW1hblwiOiAxLFxuICAgIFwic2hlZXJcIjogMSxcbiAgICBcInNoZWlraFwiOiAxLFxuICAgIFwic2hlbGRyYWtlXCI6IDEsXG4gICAgXCJzaGlwbWVudFwiOiAxLFxuICAgIFwic2hpdGVcIjogMSxcbiAgICBcInNoaXZlcmluZ1wiOiAxLFxuICAgIFwic2hyZWRcIjogMSxcbiAgICBcInNocmlla2luZ1wiOiAxLFxuICAgIFwic2hyaW5lXCI6IDEsXG4gICAgXCJzaHV0dGVyXCI6IDEsXG4gICAgXCJzaHV0dGluZ1wiOiAxLFxuICAgIFwic2lkZXdhbGtcIjogMSxcbiAgICBcInNpZWdlXCI6IDEsXG4gICAgXCJzaW5jZXJpdHlcIjogMSxcbiAgICBcInNpbmZ1bFwiOiAxLFxuICAgIFwic2luaXN0ZXJcIjogMSxcbiAgICBcInNpbm5lclwiOiAxLFxuICAgIFwic2tpbm5lclwiOiAxLFxuICAgIFwic2tpcHBlclwiOiAxLFxuICAgIFwic2t1bmtcIjogMSxcbiAgICBcInNsYWNrXCI6IDEsXG4gICAgXCJzbGFpblwiOiAxLFxuICAgIFwic2xhc2hcIjogMSxcbiAgICBcInNsYXRlXCI6IDEsXG4gICAgXCJzbGF5XCI6IDEsXG4gICAgXCJzbGVpZ2hcIjogMSxcbiAgICBcInNsaWNrXCI6IDEsXG4gICAgXCJzbGlteVwiOiAxLFxuICAgIFwic2xvZ2FuXCI6IDEsXG4gICAgXCJzbG9wZVwiOiAxLFxuICAgIFwic2xvcHB5XCI6IDEsXG4gICAgXCJzbG90XCI6IDEsXG4gICAgXCJzbG90c1wiOiAxLFxuICAgIFwic2x1Z1wiOiAxLFxuICAgIFwic2x5XCI6IDEsXG4gICAgXCJzbWFzaGluZ1wiOiAxLFxuICAgIFwic21lbGx5XCI6IDEsXG4gICAgXCJzbmFpbFwiOiAxLFxuICAgIFwic25hdGNoXCI6IDEsXG4gICAgXCJzbmVha3lcIjogMSxcbiAgICBcInNuaWZmXCI6IDEsXG4gICAgXCJzbmlwZXJcIjogMSxcbiAgICBcInNuaXRjaFwiOiAxLFxuICAgIFwic25vdFwiOiAxLFxuICAgIFwic29ha1wiOiAxLFxuICAgIFwic29kXCI6IDEsXG4gICAgXCJzb2xcIjogMSxcbiAgICBcInNvbGl0dWRlXCI6IDEsXG4gICAgXCJzb3ZlcmVpZ25cIjogMSxcbiAgICBcInNvd1wiOiAxLFxuICAgIFwic3BhblwiOiAxLFxuICAgIFwic3BhbmtcIjogMSxcbiAgICBcInNwYXRcIjogMSxcbiAgICBcInNwZWNpbWVuXCI6IDEsXG4gICAgXCJzcGVjc1wiOiAxLFxuICAgIFwic3BlY3RhY2xlXCI6IDEsXG4gICAgXCJzcGVlZGluZ1wiOiAxLFxuICAgIFwic3BlbmNlclwiOiAxLFxuICAgIFwic3BvaWxpbmdcIjogMSxcbiAgICBcInNwb29reVwiOiAxLFxuICAgIFwic3F1YXNoXCI6IDEsXG4gICAgXCJzcXVhdFwiOiAxLFxuICAgIFwic3F1ZWFraW5nXCI6IDEsXG4gICAgXCJzcXVlYWxcIjogMSxcbiAgICBcInNxdWVhbGluZ1wiOiAxLFxuICAgIFwic3F1aXJ0XCI6IDEsXG4gICAgXCJzdGFja1wiOiAxLFxuICAgIFwic3RhZ2VkXCI6IDEsXG4gICAgXCJzdGFrZXNcIjogMSxcbiAgICBcInN0YWxlXCI6IDEsXG4gICAgXCJzdGFsa2VyXCI6IDEsXG4gICAgXCJzdGFsbGlvblwiOiAxLFxuICAgIFwic3RhbmNlXCI6IDEsXG4gICAgXCJzdGFuZGJ5XCI6IDEsXG4gICAgXCJzdGFyYm9hcmRcIjogMSxcbiAgICBcInN0YXJrXCI6IDEsXG4gICAgXCJzdGFzaFwiOiAxLFxuICAgIFwic3RlZXBcIjogMSxcbiAgICBcInN0ZWVyXCI6IDEsXG4gICAgXCJzdGVlcmluZ1wiOiAxLFxuICAgIFwic3RlaW5cIjogMSxcbiAgICBcInN0ZW1cIjogMSxcbiAgICBcInN0ZW5jaFwiOiAxLFxuICAgIFwic3Rlcm5cIjogMSxcbiAgICBcInN0aW5neVwiOiAxLFxuICAgIFwic3Rpbmt5XCI6IDEsXG4gICAgXCJzdGlycmluZ1wiOiAxLFxuICAgIFwic3RvY2tzXCI6IDEsXG4gICAgXCJzdG9vbFwiOiAxLFxuICAgIFwic3RyYWluXCI6IDEsXG4gICAgXCJzdHJhaW5pbmdcIjogMSxcbiAgICBcInN0cmFuZGVkXCI6IDEsXG4gICAgXCJzdHJhbmdsZVwiOiAxLFxuICAgIFwic3RyYXBcIjogMSxcbiAgICBcInN0cmVha1wiOiAxLFxuICAgIFwic3RyZXRjaGVyXCI6IDEsXG4gICAgXCJzdHJpcGVzXCI6IDEsXG4gICAgXCJzdHJpcHBlZFwiOiAxLFxuICAgIFwic3RyaXBwZXJcIjogMSxcbiAgICBcInN0cm9sbFwiOiAxLFxuICAgIFwic3R1ZmZ5XCI6IDEsXG4gICAgXCJzdHVuZ1wiOiAxLFxuICAgIFwic3R1bm5lZFwiOiAxLFxuICAgIFwic3R1bm5pbmdcIjogMSxcbiAgICBcInN1Ym1pdHRlZFwiOiAxLFxuICAgIFwic3VpdGVkXCI6IDEsXG4gICAgXCJzdXBlcmludGVuZGVudFwiOiAxLFxuICAgIFwic3VwcG9ydGl2ZVwiOiAxLFxuICAgIFwic3VyZmVyXCI6IDEsXG4gICAgXCJzdXJnZVwiOiAxLFxuICAgIFwic3dhblwiOiAxLFxuICAgIFwic3dhdFwiOiAxLFxuICAgIFwic3dheVwiOiAxLFxuICAgIFwic3dlYXJpbmdcIjogMSxcbiAgICBcInN3ZWxsaW5nXCI6IDEsXG4gICAgXCJzd2lmdFwiOiAxLFxuICAgIFwic3dvbGxlblwiOiAxLFxuICAgIFwic3dpbmdpbmdcIjogMSxcbiAgICBcInN3aW1tZXJcIjogMSxcbiAgICBcInN5cnVwXCI6IDEsXG5cbiAgICBcInN5cGhpbGlzXCI6IDEsXG4gICAgXCJ0YWJcIjogMSxcbiAgICBcInRhYnNcIjogMSxcbiAgICBcInRhY2tsZVwiOiAxLFxuICAgIFwidGFja3lcIjogMSxcbiAgICBcInRhY3RpY3NcIjogMSxcbiAgICBcInRhZFwiOiAxLFxuICAgIFwidGFsbHlcIjogMSxcbiAgICBcInRhbWVcIjogMSxcbiAgICBcInRhbW15XCI6IDEsXG4gICAgXCJ0YXJcIjogMSxcbiAgICBcInRhcnRcIjogMSxcbiAgICBcInRhdmVyblwiOiAxLFxuICAgIFwidGVlXCI6IDEsXG4gICAgXCJ0ZWxlZ3JhbVwiOiAxLFxuICAgIFwidGVsbGVyXCI6IDEsXG4gICAgXCJ0ZW1wZXJlZFwiOiAxLFxuICAgIFwidGVtcG9yYXJpbHlcIjogMSxcbiAgICBcInRlbXB0XCI6IDEsXG4gICAgXCJ0ZW5hbnRcIjogMSxcbiAgICBcInRoaWdoXCI6IDEsXG4gICAgXCJ0aG9uZ1wiOiAxLFxuICAgIFwidGhvbmdzXCI6IDEsXG4gICAgXCJ0aG9yblwiOiAxLFxuICAgIFwidGhvcm91Z2hcIjogMSxcbiAgICBcInRob3VnaHRmdWxcIjogMSxcbiAgICBcInRocmFzaFwiOiAxLFxuICAgIFwidGhyZXNob2xkXCI6IDEsXG4gICAgXCJ0aHJ1c3RcIjogMSxcbiAgICBcInRodWRcIjogMSxcbiAgICBcInRodWdcIjogMSxcbiAgICBcInRodW1wXCI6IDEsXG4gICAgXCJ0aWNcIjogMSxcbiAgICBcInRpY2tsZVwiOiAxLFxuICAgIFwidGlua2VyXCI6IDEsXG4gICAgXCJ0aXBwZWRcIjogMSxcbiAgICBcInRpdFwiOiAxLFxuICAgIFwidGl0dHlcIjogMSxcbiAgICBcInRvYWRcIjogMSxcbiAgICBcInRva2VuXCI6IDEsXG4gICAgXCJ0b25pY1wiOiAxLFxuICAgIFwidG9ybWVudFwiOiAxLFxuICAgIFwidG91Y2hkb3duXCI6IDEsXG4gICAgXCJ0b3VjaHlcIjogMSxcbiAgICBcInRvd1wiOiAxLFxuICAgIFwidHJhY2tlZFwiOiAxLFxuICAgIFwidHJhbVwiOiAxLFxuICAgIFwidHJhbXBcIjogMSxcbiAgICBcInRyYW5zaXRpb25cIjogMSxcbiAgICBcInRyYW5zbWl0dGVyXCI6IDEsXG4gICAgXCJ0cmVhZFwiOiAxLFxuICAgIFwidHJlYXR5XCI6IDEsXG4gICAgXCJ0cmVrXCI6IDEsXG4gICAgXCJ0cmVtYmxlXCI6IDEsXG4gICAgXCJ0cmVuY2hcIjogMSxcbiAgICBcInRyaWFkXCI6IDEsXG4gICAgXCJ0cmliYWxcIjogMSxcbiAgICBcInRyaW1cIjogMSxcbiAgICBcInRyaXBwaW5nXCI6IDEsXG4gICAgXCJ0cm9sbFwiOiAxLFxuICAgIFwidHJvdXRcIjogMSxcbiAgICBcInRydW1wXCI6IDEsXG4gICAgXCJ0cnVua3NcIjogMSxcbiAgICBcInRydXRoZnVsXCI6IDEsXG4gICAgXCJ0dWl0aW9uXCI6IDEsXG4gICAgXCJ0dXJkXCI6IDEsXG4gICAgXCJ0dXJmXCI6IDEsXG4gICAgXCJ0d2F0XCI6IDEsXG4gICAgXCJ0d2lua2xlXCI6IDEsXG4gICAgXCJ0eXJhbm55XCI6IDEsXG4gICAgXCJ0eXJlXCI6IDEsXG4gICAgXCJ1bmRlcmFnZVwiOiAxLFxuICAgIFwidW5kZXJwYW50c1wiOiAxLFxuICAgIFwidW5kZXJ3YXlcIjogMSxcbiAgICBcInVuZG9cIjogMSxcbiAgICBcInVuZHJlc3NcIjogMSxcbiAgICBcInVuZWFzeVwiOiAxLFxuICAgIFwidW5mYWl0aGZ1bFwiOiAxLFxuICAgIFwidW5ncmF0ZWZ1bFwiOiAxLFxuICAgIFwidW5sb2FkXCI6IDEsXG4gICAgXCJ1bmxvY2tcIjogMSxcbiAgICBcInVucmVhbFwiOiAxLFxuICAgIFwidW5yZWFzb25hYmxlXCI6IDEsXG4gICAgXCJ1cGJlYXRcIjogMSxcbiAgICBcInVwZ3JhZGVcIjogMSxcbiAgICBcInVwcmlnaHRcIjogMSxcbiAgICBcInVwdGlnaHRcIjogMSxcbiAgICBcInV0bW9zdFwiOiAxLFxuICAgIFwidXR0ZXJcIjogMSxcbiAgICBcInV0dGVybHlcIjogMSxcbiAgICBcInZhY2F0ZVwiOiAxLFxuICAgIFwidmFndWVcIjogMSxcbiAgICBcInZhbGFuY2VcIjogMSxcbiAgICBcInZhbGV0XCI6IDEsXG4gICAgXCJ2YWxpYW50XCI6IDEsXG4gICAgXCJ2YWx2ZVwiOiAxLFxuICAgIFwidmFuaWxsYVwiOiAxLFxuICAgIFwidmFuaXR5XCI6IDEsXG4gICAgXCJ2ZWFsXCI6IDEsXG4gICAgXCJ2ZWluXCI6IDEsXG4gICAgXCJ2ZW5vbVwiOiAxLFxuICAgIFwidmVudFwiOiAxLFxuICAgIFwidmVudWVcIjogMSxcbiAgICBcInZlcmdlXCI6IDEsXG4gICAgXCJ2ZXN0XCI6IDEsXG4gICAgXCJ2aWJlXCI6IDEsXG4gICAgXCJ2aWNpbml0eVwiOiAxLFxuICAgIFwidmlsZVwiOiAxLFxuICAgIFwidmlsbGFpblwiOiAxLFxuICAgIFwidmludGFnZVwiOiAxLFxuICAgIFwidmlydHVvdXNcIjogMSxcbiAgICBcInZpdmFcIjogMSxcbiAgICBcInZvY2FsXCI6IDEsXG4gICAgXCJ2b2lkXCI6IDEsXG4gICAgXCJ2b3J0ZXhcIjogMSxcbiAgICBcInZveWFnZVwiOiAxLFxuICAgIFwidnVsZ2FyXCI6IDEsXG4gICAgXCJ3YWdlclwiOiAxLFxuICAgIFwid2FsbHlcIjogMSxcbiAgICBcIndhcm10aFwiOiAxLFxuICAgIFwid2FybmVyXCI6IDEsXG4gICAgXCJ3YXRjaG1hblwiOiAxLFxuICAgIFwid2F0ZXJpbmdcIjogMSxcbiAgICBcIndlYXJ5XCI6IDEsXG4gICAgXCJ3ZWFzZWxcIjogMSxcbiAgICBcIndlYXZlXCI6IDEsXG4gICAgXCJ3ZWRcIjogMSxcbiAgICBcIndlZGRlZFwiOiAxLFxuICAgIFwid2VpZ2hpbmdcIjogMSxcbiAgICBcIndlaXJkb1wiOiAxLFxuICAgIFwid2hhY2tlZFwiOiAxLFxuICAgIFwid2hlYXRcIjogMSxcbiAgICBcIndoZWVsZXJcIjogMSxcbiAgICBcIndoaWxzdFwiOiAxLFxuICAgIFwid2hpbVwiOiAxLFxuICAgIFwid2hpdGV5XCI6IDEsXG4gICAgXCJ3aG9vcFwiOiAxLFxuICAgIFwid2llbmVyXCI6IDEsXG4gICAgXCJ3aWxsb3dcIjogMSxcbiAgICBcIndpbXBcIjogMSxcbiAgICBcIndpbmRpbmdcIjogMSxcbiAgICBcIndpbmtcIjogMSxcbiAgICBcIndpdHNcIjogMSxcbiAgICBcIndvZVwiOiAxLFxuICAgIFwid29vZlwiOiAxLFxuICAgIFwid29vbFwiOiAxLFxuICAgIFwid3JhaXRoXCI6IDEsXG4gICAgXCJ3cmFwcGluZ1wiOiAxLFxuICAgIFwid3JhdGhcIjogMSxcbiAgICBcIndyZWNrZWRcIjogMSxcbiAgICBcIndyZW5jaFwiOiAxLFxuICAgIFwid3Jlc3RsZVwiOiAxLFxuICAgIFwid3Jlc3RsZXJcIjogMSxcbiAgICBcIndyZXRjaFwiOiAxLFxuICAgIFwid3JldGNoZWRcIjogMSxcbiAgICBcInlhbmtcIjogMSxcbiAgICBcInlhbmtlZVwiOiAxLFxuICAgIFwieWllbGRcIjogMSxcbiAgICBcInlpblwiOiAxLFxuICAgIFwiemVuXCI6IDEsXG4gICAgXCJ6aXBwZXJcIjogMSxcbiAgICBcInpvb21cIjogMVxufTsiLCJcbmNvbnN0IGNyYXdsZXIgPSByZXF1aXJlKCcuL2luY2x1ZGUvY3Jhd2xlcicpLmFDcmF3bGVyKCk7XG5cbmNvbnN0IEFQSV9EQUlMWV9MSU1JVCA9IDIwMDAwO1xuY29uc3QgTUFYX1dPUkRTID0gMTAwMDAwMDA7XG5jb25zdCBNQVhfTk9ERV9GUkVRVUVOQ1kgPSAxMDAwO1xuY29uc3QgVFJBVkVSU0VfQUxMID0gdHJ1ZTtcblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihldmVudCwgY29udGV4dCkge1xuICBjcmF3bGVyLmluaXRDcmF3bGVyKFxuICAgIFwid29yZHNhcGlcIixcbiAgICBBUElfREFJTFlfTElNSVQsXG4gICAgTUFYX1dPUkRTLFxuICAgIE1BWF9OT0RFX0ZSRVFVRU5DWSxcbiAgICBUUkFWRVJTRV9BTExcbiAgICApO1xuXG4gIHRyeSB7XG5cbiAgICBjb25zb2xlLmxvZyhcImNyYXdsaW5nIGluIHRoZSBiYWNrZ3JvdW5kIHN0YXJ0aW5nIGZyb20gcmFuZG9tIHdvcmRzLi4uXCIpO1xuXG4gICAgY29uc3Qgd3MwID0gYXdhaXQgY3Jhd2xlci5sb2FkQWxsX3dvcmRzKFwiXCIsIHRydWUpO1xuICAgIGNvbnN0IGNzID0gd3MwLnJlc3VsdHM7XG4gICAgY29uc29sZS5sb2coXCJhbGwgd29yZHM6XCIrY3MubGVuZ3RoKTtcblxuICAgIC8vIHNvcnQgcmFuZG9tbHlcbiAgICBsZXQgcm5kID0gbmV3IERhdGUoKS5nZXRNaWxsaXNlY29uZHMoKStNYXRoLnJhbmRvbSgpKjEwMDtcbiAgICBTdHJpbmcucHJvdG90eXBlLmhhc2hDb2RlID0gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBoYXNoID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBjaGFyYWN0ZXIgPSAodGhpcy5jaGFyQ29kZUF0KGkpK3JuZCkmMHhmZjtcbiAgICAgICAgICBoYXNoID0gKChoYXNoPDw1KS1oYXNoKStjaGFyYWN0ZXI7XG4gICAgICAgICAgaGFzaCA9IGhhc2ggJiBoYXNoOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICBjcy5zb3J0KChhLGIpPT57XG4gICAgICByZXR1cm4gYS5oYXNoQ29kZSgpLWIuaGFzaENvZGUoKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGJ5X2RlZiA9IHt9O1xuICAgIGNvbnN0IGJ5X3cgPSB7fTtcbiAgICBsZXQgdHJlc3VsdCA9IHtcbiAgICAgIGJ5X2RlZixcbiAgICAgIGJ5X3cgICAgfTtcbiAgICB0cmVzdWx0Lm5vV29yZHMgPSAwO1xuICAgIHRyZXN1bHQubmV3V29yZHMgPSAwO1xuXG4gICAgbGV0IHByb21pc2VzID0gW107XG4gICAgZm9yIChsZXQgY29tbW9uV29yZCBvZiBjcykge1xuICAgICAgbGV0IHRycHJvbWlzZSA9IGNyYXdsZXIudHJhdmVyc2VDbHVzdGVyKHRyZXN1bHQsIGNvbW1vbldvcmQsIGZhbHNlLCB0cnVlKTtcbiAgICAgIHByb21pc2VzLnB1c2godHJwcm9taXNlKTtcblxuICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCA+PSAxMCkge1xuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIHByb21pc2VzID0gW107XG4gICAgICAgIGlmIChjcmF3bGVyLmlzQXBpTGltaXRSZWFjaGVkKCkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkFQSSBsaW1pdCByZWFjaGVkLiBTVE9QIHdob2xlIGNyYXdsaW5nXCIpO1xuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgcHJvbWlzZXMgPSBbXTtcblxuXG4gICAgY29uc29sZS5sb2coXCJDb21wbGV0ZWQgIFRyYXZlc3JlZDpcIit0cmVzdWx0Lm5vV29yZHMrXCIgd3JpdHRlbjpcIit0cmVzdWx0Lm5ld1dvcmRzKTtcblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBib2R5OiBcInt9XCIsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcbiAgICAgIH1cbiAgICB9XG5cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coZXJyKVxuICAgIHJldHVybiB7IHN0YXR1c0NvZGU6IDUwMCwgYm9keTogZXJyLnRvU3RyaW5nKCkgfVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9